
 HRESULT __stdcall static StringCopyWorkerA(STRSAFE_LPSTR pszDest, size_t cchDest, size_t *pcchNewDestLength, STRSAFE_PCNZCH pszSrc, size_t cchToCopy);
 HRESULT __stdcall static StringCopyWorkerW(STRSAFE_LPWSTR pszDest, size_t cchDest, size_t *pcchNewDestLength, STRSAFE_PCNZWCH pszSrc, size_t cchToCopy);
 HRESULT __stdcall static StringExHandleFillBehindNullA(STRSAFE_LPSTR pszDestEnd, size_t cbRemaining, DWORD dwFlags);
 HRESULT __stdcall static StringExHandleFillBehindNullW(STRSAFE_LPWSTR pszDestEnd, size_t cbRemaining, DWORD dwFlags);
 HRESULT __stdcall static StringExHandleOtherFlagsA(STRSAFE_LPSTR pszDest, size_t cbDest, size_t cchOriginalDestLength, STRSAFE_LPSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags);
 HRESULT __stdcall static StringExHandleOtherFlagsW(STRSAFE_LPWSTR pszDest, size_t cbDest, size_t cchOriginalDestLength, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags);
 HRESULT __stdcall static StringExValidateDestA(STRSAFE_PCNZCH pszDest, size_t cchDest, const size_t cchMax, DWORD dwFlags);
 HRESULT __stdcall static StringExValidateDestAndLengthA(STRSAFE_LPCSTR pszDest, size_t cchDest, size_t *pcchDestLength, const size_t cchMax, DWORD dwFlags);
 HRESULT __stdcall static StringExValidateDestAndLengthW(STRSAFE_LPCWSTR pszDest, size_t cchDest, size_t *pcchDestLength, const size_t cchMax, DWORD dwFlags);
 HRESULT __stdcall static StringExValidateDestW(STRSAFE_PCNZWCH pszDest, size_t cchDest, const size_t cchMax, DWORD dwFlags);
 HRESULT __stdcall static StringExValidateSrcA(STRSAFE_PCNZCH *ppszSrc, size_t *pcchToRead, const size_t cchMax, DWORD dwFlags);
 HRESULT __stdcall static StringExValidateSrcW(STRSAFE_PCNZWCH *ppszSrc, size_t *pcchToRead, const size_t cchMax, DWORD dwFlags);
 HRESULT __stdcall static StringLengthWorkerA(STRSAFE_PCNZCH psz, size_t cchMax, size_t *pcchLength);
 HRESULT __stdcall static StringLengthWorkerW(STRSAFE_PCNZWCH psz, size_t cchMax, size_t *pcchLength);
 HRESULT __stdcall static StringVPrintfWorkerA(STRSAFE_LPSTR pszDest, size_t cchDest, size_t *pcchNewDestLength, STRSAFE_LPCSTR pszFormat, va_list argList);
 HRESULT __stdcall static StringVPrintfWorkerW(STRSAFE_LPWSTR pszDest, size_t cchDest, size_t *pcchNewDestLength, STRSAFE_LPCWSTR pszFormat, va_list argList);
 HRESULT __stdcall static StringValidateDestA(STRSAFE_PCNZCH pszDest, size_t cchDest, const size_t cchMax);
 HRESULT __stdcall static StringValidateDestAndLengthA(STRSAFE_LPCSTR pszDest, size_t cchDest, size_t *pcchDestLength, const size_t cchMax);
 HRESULT __stdcall static StringValidateDestAndLengthW(STRSAFE_LPCWSTR pszDest, size_t cchDest, size_t *pcchDestLength, const size_t cchMax);
 HRESULT __stdcall static StringValidateDestW(STRSAFE_PCNZWCH pszDest, size_t cchDest, const size_t cchMax);
 HRESULT __stdcall static UnalignedStringLengthWorkerW(STRSAFE_PCUNZWCH psz, size_t cchMax, size_t *pcchLength);
 PUWSTR __stdcall static ua_wcscpy(PUWSTR Destination, PCUWSTR Source);
 PUWSTR __stdcall static ua_wcscpy_s(PUWSTR Destination, size_t DestinationSize, PCUWSTR Source);
 PUWSTR_C __stdcall static ua_wcschr(PCUWSTR String, WCHAR Character);
 PUWSTR_C __stdcall static ua_wcsrchr(PCUWSTR String, WCHAR Character);
 double __cdecl static hypot(double X, double Y);
 float __cdecl static hypotf(float X, float Y);
 int __stdcall static ua_wcsicmp(PCUWSTR String1, PCUWSTR String2);
 size_t __cdecl static strnlen_s(const char *Str, size_t MaxCount);
 size_t __cdecl static wcsnlen_s(const wchar_t *Src, size_t MaxCount);
 size_t __stdcall static ua_wcslen(PCUWSTR String);
ACCESS_MASK __stdcall KsQueryObjectAccessMask(KSOBJECT_HEADER Header);
BOOLEAN CngGetFipsAlgorithmMode(void);
BOOLEAN ExIsManufacturingModeEnabled(void);
BOOLEAN ExIsSoftBoot(void);
BOOLEAN FsRtlAreVolumeStartupApplicationsComplete(void);
BOOLEAN KdRefreshDebuggerNotPresent(void);
BOOLEAN KeAreAllApcsDisabled(void);
BOOLEAN KeAreApcsDisabled(void);
BOOLEAN KeInvalidateAllCaches(void);
BOOLEAN MmIsRecursiveIoFault(void);
BOOLEAN MmIsThisAnNtAsSystem(void);
BOOLEAN PsIsCurrentThreadInServerSilo(void);
BOOLEAN PsIsCurrentThreadPrefetching(void);
BOOLEAN PsIsDiskCountersEnabled(void);
BOOLEAN PshedIsSystemWheaEnabled(void);
BOOLEAN VideoPortIsNoVesa(void);
BOOLEAN __stdcall AtaPortControllerSyncRoutine(PVOID ChannelExtension, IDE_HW_DPC CallBackRoutine);
BOOLEAN __stdcall AtaPortInitializeQueueTag(PVOID DeviceExtension, UCHAR TargetId, UCHAR Lun, UCHAR MaxQueueTag);
BOOLEAN __stdcall AtaPortRegistryChannelSubkeyRead(PVOID ChannelExtension, UCHAR ControllerNumber, PCHAR ValueName, UCHAR ValueType, PUCHAR Buffer, PULONG BufferLength);
BOOLEAN __stdcall AtaPortRegistryChannelSubkeyWrite(PVOID ChannelExtension, UCHAR ControllerNumber, PCHAR ValueName, UCHAR ValueType, PUCHAR Buffer, PULONG BufferLength);
BOOLEAN __stdcall AtaPortRegistryChannelSubkeyWriteDeferred(PVOID ChannelExtension, UCHAR ControllerNumber, PCHAR ValueName, UCHAR ValueType, PUCHAR Buffer, PULONG BufferLength);
BOOLEAN __stdcall AtaPortRegistryControllerKeyRead(PVOID ChannelExtension, UCHAR ControllerNumber, PCHAR ValueName, UCHAR ValueType, PUCHAR Buffer, PULONG BufferLength);
BOOLEAN __stdcall AtaPortRegistryControllerKeyWrite(PVOID ChannelExtension, UCHAR ControllerNumber, PCHAR ValueName, UCHAR ValueType, PUCHAR Buffer, PULONG BufferLength);
BOOLEAN __stdcall AtaPortRegistryControllerKeyWriteDeferred(PVOID ChannelExtension, UCHAR ControllerNumber, PCHAR ValueName, UCHAR ValueType, PUCHAR Buffer, PULONG BufferLength);
BOOLEAN __stdcall AtaPortRegistryRead(PVOID ChannelExtension, UCHAR ControllerNumber, BOOLEAN ChannelSubKey, PCHAR ValueName, UCHAR ValueType, PUCHAR Buffer, PULONG BufferLength);
BOOLEAN __stdcall AtaPortRegistryWrite(PVOID ChannelExtension, UCHAR ControllerNumber, BOOLEAN ChannelSubKey, PCHAR ValueName, UCHAR ValueType, PUCHAR Buffer, PULONG BufferLength);
BOOLEAN __stdcall AtaPortRegistryWriteDeferred(PVOID ChannelExtension, UCHAR ControllerNumber, BOOLEAN ChannelSubKey, PCHAR ValueName, UCHAR ValueType, PUCHAR Buffer, PULONG BufferLength);
BOOLEAN __stdcall AtaPortRequestCallback(IDE_CALLBACK_TYPE CallbackType, PVOID ChannelExtension, IDE_HW_DPC CallBackRoutine, ULONG TimerValue);
BOOLEAN __stdcall AtaPortRequestSynchronizedRoutine(PVOID ChannelExtension, IDE_HW_DPC CallBackRoutine);
BOOLEAN __stdcall AtaPortRequestTimer(PVOID ChannelExtension, IDE_HW_DPC CallBackRoutine, ULONG TimerValue);
BOOLEAN __stdcall AtaPortRequestWorkerRoutine(PVOID ChannelExtension, IDE_HW_DPC CallBackRoutine);
BOOLEAN __stdcall BitScanForward(ULONG *Index, ULONG Mask);
BOOLEAN __stdcall BitScanForward64(ULONG *Index, ULONG64 Mask);
BOOLEAN __stdcall BitScanReverse(ULONG *Index, ULONG Mask);
BOOLEAN __stdcall BitScanReverse64(ULONG *Index, ULONG64 Mask);
BOOLEAN __stdcall CcAsyncCopyRead(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, BOOLEAN Wait, PVOID Buffer, PIO_STATUS_BLOCK IoStatus, PETHREAD IoIssuerThread, PCC_ASYNC_READ_CONTEXT AsyncReadContext);
BOOLEAN __stdcall CcCanIWrite(PFILE_OBJECT FileObject, ULONG BytesToWrite, BOOLEAN Wait, UCHAR Retrying);
BOOLEAN __stdcall CcCopyRead(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, BOOLEAN Wait, PVOID Buffer, PIO_STATUS_BLOCK IoStatus);
BOOLEAN __stdcall CcCopyReadEx(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, BOOLEAN Wait, PVOID Buffer, PIO_STATUS_BLOCK IoStatus, PETHREAD IoIssuerThread);
BOOLEAN __stdcall CcCopyWrite(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, BOOLEAN Wait, PVOID Buffer);
BOOLEAN __stdcall CcCopyWriteEx(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, BOOLEAN Wait, PVOID Buffer, PETHREAD IoIssuerThread);
BOOLEAN __stdcall CcCopyWriteWontFlush(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length);
BOOLEAN __stdcall CcIsThereDirtyData(PVPB Vpb);
BOOLEAN __stdcall CcIsThereDirtyDataEx(PVPB Vpb, PULONG NumberOfDirtyPages);
BOOLEAN __stdcall CcMapData(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, ULONG Flags, PVOID *Bcb, PVOID *Buffer);
BOOLEAN __stdcall CcPinMappedData(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, ULONG Flags, PVOID *Bcb);
BOOLEAN __stdcall CcPinRead(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, ULONG Flags, PVOID *Bcb, PVOID *Buffer);
BOOLEAN __stdcall CcPreparePinWrite(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, BOOLEAN Zero, ULONG Flags, PVOID *Bcb, PVOID *Buffer);
BOOLEAN __stdcall CcPurgeCacheSection(PSECTION_OBJECT_POINTERS SectionObjectPointer, PLARGE_INTEGER FileOffset, ULONG Length, ULONG Flags);
BOOLEAN __stdcall CcUninitializeCacheMap(PFILE_OBJECT FileObject, PLARGE_INTEGER TruncateSize, PCACHE_UNINITIALIZE_EVENT UninitializeEvent);
BOOLEAN __stdcall CcZeroData(PFILE_OBJECT FileObject, PLARGE_INTEGER StartOffset, PLARGE_INTEGER EndOffset, BOOLEAN Wait);
BOOLEAN __stdcall ClassInterpretSenseInfo(PDEVICE_OBJECT DeviceObject, PSCSI_REQUEST_BLOCK Srb, UCHAR MajorFunctionCode, ULONG IoDeviceCode, ULONG RetryCount, NTSTATUS *Status, ULONG *RetryInterval);
BOOLEAN __stdcall ClassMarkChildMissing(PPHYSICAL_DEVICE_EXTENSION PdoExtension, BOOLEAN AcquireChildLock);
BOOLEAN __stdcall ClfsLsnEqual(const CLFS_LSN *plsn1, const CLFS_LSN *plsn2);
BOOLEAN __stdcall ClfsLsnGreater(const CLFS_LSN *plsn1, const CLFS_LSN *plsn2);
BOOLEAN __stdcall ClfsLsnInvalid(const CLFS_LSN *plsn);
BOOLEAN __stdcall ClfsLsnLess(const CLFS_LSN *plsn1, const CLFS_LSN *plsn2);
BOOLEAN __stdcall ClfsLsnNull(const CLFS_LSN *plsn);
BOOLEAN __stdcall ClfsValidTopLevelContext(PIRP pirpTopLevelContext);
BOOLEAN __stdcall D3DKMTCheckExclusiveOwnership();
BOOLEAN __stdcall DeviceDsmAddDataSetRange(PDEVICE_DSM_INPUT Input, ULONG InputLength, LONGLONG Offset, ULONGLONG Length);
BOOLEAN __stdcall DeviceDsmValidateInput(PDEVICE_DSM_DEFINITION Definition, PDEVICE_DSM_INPUT Input, ULONG InputLength);
BOOLEAN __stdcall DeviceDsmValidateOutput(PDEVICE_DSM_DEFINITION Definition, PDEVICE_DSM_OUTPUT Output, ULONG OutputLength);
BOOLEAN __stdcall DlQueueDpc(PVOID DeviceHandle);
BOOLEAN __stdcall DlScanRom(PVOID DeviceHandle, PUCHAR RomBase, ULONG RomLength, PUCHAR String);
BOOLEAN __stdcall DlSynchronizeExecution(PVOID DeviceHandle, VIDEO_SYNCHRONIZE_PRIORITY Priority, PMINIPORT_SYNCHRONIZE_ROUTINE SynchronizeRoutine, PVOID Context, ULONG MessageNumber);
BOOLEAN __stdcall EtwEventEnabled(REGHANDLE RegHandle, PCEVENT_DESCRIPTOR EventDescriptor);
BOOLEAN __stdcall EtwProviderEnabled(REGHANDLE RegHandle, UCHAR Level, ULONGLONG Keyword);
BOOLEAN __stdcall ExAcquireResourceExclusiveLite(PERESOURCE Resource, BOOLEAN Wait);
BOOLEAN __stdcall ExAcquireResourceSharedLite(PERESOURCE Resource, BOOLEAN Wait);
BOOLEAN __stdcall ExAcquireRundownProtection(PEX_RUNDOWN_REF RunRef);
BOOLEAN __stdcall ExAcquireRundownProtectionCacheAware(PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware);
BOOLEAN __stdcall ExAcquireRundownProtectionCacheAwareEx(PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware, ULONG Count);
BOOLEAN __stdcall ExAcquireRundownProtectionEx(PEX_RUNDOWN_REF RunRef, ULONG Count);
BOOLEAN __stdcall ExAcquireSharedStarveExclusive(PERESOURCE Resource, BOOLEAN Wait);
BOOLEAN __stdcall ExAcquireSharedWaitForExclusive(PERESOURCE Resource, BOOLEAN Wait);
BOOLEAN __stdcall ExCancelTimer(PEX_TIMER Timer, PEXT_CANCEL_PARAMETERS Parameters);
BOOLEAN __stdcall ExDeleteTimer(PEX_TIMER Timer, BOOLEAN Cancel, BOOLEAN Wait, PEXT_DELETE_PARAMETERS Parameters);
BOOLEAN __stdcall ExIsProcessorFeaturePresent(ULONG ProcessorFeature);
BOOLEAN __stdcall ExIsResourceAcquiredExclusiveLite(PERESOURCE Resource);
BOOLEAN __stdcall ExSetTimer(PEX_TIMER Timer, LONGLONG DueTime, LONGLONG Period, PEXT_SET_PARAMETERS Parameters);
BOOLEAN __stdcall ExTryToAcquireFastMutex(PFAST_MUTEX FastMutex);
BOOLEAN __stdcall ExTryToAcquireResourceExclusiveLite(PERESOURCE Resource);
BOOLEAN __stdcall ExVerifySuite(SUITE_TYPE SuiteType);
BOOLEAN __stdcall FltCancelIo(PFLT_CALLBACK_DATA CallbackData);
BOOLEAN __stdcall FltCheckLockForReadAccess(PFILE_LOCK FileLock, PFLT_CALLBACK_DATA CallbackData);
BOOLEAN __stdcall FltCheckLockForWriteAccess(PFILE_LOCK FileLock, PFLT_CALLBACK_DATA CallbackData);
BOOLEAN __stdcall FltCurrentBatchOplock(POPLOCK Oplock);
BOOLEAN __stdcall FltCurrentOplock(POPLOCK Oplock);
BOOLEAN __stdcall FltCurrentOplockH(POPLOCK Oplock);
BOOLEAN __stdcall FltDoCompletionProcessingWhenSafe(PFLT_CALLBACK_DATA Data, PCFLT_RELATED_OBJECTS FltObjects, PVOID CompletionContext, FLT_POST_OPERATION_FLAGS Flags, PFLT_POST_OPERATION_CALLBACK SafePostCallback, PFLT_POSTOP_CALLBACK_STATUS RetPostOperationStatus);
BOOLEAN __stdcall FltFastIoMdlRead(PFLT_INSTANCE InitiatingInstance, PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, ULONG LockKey, PMDL *MdlChain, PIO_STATUS_BLOCK IoStatus);
BOOLEAN __stdcall FltFastIoMdlReadComplete(PFLT_INSTANCE InitiatingInstance, PFILE_OBJECT FileObject, PMDL MdlChain);
BOOLEAN __stdcall FltFastIoMdlWriteComplete(PFLT_INSTANCE InitiatingInstance, PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, PMDL MdlChain);
BOOLEAN __stdcall FltFastIoPrepareMdlWrite(PFLT_INSTANCE InitiatingInstance, PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, ULONG LockKey, PMDL *MdlChain, PIO_STATUS_BLOCK IoStatus);
BOOLEAN __stdcall FltIs32bitProcess(PFLT_CALLBACK_DATA CallbackData);
BOOLEAN __stdcall FltIsCallbackDataDirty(PFLT_CALLBACK_DATA Data);
BOOLEAN __stdcall FltIsEcpAcknowledged(PFLT_FILTER Filter, PVOID EcpContext);
BOOLEAN __stdcall FltIsEcpFromUserMode(PFLT_FILTER Filter, PVOID EcpContext);
BOOLEAN __stdcall FltIsFltMgrVolumeDeviceObject(PDEVICE_OBJECT DeviceObject);
BOOLEAN __stdcall FltIsIoCanceled(PFLT_CALLBACK_DATA CallbackData);
BOOLEAN __stdcall FltIsOperationSynchronous(PFLT_CALLBACK_DATA CallbackData);
BOOLEAN __stdcall FltOplockIsFastIoPossible(POPLOCK Oplock);
BOOLEAN __stdcall FltOplockIsSharedRequest(PFLT_CALLBACK_DATA CallbackData);
BOOLEAN __stdcall FltOplockKeysEqual(PFILE_OBJECT Fo1, PFILE_OBJECT Fo2);
BOOLEAN __stdcall FltSupportsFileContexts(PFILE_OBJECT FileObject);
BOOLEAN __stdcall FltSupportsFileContextsEx(PFILE_OBJECT FileObject, PFLT_INSTANCE Instance);
BOOLEAN __stdcall FltSupportsStreamContexts(PFILE_OBJECT FileObject);
BOOLEAN __stdcall FltSupportsStreamHandleContexts(PFILE_OBJECT FileObject);
BOOLEAN __stdcall FsRtlAddBaseMcbEntry(PBASE_MCB Mcb, LONGLONG Vbn, LONGLONG Lbn, LONGLONG SectorCount);
BOOLEAN __stdcall FsRtlAddLargeMcbEntry(PLARGE_MCB Mcb, LONGLONG Vbn, LONGLONG Lbn, LONGLONG SectorCount);
BOOLEAN __stdcall FsRtlAddMcbEntry(PMCB Mcb, VBN Vbn, LBN Lbn, ULONG SectorCount);
BOOLEAN __stdcall FsRtlAreNamesEqual(PCUNICODE_STRING ConstantNameA, PCUNICODE_STRING ConstantNameB, BOOLEAN IgnoreCase, PCWCH UpcaseTable);
BOOLEAN __stdcall FsRtlAreThereCurrentOrInProgressFileLocks(PFILE_LOCK FileLock);
BOOLEAN __stdcall FsRtlAreThereWaitingFileLocks(PFILE_LOCK FileLock);
BOOLEAN __stdcall FsRtlCheckLockForOplockRequest(PFILE_LOCK FileLock, PLARGE_INTEGER AllocationSize);
BOOLEAN __stdcall FsRtlCheckLockForReadAccess(PFILE_LOCK FileLock, PIRP Irp);
BOOLEAN __stdcall FsRtlCheckLockForWriteAccess(PFILE_LOCK FileLock, PIRP Irp);
BOOLEAN __stdcall FsRtlCopyRead(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, BOOLEAN Wait, ULONG LockKey, PVOID Buffer, PIO_STATUS_BLOCK IoStatus, PDEVICE_OBJECT DeviceObject);
BOOLEAN __stdcall FsRtlCopyWrite(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, BOOLEAN Wait, ULONG LockKey, PVOID Buffer, PIO_STATUS_BLOCK IoStatus, PDEVICE_OBJECT DeviceObject);
BOOLEAN __stdcall FsRtlCurrentBatchOplock(POPLOCK Oplock);
BOOLEAN __stdcall FsRtlCurrentOplock(POPLOCK Oplock);
BOOLEAN __stdcall FsRtlCurrentOplockH(POPLOCK Oplock);
BOOLEAN __stdcall FsRtlDoesDbcsContainWildCards(PANSI_STRING Name);
BOOLEAN __stdcall FsRtlDoesNameContainWildCards(PUNICODE_STRING Name);
BOOLEAN __stdcall FsRtlFastCheckLockForRead(PFILE_LOCK FileLock, PLARGE_INTEGER StartingByte, PLARGE_INTEGER Length, ULONG Key, PFILE_OBJECT FileObject, PVOID ProcessId);
BOOLEAN __stdcall FsRtlFastCheckLockForWrite(PFILE_LOCK FileLock, PLARGE_INTEGER StartingByte, PLARGE_INTEGER Length, ULONG Key, PVOID FileObject, PVOID ProcessId);
BOOLEAN __stdcall FsRtlFindInTunnelCache(TUNNEL *Cache, ULONGLONG DirectoryKey, UNICODE_STRING *Name, UNICODE_STRING *ShortName, UNICODE_STRING *LongName, ULONG *DataLength, void *Data);
BOOLEAN __stdcall FsRtlFindInTunnelCacheEx(TUNNEL *Cache, ULONGLONG DirectoryKey, UNICODE_STRING *Name, UNICODE_STRING *ShortName, UNICODE_STRING *LongName, ULONG Flags, ULONG *DataLength, void *Data);
BOOLEAN __stdcall FsRtlGetNextBaseMcbEntry(PBASE_MCB Mcb, ULONG RunIndex, PLONGLONG Vbn, PLONGLONG Lbn, PLONGLONG SectorCount);
BOOLEAN __stdcall FsRtlGetNextLargeMcbEntry(PLARGE_MCB Mcb, ULONG RunIndex, PLONGLONG Vbn, PLONGLONG Lbn, PLONGLONG SectorCount);
BOOLEAN __stdcall FsRtlGetNextMcbEntry(PMCB Mcb, ULONG RunIndex, PVBN Vbn, PLBN Lbn, PULONG SectorCount);
BOOLEAN __stdcall FsRtlInitializeBaseMcbEx(PBASE_MCB Mcb, POOL_TYPE PoolType, USHORT Flags);
BOOLEAN __stdcall FsRtlIsDaxVolume(PFILE_OBJECT FileObject);
BOOLEAN __stdcall FsRtlIsDbcsInExpression(PANSI_STRING Expression, PANSI_STRING Name);
BOOLEAN __stdcall FsRtlIsEcpAcknowledged(PVOID EcpContext);
BOOLEAN __stdcall FsRtlIsEcpFromUserMode(PVOID EcpContext);
BOOLEAN __stdcall FsRtlIsFatDbcsLegal(ANSI_STRING DbcsName, BOOLEAN WildCardsPermissible, BOOLEAN PathNamePermissible, BOOLEAN LeadingBackslashPermissible);
BOOLEAN __stdcall FsRtlIsHpfsDbcsLegal(ANSI_STRING DbcsName, BOOLEAN WildCardsPermissible, BOOLEAN PathNamePermissible, BOOLEAN LeadingBackslashPermissible);
BOOLEAN __stdcall FsRtlIsMobileOS();
BOOLEAN __stdcall FsRtlIsNameInExpression(PUNICODE_STRING Expression, PUNICODE_STRING Name, BOOLEAN IgnoreCase, PWCH UpcaseTable);
BOOLEAN __stdcall FsRtlIsNameInUnUpcasedExpression(PUNICODE_STRING Expression, PUNICODE_STRING Name, BOOLEAN IgnoreCase, PWCH UpcaseTable);
BOOLEAN __stdcall FsRtlIsNonEmptyDirectoryReparsePointAllowed(ULONG ReparseTag);
BOOLEAN __stdcall FsRtlIsNtstatusExpected(NTSTATUS Exception);
BOOLEAN __stdcall FsRtlIsTotalDeviceFailure(NTSTATUS Status);
BOOLEAN __stdcall FsRtlLookupBaseMcbEntry(PBASE_MCB Mcb, LONGLONG Vbn, PLONGLONG Lbn, PLONGLONG SectorCountFromLbn, PLONGLONG StartingLbn, PLONGLONG SectorCountFromStartingLbn, PULONG Index);
BOOLEAN __stdcall FsRtlLookupLargeMcbEntry(PLARGE_MCB Mcb, LONGLONG Vbn, PLONGLONG Lbn, PLONGLONG SectorCountFromLbn, PLONGLONG StartingLbn, PLONGLONG SectorCountFromStartingLbn, PULONG Index);
BOOLEAN __stdcall FsRtlLookupLastBaseMcbEntry(PBASE_MCB Mcb, PLONGLONG Vbn, PLONGLONG Lbn);
BOOLEAN __stdcall FsRtlLookupLastBaseMcbEntryAndIndex(PBASE_MCB OpaqueMcb, PLONGLONG LargeVbn, PLONGLONG LargeLbn, PULONG Index);
BOOLEAN __stdcall FsRtlLookupLastLargeMcbEntry(PLARGE_MCB Mcb, PLONGLONG Vbn, PLONGLONG Lbn);
BOOLEAN __stdcall FsRtlLookupLastLargeMcbEntryAndIndex(PLARGE_MCB OpaqueMcb, PLONGLONG LargeVbn, PLONGLONG LargeLbn, PULONG Index);
BOOLEAN __stdcall FsRtlLookupLastMcbEntry(PMCB Mcb, PVBN Vbn, PLBN Lbn);
BOOLEAN __stdcall FsRtlLookupMcbEntry(PMCB Mcb, VBN Vbn, PLBN Lbn, PULONG SectorCount, PULONG Index);
BOOLEAN __stdcall FsRtlMdlReadCompleteDev(PFILE_OBJECT FileObject, PMDL MdlChain, PDEVICE_OBJECT DeviceObject);
BOOLEAN __stdcall FsRtlMdlReadDev(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, ULONG LockKey, PMDL *MdlChain, PIO_STATUS_BLOCK IoStatus, PDEVICE_OBJECT DeviceObject);
BOOLEAN __stdcall FsRtlMdlWriteCompleteDev(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, PMDL MdlChain, PDEVICE_OBJECT DeviceObject);
BOOLEAN __stdcall FsRtlOplockIsFastIoPossible(POPLOCK Oplock);
BOOLEAN __stdcall FsRtlOplockIsSharedRequest(PIRP Irp);
BOOLEAN __stdcall FsRtlOplockKeysEqual(PFILE_OBJECT Fo1, PFILE_OBJECT Fo2);
BOOLEAN __stdcall FsRtlPrepareMdlWriteDev(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, ULONG LockKey, PMDL *MdlChain, PIO_STATUS_BLOCK IoStatus, PDEVICE_OBJECT DeviceObject);
BOOLEAN __stdcall FsRtlPrivateLock(PFILE_LOCK FileLock, PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, PLARGE_INTEGER Length, PEPROCESS ProcessId, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock, PIO_STATUS_BLOCK Iosb, PIRP Irp, PVOID Context, BOOLEAN AlreadySynchronized);
BOOLEAN __stdcall FsRtlRemoveBaseMcbEntry(PBASE_MCB Mcb, LONGLONG Vbn, LONGLONG SectorCount);
BOOLEAN __stdcall FsRtlSplitBaseMcb(PBASE_MCB Mcb, LONGLONG Vbn, LONGLONG Amount);
BOOLEAN __stdcall FsRtlSplitLargeMcb(PLARGE_MCB Mcb, LONGLONG Vbn, LONGLONG Amount);
BOOLEAN __stdcall GetComputerObjectNameA(EXTENDED_NAME_FORMAT NameFormat, LPSTR lpNameBuffer, PULONG nSize);
BOOLEAN __stdcall GetComputerObjectNameW(EXTENDED_NAME_FORMAT NameFormat, LPWSTR lpNameBuffer, PULONG nSize);
BOOLEAN __stdcall GetUserNameExA(EXTENDED_NAME_FORMAT NameFormat, LPSTR lpNameBuffer, PULONG nSize);
BOOLEAN __stdcall GetUserNameExW(EXTENDED_NAME_FORMAT NameFormat, LPWSTR lpNameBuffer, PULONG nSize);
BOOLEAN __stdcall HalTranslateBusAddress(INTERFACE_TYPE InterfaceType, ULONG BusNumber, PHYSICAL_ADDRESS BusAddress, PULONG AddressSpace, PPHYSICAL_ADDRESS TranslatedAddress);
BOOLEAN __stdcall HidD_FlushQueue(HANDLE HidDeviceObject);
BOOLEAN __stdcall HidD_FreePreparsedData(PHIDP_PREPARSED_DATA PreparsedData);
BOOLEAN __stdcall HidD_GetAttributes(HANDLE HidDeviceObject, PHIDD_ATTRIBUTES Attributes);
BOOLEAN __stdcall HidD_GetConfiguration(HANDLE HidDeviceObject, PHIDD_CONFIGURATION Configuration, ULONG ConfigurationLength);
BOOLEAN __stdcall HidD_GetFeature(HANDLE HidDeviceObject, PVOID ReportBuffer, ULONG ReportBufferLength);
BOOLEAN __stdcall HidD_GetIndexedString(HANDLE HidDeviceObject, ULONG StringIndex, PVOID Buffer, ULONG BufferLength);
BOOLEAN __stdcall HidD_GetInputReport(HANDLE HidDeviceObject, PVOID ReportBuffer, ULONG ReportBufferLength);
BOOLEAN __stdcall HidD_GetManufacturerString(HANDLE HidDeviceObject, PVOID Buffer, ULONG BufferLength);
BOOLEAN __stdcall HidD_GetMsGenreDescriptor(HANDLE HidDeviceObject, PVOID Buffer, ULONG BufferLength);
BOOLEAN __stdcall HidD_GetNumInputBuffers(HANDLE HidDeviceObject, PULONG NumberBuffers);
BOOLEAN __stdcall HidD_GetPhysicalDescriptor(HANDLE HidDeviceObject, PVOID Buffer, ULONG BufferLength);
BOOLEAN __stdcall HidD_GetPreparsedData(HANDLE HidDeviceObject, PHIDP_PREPARSED_DATA *PreparsedData);
BOOLEAN __stdcall HidD_GetProductString(HANDLE HidDeviceObject, PVOID Buffer, ULONG BufferLength);
BOOLEAN __stdcall HidD_GetSerialNumberString(HANDLE HidDeviceObject, PVOID Buffer, ULONG BufferLength);
BOOLEAN __stdcall HidD_SetConfiguration(HANDLE HidDeviceObject, PHIDD_CONFIGURATION Configuration, ULONG ConfigurationLength);
BOOLEAN __stdcall HidD_SetFeature(HANDLE HidDeviceObject, PVOID ReportBuffer, ULONG ReportBufferLength);
BOOLEAN __stdcall HidD_SetNumInputBuffers(HANDLE HidDeviceObject, ULONG NumberBuffers);
BOOLEAN __stdcall HidD_SetOutputReport(HANDLE HidDeviceObject, PVOID ReportBuffer, ULONG ReportBufferLength);
BOOLEAN __stdcall IN4ADDR_ISANY(const SOCKADDR_IN *a);
BOOLEAN __stdcall IN4ADDR_ISEQUAL(const SOCKADDR_IN *a, const SOCKADDR_IN *b);
BOOLEAN __stdcall IN4ADDR_ISLOOPBACK(const SOCKADDR_IN *a);
BOOLEAN __stdcall IN4ADDR_ISUNSPECIFIED(const SOCKADDR_IN *a);
BOOLEAN __stdcall IN4_ADDR_EQUAL(const IN_ADDR *a, const IN_ADDR *b);
BOOLEAN __stdcall IN4_IS_ADDR_6TO4ELIGIBLE(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_ADDR_BROADCAST(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_ADDR_LINKLOCAL(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_ADDR_LOOPBACK(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_ADDR_MC_ADMINLOCAL(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_ADDR_MC_LINKLOCAL(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_ADDR_MC_SITELOCAL(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_ADDR_MULTICAST(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_ADDR_RFC1918(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_ADDR_SITELOCAL(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_ADDR_UNSPECIFIED(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_UNALIGNED_ADDR_6TO4ELIGIBLE(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_UNALIGNED_ADDR_BROADCAST(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_UNALIGNED_ADDR_LINKLOCAL(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_UNALIGNED_ADDR_LOOPBACK(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_UNALIGNED_ADDR_MULTICAST(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_UNALIGNED_ADDR_RFC1918(const IN_ADDR *a);
BOOLEAN __stdcall IN4_IS_UNALIGNED_ADDR_UNSPECIFIED(const IN_ADDR *a);
BOOLEAN __stdcall IN4_UNALIGNED_ADDR_EQUAL(const IN_ADDR *a, const IN_ADDR *b);
BOOLEAN __stdcall IN6ADDR_IS6TO4(const SOCKADDR_IN6 *a);
BOOLEAN __stdcall IN6ADDR_ISANY(const SOCKADDR_IN6 *a);
BOOLEAN __stdcall IN6ADDR_ISEQUAL(const SOCKADDR_IN6 *a, const SOCKADDR_IN6 *b);
BOOLEAN __stdcall IN6ADDR_ISISATAP(const SOCKADDR_IN6 *a);
BOOLEAN __stdcall IN6ADDR_ISLOOPBACK(const SOCKADDR_IN6 *a);
BOOLEAN __stdcall IN6ADDR_ISTEREDO(const SOCKADDR_IN6 *a);
BOOLEAN __stdcall IN6ADDR_ISUNSPECIFIED(const SOCKADDR_IN6 *a);
BOOLEAN __stdcall IN6ADDR_ISV4MAPPED(const SOCKADDR_IN6 *a);
BOOLEAN __stdcall IN6_ADDR_EQUAL(const IN6_ADDR *x, const IN6_ADDR *y);
BOOLEAN __stdcall IN6_IS_ADDR_6TO4(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_ALLNODESONLINK(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_ALLNODESONNODE(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_ALLROUTERSONLINK(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_ANYCAST(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_EUI64(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_GLOBAL(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_ISATAP(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_LINKLOCAL(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_LOOPBACK(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_MC_GLOBAL(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_MC_LINKLOCAL(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_MC_NODELOCAL(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_MC_ORGLOCAL(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_MC_SITELOCAL(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_MULTICAST(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_SITELOCAL(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_SOLICITEDNODE(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_SUBNET_RESERVED_ANYCAST(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_SUBNET_ROUTER_ANYCAST(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_TEREDO(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_UNSPECIFIED(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_V4COMPAT(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_V4MAPPED(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_IS_ADDR_V4TRANSLATED(const IN6_ADDR *a);
BOOLEAN __stdcall IN6_PREFIX_EQUAL(const IN6_ADDR *a, const IN6_ADDR *b, UINT8 len);
BOOLEAN __stdcall INETADDR_ISANY(const SOCKADDR *a);
BOOLEAN __stdcall INETADDR_ISEQUAL(const SOCKADDR *a, const SOCKADDR *b);
BOOLEAN __stdcall INETADDR_ISLOOPBACK(const SOCKADDR *a);
BOOLEAN __stdcall INETADDR_ISUNSPECIFIED(const SOCKADDR *a);
BOOLEAN __stdcall INETADDR_ISV4MAPPED(const SOCKADDR *a);
BOOLEAN __stdcall INET_ADDR_EQUAL(ADDRESS_FAMILY af, const void *a, const void *b);
BOOLEAN __stdcall INET_IS_ADDR_BROADCAST(ADDRESS_FAMILY af, const void *a);
BOOLEAN __stdcall INET_IS_ADDR_LOOPBACK(ADDRESS_FAMILY af, const void *a);
BOOLEAN __stdcall INET_IS_ADDR_MULTICAST(ADDRESS_FAMILY af, const void *a);
BOOLEAN __stdcall INET_IS_ADDR_UNSPECIFIED(ADDRESS_FAMILY af, const void *a);
BOOLEAN __stdcall INET_IS_UNALIGNED_ADDR_UNSPECIFIED(ADDRESS_FAMILY af, const void *a);
BOOLEAN __stdcall INET_UNALIGNED_ADDR_EQUAL(ADDRESS_FAMILY af, const void *a, const void *b);
BOOLEAN __stdcall InterlockedCompareExchange128(volatile LONG64 *Destination, LONG64 ExchangeHigh, LONG64 ExchangeLow, LONG64 *ComparandResult);
BOOLEAN __stdcall IoCancelIrp(PIRP Irp);
BOOLEAN __stdcall IoFastQueryNetworkAttributes(POBJECT_ATTRIBUTES ObjectAttributes, ACCESS_MASK DesiredAccess, ULONG OpenOptions, PIO_STATUS_BLOCK IoStatus, PFILE_NETWORK_OPEN_INFORMATION Buffer);
BOOLEAN __stdcall IoFlushAdapterBuffers(PDMA_ADAPTER DmaAdapter, PMDL Mdl, PVOID MapRegisterBase, PVOID CurrentVa, ULONG Length, BOOLEAN WriteToDevice);
BOOLEAN __stdcall IoForwardIrpSynchronously(PDEVICE_OBJECT DeviceObject, PIRP Irp);
BOOLEAN __stdcall IoIrpHasFsTrackOffsetExtensionType(PIRP Irp);
BOOLEAN __stdcall IoIs32bitProcess(PIRP Irp);
BOOLEAN __stdcall IoIsFileObjectIgnoringSharing(PFILE_OBJECT FileObject);
BOOLEAN __stdcall IoIsFileOriginRemote(PFILE_OBJECT FileObject);
BOOLEAN __stdcall IoIsInitiator32bitProcess(PIRP Irp);
BOOLEAN __stdcall IoIsOperationSynchronous(PIRP Irp);
BOOLEAN __stdcall IoIsSystemThread(PETHREAD Thread);
BOOLEAN __stdcall IoIsValidNameGraftingBuffer(PIRP Irp, PREPARSE_DATA_BUFFER ReparseBuffer);
BOOLEAN __stdcall IoIsWdmVersionAvailable(UCHAR MajorVersion, UCHAR MinorVersion);
BOOLEAN __stdcall IoRaiseInformationalHardError(NTSTATUS ErrorStatus, PUNICODE_STRING String, PKTHREAD Thread);
BOOLEAN __stdcall IoSetThreadHardErrorMode(BOOLEAN EnableHardErrors);
BOOLEAN __stdcall IoTranslateBusAddress(INTERFACE_TYPE InterfaceType, ULONG BusNumber, PHYSICAL_ADDRESS BusAddress, PULONG AddressSpace, PPHYSICAL_ADDRESS TranslatedAddress);
BOOLEAN __stdcall IoTryQueueWorkItem(PIO_WORKITEM IoWorkItem, PIO_WORKITEM_ROUTINE_EX WorkerRoutine, WORK_QUEUE_TYPE QueueType, PVOID Context);
BOOLEAN __stdcall IsListEmpty(const LIST_ENTRY *ListHead);
BOOLEAN __stdcall KeCancelTimer(PKTIMER);
BOOLEAN __stdcall KeDeregisterBugCheckCallback(PKBUGCHECK_CALLBACK_RECORD CallbackRecord);
BOOLEAN __stdcall KeDeregisterBugCheckReasonCallback(PKBUGCHECK_REASON_CALLBACK_RECORD CallbackRecord);
BOOLEAN __stdcall KeInsertByKeyDeviceQueue(PKDEVICE_QUEUE DeviceQueue, PKDEVICE_QUEUE_ENTRY DeviceQueueEntry, ULONG SortKey);
BOOLEAN __stdcall KeInsertDeviceQueue(PKDEVICE_QUEUE DeviceQueue, PKDEVICE_QUEUE_ENTRY DeviceQueueEntry);
BOOLEAN __stdcall KeInsertQueueDpc(PRKDPC Dpc, PVOID SystemArgument1, PVOID SystemArgument2);
BOOLEAN __stdcall KeReadStateTimer(PKTIMER Timer);
BOOLEAN __stdcall KeRegisterBugCheckCallback(PKBUGCHECK_CALLBACK_RECORD CallbackRecord, PKBUGCHECK_CALLBACK_ROUTINE CallbackRoutine, PVOID Buffer, ULONG Length, PUCHAR Component);
BOOLEAN __stdcall KeRegisterBugCheckReasonCallback(PKBUGCHECK_REASON_CALLBACK_RECORD CallbackRecord, PKBUGCHECK_REASON_CALLBACK_ROUTINE CallbackRoutine, KBUGCHECK_CALLBACK_REASON Reason, PUCHAR Component);
BOOLEAN __stdcall KeRemoveEntryDeviceQueue(PKDEVICE_QUEUE DeviceQueue, PKDEVICE_QUEUE_ENTRY DeviceQueueEntry);
BOOLEAN __stdcall KeRemoveQueueDpc(PRKDPC Dpc);
BOOLEAN __stdcall KeRemoveQueueDpcEx(PRKDPC Dpc, BOOLEAN WaitIfActive);
BOOLEAN __stdcall KeSetCoalescableTimer(PKTIMER Timer, LARGE_INTEGER DueTime, ULONG Period, ULONG TolerableDelay, PKDPC Dpc);
BOOLEAN __stdcall KeSetKernelStackSwapEnable(BOOLEAN Enable);
BOOLEAN __stdcall KeSetTimer(PKTIMER Timer, LARGE_INTEGER DueTime, PKDPC Dpc);
BOOLEAN __stdcall KeSetTimerEx(PKTIMER Timer, LARGE_INTEGER DueTime, LONG Period, PKDPC Dpc);
BOOLEAN __stdcall KeSynchronizeExecution(PKINTERRUPT Interrupt, PKSYNCHRONIZE_ROUTINE SynchronizeRoutine, PVOID SynchronizeContext);
BOOLEAN __stdcall KeTestSpinLock(PKSPIN_LOCK SpinLock);
BOOLEAN __stdcall KeTryToAcquireGuardedMutex(PKGUARDED_MUTEX Mutex);
BOOLEAN __stdcall KeTryToAcquireSpinLockAtDpcLevel(PKSPIN_LOCK SpinLock);
BOOLEAN __stdcall KsDispatchFastIoDeviceControlFailure(PFILE_OBJECT FileObject, BOOLEAN Wait, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, ULONG IoControlCode, PIO_STATUS_BLOCK IoStatus, PDEVICE_OBJECT DeviceObject);
BOOLEAN __stdcall KsDispatchFastReadFailure(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, BOOLEAN Wait, ULONG LockKey, PVOID Buffer, PIO_STATUS_BLOCK IoStatus, PDEVICE_OBJECT DeviceObject);
BOOLEAN __stdcall KsFastMethodHandler(PFILE_OBJECT FileObject, PKSMETHOD Method, ULONG MethodLength, PVOID Data, ULONG DataLength, PIO_STATUS_BLOCK IoStatus, ULONG MethodSetsCount, const KSMETHOD_SET *MethodSet);
BOOLEAN __stdcall KsFastPropertyHandler(PFILE_OBJECT FileObject, PKSPROPERTY Property, ULONG PropertyLength, PVOID Data, ULONG DataLength, PIO_STATUS_BLOCK IoStatus, ULONG PropertySetsCount, const KSPROPERTY_SET *PropertySet);
BOOLEAN __stdcall KsGateCaptureThreshold(PKSGATE Gate);
BOOLEAN __stdcall KsGateGetStateUnsafe(PKSGATE Gate);
BOOLEAN __stdcall KsProcessPinUpdate(PKSPROCESSPIN ProcessPin);
BOOLEAN __stdcall KsiQueryObjectCreateItemsPresent(KSDEVICE_HEADER Header);
BOOLEAN __stdcall McGenEventEnabled(PMCGEN_TRACE_CONTEXT EnableInfo, PCEVENT_DESCRIPTOR EventDescriptor);
BOOLEAN __stdcall McGenLevelKeywordEnabled(PMCGEN_TRACE_CONTEXT EnableInfo, UCHAR Level, ULONGLONG Keyword);
BOOLEAN __stdcall MmCanFileBeTruncated(PSECTION_OBJECT_POINTERS SectionPointer, PLARGE_INTEGER NewFileSize);
BOOLEAN __stdcall MmFlushImageSection(PSECTION_OBJECT_POINTERS SectionObjectPointer, MMFLUSH_TYPE FlushType);
BOOLEAN __stdcall MmForceSectionClosed(PSECTION_OBJECT_POINTERS SectionObjectPointer, BOOLEAN DelayClose);
BOOLEAN __stdcall MmForceSectionClosedEx(PSECTION_OBJECT_POINTERS SectionObjectPointer, ULONG ForceCloseFlags);
BOOLEAN __stdcall MmIsAddressValid(PVOID VirtualAddress);
BOOLEAN __stdcall MmIsNonPagedSystemAddressValid(PVOID VirtualAddress);
BOOLEAN __stdcall MmSetAddressRangeModified(PVOID Address, SIZE_T Length);
BOOLEAN __stdcall NL_ADDR_EQUAL(ADDRESS_FAMILY af, SCOPE_ID sa, const UCHAR *aa, SCOPE_ID sb, const UCHAR *ab);
BOOLEAN __stdcall NL_IS_ADDR_UNSPECIFIED(ADDRESS_FAMILY af, SCOPE_ID s, const UCHAR *a);
BOOLEAN __stdcall NdisCancelTimerObject(NDIS_HANDLE TimerObject);
BOOLEAN __stdcall NdisMSynchronizeWithInterrupt(PNDIS_MINIPORT_INTERRUPT Interrupt, MINIPORT_SYNCHRONIZE_INTERRUPT_HANDLER SynchronizeFunction, PVOID SynchronizeContext);
BOOLEAN __stdcall NdisMSynchronizeWithInterruptEx(NDIS_HANDLE NdisInterruptHandle, ULONG MessageId, MINIPORT_SYNCHRONIZE_INTERRUPT_HANDLER SynchronizeFunction, PVOID SynchronizeContext);
BOOLEAN __stdcall NdisSetCoalescableTimerObject(NDIS_HANDLE TimerObject, LARGE_INTEGER DueTime, LONG MillisecondsPeriod, PVOID FunctionContext, ULONG Tolerance);
BOOLEAN __stdcall NdisSetTimerObject(NDIS_HANDLE TimerObject, LARGE_INTEGER DueTime, LONG MillisecondsPeriod, PVOID FunctionContext);
BOOLEAN __stdcall NdisWaitEvent(PNDIS_EVENT Event, UINT MsToWait);
BOOLEAN __stdcall NetPacketIsIpv4(const NET_PACKET *packet);
BOOLEAN __stdcall NetPacketIsIpv6(const NET_PACKET *packet);
BOOLEAN __stdcall NetPowerSettingsIsProtocolOffloadEnabled(NETPOWERSETTINGS NetPowerSettings, PNDIS_PM_PROTOCOL_OFFLOAD NdisProtocolOffload);
BOOLEAN __stdcall NetPowerSettingsIsWakePatternEnabled(NETPOWERSETTINGS NetPowerSettings, PNDIS_PM_WOL_PATTERN NdisPmWolPattern);
BOOLEAN __stdcall NmrIsEqualNpiModuleId(PNPI_MODULEID ModuleId1, PNPI_MODULEID ModuleId2);
BOOLEAN __stdcall ObIsKernelHandle(HANDLE Handle);
BOOLEAN __stdcall ObReferenceObjectSafe(PVOID Object);
BOOLEAN __stdcall ObReferenceObjectSafeWithTag(PVOID Object, ULONG Tag);
BOOLEAN __stdcall PORT_ALLOCATED_SENSE(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension, PSCSI_REQUEST_BLOCK Srb);
BOOLEAN __stdcall PfxInsertPrefix(PPREFIX_TABLE PrefixTable, PSTRING Prefix, PPREFIX_TABLE_ENTRY PrefixTableEntry);
BOOLEAN __stdcall PoGetSystemWake(PIRP Irp);
BOOLEAN __stdcall PoGetThermalRequestSupport(PVOID ThermalRequest, PO_THERMAL_REQUEST_TYPE Type);
BOOLEAN __stdcall PoQueryWatchdogTime(PDEVICE_OBJECT Pdo, PULONG SecondsRemaining);
BOOLEAN __stdcall PsDisableImpersonation(PETHREAD Thread, PSE_IMPERSONATION_STATE ImpersonationState);
BOOLEAN __stdcall PsGetVersion(PULONG MajorVersion, PULONG MinorVersion, PULONG BuildNumber, PUNICODE_STRING CSDVersion);
BOOLEAN __stdcall PsIsHostSilo(PESILO Silo);
BOOLEAN __stdcall PsIsSystemThread(PETHREAD Thread);
BOOLEAN __stdcall PsIsThreadTerminating(PETHREAD Thread);
BOOLEAN __stdcall PsSetCurrentThreadPrefetching(BOOLEAN Prefetching);
BOOLEAN __stdcall PshedSynchronizeExecution(PWHEA_ERROR_SOURCE_DESCRIPTOR ErrorSource, PKSYNCHRONIZE_ROUTINE SynchronizeRoutine, PVOID SynchronizeContext);
BOOLEAN __stdcall RemoveEntryList(PLIST_ENTRY Entry);
BOOLEAN __stdcall RemoveEntryListUnsafe(PLIST_ENTRY Entry);
BOOLEAN __stdcall RtlAreBitsClear(PRTL_BITMAP BitMapHeader, ULONG StartingIndex, ULONG Length);
BOOLEAN __stdcall RtlAreBitsSet(PRTL_BITMAP BitMapHeader, ULONG StartingIndex, ULONG Length);
BOOLEAN __stdcall RtlCheckBit(PRTL_BITMAP BitMapHeader, ULONG BitPosition);
BOOLEAN __stdcall RtlContractHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable);
BOOLEAN __stdcall RtlCreateHashTable(PRTL_DYNAMIC_HASH_TABLE *HashTable, ULONG Shift, ULONG Flags);
BOOLEAN __stdcall RtlCreateHashTableEx(PRTL_DYNAMIC_HASH_TABLE *HashTable, ULONG InitialSize, ULONG Shift, ULONG Flags);
BOOLEAN __stdcall RtlCreateUnicodeString(PUNICODE_STRING DestinationString, PCWSTR SourceString);
BOOLEAN __stdcall RtlDeleteElementGenericTable(PRTL_GENERIC_TABLE Table, PVOID Buffer);
BOOLEAN __stdcall RtlDeleteElementGenericTableAvl(PRTL_AVL_TABLE Table, PVOID Buffer);
BOOLEAN __stdcall RtlEqualPrefixSid(PSID Sid1, PSID Sid2);
BOOLEAN __stdcall RtlEqualSid(PSID Sid1, PSID Sid2);
BOOLEAN __stdcall RtlEqualString(const STRING *String1, const STRING *String2, BOOLEAN CaseInSensitive);
BOOLEAN __stdcall RtlEqualUnicodeString(PCUNICODE_STRING String1, PCUNICODE_STRING String2, BOOLEAN CaseInSensitive);
BOOLEAN __stdcall RtlExpandHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable);
BOOLEAN __stdcall RtlGetNtProductType(PNT_PRODUCT_TYPE NtProductType);
BOOLEAN __stdcall RtlGetProductInfo(ULONG OSMajorVersion, ULONG OSMinorVersion, ULONG SpMajorVersion, ULONG SpMinorVersion, PULONG ReturnedProductType);
BOOLEAN __stdcall RtlInitEnumerationHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable, PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator);
BOOLEAN __stdcall RtlInitStrongEnumerationHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable, PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator);
BOOLEAN __stdcall RtlInitWeakEnumerationHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable, PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator);
BOOLEAN __stdcall RtlInsertEntryHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable, PRTL_DYNAMIC_HASH_TABLE_ENTRY Entry, ULONG_PTR Signature, PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context);
BOOLEAN __stdcall RtlInsertUnicodePrefix(PUNICODE_PREFIX_TABLE PrefixTable, PUNICODE_STRING Prefix, PUNICODE_PREFIX_TABLE_ENTRY PrefixTableEntry);
BOOLEAN __stdcall RtlIsCloudFilesPlaceholder(ULONG FileAttributes, ULONG ReparseTag);
BOOLEAN __stdcall RtlIsGenericTableEmpty(PRTL_GENERIC_TABLE Table);
BOOLEAN __stdcall RtlIsGenericTableEmptyAvl(PRTL_AVL_TABLE Table);
BOOLEAN __stdcall RtlIsMultiSessionSku();
BOOLEAN __stdcall RtlIsMultiUsersInSessionSku();
BOOLEAN __stdcall RtlIsNameLegalDOS8Dot3(PCUNICODE_STRING Name, POEM_STRING OemName, PBOOLEAN NameContainsSpaces);
BOOLEAN __stdcall RtlIsNonEmptyDirectoryReparsePointAllowed(ULONG ReparseTag);
BOOLEAN __stdcall RtlIsNtDdiVersionAvailable(ULONG Version);
BOOLEAN __stdcall RtlIsPartialPlaceholder(ULONG FileAttributes, ULONG ReparseTag);
BOOLEAN __stdcall RtlIsSandboxedToken(PSECURITY_SUBJECT_CONTEXT Context, KPROCESSOR_MODE PreviousMode);
BOOLEAN __stdcall RtlIsServicePackVersionInstalled(ULONG Version);
BOOLEAN __stdcall RtlIsStateSeparationEnabled();
BOOLEAN __stdcall RtlIsValidOemCharacter(PWCHAR Char);
BOOLEAN __stdcall RtlPrefixString(const STRING *String1, const STRING *String2, BOOLEAN CaseInSensitive);
BOOLEAN __stdcall RtlPrefixUnicodeString(PCUNICODE_STRING String1, PCUNICODE_STRING String2, BOOLEAN CaseInSensitive);
BOOLEAN __stdcall RtlRemoveEntryHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable, PRTL_DYNAMIC_HASH_TABLE_ENTRY Entry, PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context);
BOOLEAN __stdcall RtlSuffixUnicodeString(PCUNICODE_STRING String1, PCUNICODE_STRING String2, BOOLEAN CaseInSensitive);
BOOLEAN __stdcall RtlTestBit(PRTL_BITMAP BitMapHeader, ULONG BitNumber);
BOOLEAN __stdcall RtlTimeFieldsToTime(PTIME_FIELDS TimeFields, PLARGE_INTEGER Time);
BOOLEAN __stdcall RtlTimeToSecondsSince1970(PLARGE_INTEGER Time, PULONG ElapsedSeconds);
BOOLEAN __stdcall RtlTimeToSecondsSince1980(PLARGE_INTEGER Time, PULONG ElapsedSeconds);
BOOLEAN __stdcall RtlValidRelativeSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptorInput, ULONG SecurityDescriptorLength, SECURITY_INFORMATION RequiredInformation);
BOOLEAN __stdcall RtlValidSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor);
BOOLEAN __stdcall RtlValidSid(PSID Sid);
BOOLEAN __stdcall RxAcquireFcbForLazyWrite(PVOID Null, BOOLEAN Wait);
BOOLEAN __stdcall RxAcquireFcbForReadAhead(PVOID Null, BOOLEAN Wait);
BOOLEAN __stdcall RxCancelOperationInOverflowQueue(PRX_CONTEXT RxContext);
BOOLEAN __stdcall RxCcLogError(PDEVICE_OBJECT DeviceObject, PUNICODE_STRING FileName, NTSTATUS Error, NTSTATUS DeviceError, UCHAR IrpMajorCode, PVOID Context);
BOOLEAN __stdcall RxFinalizeNetFcb(PFCB ThisFcb, BOOLEAN RecursiveFinalize, BOOLEAN ForceFinalize, LONG ReferenceCount);
BOOLEAN __stdcall RxFinalizeNetFobx(PFOBX ThisFobx, BOOLEAN RecursiveFinalize, BOOLEAN ForceFinalize);
BOOLEAN __stdcall RxFinalizeNetRoot(PNET_ROOT ThisNetRoot, BOOLEAN RecursiveFinalize, BOOLEAN ForceFinalize);
BOOLEAN __stdcall RxFinalizeSrvCall(PSRV_CALL ThisSrvCall, BOOLEAN ForceFinalize);
BOOLEAN __stdcall RxFinalizeSrvOpen(PSRV_OPEN ThisSrvOpen, BOOLEAN RecursiveFinalize, BOOLEAN ForceFinalize);
BOOLEAN __stdcall RxFinalizeVNetRoot(PV_NET_ROOT ThisVNetRoot, BOOLEAN RecursiveFinalize, BOOLEAN ForceFinalize);
BOOLEAN __stdcall RxIsPrefixTableEmpty(PRX_PREFIX_TABLE ThisTable);
BOOLEAN __stdcall RxIsThisACscAgentOpen(PRX_CONTEXT RxContext);
BOOLEAN __stdcall RxIsThisTheTopLevelIrp(PIRP Irp);
BOOLEAN __stdcall RxLockEnumerator(PMRX_SRV_OPEN SrvOpen, PVOID *ContinuationHandle, PLARGE_INTEGER FileOffset, PLARGE_INTEGER LockRange, PBOOLEAN IsLockExclusive);
BOOLEAN __stdcall RxNoOpAcquire(PVOID Fcb, BOOLEAN Wait);
BOOLEAN __stdcall RxPurgeFobx(PFOBX pFobx);
BOOLEAN __stdcall RxScavengeRelatedFobxs(PFCB Fcb);
BOOLEAN __stdcall RxScavengeVNetRoots(PRDBSS_DEVICE_OBJECT RxDeviceObject);
BOOLEAN __stdcall RxShouldRequestBeThrottled(PTHROTTLING_STATE pBP);
BOOLEAN __stdcall RxTryToBecomeTheTopLevelIrp(PRX_TOPLEVELIRP_CONTEXT TopLevelContext, PIRP Irp, PRDBSS_DEVICE_OBJECT RxDeviceObject, BOOLEAN ForceTopLevel);
BOOLEAN __stdcall RxpDereferenceAndFinalizeNetFcb(PFCB ThisFcb, PRX_CONTEXT RxContext, BOOLEAN RecursiveFinalize, BOOLEAN ForceFinalize);
BOOLEAN __stdcall RxpTrackDereference(ULONG TraceType, PCSTR FileName, ULONG Line, PVOID Instance);
BOOLEAN __stdcall ScsiConvertToFixedSenseFormat(PVOID SenseInfoBuffer, UCHAR SenseInfoBufferLength, PVOID OutBuffer, UCHAR OutBufferLength);
BOOLEAN __stdcall ScsiGetDescriptorSenseKeyAndCodes(PVOID SenseInfoBuffer, UCHAR SenseInfoBufferLength, PUCHAR SenseKey, PUCHAR AdditionalSenseCode, PUCHAR AdditionalSenseCodeQualifier);
BOOLEAN __stdcall ScsiGetFixedSenseKeyAndCodes(PVOID SenseInfoBuffer, UCHAR SenseInfoBufferLength, PUCHAR SenseKey, PUCHAR AdditionalSenseCode, PUCHAR AdditionalSenseCodeQualifier);
BOOLEAN __stdcall ScsiGetNextSenseDescriptorByType(PVOID Buffer, UCHAR BufferLength, PUCHAR TypeList, ULONG TypeListCount, PUCHAR OutType, PVOID *OutBuffer, UCHAR *OutBufferLength);
BOOLEAN __stdcall ScsiGetSenseDescriptor(PVOID SenseInfoBuffer, UCHAR SenseInfoBufferLength, PVOID *DescriptorBuffer, UCHAR *DescriptorBufferLength);
BOOLEAN __stdcall ScsiGetSenseKeyAndCodes(PVOID SenseInfoBuffer, UCHAR SenseInfoBufferLength, SCSI_SENSE_OPTIONS Options, PUCHAR SenseKey, PUCHAR AdditionalSenseCode, PUCHAR AdditionalSenseCodeQualifier);
BOOLEAN __stdcall ScsiGetTotalSenseByteCountIndicated(PVOID SenseInfoBuffer, UCHAR SenseInfoBufferLength, UCHAR *TotalByteCountIndicated);
BOOLEAN __stdcall ScsiPortValidateRange(PVOID HwDeviceExtension, INTERFACE_TYPE BusType, ULONG SystemIoBusNumber, SCSI_PHYSICAL_ADDRESS IoAddress, ULONG NumberOfBytes, BOOLEAN InIoSpace);
BOOLEAN __stdcall ScsiPortWmiDispatchFunction(PSCSI_WMILIB_CONTEXT WmiLibInfo, UCHAR MinorFunction, PVOID DeviceContext, PSCSIWMI_REQUEST_CONTEXT RequestContext, PVOID DataPath, ULONG BufferSize, PVOID Buffer);
BOOLEAN __stdcall ScsiPortWmiSetInstanceCount(PSCSIWMI_REQUEST_CONTEXT RequestContext, ULONG InstanceCount, PULONG BufferAvail, PULONG SizeNeeded);
BOOLEAN __stdcall ScsiValidateBlockCommandSenseDescriptor(PVOID DescriptorBuffer, UCHAR DescriptorBufferLength);
BOOLEAN __stdcall ScsiValidateInformationSenseDescriptor(PVOID DescriptorBuffer, UCHAR DescriptorBufferLength);
BOOLEAN __stdcall SeAccessCheck(PSECURITY_DESCRIPTOR SecurityDescriptor, PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext, BOOLEAN SubjectContextLocked, ACCESS_MASK DesiredAccess, ACCESS_MASK PreviouslyGrantedAccess, PPRIVILEGE_SET *Privileges, PGENERIC_MAPPING GenericMapping, KPROCESSOR_MODE AccessMode, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);
BOOLEAN __stdcall SeAccessCheckFromState(PSECURITY_DESCRIPTOR SecurityDescriptor, PTOKEN_ACCESS_INFORMATION PrimaryTokenInformation, PTOKEN_ACCESS_INFORMATION ClientTokenInformation, ACCESS_MASK DesiredAccess, ACCESS_MASK PreviouslyGrantedAccess, PPRIVILEGE_SET *Privileges, PGENERIC_MAPPING GenericMapping, KPROCESSOR_MODE AccessMode, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);
BOOLEAN __stdcall SeAccessCheckFromStateEx(PSECURITY_DESCRIPTOR SecurityDescriptor, PACCESS_TOKEN PrimaryToken, PACCESS_TOKEN ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK PreviouslyGrantedAccess, PPRIVILEGE_SET *Privileges, PGENERIC_MAPPING GenericMapping, KPROCESSOR_MODE AccessMode, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);
BOOLEAN __stdcall SeAuditingAnyFileEventsWithContext(PSECURITY_DESCRIPTOR SecurityDescriptor, PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext);
BOOLEAN __stdcall SeAuditingAnyFileEventsWithContextEx(PSECURITY_DESCRIPTOR SecurityDescriptor, PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext, PBOOLEAN StagingEnabled);
BOOLEAN __stdcall SeAuditingFileEvents(BOOLEAN AccessGranted, PSECURITY_DESCRIPTOR SecurityDescriptor);
BOOLEAN __stdcall SeAuditingFileEventsWithContext(BOOLEAN AccessGranted, PSECURITY_DESCRIPTOR SecurityDescriptor, PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext);
BOOLEAN __stdcall SeAuditingFileEventsWithContextEx(BOOLEAN AccessGranted, PSECURITY_DESCRIPTOR SecurityDescriptor, PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext, PBOOLEAN StagingEnabled);
BOOLEAN __stdcall SeAuditingFileOrGlobalEvents(BOOLEAN AccessGranted, PSECURITY_DESCRIPTOR SecurityDescriptor, PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext);
BOOLEAN __stdcall SeAuditingHardLinkEvents(BOOLEAN AccessGranted, PSECURITY_DESCRIPTOR SecurityDescriptor);
BOOLEAN __stdcall SeAuditingHardLinkEventsWithContext(BOOLEAN AccessGranted, PSECURITY_DESCRIPTOR SecurityDescriptor, PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext);
BOOLEAN __stdcall SePrivilegeCheck(PPRIVILEGE_SET RequiredPrivileges, PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext, KPROCESSOR_MODE AccessMode);
BOOLEAN __stdcall SeShouldCheckForAccessRightsFromParent(PVOID ObjectType, PSECURITY_DESCRIPTOR ChildDescriptor, PACCESS_STATE AccessState);
BOOLEAN __stdcall SeSinglePrivilegeCheck(LUID PrivilegeValue, KPROCESSOR_MODE PreviousMode);
BOOLEAN __stdcall SeTokenIsAdmin(PACCESS_TOKEN Token);
BOOLEAN __stdcall SeTokenIsNoChildProcessRestrictionEnforced(PACCESS_TOKEN Token, PBOOLEAN UnlessSecure);
BOOLEAN __stdcall SeTokenIsRestricted(PACCESS_TOKEN Token);
BOOLEAN __stdcall SeTokenIsWriteRestricted(PACCESS_TOKEN Token);
BOOLEAN __stdcall SeValidSecurityDescriptor(ULONG Length, PSECURITY_DESCRIPTOR SecurityDescriptor);
BOOLEAN __stdcall SrbCopySrb(PVOID DestinationSrb, ULONG DestinationSrbLength, PVOID SourceSrb);
BOOLEAN __stdcall SspiAsyncContextRequiresNotify(SspiAsyncContext *AsyncContext);
BOOLEAN __stdcall SspiIsPromptingNeeded(unsigned int ErrorOrNtStatus);
BOOLEAN __stdcall StreamClassReadWriteConfig(PVOID HwDeviceExtension, BOOLEAN Read, PVOID Buffer, ULONG Offset, ULONG Length);
BOOLEAN __stdcall TapeClassAllocateSrbBuffer(PSCSI_REQUEST_BLOCK Srb, ULONG SrbBufferSize);
BOOLEAN __stdcall TdiMatchPdoWithChainedReceiveContext(PVOID TsduDescriptor, PVOID PDO);
BOOLEAN __stdcall TlgKeywordOn(TraceLoggingHProvider hProvider, ULONGLONG keyword);
BOOLEAN __stdcall TmIsTransactionActive(PKTRANSACTION Transaction);
BOOLEAN __stdcall TraceLoggingProviderEnabled(TraceLoggingHProvider hProvider, UCHAR eventLevel, ULONGLONG eventKeyword);
BOOLEAN __stdcall TranslateNameA(LPCSTR lpAccountName, EXTENDED_NAME_FORMAT AccountNameFormat, EXTENDED_NAME_FORMAT DesiredNameFormat, LPSTR lpTranslatedName, PULONG nSize);
BOOLEAN __stdcall TranslateNameW(LPCWSTR lpAccountName, EXTENDED_NAME_FORMAT AccountNameFormat, EXTENDED_NAME_FORMAT DesiredNameFormat, LPWSTR lpTranslatedName, PULONG nSize);
BOOLEAN __stdcall UCSI_CMD_SUCCEEDED(UCSI_CCI Cci);
BOOLEAN __stdcall USBD_IsInterfaceVersionSupported(USBD_HANDLE USBDHandle, ULONG USBDInterfaceVersion);
BOOLEAN __stdcall UcxIoDeviceControl(WDFDEVICE Device, WDFREQUEST Request, size_t OutputBufferLength, size_t InputBufferLength, ULONG IoControlCode);
BOOLEAN __stdcall UdecxWdfDeviceTryHandleUserIoctl(WDFDEVICE UdecxWdfDevice, WDFREQUEST Request);
BOOLEAN __stdcall UfxDeviceIoControl(UFXDEVICE UfxDevice, WDFREQUEST Request, size_t OutputBufferLength, size_t InputBufferLength, ULONG IoControlCode);
BOOLEAN __stdcall UfxDeviceIoInternalControl(UFXDEVICE UfxDevice, WDFREQUEST Request, size_t OutputBufferLength, size_t InputBufferLength, ULONG IoControlCode);
BOOLEAN __stdcall VideoPortCheckForDeviceExistence(PVOID HwDeviceExtension, USHORT VendorId, USHORT DeviceId, UCHAR RevisionId, USHORT SubVendorId, USHORT SubSystemId, ULONG Flags);
BOOLEAN __stdcall VideoPortDDCMonitorHelper(PVOID HwDeviceExtension, PVOID DDCControl, PUCHAR EdidBuffer, ULONG EdidBufferSize);
BOOLEAN __stdcall VideoPortDbgReportSecondaryData(PVIDEO_DEBUG_REPORT pReport, PVOID pvData, ULONG ulDataSize);
BOOLEAN __stdcall VideoPortGetAgpServices(PVOID HwDeviceExtension, PVIDEO_PORT_AGP_SERVICES AgpServices);
BOOLEAN __stdcall VideoPortLockPages(PVOID HwDeviceExtension, PVIDEO_REQUEST_PACKET pVrp, PEVENT pUEvent, PEVENT pDisplayEvent, DMA_FLAGS DmaFlags);
BOOLEAN __stdcall VideoPortQueueDpc(PVOID HwDeviceExtension, PMINIPORT_DPC_ROUTINE CallbackRoutine, PVOID Context);
BOOLEAN __stdcall VideoPortScanRom(PVOID HwDeviceExtension, PUCHAR RomBase, ULONG RomLength, PUCHAR String);
BOOLEAN __stdcall VideoPortSignalDmaComplete(PVOID HwDeviceExtension, PDMA pDmaHandle);
BOOLEAN __stdcall VideoPortSynchronizeExecution(PVOID HwDeviceExtension, VIDEO_SYNCHRONIZE_PRIORITY Priority, PMINIPORT_SYNCHRONIZE_ROUTINE SynchronizeRoutine, PVOID Context);
BOOLEAN __stdcall VideoPortUnlockPages(PVOID hwDeviceExtension, PDMA pDma);
BOOLEAN __stdcall VideoPortUnmapDmaMemory(PVOID HwDeviceExtension, PVOID VirtualAddress, HANDLE ProcessHandle, PDMA BoardMemoryHandle);
BOOLEAN __stdcall WDF_IO_QUEUE_DRAINED(WDF_IO_QUEUE_STATE State);
BOOLEAN __stdcall WDF_IO_QUEUE_IDLE(WDF_IO_QUEUE_STATE State);
BOOLEAN __stdcall WDF_IO_QUEUE_PURGED(WDF_IO_QUEUE_STATE State);
BOOLEAN __stdcall WDF_IO_QUEUE_READY(WDF_IO_QUEUE_STATE State);
BOOLEAN __stdcall WDF_IO_QUEUE_STOPPED(WDF_IO_QUEUE_STATE State);
BOOLEAN __stdcall WDF_USB_PIPE_DIRECTION_IN(UCHAR EndpointAddress);
BOOLEAN __stdcall WDF_USB_PIPE_DIRECTION_OUT(UCHAR EndpointAddress);
BOOLEAN __stdcall WdfChildListRequestChildEject(WDFCHILDLIST ChildList, PWDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER IdentificationDescription);
BOOLEAN __stdcall WdfDevStateIsNP(ULONG State);
BOOLEAN __stdcall WdfDmaTransactionCancel(WDFDMATRANSACTION DmaTransaction);
BOOLEAN __stdcall WdfDmaTransactionDmaCompleted(WDFDMATRANSACTION DmaTransaction, NTSTATUS *Status);
BOOLEAN __stdcall WdfDmaTransactionDmaCompletedFinal(WDFDMATRANSACTION DmaTransaction, size_t FinalTransferredLength, NTSTATUS *Status);
BOOLEAN __stdcall WdfDmaTransactionDmaCompletedWithLength(WDFDMATRANSACTION DmaTransaction, size_t TransferredLength, NTSTATUS *Status);
BOOLEAN __stdcall WdfDpcCancel(WDFDPC Dpc, BOOLEAN Wait);
BOOLEAN __stdcall WdfDpcEnqueue(WDFDPC Dpc);
BOOLEAN __stdcall WdfDriverIsVersionAvailable(WDFDRIVER Driver, PWDF_DRIVER_VERSION_AVAILABLE_PARAMS VersionAvailableParams);
BOOLEAN __stdcall WdfInterruptQueueDpcForIsr(WDFINTERRUPT Interrupt);
BOOLEAN __stdcall WdfInterruptQueueWorkItemForIsr(WDFINTERRUPT Interrupt);
BOOLEAN __stdcall WdfInterruptSynchronize(WDFINTERRUPT Interrupt, PFN_WDF_INTERRUPT_SYNCHRONIZE Callback, WDFCONTEXT Context);
BOOLEAN __stdcall WdfInterruptTryToAcquireLock(WDFINTERRUPT Interrupt);
BOOLEAN __stdcall WdfRequestCancelSentRequest(WDFREQUEST Request);
BOOLEAN __stdcall WdfRequestIsCanceled(WDFREQUEST Request);
BOOLEAN __stdcall WdfRequestIsFrom32BitProcess(WDFREQUEST Request);
BOOLEAN __stdcall WdfRequestIsReserved(WDFREQUEST Request);
BOOLEAN __stdcall WdfRequestSend(WDFREQUEST Request, WDFIOTARGET Target, PWDF_REQUEST_SEND_OPTIONS Options);
BOOLEAN __stdcall WdfTimerStart(WDFTIMER Timer, LONGLONG DueTime);
BOOLEAN __stdcall WdfTimerStop(WDFTIMER Timer, BOOLEAN Wait);
BOOLEAN __stdcall WdfUsbTargetPipeIsInEndpoint(WDFUSBPIPE Pipe);
BOOLEAN __stdcall WdfUsbTargetPipeIsOutEndpoint(WDFUSBPIPE Pipe);
BOOLEAN __stdcall WdfWmiProviderIsEnabled(WDFWMIPROVIDER WmiProvider, WDF_WMI_PROVIDER_CONTROL ProviderControl);
BOOLEAN __stdcall WheaIsValidErrorRecordSignature(PWHEA_ERROR_RECORD Record);
BOOLEAN __stdcall bittest(const LONG *Base, LONG Offset);
BOOLEAN __stdcall bittest64(const LONG64 *Base, LONG64 Offset);
BOOLEAN __stdcall bittestandcomplement(LONG *Base, LONG Offset);
BOOLEAN __stdcall bittestandcomplement64(LONG64 *Base, LONG64 Offset);
BOOLEAN __stdcall bittestandreset(LONG *Base, LONG Offset);
BOOLEAN __stdcall bittestandreset64(LONG64 *Base, LONG64 Offset);
BOOLEAN __stdcall bittestandset(LONG *Base, LONG Offset);
BOOLEAN __stdcall bittestandset64(LONG64 *Base, LONG64 Offset);
BOOLEAN __stdcall imp_WppRecorderIsDefaultLogAvailable(PVOID WppCb);
BOOLEAN __stdcall interlockedbittestandreset(volatile LONG *Base, LONG Offset);
BOOLEAN __stdcall interlockedbittestandreset64(volatile LONG64 *Base, LONG64 Offset);
BOOLEAN __stdcall interlockedbittestandset(volatile LONG *Base, LONG Offset);
BOOLEAN __stdcall interlockedbittestandset64(volatile LONG64 *Base, LONG64 Offset);
CCHAR NdisSystemProcessorCount(void);
CCHAR __stdcall RtlFindLeastSignificantBit(ULONGLONG Set);
CCHAR __stdcall RtlFindMostSignificantBit(ULONGLONG Set);
CHAR __stdcall InterlockedExchange8(volatile CHAR *Target, CHAR Value);
CHAR __stdcall ReadAcquire8(const volatile CHAR *Source);
CHAR __stdcall ReadNoFence8(const volatile CHAR *Source);
CHAR __stdcall ReadRaw8(const volatile CHAR *Source);
CHAR __stdcall RtlQueryProcessPlaceholderCompatibilityMode();
CHAR __stdcall RtlQueryThreadPlaceholderCompatibilityMode();
CHAR __stdcall RtlSetProcessPlaceholderCompatibilityMode(CHAR Mode);
CHAR __stdcall RtlSetThreadPlaceholderCompatibilityMode(CHAR Mode);
CHAR __stdcall RtlUpperChar(CHAR Character);
CLFS_CONTAINER_ID __stdcall ClfsLsnContainer(const CLFS_LSN *plsn);
CLFS_LSN __stdcall ClfsEarlierLsn(PCLFS_LSN plsn);
CLFS_LSN __stdcall ClfsLaterLsn(PCLFS_LSN plsn);
CLFS_LSN __stdcall ClfsLsnCreate(CLFS_CONTAINER_ID cidContainer, ULONG offBlock, ULONG cRecord);
CLFS_LSN __stdcall ClfsLsnIncrement(PCLFS_LSN plsn);
CLIENT_CALL_RETURN Ndr64AsyncClientCall(MIDL_STUBLESS_PROXY_INFO *pProxyInfo, unsigned int nProcNum, void *pReturnValue, ...);
CLIENT_CALL_RETURN Ndr64DcomAsyncClientCall(MIDL_STUBLESS_PROXY_INFO *pProxyInfo, unsigned int nProcNum, void *pReturnValue, ...);
CLIENT_CALL_RETURN NdrAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...);
CLIENT_CALL_RETURN NdrClientCall(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...);
CLIENT_CALL_RETURN NdrClientCall2(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...);
CLIENT_CALL_RETURN NdrClientCall3(MIDL_STUBLESS_PROXY_INFO *pProxyInfo, unsigned int nProcNum, void *pReturnValue, ...);
CLIENT_CALL_RETURN NdrDcomAsyncClientCall(PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ...);
D3DKMDT_VIDPN_PRESENT_PATH_ROTATION __stdcall D3DKMDT_VPPR_GET_CONTENT_ROTATION(D3DKMDT_VIDPN_PRESENT_PATH_ROTATION Rotation);
D3DKMDT_VIDPN_PRESENT_PATH_ROTATION __stdcall D3DKMDT_VPPR_GET_CONTENT_ROTATION_PART(D3DKMDT_VIDPN_PRESENT_PATH_ROTATION Rotation);
D3DKMDT_VIDPN_PRESENT_PATH_ROTATION __stdcall D3DKMDT_VPPR_GET_OFFSET_ROTATION(D3DKMDT_VIDPN_PRESENT_PATH_ROTATION Rotation);
DEVICE_POWER_STATE __stdcall MapWakeDepthToDstate(DEVICE_WAKE_DEPTH WakeDepth);
DL_ADDRESS_TYPE __stdcall EthernetAddressType(const UCHAR *Address);
DRIVER_CANCEL KsCancelRoutine;
DRIVER_DISPATCH ClassInternalIoControl;
DRIVER_DISPATCH KsDefaultDispatchPnp;
DRIVER_DISPATCH KsDefaultDispatchPower;
DRIVER_DISPATCH KsDefaultForwardIrp;
DUID_MATCH_STATUS __stdcall CompareStorageDuids(PSTORAGE_DEVICE_UNIQUE_IDENTIFIER Duid1, PSTORAGE_DEVICE_UNIQUE_IDENTIFIER Duid2);
EXCEPTION_DISPOSITION __cdecl _C_specific_handler(struct _EXCEPTION_RECORD *ExceptionRecord, void *EstablisherFrame, struct _CONTEXT *ContextRecord, struct _DISPATCHER_CONTEXT *DispatcherContext);
FILE *__cdecl _acrt_iob_func(const unsigned int);
FILE *__cdecl _iob_func();
FILE *__cdecl _p__iob();
FILE *__cdecl fdopen(int FileHandle, const char *Format);
FILE *__cdecl fdopen(int FileHandle, const char *Mode);
FILE *__cdecl fopen(const char *Filename, const char *Mode);
FILE *__cdecl freopen(const char *Filename, const char *Mode, FILE *File);
FILE *__cdecl fsopen(const char *Filename, const char *Mode, int ShFlag);
FILE *__cdecl popen(const char *Command, const char *Mode);
FILE *__cdecl tmpfile();
FILE *__cdecl wfdopen(int FileHandle, const wchar_t *Mode);
FILE *__cdecl wfopen(const wchar_t *Filename, const wchar_t *Mode);
FILE *__cdecl wfreopen(const wchar_t *Filename, const wchar_t *Mode, FILE *OldFile);
FILE *__cdecl wfsopen(const wchar_t *Filename, const wchar_t *Mode, int ShFlag);
FILE *__cdecl wpopen(const wchar_t *Command, const wchar_t *Mode);
FIRMWARE_TYPE ExGetFirmwareType(void);
FLT_PREOP_CALLBACK_STATUS __stdcall FltCheckOplock(POPLOCK Oplock, PFLT_CALLBACK_DATA CallbackData, PVOID Context, PFLTOPLOCK_WAIT_COMPLETE_ROUTINE WaitCompletionRoutine, PFLTOPLOCK_PREPOST_CALLBACKDATA_ROUTINE PrePostCallbackDataRoutine);
FLT_PREOP_CALLBACK_STATUS __stdcall FltCheckOplockEx(POPLOCK Oplock, PFLT_CALLBACK_DATA CallbackData, ULONG Flags, PVOID Context, PFLTOPLOCK_WAIT_COMPLETE_ROUTINE WaitCompletionRoutine, PFLTOPLOCK_PREPOST_CALLBACKDATA_ROUTINE PrePostCallbackDataRoutine);
FLT_PREOP_CALLBACK_STATUS __stdcall FltOplockBreakH(POPLOCK Oplock, PFLT_CALLBACK_DATA CallbackData, ULONG Flags, PVOID Context, PFLTOPLOCK_WAIT_COMPLETE_ROUTINE WaitCompletionRoutine, PFLTOPLOCK_PREPOST_CALLBACKDATA_ROUTINE PrePostCallbackDataRoutine);
FLT_PREOP_CALLBACK_STATUS __stdcall FltOplockBreakToNone(POPLOCK Oplock, PFLT_CALLBACK_DATA CallbackData, PVOID Context, PFLTOPLOCK_WAIT_COMPLETE_ROUTINE WaitCompletionRoutine, PFLTOPLOCK_PREPOST_CALLBACKDATA_ROUTINE PrePostCallbackDataRoutine);
FLT_PREOP_CALLBACK_STATUS __stdcall FltOplockBreakToNoneEx(POPLOCK Oplock, PFLT_CALLBACK_DATA CallbackData, ULONG Flags, PVOID Context, PFLTOPLOCK_WAIT_COMPLETE_ROUTINE WaitCompletionRoutine, PFLTOPLOCK_PREPOST_CALLBACKDATA_ROUTINE PrePostCallbackDataRoutine);
FLT_PREOP_CALLBACK_STATUS __stdcall FltOplockFsctrl(POPLOCK Oplock, PFLT_CALLBACK_DATA CallbackData, ULONG OpenCount);
FLT_PREOP_CALLBACK_STATUS __stdcall FltOplockFsctrlEx(POPLOCK Oplock, PFLT_CALLBACK_DATA CallbackData, ULONG OpenCount, ULONG Flags);
FLT_PREOP_CALLBACK_STATUS __stdcall FltProcessFileLock(PFILE_LOCK FileLock, PFLT_CALLBACK_DATA CallbackData, PVOID Context);
FN_VMB_CHANNEL_ALLOCATE VmbChannelAllocate;
FN_VMB_CHANNEL_CLEANUP VmbChannelCleanup;
FN_VMB_CHANNEL_CREATE_GPADL_FROM_BUFFER VmbChannelCreateGpadlFromBuffer;
FN_VMB_CHANNEL_CREATE_GPADL_FROM_MDL VmbChannelCreateGpadlFromMdl;
FN_VMB_CHANNEL_DELETE_GPADL VmbChannelDeleteGpadl;
FN_VMB_CHANNEL_DISABLE VmbChannelDisable;
FN_VMB_CHANNEL_ENABLE VmbChannelEnable;
FN_VMB_CHANNEL_GET_INTERFACE_INSTANCE VmbChannelGetInterfaceInstance;
FN_VMB_CHANNEL_GET_MMIO_SPACE VmbChannelGetMmioSpace;
FN_VMB_CHANNEL_GET_PARENT_DEVICE_OBJECT VmbChannelGetParentDeviceObject;
FN_VMB_CHANNEL_GET_POINTER VmbChannelGetPointer;
FN_VMB_CHANNEL_GET_TARGET_DEVICE_OBJECT VmbChannelGetTargetDeviceObject;
FN_VMB_CHANNEL_INIT_SET_CLIENT_CONTEXT_SIZE VmbChannelInitSetClientContextSize;
FN_VMB_CHANNEL_INIT_SET_FLAGS VmbChannelInitSetFlags;
FN_VMB_CHANNEL_INIT_SET_FRIENDLY_NAME VmbChannelInitSetFriendlyName;
FN_VMB_CHANNEL_INIT_SET_MAXIMUM_EXTERNAL_DATA VmbChannelInitSetMaximumExternalData;
FN_VMB_CHANNEL_INIT_SET_MAXIMUM_PACKET_SIZE VmbChannelInitSetMaximumPacketSize;
FN_VMB_CHANNEL_INIT_SET_PROCESS_PACKET_CALLBACKS VmbChannelInitSetProcessPacketCallbacks;
FN_VMB_CHANNEL_INIT_SET_STATE_CHANGE_CALLBACKS VmbChannelInitSetStateChangeCallbacks;
FN_VMB_CHANNEL_MAP_GPADL VmbChannelMapGpadl;
FN_VMB_CHANNEL_PACKET_COMPLETE VmbChannelPacketComplete;
FN_VMB_CHANNEL_PACKET_DEFER_TO_PASSIVE VmbChannelPacketDeferToPassive;
FN_VMB_CHANNEL_PACKET_FAIL VmbChannelPacketFail;
FN_VMB_CHANNEL_PACKET_GET_CLIENT_CONTEXT VmbChannelPacketGetClientContext;
FN_VMB_CHANNEL_PACKET_GET_EXTERNAL_DATA VmbChannelPacketGetExternalData;
FN_VMB_CHANNEL_PAUSE VmbChannelPause;
FN_VMB_CHANNEL_RESTORE_FROM_BUFFER VmbChannelRestoreFromBuffer;
FN_VMB_CHANNEL_SAVE_BEGIN VmbChannelSaveBegin;
FN_VMB_CHANNEL_SAVE_CONTINUE VmbChannelSaveContinue;
FN_VMB_CHANNEL_SAVE_END VmbChannelSaveEnd;
FN_VMB_CHANNEL_SEND_SYNCHRONOUS_REQUEST VmbChannelSendSynchronousRequest;
FN_VMB_CHANNEL_SET_INCOMING_PROCESSING_AT_PASSIVE VmbChannelSetIncomingProcessingAtPassive;
FN_VMB_CHANNEL_SET_INTERRUPT_LATENCY VmbChannelSetInterruptLatency;
FN_VMB_CHANNEL_SET_POINTER VmbChannelSetPointer;
FN_VMB_CHANNEL_SET_TRANSACTION_QUOTA VmbChannelSetTransactionQuota;
FN_VMB_CHANNEL_SIZEOF_PACKET VmbChannelSizeofPacket;
FN_VMB_CHANNEL_START VmbChannelStart;
FN_VMB_CHANNEL_UNMAP_GPADL VmbChannelUnmapGpadl;
FN_VMB_CLIENT_CHANNEL_INIT_SET_RING_BUFFER_PAGE_COUNT VmbClientChannelInitSetRingBufferPageCount;
FN_VMB_CLIENT_CHANNEL_INIT_SET_TARGET_PNP VmbClientChannelInitSetTargetPnp;
FN_VMB_CONVERT_VMBUS_HANDLE_TO_KERNEL_HANDLE VmbConvertVmbusHandleToKernelHandle;
FN_VMB_PACKET_ALLOCATE VmbPacketAllocate;
FN_VMB_PACKET_FREE VmbPacketFree;
FN_VMB_PACKET_GET_CHANNEL VmbPacketGetChannel;
FN_VMB_PACKET_GET_POINTER VmbPacketGetPointer;
FN_VMB_PACKET_INITIALIZE VmbPacketInitialize;
FN_VMB_PACKET_RESTORE VmbPacketRestore;
FN_VMB_PACKET_SEND VmbPacketSend;
FN_VMB_PACKET_SEND_WITH_EXTERNAL_MDL VmbPacketSendWithExternalMdl;
FN_VMB_PACKET_SEND_WITH_EXTERNAL_PFNS VmbPacketSendWithExternalPfns;
FN_VMB_PACKET_SET_COMPLETION_ROUTINE VmbPacketSetCompletionRoutine;
FN_VMB_PACKET_SET_POINTER VmbPacketSetPointer;
FN_VMB_SERVER_CHANNEL_INIT_SET_FLAGS VmbServerChannelInitSetFlags;
FN_VMB_SERVER_CHANNEL_INIT_SET_MMIO_MEGABYTES VmbServerChannelInitSetMmioMegabytes;
FN_VMB_SERVER_CHANNEL_INIT_SET_SAVE_RESTORE_PACKET_CALLBACKS VmbServerChannelInitSetSaveRestorePacketCallbacks;
FN_VMB_SERVER_CHANNEL_INIT_SET_TARGET_INTERFACE_ID VmbServerChannelInitSetTargetInterfaceId;
FN_VMB_SERVER_CHANNEL_INIT_SET_TARGET_VTL VmbServerChannelInitSetTargetVtl;
FN_VMB_SERVER_CHANNEL_INIT_SET_VMBUS_HANDLE VmbServerChannelInitSetVmbusHandle;
FWPM_SERVICE_STATE __stdcall FwpmBfeStateGet0();
FWPS_CONNECTION_REDIRECT_STATE __stdcall FwpsQueryConnectionRedirectState0(HANDLE redirectRecords, HANDLE redirectHandle, void **redirectContext);
FWPS_PACKET_INJECTION_STATE __stdcall FwpsQueryPacketInjectionState0(HANDLE injectionHandle, const NET_BUFFER_LIST *netBufferList, HANDLE *injectionContext);
GUID *__stdcall PsGetSiloContainerId(PESILO Silo);
GUID __stdcall TraceLoggingProviderId(TraceLoggingHProvider hProvider);
HANDLE PsGetCurrentProcessId(void);
HANDLE PsGetCurrentThreadId(void);
HANDLE __stdcall FltGetRequestorProcessIdEx(PFLT_CALLBACK_DATA CallbackData);
HANDLE __stdcall LkmdTelCreateReport(PWCHAR ReportType, ULONG BugCheckCode, ULONG_PTR BugCheckParam1, ULONG_PTR BugCheckParam2, ULONG_PTR BugCheckParam3, ULONG_PTR BugCheckParam4);
HANDLE __stdcall MmSecureVirtualMemory(PVOID Address, SIZE_T Size, ULONG ProbeMode);
HANDLE __stdcall PsGetProcessId(PEPROCESS Process);
HANDLE __stdcall PsGetThreadId(PETHREAD Thread);
HANDLE __stdcall PsGetThreadProcessId(PETHREAD Thread);
HANDLE __stdcall WdfIoTargetWdmGetTargetFileHandle(WDFIOTARGET IoTarget);
HANDLE __stdcall WdfRegistryWdmGetHandle(WDFKEY Key);
HBA_HANDLE __cdecl HBA_OpenAdapter(PSTR AdapterName);
HBA_STATUS __cdecl HBA_FreeLibrary();
HBA_STATUS __cdecl HBA_GetAdapterAttributes(HBA_HANDLE Handle, HBA_ADAPTERATTRIBUTES *HbaAttributes);
HBA_STATUS __cdecl HBA_GetAdapterName(HBA_UINT32 AdapterIndex, PSTR AdapterName);
HBA_STATUS __cdecl HBA_GetAdapterPortAttributes(HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_PORTATTRIBUTES *PortAttributes);
HBA_STATUS __cdecl HBA_GetBindingCapability(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_BIND_CAPABILITY *Flags);
HBA_STATUS __cdecl HBA_GetBindingSupport(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_BIND_CAPABILITY *Flags);
HBA_STATUS __cdecl HBA_GetDiscoveredPortAttributes(HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_UINT32 DiscoveredPortIndex, HBA_PORTATTRIBUTES *PortAttributes);
HBA_STATUS __cdecl HBA_GetEventBuffer(HBA_HANDLE Handle, PHBA_EVENTINFO EventBuffer, HBA_UINT32 *EventCount);
HBA_STATUS __cdecl HBA_GetFC4Statistics(HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_UINT8 FC4type, HBA_FC4STATISTICS *Statistics);
HBA_STATUS __cdecl HBA_GetFCPStatistics(HBA_HANDLE Handle, const HBA_SCSIID *Lunit, HBA_FC4STATISTICS *Statistics);
HBA_STATUS __cdecl HBA_GetFcpPersistentBinding(HBA_HANDLE Handle, PHBA_FCPBINDING Binding);
HBA_STATUS __cdecl HBA_GetFcpTargetMapping(HBA_HANDLE Handle, PHBA_FCPTARGETMAPPING Mapping);
HBA_STATUS __cdecl HBA_GetFcpTargetMappingV2(HBA_HANDLE HbaHandle, HBA_WWN HbaPortWWN, HBA_FCPTARGETMAPPINGV2 *Mapping);
HBA_STATUS __cdecl HBA_GetPersistentBindingV2(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, PHBA_FCPBINDING2 Binding);
HBA_STATUS __cdecl HBA_GetPortAttributesByWWN(HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_PORTATTRIBUTES *PortAttributes);
HBA_STATUS __cdecl HBA_GetPortStatistics(HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_PORTSTATISTICS *PortStatistics);
HBA_STATUS __cdecl HBA_GetRNIDMgmtInfo(HBA_HANDLE Handle, HBA_MGMTINFO *pInfo);
HBA_STATUS __cdecl HBA_LoadLibrary();
HBA_STATUS __cdecl HBA_OpenAdapterByWWN(HBA_HANDLE *HbaHandle, HBA_WWN Wwn);
HBA_STATUS __cdecl HBA_RegisterForAdapterAddEvents(void (__stdcall *callback)(void *pData, HBA_WWN PortWWN, HBA_UINT32 eventType), void *pUserData, HBA_CALLBACKHANDLE *pCallbackHandle);
HBA_STATUS __cdecl HBA_RegisterForAdapterEvents(void (__stdcall *callback)(void *pData, HBA_WWN PortWWN, HBA_UINT32 eventType), void *pUserData, HBA_HANDLE Handle, HBA_CALLBACKHANDLE *pCallbackHandle);
HBA_STATUS __cdecl HBA_RegisterForAdapterPortEvents(void (__stdcall *callback)(void *pData, HBA_WWN PortWWN, HBA_UINT32 eventType, HBA_UINT32 fabricPortID), void *UserData, HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_CALLBACKHANDLE *pCallbackHandle);
HBA_STATUS __cdecl HBA_RegisterForAdapterPortStatEvents(void (__stdcall *callback)(void *pData, HBA_WWN PortWWN, HBA_UINT32 eventType), void *pUserData, HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_PORTSTATISTICS stats, HBA_UINT32 statType, HBA_CALLBACKHANDLE *pCallbackHandle);
HBA_STATUS __cdecl HBA_RegisterForLinkEvents(void (__stdcall *callback)(void *data, HBA_WWN adapterWWN, HBA_UINT32 eventType, void *pRLIRBuffer, HBA_UINT32 RLIRBufferSize), void *userData, void *pRLIRBuffer, HBA_UINT32 RLIRBufferSize, HBA_HANDLE Handle, HBA_CALLBACKHANDLE *pCallbackHandle);
HBA_STATUS __cdecl HBA_RegisterForTargetEvents(void (__stdcall *callback)(void *pData, HBA_WWN hbaPortWWN, HBA_WWN discoveredPortWWN, HBA_UINT32 eventType), void *pUserData, HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, HBA_CALLBACKHANDLE *pCallbackHandle, HBA_UINT32 AllTargets);
HBA_STATUS __cdecl HBA_RegisterLibrary(PHBA_ENTRYPOINTS entrypoints);
HBA_STATUS __cdecl HBA_RegisterLibraryV2(PHBA_ENTRYPOINTSV2 entrypoints);
HBA_STATUS __cdecl HBA_RemoveAllPersistentBindings(HBA_HANDLE Handle, HBA_WWN HbaPortWWN);
HBA_STATUS __cdecl HBA_RemoveCallback(HBA_CALLBACKHANDLE callbackHandle);
HBA_STATUS __cdecl HBA_RemovePersistentBinding(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, PHBA_FCPBINDING2 Binding);
HBA_STATUS __cdecl HBA_ScsiInquiryV2(HBA_HANDLE HbaHandle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, HBA_UINT64 FcLUN, HBA_UINT8 CDB_Byte1, HBA_UINT8 CDB_Byte2, void *pRespBuffer, HBA_UINT32 *pRespBufferSize, HBA_UINT8 *pScsiStatus, void *pSenseBuffer, HBA_UINT32 *pSenseBufferSize);
HBA_STATUS __cdecl HBA_ScsiReadCapacityV2(HBA_HANDLE HbaHandle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, HBA_UINT64 FcLUN, void *pRespBuffer, HBA_UINT32 *pRespBufferSize, HBA_UINT8 *pScsiStatus, void *pSenseBuffer, HBA_UINT32 *pSenseBufferSize);
HBA_STATUS __cdecl HBA_ScsiReportLUNsV2(HBA_HANDLE Hbahandle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, void *pRespBuffer, HBA_UINT32 *pRespBufferSize, HBA_UINT8 *pScsiStatus, void *pSenseBuffer, HBA_UINT32 *pSenseBufferSize);
HBA_STATUS __cdecl HBA_SendCTPassThru(HBA_HANDLE Handle, void *pReqBuffer, HBA_UINT32 ReqBufferSize, void *pRspBuffer, HBA_UINT32 RspBufferSize);
HBA_STATUS __cdecl HBA_SendCTPassThruV2(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, void *pReqBuffer, HBA_UINT32 ReqBufferSize, void *pRspBuffer, HBA_UINT32 *pRspBufferSize);
HBA_STATUS __cdecl HBA_SendLIRR(HBA_HANDLE Handle, HBA_WWN SourceWWN, HBA_WWN DestWWN, HBA_UINT8 Function, HBA_UINT8 Type, void *pRspBuffer, HBA_UINT32 *pRspBufferSize);
HBA_STATUS __cdecl HBA_SendRLS(HBA_HANDLE HbaHandle, HBA_WWN HbaPortWWN, HBA_WWN DestWWN, void *pRspBuffer, HBA_UINT32 *pRspBufferSize);
HBA_STATUS __cdecl HBA_SendRNID(HBA_HANDLE Handle, HBA_WWN Wwn, HBA_WWNTYPE WnnType, void *pRspBuffer, HBA_UINT32 *RspBufferSize);
HBA_STATUS __cdecl HBA_SendRNIDV2(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DestWWN, HBA_UINT32 DestFCID, HBA_UINT32 NodeIdDataFormat, void *pRspBuffer, HBA_UINT32 *pRspBufferSize);
HBA_STATUS __cdecl HBA_SendRPL(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN Agent_wwn, HBA_UINT32 Agent_domain, HBA_UINT32 PortIndex, void *pRspBuffer, HBA_UINT32 *pRspBufferSize);
HBA_STATUS __cdecl HBA_SendRPS(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN Agent_wwn, HBA_UINT32 Agent_domain, HBA_WWN Object_wwn, HBA_UINT32 Object_port_number, void *pRspBuffer, HBA_UINT32 *pRspBufferSize);
HBA_STATUS __cdecl HBA_SendReadCapacity(HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_UINT64 FcLUN, void *pRspBuffer, HBA_UINT32 RspBufferSize, void *pSenseBuffer, HBA_UINT32 SenseBufferSize);
HBA_STATUS __cdecl HBA_SendReportLUNs(HBA_HANDLE Handle, HBA_WWN PortWWN, void *pRspBuffer, HBA_UINT32 RspBufferSize, void *pSenseBuffer, HBA_UINT32 SenseBufferSize);
HBA_STATUS __cdecl HBA_SendSRL(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN Wwn, HBA_UINT32 Domain, void *pRspBuffer, HBA_UINT32 *pRspBufferSize);
HBA_STATUS __cdecl HBA_SendScsiInquiry(HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_UINT64 FcLUN, HBA_UINT8 EVPD, HBA_UINT32 PageCode, void *pRspBuffer, HBA_UINT32 RspBufferSize, void *pSenseBuffer, HBA_UINT32 SenseBufferSize);
HBA_STATUS __cdecl HBA_SetBindingSupport(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_BIND_CAPABILITY Flags);
HBA_STATUS __cdecl HBA_SetPersistentBindingV2(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, PHBA_FCPBINDING2 Binding);
HBA_STATUS __cdecl HBA_SetRNIDMgmtInfo(HBA_HANDLE Handle, HBA_MGMTINFO *pInfo);
HBA_STATUS __cdecl SMHBA_GetAdapterAttributes(HBA_HANDLE Handle, SMHBA_ADAPTERATTRIBUTES *AdapterAttributes);
HBA_STATUS __cdecl SMHBA_GetAdapterPortAttributes(HBA_HANDLE Handle, HBA_UINT32 PortIndex, SMHBA_PORTATTRIBUTES *PortAttributes);
HBA_STATUS __cdecl SMHBA_GetBindingCapability(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN, SMHBA_BIND_CAPABILITY *Flags);
HBA_STATUS __cdecl SMHBA_GetBindingSupport(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN, SMHBA_BIND_CAPABILITY *Flags);
HBA_STATUS __cdecl SMHBA_GetDiscoveredPortAttributes(HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_UINT32 DiscoveredPortIndex, SMHBA_PORTATTRIBUTES *PortAttributes);
HBA_STATUS __cdecl SMHBA_GetFCPhyAttributes(HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_UINT32 PhyIndex, SMHBA_FC_PHY *PhyType);
HBA_STATUS __cdecl SMHBA_GetLUNStatistics(HBA_HANDLE Handle, const HBA_SCSIID *Lunit, SMHBA_PROTOCOLSTATISTICS *ProtocolStatistics);
HBA_STATUS __cdecl SMHBA_GetNumberOfPorts(HBA_HANDLE Handle, HBA_UINT32 *NumberOfPorts);
HBA_STATUS __cdecl SMHBA_GetPersistentBinding(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN, SMHBA_BINDING *Binding);
HBA_STATUS __cdecl SMHBA_GetPhyStatistics(HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_UINT32 PhyIndex, SMHBA_PHYSTATISTICS *PhyStatistics);
HBA_STATUS __cdecl SMHBA_GetPortAttributesByWWN(HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_WWN DomainPortWWN, SMHBA_PORTATTRIBUTES *PortAttributes);
HBA_STATUS __cdecl SMHBA_GetPortType(HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_PORTTYPE *PortType);
HBA_STATUS __cdecl SMHBA_GetProtocolStatistics(HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_UINT32 ProtocolType, SMHBA_PROTOCOLSTATISTICS *ProtocolStatistics);
HBA_STATUS __cdecl SMHBA_GetSASPhyAttributes(HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_UINT32 PhyIndex, SMHBA_SAS_PHY *PhyType);
HBA_STATUS __cdecl SMHBA_GetTargetMapping(HBA_HANDLE HbaHandle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN, SMHBA_TARGETMAPPING *Mapping);
HBA_STATUS __cdecl SMHBA_RegisterForAdapterAddEvents(void (__stdcall *callback)(void *pData, HBA_WWN PortWWN, HBA_UINT32 eventType), void *pUserData, HBA_CALLBACKHANDLE *pCallbackHandle);
HBA_STATUS __cdecl SMHBA_RegisterForAdapterEvents(void (__stdcall *callback)(void *pData, HBA_WWN PortWWN, HBA_UINT32 eventType), void *pUserData, HBA_HANDLE Handle, HBA_CALLBACKHANDLE *pCallbackHandle);
HBA_STATUS __cdecl SMHBA_RegisterForAdapterPhyStatEvents(void (__stdcall *callback)(void *pData, HBA_WWN PortWWN, HBA_UINT32 PhyIndex, HBA_UINT32 EventType), void *pUserData, HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_UINT32 PhyIndex, SMHBA_PHYSTATISTICS Stats, HBA_UINT32 StatType, HBA_CALLBACKHANDLE *pCallbackHandle);
HBA_STATUS __cdecl SMHBA_RegisterForAdapterPortEvents(void (__stdcall *callback)(void *pData, HBA_WWN PortWWN, HBA_UINT32 eventType, HBA_UINT32 fabricPortID), void *pUserData, HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_UINT32 SpecificEventType, HBA_CALLBACKHANDLE *pCallbackHandle);
HBA_STATUS __cdecl SMHBA_RegisterForAdapterPortStatEvents(void (__stdcall *callback)(void *pData, HBA_WWN PortWWN, HBA_UINT32 ProtocolType, HBA_UINT32 EventType), void *pUserData, HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_UINT32 ProtocolType, SMHBA_PROTOCOLSTATISTICS Stats, HBA_UINT32 StatType, HBA_CALLBACKHANDLE *pCallbackHandle);
HBA_STATUS __cdecl SMHBA_RegisterForTargetEvents(void (__stdcall *callback)(void *pData, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, HBA_WWN DomainPortWWN, HBA_UINT32 EventType), void *pUserData, HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, HBA_WWN DomainPortWWN, HBA_CALLBACKHANDLE *pCallbackHandle, HBA_UINT32 AllTargets);
HBA_STATUS __cdecl SMHBA_RegisterLibrary(PSMHBA_ENTRYPOINTS entrypoints);
HBA_STATUS __cdecl SMHBA_RemoveAllPersistentBindings(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN);
HBA_STATUS __cdecl SMHBA_RemovePersistentBinding(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN, const SMHBA_BINDING *Binding);
HBA_STATUS __cdecl SMHBA_ScsiInquiry(HBA_HANDLE HbaHandle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, HBA_WWN DomainPortWWN, HBA_SCSILUN SmhbaLUN, HBA_UINT8 CDB_Byte1, HBA_UINT8 CDB_Byte2, void *pRespBuffer, HBA_UINT32 *pRespBufferSize, HBA_UINT8 *pScsiStatus, void *pSenseBuffer, HBA_UINT32 *pSenseBufferSize);
HBA_STATUS __cdecl SMHBA_ScsiReadCapacity(HBA_HANDLE HbaHandle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, HBA_WWN DomainPortWWN, HBA_SCSILUN SmhbaLUN, void *pRespBuffer, HBA_UINT32 *pRespBufferSize, HBA_UINT8 *pScsiStatus, void *pSenseBuffer, HBA_UINT32 *pSenseBufferSize);
HBA_STATUS __cdecl SMHBA_ScsiReportLuns(HBA_HANDLE Hbahandle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, HBA_WWN DomainPortWWN, void *pRespBuffer, HBA_UINT32 *pRespBufferSize, HBA_UINT8 *pScsiStatus, void *pSenseBuffer, HBA_UINT32 *pSenseBufferSize);
HBA_STATUS __cdecl SMHBA_SendECHO(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DestWWN, HBA_UINT32 DestFCID, void *ReqBuffer, HBA_UINT32 ReqBufferSize, void *RspBuffer, HBA_UINT32 *RspBufferSize);
HBA_STATUS __cdecl SMHBA_SendSMPPassThru(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DestPortWWN, HBA_WWN DomainPortWWN, void *ReqBuffer, HBA_UINT32 ReqBufferSize, void *RspBuffer, HBA_UINT32 *RspBufferSize);
HBA_STATUS __cdecl SMHBA_SendTEST(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DestWWN, HBA_UINT32 DestFCID, void *ReqBuffer, HBA_UINT32 ReqBufferSize);
HBA_STATUS __cdecl SMHBA_SetBindingSupport(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN, SMHBA_BIND_CAPABILITY Flags);
HBA_STATUS __cdecl SMHBA_SetPersistentBinding(HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN, SMHBA_BINDING *Binding);
HBA_UINT32 __cdecl HBA_GetNumberOfAdapters();
HBA_UINT32 __cdecl HBA_GetVendorLibraryAttributes(HBA_UINT32 AdapterIndex, HBA_LIBRARYATTRIBUTES *Attributes);
HBA_UINT32 __cdecl HBA_GetVersion();
HBA_UINT32 __cdecl HBA_GetWrapperLibraryAttributes(HBA_LIBRARYATTRIBUTES *Attributes);
HBA_UINT32 __cdecl SMHBA_GetVendorLibraryAttributes(HBA_UINT32 AdapterIndex, SMHBA_LIBRARYATTRIBUTES *Attributes);
HBA_UINT32 __cdecl SMHBA_GetVersion();
HBA_UINT32 __cdecl SMHBA_GetWrapperLibraryAttributes(SMHBA_LIBRARYATTRIBUTES *Attributes);
HRESULT StringCbPrintfA(STRSAFE_LPSTR pszDest, size_t cbDest, STRSAFE_LPCSTR pszFormat, ...);
HRESULT StringCbPrintfExA(STRSAFE_LPSTR pszDest, size_t cbDest, STRSAFE_LPSTR *ppszDestEnd, size_t *pcbRemaining, DWORD dwFlags, STRSAFE_LPCSTR pszFormat, ...);
HRESULT StringCbPrintfExW(STRSAFE_LPWSTR pszDest, size_t cbDest, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcbRemaining, DWORD dwFlags, STRSAFE_LPCWSTR pszFormat, ...);
HRESULT StringCbPrintfW(STRSAFE_LPWSTR pszDest, size_t cbDest, STRSAFE_LPCWSTR pszFormat, ...);
HRESULT StringCchPrintfA(STRSAFE_LPSTR pszDest, size_t cchDest, STRSAFE_LPCSTR pszFormat, ...);
HRESULT StringCchPrintfExA(STRSAFE_LPSTR pszDest, size_t cchDest, STRSAFE_LPSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags, STRSAFE_LPCSTR pszFormat, ...);
HRESULT StringCchPrintfExW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags, STRSAFE_LPCWSTR pszFormat, ...);
HRESULT StringCchPrintfW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszFormat, ...);
HRESULT __stdcall ByteToChar(BYTE bOperand, CHAR *pch);
HRESULT __stdcall ByteToInt8(BYTE bOperand, INT8 *pi8Result);
HRESULT __stdcall HRESULT_FROM_WIN32(unsigned int x);
HRESULT __stdcall Int8ToUChar(INT8 i8Operand, UCHAR *pch);
HRESULT __stdcall Int8ToUInt(INT8 i8Operand, UINT *puResult);
HRESULT __stdcall Int8ToUInt8(INT8 i8Operand, UINT8 *pu8Result);
HRESULT __stdcall Int8ToUIntPtr(INT8 i8Operand, UINT_PTR *puResult);
HRESULT __stdcall Int8ToULong(INT8 i8Operand, ULONG *pulResult);
HRESULT __stdcall Int8ToULongLong(INT8 i8Operand, ULONGLONG *pullResult);
HRESULT __stdcall Int8ToULongPtr(INT8 i8Operand, ULONG_PTR *pulResult);
HRESULT __stdcall Int8ToUShort(INT8 i8Operand, USHORT *pusResult);
HRESULT __stdcall IntPtrToChar(INT_PTR iOperand, CHAR *pch);
HRESULT __stdcall IntPtrToInt8(INT_PTR iOperand, INT8 *pi8Result);
HRESULT __stdcall IntPtrToLongPtr(INT_PTR iOperand, LONG_PTR *plResult);
HRESULT __stdcall IntPtrToShort(INT_PTR iOperand, SHORT *psResult);
HRESULT __stdcall IntPtrToUChar(INT_PTR iOperand, UCHAR *pch);
HRESULT __stdcall IntPtrToUInt8(INT_PTR iOperand, UINT8 *pui8Result);
HRESULT __stdcall IntPtrToUShort(INT_PTR iOperand, USHORT *pusResult);
HRESULT __stdcall IntToChar(INT iOperand, CHAR *pch);
HRESULT __stdcall IntToInt8(INT iOperand, INT8 *pi8Result);
HRESULT __stdcall IntToShort(INT iOperand, SHORT *psResult);
HRESULT __stdcall IntToUChar(INT iOperand, UCHAR *pch);
HRESULT __stdcall IntToUInt(INT iOperand, UINT *puResult);
HRESULT __stdcall IntToUInt8(INT iOperand, UINT8 *pui8Result);
HRESULT __stdcall IntToULong(INT iOperand, ULONG *pulResult);
HRESULT __stdcall IntToULongLong(INT iOperand, ULONGLONG *pullResult);
HRESULT __stdcall IntToUShort(INT iOperand, USHORT *pusResult);
HRESULT __stdcall LongLongToChar(LONGLONG llOperand, CHAR *pch);
HRESULT __stdcall LongLongToInt(LONGLONG llOperand, INT *piResult);
HRESULT __stdcall LongLongToInt8(LONGLONG llOperand, INT8 *pi8Result);
HRESULT __stdcall LongLongToIntPtr(LONGLONG llOperand, INT_PTR *piResult);
HRESULT __stdcall LongLongToLong(LONGLONG llOperand, LONG *plResult);
HRESULT __stdcall LongLongToLongPtr(LONGLONG llOperand, LONG_PTR *plResult);
HRESULT __stdcall LongLongToShort(LONGLONG llOperand, SHORT *psResult);
HRESULT __stdcall LongLongToUChar(LONGLONG llOperand, UCHAR *pch);
HRESULT __stdcall LongLongToUInt(LONGLONG llOperand, UINT *puResult);
HRESULT __stdcall LongLongToUInt8(LONGLONG llOperand, UINT8 *pu8Result);
HRESULT __stdcall LongLongToULong(LONGLONG llOperand, ULONG *pulResult);
HRESULT __stdcall LongLongToULongLong(LONGLONG llOperand, ULONGLONG *pullResult);
HRESULT __stdcall LongLongToUShort(LONGLONG llOperand, USHORT *pusResult);
HRESULT __stdcall LongPtrToChar(LONG_PTR lOperand, CHAR *pch);
HRESULT __stdcall LongPtrToInt8(LONG_PTR lOperand, INT8 *pi8Result);
HRESULT __stdcall LongPtrToIntPtr(LONG_PTR lOperand, INT_PTR *piResult);
HRESULT __stdcall LongPtrToShort(LONG_PTR lOperand, SHORT *psResult);
HRESULT __stdcall LongPtrToUChar(LONG_PTR lOperand, UCHAR *pch);
HRESULT __stdcall LongPtrToUInt8(LONG_PTR lOperand, UINT8 *pui8Result);
HRESULT __stdcall LongPtrToUIntPtr(LONG_PTR lOperand, UINT_PTR *puResult);
HRESULT __stdcall LongPtrToULongLong(LONG_PTR lOperand, ULONGLONG *pullResult);
HRESULT __stdcall LongPtrToULongPtr(LONG_PTR lOperand, ULONG_PTR *pulResult);
HRESULT __stdcall LongPtrToUShort(LONG_PTR lOperand, USHORT *pusResult);
HRESULT __stdcall LongToChar(LONG lOperand, CHAR *pch);
HRESULT __stdcall LongToInt(LONG lOperand, INT *piResult);
HRESULT __stdcall LongToInt8(LONG lOperand, INT8 *pi8Result);
HRESULT __stdcall LongToIntPtr(LONG lOperand, INT_PTR *piResult);
HRESULT __stdcall LongToShort(LONG lOperand, SHORT *psResult);
HRESULT __stdcall LongToUChar(LONG lOperand, UCHAR *pch);
HRESULT __stdcall LongToUInt(LONG lOperand, UINT *puResult);
HRESULT __stdcall LongToUInt8(LONG lOperand, UINT8 *pui8Result);
HRESULT __stdcall LongToUIntPtr(LONG lOperand, UINT_PTR *puResult);
HRESULT __stdcall LongToULong(LONG lOperand, ULONG *pulResult);
HRESULT __stdcall LongToULongLong(LONG lOperand, ULONGLONG *pullResult);
HRESULT __stdcall LongToULongPtr(LONG lOperand, ULONG_PTR *pulResult);
HRESULT __stdcall LongToUShort(LONG lOperand, USHORT *pusResult);
HRESULT __stdcall NdrGetDcomProtocolVersion(PMIDL_STUB_MESSAGE pStubMsg, RPC_VERSION *pVersion);
HRESULT __stdcall ShortToChar(SHORT sOperand, CHAR *pch);
HRESULT __stdcall ShortToDWordPtr(SHORT sOperand, DWORD_PTR *pdwResult);
HRESULT __stdcall ShortToInt8(SHORT sOperand, INT8 *pi8Result);
HRESULT __stdcall ShortToUChar(SHORT sOperand, UCHAR *pch);
HRESULT __stdcall ShortToUInt(SHORT sOperand, UINT *puResult);
HRESULT __stdcall ShortToUInt8(SHORT sOperand, UINT8 *pui8Result);
HRESULT __stdcall ShortToUIntPtr(SHORT sOperand, UINT_PTR *puResult);
HRESULT __stdcall ShortToULong(SHORT sOperand, ULONG *pulResult);
HRESULT __stdcall ShortToULongLong(SHORT sOperand, ULONGLONG *pullResult);
HRESULT __stdcall ShortToULongPtr(SHORT sOperand, ULONG_PTR *pulResult);
HRESULT __stdcall ShortToUShort(SHORT sOperand, USHORT *pusResult);
HRESULT __stdcall SizeTAdd(size_t Augend, size_t Addend, size_t *pResult);
HRESULT __stdcall SizeTSub(size_t Minuend, size_t Subtrahend, size_t *pResult);
HRESULT __stdcall StringCbCatA(STRSAFE_LPSTR pszDest, size_t cbDest, STRSAFE_LPCSTR pszSrc);
HRESULT __stdcall StringCbCatExA(STRSAFE_LPSTR pszDest, size_t cbDest, STRSAFE_LPCSTR pszSrc, STRSAFE_LPSTR *ppszDestEnd, size_t *pcbRemaining, DWORD dwFlags);
HRESULT __stdcall StringCbCatExW(STRSAFE_LPWSTR pszDest, size_t cbDest, STRSAFE_LPCWSTR pszSrc, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcbRemaining, DWORD dwFlags);
HRESULT __stdcall StringCbCatNA(STRSAFE_LPSTR pszDest, size_t cbDest, STRSAFE_PCNZCH pszSrc, size_t cbToAppend);
HRESULT __stdcall StringCbCatNExA(STRSAFE_LPSTR pszDest, size_t cbDest, STRSAFE_PCNZCH pszSrc, size_t cbToAppend, STRSAFE_LPSTR *ppszDestEnd, size_t *pcbRemaining, DWORD dwFlags);
HRESULT __stdcall StringCbCatNExW(STRSAFE_LPWSTR pszDest, size_t cbDest, STRSAFE_PCNZWCH pszSrc, size_t cbToAppend, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcbRemaining, DWORD dwFlags);
HRESULT __stdcall StringCbCatNW(STRSAFE_LPWSTR pszDest, size_t cbDest, STRSAFE_PCNZWCH pszSrc, size_t cbToAppend);
HRESULT __stdcall StringCbCatW(STRSAFE_LPWSTR pszDest, size_t cbDest, STRSAFE_LPCWSTR pszSrc);
HRESULT __stdcall StringCbCopyA(STRSAFE_LPSTR pszDest, size_t cbDest, STRSAFE_LPCSTR pszSrc);
HRESULT __stdcall StringCbCopyExA(STRSAFE_LPSTR pszDest, size_t cbDest, STRSAFE_LPCSTR pszSrc, STRSAFE_LPSTR *ppszDestEnd, size_t *pcbRemaining, DWORD dwFlags);
HRESULT __stdcall StringCbCopyExW(STRSAFE_LPWSTR pszDest, size_t cbDest, STRSAFE_LPCWSTR pszSrc, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcbRemaining, DWORD dwFlags);
HRESULT __stdcall StringCbCopyNA(STRSAFE_LPSTR pszDest, size_t cbDest, STRSAFE_PCNZCH pszSrc, size_t cbToCopy);
HRESULT __stdcall StringCbCopyNExA(STRSAFE_LPSTR pszDest, size_t cbDest, STRSAFE_PCNZCH pszSrc, size_t cbToCopy, STRSAFE_LPSTR *ppszDestEnd, size_t *pcbRemaining, DWORD dwFlags);
HRESULT __stdcall StringCbCopyNExW(STRSAFE_LPWSTR pszDest, size_t cbDest, STRSAFE_PCNZWCH pszSrc, size_t cbToCopy, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcbRemaining, DWORD dwFlags);
HRESULT __stdcall StringCbCopyNW(STRSAFE_LPWSTR pszDest, size_t cbDest, STRSAFE_PCNZWCH pszSrc, size_t cbToCopy);
HRESULT __stdcall StringCbCopyW(STRSAFE_LPWSTR pszDest, size_t cbDest, STRSAFE_LPCWSTR pszSrc);
HRESULT __stdcall StringCbGetsA(STRSAFE_LPSTR pszDest, size_t cbDest);
HRESULT __stdcall StringCbGetsExA(STRSAFE_LPSTR pszDest, size_t cbDest, STRSAFE_LPSTR *ppszDestEnd, size_t *pcbRemaining, DWORD dwFlags);
HRESULT __stdcall StringCbGetsExW(STRSAFE_LPWSTR pszDest, size_t cbDest, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcbRemaining, DWORD dwFlags);
HRESULT __stdcall StringCbGetsW(STRSAFE_LPWSTR pszDest, size_t cbDest);
HRESULT __stdcall StringCbLengthA(STRSAFE_PCNZCH psz, size_t cbMax, size_t *pcbLength);
HRESULT __stdcall StringCbLengthW(STRSAFE_PCNZWCH psz, size_t cbMax, size_t *pcbLength);
HRESULT __stdcall StringCbVPrintfA(STRSAFE_LPSTR pszDest, size_t cbDest, STRSAFE_LPCSTR pszFormat, va_list argList);
HRESULT __stdcall StringCbVPrintfExA(STRSAFE_LPSTR pszDest, size_t cbDest, STRSAFE_LPSTR *ppszDestEnd, size_t *pcbRemaining, DWORD dwFlags, STRSAFE_LPCSTR pszFormat, va_list argList);
HRESULT __stdcall StringCbVPrintfExW(STRSAFE_LPWSTR pszDest, size_t cbDest, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcbRemaining, DWORD dwFlags, STRSAFE_LPCWSTR pszFormat, va_list argList);
HRESULT __stdcall StringCbVPrintfW(STRSAFE_LPWSTR pszDest, size_t cbDest, STRSAFE_LPCWSTR pszFormat, va_list argList);
HRESULT __stdcall StringCchCatA(STRSAFE_LPSTR pszDest, size_t cchDest, STRSAFE_LPCSTR pszSrc);
HRESULT __stdcall StringCchCatExA(STRSAFE_LPSTR pszDest, size_t cchDest, STRSAFE_LPCSTR pszSrc, STRSAFE_LPSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags);
HRESULT __stdcall StringCchCatExW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszSrc, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags);
HRESULT __stdcall StringCchCatNA(STRSAFE_LPSTR pszDest, size_t cchDest, STRSAFE_PCNZCH pszSrc, size_t cchToAppend);
HRESULT __stdcall StringCchCatNExA(STRSAFE_LPSTR pszDest, size_t cchDest, STRSAFE_PCNZCH pszSrc, size_t cchToAppend, STRSAFE_LPSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags);
HRESULT __stdcall StringCchCatNExW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_PCNZWCH pszSrc, size_t cchToAppend, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags);
HRESULT __stdcall StringCchCatNW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_PCNZWCH pszSrc, size_t cchToAppend);
HRESULT __stdcall StringCchCatW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszSrc);
HRESULT __stdcall StringCchCopyA(STRSAFE_LPSTR pszDest, size_t cchDest, STRSAFE_LPCSTR pszSrc);
HRESULT __stdcall StringCchCopyExA(STRSAFE_LPSTR pszDest, size_t cchDest, STRSAFE_LPCSTR pszSrc, STRSAFE_LPSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags);
HRESULT __stdcall StringCchCopyExW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszSrc, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags);
HRESULT __stdcall StringCchCopyNA(STRSAFE_LPSTR pszDest, size_t cchDest, STRSAFE_PCNZCH pszSrc, size_t cchToCopy);
HRESULT __stdcall StringCchCopyNExA(STRSAFE_LPSTR pszDest, size_t cchDest, STRSAFE_PCNZCH pszSrc, size_t cchToCopy, STRSAFE_LPSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags);
HRESULT __stdcall StringCchCopyNExW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_PCNZWCH pszSrc, size_t cchToCopy, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags);
HRESULT __stdcall StringCchCopyNW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_PCNZWCH pszSrc, size_t cchToCopy);
HRESULT __stdcall StringCchCopyW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszSrc);
HRESULT __stdcall StringCchGetsA(STRSAFE_LPSTR pszDest, size_t cchDest);
HRESULT __stdcall StringCchGetsExA(STRSAFE_LPSTR pszDest, size_t cchDest, STRSAFE_LPSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags);
HRESULT __stdcall StringCchGetsExW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags);
HRESULT __stdcall StringCchGetsW(STRSAFE_LPWSTR pszDest, size_t cchDest);
HRESULT __stdcall StringCchLengthA(STRSAFE_PCNZCH psz, size_t cchMax, size_t *pcchLength);
HRESULT __stdcall StringCchLengthW(STRSAFE_PCNZWCH psz, size_t cchMax, size_t *pcchLength);
HRESULT __stdcall StringCchVPrintfA(STRSAFE_LPSTR pszDest, size_t cchDest, STRSAFE_LPCSTR pszFormat, va_list argList);
HRESULT __stdcall StringCchVPrintfExA(STRSAFE_LPSTR pszDest, size_t cchDest, STRSAFE_LPSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags, STRSAFE_LPCSTR pszFormat, va_list argList);
HRESULT __stdcall StringCchVPrintfExW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags, STRSAFE_LPCWSTR pszFormat, va_list argList);
HRESULT __stdcall StringCchVPrintfW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszFormat, va_list argList);
HRESULT __stdcall StringGetsWorkerA(STRSAFE_LPSTR pszDest, size_t cchDest, size_t *pcchNewDestLength);
HRESULT __stdcall StringGetsWorkerW(STRSAFE_LPWSTR pszDest, size_t cchDest, size_t *pcchNewDestLength);
HRESULT __stdcall UInt8Add(UINT8 u8Augend, UINT8 u8Addend, UINT8 *pu8Result);
HRESULT __stdcall UInt8Mult(UINT8 u8Multiplicand, UINT8 u8Multiplier, UINT8 *pu8Result);
HRESULT __stdcall UInt8Sub(UINT8 u8Minuend, UINT8 u8Subtrahend, UINT8 *pu8Result);
HRESULT __stdcall UInt8ToChar(UINT8 u8Operand, CHAR *pch);
HRESULT __stdcall UInt8ToInt8(UINT8 u8Operand, INT8 *pi8Result);
HRESULT __stdcall UIntAdd(UINT uAugend, UINT uAddend, UINT *puResult);
HRESULT __stdcall UIntMult(UINT uMultiplicand, UINT uMultiplier, UINT *puResult);
HRESULT __stdcall UIntPtrToChar(UINT_PTR uOperand, CHAR *pch);
HRESULT __stdcall UIntPtrToInt(UINT_PTR uOperand, INT *piResult);
HRESULT __stdcall UIntPtrToInt16(UINT_PTR uOperand, INT16 *pi16Result);
HRESULT __stdcall UIntPtrToInt8(UINT_PTR uOperand, INT8 *pi8Result);
HRESULT __stdcall UIntPtrToIntPtr(UINT_PTR uOperand, INT_PTR *piResult);
HRESULT __stdcall UIntPtrToLong(UINT_PTR uOperand, LONG *plResult);
HRESULT __stdcall UIntPtrToLongPtr(UINT_PTR uOperand, LONG_PTR *plResult);
HRESULT __stdcall UIntPtrToShort(UINT_PTR uOperand, SHORT *psResult);
HRESULT __stdcall UIntPtrToUChar(UINT_PTR uOperand, UCHAR *pch);
HRESULT __stdcall UIntPtrToUInt16(UINT_PTR uOperand, UINT16 *pu16Result);
HRESULT __stdcall UIntPtrToUInt8(UINT_PTR uOperand, UINT8 *pu8Result);
HRESULT __stdcall UIntPtrToUShort(UINT_PTR uOperand, USHORT *pusResult);
HRESULT __stdcall UIntSub(UINT uMinuend, UINT uSubtrahend, UINT *puResult);
HRESULT __stdcall UIntToChar(UINT uOperand, CHAR *pch);
HRESULT __stdcall UIntToInt(UINT uOperand, INT *piResult);
HRESULT __stdcall UIntToInt8(UINT uOperand, INT8 *pi8Result);
HRESULT __stdcall UIntToIntPtr(UINT uOperand, INT_PTR *piResult);
HRESULT __stdcall UIntToLong(UINT uOperand, LONG *plResult);
HRESULT __stdcall UIntToLongPtr(UINT uOperand, LONG_PTR *plResult);
HRESULT __stdcall UIntToShort(UINT uOperand, SHORT *psResult);
HRESULT __stdcall UIntToUChar(UINT uOperand, UCHAR *pch);
HRESULT __stdcall UIntToUInt8(UINT uOperand, UINT8 *pui8Result);
HRESULT __stdcall UIntToUShort(UINT uOperand, USHORT *pusResult);
HRESULT __stdcall ULongAdd(ULONG ulAugend, ULONG ulAddend, ULONG *pulResult);
HRESULT __stdcall ULongLongAdd(ULONGLONG ullAugend, ULONGLONG ullAddend, ULONGLONG *pullResult);
HRESULT __stdcall ULongLongMult(ULONGLONG ullMultiplicand, ULONGLONG ullMultiplier, ULONGLONG *pullResult);
HRESULT __stdcall ULongLongSub(ULONGLONG ullMinuend, ULONGLONG ullSubtrahend, ULONGLONG *pullResult);
HRESULT __stdcall ULongLongToChar(ULONGLONG ullOperand, CHAR *pch);
HRESULT __stdcall ULongLongToInt(ULONGLONG ullOperand, INT *piResult);
HRESULT __stdcall ULongLongToInt8(ULONGLONG ullOperand, INT8 *pi8Result);
HRESULT __stdcall ULongLongToLong(ULONGLONG ullOperand, LONG *plResult);
HRESULT __stdcall ULongLongToLongLong(ULONGLONG ullOperand, LONGLONG *pllResult);
HRESULT __stdcall ULongLongToLongPtr(ULONGLONG ullOperand, LONG_PTR *plResult);
HRESULT __stdcall ULongLongToShort(ULONGLONG ullOperand, SHORT *psResult);
HRESULT __stdcall ULongLongToUChar(ULONGLONG ullOperand, UCHAR *pch);
HRESULT __stdcall ULongLongToUInt(ULONGLONG ullOperand, UINT *puResult);
HRESULT __stdcall ULongLongToUInt8(ULONGLONG ullOperand, UINT8 *pu8Result);
HRESULT __stdcall ULongLongToUIntPtr(ULONGLONG ullOperand, UINT_PTR *puResult);
HRESULT __stdcall ULongLongToULong(ULONGLONG ullOperand, ULONG *pulResult);
HRESULT __stdcall ULongLongToULongPtr(ULONGLONG ullOperand, ULONG_PTR *pulResult);
HRESULT __stdcall ULongLongToUShort(ULONGLONG ullOperand, USHORT *pusResult);
HRESULT __stdcall ULongMult(ULONG ulMultiplicand, ULONG ulMultiplier, ULONG *pulResult);
HRESULT __stdcall ULongPtrToChar(ULONG_PTR ulOperand, CHAR *pch);
HRESULT __stdcall ULongPtrToInt(ULONG_PTR ulOperand, INT *piResult);
HRESULT __stdcall ULongPtrToInt8(ULONG_PTR ulOperand, INT8 *pi8Result);
HRESULT __stdcall ULongPtrToIntPtr(ULONG_PTR ulOperand, INT_PTR *piResult);
HRESULT __stdcall ULongPtrToLong(ULONG_PTR ulOperand, LONG *plResult);
HRESULT __stdcall ULongPtrToLongPtr(ULONG_PTR ulOperand, LONG_PTR *plResult);
HRESULT __stdcall ULongPtrToShort(ULONG_PTR ulOperand, SHORT *psResult);
HRESULT __stdcall ULongPtrToUChar(ULONG_PTR ulOperand, UCHAR *pch);
HRESULT __stdcall ULongPtrToUInt8(ULONG_PTR ulOperand, UINT8 *pui8Result);
HRESULT __stdcall ULongPtrToUIntPtr(ULONG_PTR ulOperand, UINT_PTR *puResult);
HRESULT __stdcall ULongPtrToUShort(ULONG_PTR ulOperand, USHORT *pusResult);
HRESULT __stdcall ULongSub(ULONG ulMinuend, ULONG ulSubtrahend, ULONG *pulResult);
HRESULT __stdcall ULongToChar(ULONG ulOperand, CHAR *pch);
HRESULT __stdcall ULongToInt(ULONG ulOperand, INT *piResult);
HRESULT __stdcall ULongToInt8(ULONG ulOperand, INT8 *pi8Result);
HRESULT __stdcall ULongToIntPtr(ULONG ulOperand, INT_PTR *piResult);
HRESULT __stdcall ULongToLong(ULONG ulOperand, LONG *plResult);
HRESULT __stdcall ULongToLongPtr(ULONG ulOperand, LONG_PTR *plResult);
HRESULT __stdcall ULongToShort(ULONG ulOperand, SHORT *psResult);
HRESULT __stdcall ULongToUChar(ULONG ulOperand, UCHAR *pch);
HRESULT __stdcall ULongToUInt(ULONG ulOperand, UINT *puResult);
HRESULT __stdcall ULongToUInt8(ULONG ulOperand, UINT8 *pui8Result);
HRESULT __stdcall ULongToUIntPtr(ULONG ulOperand, UINT_PTR *puiResult);
HRESULT __stdcall ULongToUShort(ULONG ulOperand, USHORT *pusResult);
HRESULT __stdcall UShortAdd(USHORT usAugend, USHORT usAddend, USHORT *pusResult);
HRESULT __stdcall UShortMult(USHORT usMultiplicand, USHORT usMultiplier, USHORT *pusResult);
HRESULT __stdcall UShortSub(USHORT usMinuend, USHORT usSubtrahend, USHORT *pusResult);
HRESULT __stdcall UShortToChar(USHORT usOperand, CHAR *pch);
HRESULT __stdcall UShortToInt8(USHORT usOperand, INT8 *pi8Result);
HRESULT __stdcall UShortToShort(USHORT usOperand, SHORT *psResult);
HRESULT __stdcall UShortToUChar(USHORT usOperand, UCHAR *pch);
HRESULT __stdcall UShortToUInt8(USHORT usOperand, UINT8 *pui8Result);
HRESULT __stdcall UnalignedStringCbLengthW(STRSAFE_PCUNZWCH psz, size_t cbMax, size_t *pcbLength);
HRESULT __stdcall UnalignedStringCchLengthW(STRSAFE_PCUNZWCH psz, size_t cchMax, size_t *pcchLength);
IDE_PHYSICAL_ADDRESS __stdcall AtaPortConvertUlongToPhysicalAddress(ULONG_PTR UlongAddress);
IDE_PHYSICAL_ADDRESS __stdcall AtaPortGetPhysicalAddress(PVOID ChannelExtension, PIDE_REQUEST_BLOCK Irb, PVOID VirtualAddress, ULONG *Length);
IO_COMPLETION_ROUTINE ClassAsynchronousCompletion;
IO_COMPLETION_ROUTINE ClassIoComplete;
IO_COMPLETION_ROUTINE ClassIoCompleteAssociated;
IO_COMPLETION_ROUTINE ClassSignalCompletion;
IO_PAGING_PRIORITY __stdcall IoGetPagingIoPriority(PIRP Irp);
IO_PRIORITY_HINT __stdcall FltGetIoPriorityHint(PFLT_CALLBACK_DATA Data);
IO_PRIORITY_HINT __stdcall FltGetIoPriorityHintFromCallbackData(PFLT_CALLBACK_DATA Data);
IO_PRIORITY_HINT __stdcall FltGetIoPriorityHintFromFileObject(PFILE_OBJECT FileObject);
IO_PRIORITY_HINT __stdcall FltGetIoPriorityHintFromThread(PETHREAD Thread);
IO_PRIORITY_HINT __stdcall IoGetIoPriorityHint(PIRP Irp);
KAFFINITY KeQueryActiveProcessors(void);
KAFFINITY __stdcall KeQueryGroupAffinity(USHORT GroupNumber);
KAFFINITY __stdcall KeSetSystemAffinityThreadEx(KAFFINITY Affinity);
KAFFINITY __stdcall NdisGroupActiveProcessorMask(USHORT Group);
KAFFINITY __stdcall NdisMQueueDpcEx(NDIS_HANDLE NdisInterruptHandle, ULONG MessageId, PGROUP_AFFINITY TargetProcessors, PVOID MiniportDpcContext);
KAFFINITY __stdcall WdmlibKeQueryGroupAffinity(USHORT GroupNumber);
KAFFINITY __stdcall WdmlibKeSetSystemAffinityThreadEx(KAFFINITY Affinity);
KBUGCHECK_REASON_CALLBACK_ROUTINE BugCheckSecondaryMultiPartDumpDataCallback;
KIRQL KeGetCurrentIrql(void);
KIRQL KeRaiseIrqlToDpcLevel(void);
KIRQL KeRaiseIrqlToSynchLevel(void);
KIRQL __stdcall ExAcquireSpinLockExclusive(PEX_SPIN_LOCK SpinLock);
KIRQL __stdcall ExAcquireSpinLockShared(PEX_SPIN_LOCK SpinLock);
KIRQL __stdcall KeAcquireInterruptSpinLock(PKINTERRUPT Interrupt);
KIRQL __stdcall KeAcquireQueuedSpinLock(KSPIN_LOCK_QUEUE_NUMBER Number);
KIRQL __stdcall KeAcquireSpinLockForDpc(PKSPIN_LOCK SpinLock);
KIRQL __stdcall KeAcquireSpinLockRaiseToDpc(PKSPIN_LOCK SpinLock);
KIRQL __stdcall KeAcquireSpinLockRaiseToSynch(PKSPIN_LOCK SpinLock);
KIRQL __stdcall KfRaiseIrql(KIRQL NewIrql);
KPRIORITY __stdcall KeQueryPriorityThread(PKTHREAD Thread);
KPRIORITY __stdcall KeSetPriorityThread(PKTHREAD Thread, KPRIORITY Priority);
KPROCESSOR_MODE ExGetPreviousMode(void);
KPROCESSOR_MODE __stdcall WdfRequestGetRequestorMode(WDFREQUEST Request);
KSOBJECTTYPE __stdcall KsGetObjectTypeFromFileObject(PFILE_OBJECT FileObject);
KSOBJECTTYPE __stdcall KsGetObjectTypeFromIrp(PIRP Irp);
KSSTATE __stdcall KsGetDefaultClockState(PKSDEFAULTCLOCK DefaultClock);
LARGE_INTEGER PsGetProcessExitTime(void);
LARGE_INTEGER __stdcall CcGetDirtyPages(PVOID LogHandle, PDIRTY_PAGE_ROUTINE DirtyPageRoutine, PVOID Context1, PVOID Context2);
LARGE_INTEGER __stdcall CcGetFlushedValidData(PSECTION_OBJECT_POINTERS SectionObjectPointer, BOOLEAN BcbListHeld);
LARGE_INTEGER __stdcall ExInterlockedAddLargeInteger(PLARGE_INTEGER Addend, LARGE_INTEGER Increment, PKSPIN_LOCK Lock);
LARGE_INTEGER __stdcall KeQueryPerformanceCounter(PLARGE_INTEGER PerformanceFrequency);
LARGE_INTEGER __stdcall RtlConvertLongToLargeInteger(LONG SignedInteger);
LARGE_INTEGER __stdcall RtlConvertUlongToLargeInteger(ULONG UnsignedInteger);
LARGE_INTEGER __stdcall RtlEnlargedIntegerMultiply(LONG Multiplicand, LONG Multiplier);
LARGE_INTEGER __stdcall RtlEnlargedUnsignedMultiply(ULONG Multiplicand, ULONG Multiplier);
LARGE_INTEGER __stdcall RtlExtendedIntegerMultiply(LARGE_INTEGER Multiplicand, LONG Multiplier);
LARGE_INTEGER __stdcall RtlExtendedLargeIntegerDivide(LARGE_INTEGER Dividend, ULONG Divisor, PULONG Remainder);
LARGE_INTEGER __stdcall RtlExtendedMagicDivide(LARGE_INTEGER Dividend, LARGE_INTEGER MagicDivisor, CCHAR ShiftCount);
LARGE_INTEGER __stdcall RtlLargeIntegerAdd(LARGE_INTEGER Addend1, LARGE_INTEGER Addend2);
LARGE_INTEGER __stdcall RtlLargeIntegerArithmeticShift(LARGE_INTEGER LargeInteger, CCHAR ShiftCount);
LARGE_INTEGER __stdcall RtlLargeIntegerDivide(LARGE_INTEGER Dividend, LARGE_INTEGER Divisor, PLARGE_INTEGER Remainder);
LARGE_INTEGER __stdcall RtlLargeIntegerNegate(LARGE_INTEGER Subtrahend);
LARGE_INTEGER __stdcall RtlLargeIntegerShiftLeft(LARGE_INTEGER LargeInteger, CCHAR ShiftCount);
LARGE_INTEGER __stdcall RtlLargeIntegerShiftRight(LARGE_INTEGER LargeInteger, CCHAR ShiftCount);
LARGE_INTEGER __stdcall RtlLargeIntegerSubtract(LARGE_INTEGER Minuend, LARGE_INTEGER Subtrahend);
LARGE_INTEGER __stdcall TapeClassLiDiv(LARGE_INTEGER Dividend, LARGE_INTEGER Divisor);
LARGE_INTEGER __stdcall WdfCommonBufferGetAlignedLogicalAddress(WDFCOMMONBUFFER CommonBuffer);
LOGICAL KeIsExecutingDpc(void);
LOGICAL KeShouldYieldProcessor(void);
LOGICAL __stdcall ExTryAcquireSpinLockExclusiveAtDpcLevel(PEX_SPIN_LOCK SpinLock);
LOGICAL __stdcall ExTryAcquireSpinLockSharedAtDpcLevel(PEX_SPIN_LOCK SpinLock);
LOGICAL __stdcall ExTryConvertSharedSpinLockExclusive(PEX_SPIN_LOCK SpinLock);
LOGICAL __stdcall FsRtlIsPagingFile(PFILE_OBJECT FileObject);
LOGICAL __stdcall FsRtlIsSystemPagingFile(PFILE_OBJECT FileObject);
LOGICAL __stdcall IoIsValidIrpStatus(NTSTATUS Status);
LOGICAL __stdcall IoWithinStackLimits(ULONG_PTR RegionStart, SIZE_T RegionSize);
LOGICAL __stdcall KeTryToAcquireQueuedSpinLock(KSPIN_LOCK_QUEUE_NUMBER Number, PKIRQL OldIrql);
LOGICAL __stdcall MmAreMdlPagesCached(PMDL MemoryDescriptorList);
LOGICAL __stdcall MmIsDriverSuspectForVerifier(struct _DRIVER_OBJECT *DriverObject);
LOGICAL __stdcall MmIsDriverVerifying(struct _DRIVER_OBJECT *DriverObject);
LOGICAL __stdcall MmIsDriverVerifyingByAddress(PVOID AddressWithinSection);
LOGICAL __stdcall MmIsIoSpaceActive(PHYSICAL_ADDRESS StartAddress, SIZE_T NumberOfBytes);
LOGICAL __stdcall MmMdlPagesAreZero(PMDL Mdl);
LOGICAL __stdcall RtlFreeHeap(PVOID HeapHandle, ULONG Flags, PVOID BaseAddress);
LONG __stdcall DlSetEvent(PVOID DeviceHandle, PEVENT pEvent);
LONG __stdcall ExInterlockedDecrementLong(PLONG Addend);
LONG __stdcall ExInterlockedIncrementLong(PLONG Addend);
LONG __stdcall FltCompareInstanceAltitudes(PFLT_INSTANCE Instance1, PFLT_INSTANCE Instance2);
LONG __stdcall InlineInterlockedAdd(volatile LONG *Addend, LONG Value);
LONG __stdcall InterlockedAnd(volatile LONG *Destination, LONG Value);
LONG __stdcall InterlockedCompareExchange(volatile LONG *Destination, LONG ExChange, LONG Comperand);
LONG __stdcall InterlockedDecrement(volatile LONG *Addend);
LONG __stdcall InterlockedExchange(volatile LONG *Target, LONG Value);
LONG __stdcall InterlockedExchangeAdd(volatile LONG *Addend, LONG Value);
LONG __stdcall InterlockedIncrement(volatile LONG *Addend);
LONG __stdcall InterlockedOr(volatile LONG *Destination, LONG Value);
LONG __stdcall InterlockedXor(volatile LONG *Destination, LONG Value);
LONG __stdcall KeInsertHeadQueue(PRKQUEUE Queue, PLIST_ENTRY Entry);
LONG __stdcall KeInsertQueue(PRKQUEUE Queue, PLIST_ENTRY Entry);
LONG __stdcall KePulseEvent(PRKEVENT Event, KPRIORITY Increment, BOOLEAN Wait);
LONG __stdcall KeReadStateEvent(PRKEVENT Event);
LONG __stdcall KeReadStateMutant(PRKMUTANT Mutant);
LONG __stdcall KeReadStateMutex(PRKMUTEX Mutex);
LONG __stdcall KeReadStateQueue(PRKQUEUE Queue);
LONG __stdcall KeReadStateSemaphore(PRKSEMAPHORE Semaphore);
LONG __stdcall KeReleaseMutant(PRKMUTANT Mutant, KPRIORITY Increment, BOOLEAN Abandoned, BOOLEAN Wait);
LONG __stdcall KeReleaseMutex(PRKMUTEX Mutex, BOOLEAN Wait);
LONG __stdcall KeReleaseSemaphore(PRKSEMAPHORE Semaphore, KPRIORITY Increment, LONG Adjustment, BOOLEAN Wait);
LONG __stdcall KeResetEvent(PRKEVENT Event);
LONG __stdcall KeSetBasePriorityThread(PKTHREAD Thread, LONG Increment);
LONG __stdcall KeSetEvent(PRKEVENT Event, KPRIORITY Increment, BOOLEAN Wait);
LONG __stdcall ReadAcquire(const volatile LONG *Source);
LONG __stdcall ReadNoFence(const volatile LONG *Source);
LONG __stdcall ReadRaw(const volatile LONG *Source);
LONG __stdcall RtlCompareAltitudes(PCUNICODE_STRING Altitude1, PCUNICODE_STRING Altitude2);
LONG __stdcall RtlCompareString(const STRING *String1, const STRING *String2, BOOLEAN CaseInSensitive);
LONG __stdcall RtlCompareUnicodeString(PCUNICODE_STRING String1, PCUNICODE_STRING String2, BOOLEAN CaseInSensitive);
LONG __stdcall RtlCompareUnicodeStrings(PCWCH String1, SIZE_T String1Length, PCWCH String2, SIZE_T String2Length, BOOLEAN CaseInSensitive);
LONG __stdcall RxExceptionFilter(PRX_CONTEXT RxContext, PEXCEPTION_POINTERS ExceptionPointer);
LONG __stdcall RxpDereferenceNetFcb(PFCB Fcb);
LONG __stdcall RxpReferenceNetFcb(PFCB Fcb);
LONG __stdcall VideoPortInterlockedDecrement(PLONG Addend);
LONG __stdcall VideoPortInterlockedExchange(PLONG Target, LONG Value);
LONG __stdcall VideoPortInterlockedIncrement(PLONG Addend);
LONG __stdcall VideoPortReadStateEvent(PVOID HwDeviceExtension, PEVENT pEvent);
LONG __stdcall VideoPortSetEvent(PVOID HwDeviceExtension, PEVENT pEvent);
LONG64 __stdcall InlineInterlockedAdd64(volatile LONG64 *Addend, LONG64 Value);
LONG64 __stdcall InterlockedAnd64(volatile LONG64 *Destination, LONG64 Value);
LONG64 __stdcall InterlockedCompareExchange64(volatile LONG64 *Destination, LONG64 ExChange, LONG64 Comperand);
LONG64 __stdcall InterlockedDecrement64(volatile LONG64 *Addend);
LONG64 __stdcall InterlockedExchange64(volatile LONG64 *Target, LONG64 Value);
LONG64 __stdcall InterlockedExchangeAdd64(volatile LONG64 *Addend, LONG64 Value);
LONG64 __stdcall InterlockedIncrement64(volatile LONG64 *Addend);
LONG64 __stdcall InterlockedOr64(volatile LONG64 *Destination, LONG64 Value);
LONG64 __stdcall InterlockedXor64(volatile LONG64 *Destination, LONG64 Value);
LONG64 __stdcall MultiplyExtract128(LONG64 Multiplier, LONG64 Multiplicand, UCHAR Shift);
LONG64 __stdcall ReadAcquire64(const volatile LONG64 *Source);
LONG64 __stdcall ReadNoFence64(const volatile LONG64 *Source);
LONG64 __stdcall ReadRaw64(const volatile LONG64 *Source);
LONG64 __stdcall mul128(LONG64 Multiplier, LONG64 Multiplicand, LONG64 *HighProduct);
LONGLONG __stdcall DlQueryPerformanceCounter(PVOID pDeviceHandle, PLONGLONG pllPerformanceFrequency);
LONGLONG __stdcall KsGetDefaultClockTime(PKSDEFAULTCLOCK DefaultClock);
LONGLONG __stdcall PsGetProcessCreateTimeQuadPart(PEPROCESS Process);
LONGLONG __stdcall PsGetThreadCreateTime(PETHREAD Thread);
LONGLONG __stdcall VideoPortQueryPerformanceCounter(PVOID HwDeviceExtension, PLONGLONG PerformanceFrequency);
LONGLONG __stdcall WDF_ABS_TIMEOUT_IN_MS(ULONGLONG Time);
LONGLONG __stdcall WDF_ABS_TIMEOUT_IN_SEC(ULONGLONG Time);
LONGLONG __stdcall WDF_ABS_TIMEOUT_IN_US(ULONGLONG Time);
LONGLONG __stdcall WDF_REL_TIMEOUT_IN_MS(ULONGLONG Time);
LONGLONG __stdcall WDF_REL_TIMEOUT_IN_SEC(ULONGLONG Time);
LONGLONG __stdcall WDF_REL_TIMEOUT_IN_US(ULONGLONG Time);
LONGLONG __stdcall _mulh(LONG64 Multiplier, LONG64 Multiplicand);
LONG_PTR __stdcall ObfDereferenceObject(PVOID Object);
LONG_PTR __stdcall ObfDereferenceObjectWithTag(PVOID Object, ULONG Tag);
LONG_PTR __stdcall ObfReferenceObject(PVOID Object);
LONG_PTR __stdcall ObfReferenceObjectWithTag(PVOID Object, ULONG Tag);
LPCGUID IoGetActivityIdThread(void);
LPCGUID __stdcall IoSetActivityIdThread(LPCGUID ActivityId);
LPCGUID __stdcall MbbRequestGetCorrelationId(MBBREQUEST Request);
LPUWSTR __stdcall uaw_CharUpperW(LPUWSTR String);
LUID __stdcall RtlConvertLongToLuid(LONG Long);
LUID __stdcall RtlConvertUlongToLuid(ULONG Ulong);
LUID __stdcall RxGetUid(PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext);
MM_MDL_PAGE_CONTENTS_STATE __stdcall MmMdlPageContentsState(PMDL MemoryDescriptorList, MM_MDL_PAGE_CONTENTS_STATE State);
MM_SYSTEMSIZE MmQuerySystemSize(void);
NDIS_HANDLE __stdcall NdisAllocateIoWorkItem(NDIS_HANDLE NdisObjectHandle);
NDIS_HANDLE __stdcall NdisAllocateNetBufferListPool(NDIS_HANDLE NdisHandle, PNET_BUFFER_LIST_POOL_PARAMETERS Parameters);
NDIS_HANDLE __stdcall NdisAllocateNetBufferPool(NDIS_HANDLE NdisHandle, PNET_BUFFER_POOL_PARAMETERS Parameters);
NDIS_HANDLE __stdcall NdisGetPoolFromNetBuffer(PNET_BUFFER NetBuffer);
NDIS_HANDLE __stdcall NdisGetPoolFromNetBufferList(PNET_BUFFER_LIST NetBufferList);
NDIS_HANDLE __stdcall NdisGetPoolFromPacket(PNDIS_PACKET Packet);
NDIS_HANDLE __stdcall NdisIMGetBindingContext(NDIS_HANDLE NdisBindingHandle);
NDIS_HANDLE __stdcall NdisIMGetDeviceContext(NDIS_HANDLE MiniportAdapterHandle);
NDIS_HANDLE __stdcall NetAdapterDriverWdmGetHandle(WDFDRIVER Driver);
NDIS_HANDLE __stdcall NetAdapterWdmGetNdisHandle(NETADAPTER Adapter);
NDIS_NIC_SWITCH_ID __stdcall NetRequestGetSwitchId(NETREQUEST Request);
NDIS_NIC_SWITCH_VPORT_ID __stdcall NetRequestGetVPortId(NETREQUEST Request);
NDIS_OID __stdcall NetRequestGetId(NETREQUEST Request);
NDIS_PORT_NUMBER __stdcall NetRequestGetPortNumber(NETREQUEST Request);
NDIS_REQUEST_TYPE __stdcall NetRequestGetType(NETREQUEST Request);
NDIS_STATUS __stdcall NdisAllocateCloneOidRequest(NDIS_HANDLE SourceHandle, PNDIS_OID_REQUEST OidRequest, UINT PoolTag, PNDIS_OID_REQUEST *ClonedOidRequest);
NDIS_STATUS __stdcall NdisAllocateMemory(PVOID *VirtualAddress, UINT Length, UINT MemoryFlags, NDIS_PHYSICAL_ADDRESS HighestAcceptableAddress);
NDIS_STATUS __stdcall NdisAllocateMemoryWithTag(PVOID *VirtualAddress, UINT Length, ULONG Tag);
NDIS_STATUS __stdcall NdisAllocateNetBufferListContext(PNET_BUFFER_LIST NetBufferList, USHORT ContextSize, USHORT ContextBackFill, ULONG PoolTag);
NDIS_STATUS __stdcall NdisAllocateSharedMemory(NDIS_HANDLE NdisHandle, PNDIS_SHARED_MEMORY_PARAMETERS SharedMemoryParameters, PNDIS_HANDLE pAllocationHandle);
NDIS_STATUS __stdcall NdisAllocateTimerObject(NDIS_HANDLE NdisHandle, PNDIS_TIMER_CHARACTERISTICS TimerCharacteristics, PNDIS_HANDLE pTimerObject);
NDIS_STATUS __stdcall NdisBuildScatterGatherList(NDIS_HANDLE NdisHandle, PNDIS_SCATTER_GATHER_LIST_PARAMETERS SGListParameters);
NDIS_STATUS __stdcall NdisClAddParty(NDIS_HANDLE NdisVcHandle, NDIS_HANDLE ProtocolPartyContext, PCO_CALL_PARAMETERS CallParameters, PNDIS_HANDLE NdisPartyHandle);
NDIS_STATUS __stdcall NdisClCloseAddressFamily(NDIS_HANDLE NdisAfHandle);
NDIS_STATUS __stdcall NdisClCloseCall(NDIS_HANDLE NdisVcHandle, NDIS_HANDLE NdisPartyHandle, PVOID Buffer, UINT Size);
NDIS_STATUS __stdcall NdisClDeregisterSap(NDIS_HANDLE NdisSapHandle);
NDIS_STATUS __stdcall NdisClDropParty(NDIS_HANDLE NdisPartyHandle, PVOID Buffer, UINT Size);
NDIS_STATUS __stdcall NdisClGetProtocolVcContextFromTapiCallId(UNICODE_STRING TapiCallId, PNDIS_HANDLE ProtocolVcContext);
NDIS_STATUS __stdcall NdisClMakeCall(NDIS_HANDLE NdisVcHandle, PCO_CALL_PARAMETERS CallParameters, NDIS_HANDLE ProtocolPartyContext, PNDIS_HANDLE NdisPartyHandle);
NDIS_STATUS __stdcall NdisClModifyCallQoS(NDIS_HANDLE NdisVcHandle, PCO_CALL_PARAMETERS CallParameters);
NDIS_STATUS __stdcall NdisClOpenAddressFamilyEx(NDIS_HANDLE NdisBindingHandle, PCO_ADDRESS_FAMILY AddressFamily, NDIS_HANDLE ClientAfContext, PNDIS_HANDLE NdisAfHandle);
NDIS_STATUS __stdcall NdisClRegisterSap(NDIS_HANDLE NdisAfHandle, NDIS_HANDLE ProtocolSapContext, PCO_SAP Sap, PNDIS_HANDLE NdisSapHandle);
NDIS_STATUS __stdcall NdisCloseAdapterEx(NDIS_HANDLE NdisBindingHandle);
NDIS_STATUS __stdcall NdisCmActivateVc(NDIS_HANDLE NdisVcHandle, PCO_CALL_PARAMETERS CallParameters);
NDIS_STATUS __stdcall NdisCmDeactivateVc(NDIS_HANDLE NdisVcHandle);
NDIS_STATUS __stdcall NdisCmDispatchIncomingCall(NDIS_HANDLE NdisSapHandle, NDIS_HANDLE NdisVcHandle, PCO_CALL_PARAMETERS CallParameters);
NDIS_STATUS __stdcall NdisCmNotifyCloseAddressFamily(NDIS_HANDLE NdisAfHandle);
NDIS_STATUS __stdcall NdisCmRegisterAddressFamily(NDIS_HANDLE NdisBindingHandle, PCO_ADDRESS_FAMILY AddressFamily, PNDIS_CALL_MANAGER_CHARACTERISTICS CmCharacteristics, UINT SizeOfCmCharacteristics);
NDIS_STATUS __stdcall NdisCmRegisterAddressFamilyEx(NDIS_HANDLE NdisBindingHandle, PCO_ADDRESS_FAMILY AddressFamily);
NDIS_STATUS __stdcall NdisCoAssignInstanceName(NDIS_HANDLE NdisVcHandle, PNDIS_STRING BaseInstanceName, PNDIS_STRING VcInstanceName);
NDIS_STATUS __stdcall NdisCoCreateVc(NDIS_HANDLE NdisBindingHandle, NDIS_HANDLE NdisAfHandle, NDIS_HANDLE ProtocolVcContext, PNDIS_HANDLE NdisVcHandle);
NDIS_STATUS __stdcall NdisCoDeleteVc(NDIS_HANDLE NdisVcHandle);
NDIS_STATUS __stdcall NdisCoGetTapiCallId(NDIS_HANDLE NdisVcHandle, PVAR_STRING TapiCallId);
NDIS_STATUS __stdcall NdisCoOidRequest(NDIS_HANDLE NdisBindingHandle, NDIS_HANDLE NdisAfHandle, NDIS_HANDLE NdisVcHandle, NDIS_HANDLE NdisPartyHandle, PNDIS_OID_REQUEST OidRequest);
NDIS_STATUS __stdcall NdisCopyFromNetBufferToNetBuffer(PNET_BUFFER Destination, ULONG DestinationOffset, ULONG BytesToCopy, PNET_BUFFER Source, ULONG SourceOffset, PULONG BytesCopied);
NDIS_STATUS __stdcall NdisDirectOidRequest(NDIS_HANDLE NdisBindingHandle, PNDIS_OID_REQUEST OidRequest);
NDIS_STATUS __stdcall NdisEnumerateFilterModules(NDIS_HANDLE NdisHandle, PVOID InterfaceBuffer, ULONG InterfaceBufferLength, PULONG BytesNeeded, PULONG BytesWritten);
NDIS_STATUS __stdcall NdisFDirectOidRequest(NDIS_HANDLE NdisFilterHandle, PNDIS_OID_REQUEST OidRequest);
NDIS_STATUS __stdcall NdisFGetOptionalSwitchHandlers(NDIS_HANDLE NdisFilterHandle, PNDIS_SWITCH_CONTEXT NdisSwitchContext, PNDIS_SWITCH_OPTIONAL_HANDLERS NdisSwitchHandlers);
NDIS_STATUS __stdcall NdisFNetPnPEvent(NDIS_HANDLE NdisFilterHandle, PNET_PNP_EVENT_NOTIFICATION NetPnPEventNotification);
NDIS_STATUS __stdcall NdisFOidRequest(NDIS_HANDLE NdisFilterHandle, PNDIS_OID_REQUEST OidRequest);
NDIS_STATUS __stdcall NdisFRegisterFilterDriver(PDRIVER_OBJECT DriverObject, NDIS_HANDLE FilterDriverContext, PNDIS_FILTER_DRIVER_CHARACTERISTICS FilterDriverCharacteristics, PNDIS_HANDLE NdisFilterDriverHandle);
NDIS_STATUS __stdcall NdisFRestartFilter(NDIS_HANDLE NdisFilterHandle);
NDIS_STATUS __stdcall NdisFSetAttributes(NDIS_HANDLE NdisFilterHandle, NDIS_HANDLE FilterModuleContext, PNDIS_FILTER_ATTRIBUTES FilterAttributes);
NDIS_STATUS __stdcall NdisGetHypervisorInfo(PNDIS_HYPERVISOR_INFO HypervisorInfo);
NDIS_STATUS __stdcall NdisGetProcessorInformation(PNDIS_SYSTEM_PROCESSOR_INFO SystemProcessorInfo);
NDIS_STATUS __stdcall NdisGetProcessorInformationEx(NDIS_HANDLE NdisHandle, PNDIS_SYSTEM_PROCESSOR_INFO_EX SystemProcessorInfo, PSIZE_T Size);
NDIS_STATUS __stdcall NdisGetRssProcessorInformation(NDIS_HANDLE NdisHandle, PNDIS_RSS_PROCESSOR_INFO RssProcessorInfo, PSIZE_T Size);
NDIS_STATUS __stdcall NdisIMCancelInitializeDeviceInstance(NDIS_HANDLE DriverHandle, PNDIS_STRING DeviceInstance);
NDIS_STATUS __stdcall NdisIMDeInitializeDeviceInstance(NDIS_HANDLE NdisMiniportHandle);
NDIS_STATUS __stdcall NdisIMInitializeDeviceInstanceEx(NDIS_HANDLE DriverHandle, PNDIS_STRING DriverInstance, NDIS_HANDLE DeviceContext);
NDIS_STATUS __stdcall NdisIMNotifyPnPEvent(NDIS_HANDLE MiniportHandle, PNET_PNP_EVENT NetPnPEvent);
NDIS_STATUS __stdcall NdisIMRegisterLayeredMiniport(NDIS_HANDLE NdisWrapperHandle, PNDIS_MINIPORT_CHARACTERISTICS MiniportCharacteristics, UINT CharacteristicsLength, PNDIS_HANDLE DriverHandle);
NDIS_STATUS __stdcall NdisIfAddIfStackEntry(NET_IFINDEX HigherLayerIfIndex, NET_IFINDEX LowerLayerIfIndex);
NDIS_STATUS __stdcall NdisIfAllocateNetLuidIndex(NET_IFTYPE ifType, PUINT32 pNetLuidIndex);
NDIS_STATUS __stdcall NdisIfFreeNetLuidIndex(NET_IFTYPE ifType, UINT32 NetLuidIndex);
NDIS_STATUS __stdcall NdisIfGetInterfaceIndexFromNetLuid(NET_LUID NetLuid, PNET_IFINDEX pIfIndex);
NDIS_STATUS __stdcall NdisIfGetNetLuidFromInterfaceIndex(NET_IFINDEX ifIndex, PNET_LUID pNetLuid);
NDIS_STATUS __stdcall NdisIfQueryBindingIfIndex(NDIS_HANDLE NdisBindingHandle, PNET_IFINDEX pBoundIfIndex, PNET_LUID pBoundIfNetLuid, PNET_IFINDEX pLowestIfIndex, PNET_LUID pLowestIfNetLuid);
NDIS_STATUS __stdcall NdisIfRegisterInterface(NDIS_HANDLE NdisProviderHandle, NET_LUID NetLuid, NDIS_HANDLE ProviderIfContext, PNET_IF_INFORMATION pIfInfo, PNET_IFINDEX pfIndex);
NDIS_STATUS __stdcall NdisIfRegisterProvider(PNDIS_IF_PROVIDER_CHARACTERISTICS ProviderCharacteristics, NDIS_HANDLE IfProviderContext, PNDIS_HANDLE pNdisIfProviderHandle);
NDIS_STATUS __stdcall NdisMAllocateMapRegisters(NDIS_HANDLE MiniportAdapterHandle, UINT DmaChannel, NDIS_DMA_SIZE DmaSize, ULONG BaseMapRegistersNeeded, ULONG MaximumPhysicalMapping);
NDIS_STATUS __stdcall NdisMAllocateNetBufferSGList(NDIS_HANDLE NdisMiniportDmaHandle, PNET_BUFFER NetBuffer, PVOID Context, ULONG Flags, PVOID ScatterGatherListBuffer, ULONG ScatterGatherListBufferSize);
NDIS_STATUS __stdcall NdisMAllocatePort(NDIS_HANDLE NdisMiniportHandle, PNDIS_PORT_CHARACTERISTICS PortCharacteristics);
NDIS_STATUS __stdcall NdisMAllocateSharedMemoryAsync(NDIS_HANDLE MiniportAdapterHandle, ULONG Length, BOOLEAN Cached, PVOID Context);
NDIS_STATUS __stdcall NdisMAllocateSharedMemoryAsyncEx(NDIS_HANDLE MiniportDmaHandle, ULONG Length, BOOLEAN Cached, PVOID Context);
NDIS_STATUS __stdcall NdisMCmActivateVc(NDIS_HANDLE NdisVcHandle, PCO_CALL_PARAMETERS CallParameters);
NDIS_STATUS __stdcall NdisMCmCreateVc(NDIS_HANDLE MiniportAdapterHandle, NDIS_HANDLE NdisAfHandle, NDIS_HANDLE MiniportVcContext, PNDIS_HANDLE NdisVcHandle);
NDIS_STATUS __stdcall NdisMCmDeactivateVc(NDIS_HANDLE NdisVcHandle);
NDIS_STATUS __stdcall NdisMCmDeleteVc(NDIS_HANDLE NdisVcHandle);
NDIS_STATUS __stdcall NdisMCmOidRequest(NDIS_HANDLE NdisAfHandle, NDIS_HANDLE NdisVcHandle, NDIS_HANDLE NdisPartyHandle, PNDIS_OID_REQUEST NdisOidRequest);
NDIS_STATUS __stdcall NdisMCmRegisterAddressFamily(NDIS_HANDLE MiniportAdapterHandle, PCO_ADDRESS_FAMILY AddressFamily, PNDIS_CALL_MANAGER_CHARACTERISTICS CmCharacteristics, UINT SizeOfCmCharacteristics);
NDIS_STATUS __stdcall NdisMCmRegisterAddressFamilyEx(NDIS_HANDLE MiniportAdapterHandle, PCO_ADDRESS_FAMILY AddressFamily);
NDIS_STATUS __stdcall NdisMCmRequest(NDIS_HANDLE NdisAfHandle, NDIS_HANDLE NdisVcHandle, NDIS_HANDLE NdisPartyHandle, PNDIS_REQUEST NdisRequest);
NDIS_STATUS __stdcall NdisMConfigMSIXTableEntry(NDIS_HANDLE NdisMiniportHandle, PNDIS_MSIX_CONFIG_PARAMETERS MSIXConfigParameters);
NDIS_STATUS __stdcall NdisMCreateLog(NDIS_HANDLE MiniportAdapterHandle, UINT Size, PNDIS_HANDLE LogHandle);
NDIS_STATUS __stdcall NdisMDeregisterDevice(NDIS_HANDLE NdisDeviceHandle);
NDIS_STATUS __stdcall NdisMEnableVirtualization(NDIS_HANDLE NdisMiniportHandle, USHORT NumVFs, BOOLEAN EnableVFMigration, BOOLEAN EnableMigrationInterrupt, BOOLEAN EnableVirtualization);
NDIS_STATUS __stdcall NdisMFreePort(NDIS_HANDLE NdisMiniportHandle, NDIS_PORT_NUMBER PortNumber);
NDIS_STATUS __stdcall NdisMGetOffloadHandlers(NDIS_HANDLE NdisMiniportHandle, NDIS_CHIMNEY_OFFLOAD_TYPE ChimneyType, PNDIS_OFFLOAD_EVENT_HANDLERS *OffloadHandlers);
NDIS_STATUS __stdcall NdisMInitializeScatterGatherDma(NDIS_HANDLE MiniportAdapterHandle, BOOLEAN Dma64BitAddresses, ULONG MaximumPhysicalMapping);
NDIS_STATUS __stdcall NdisMMapIoSpace(PVOID *VirtualAddress, NDIS_HANDLE MiniportAdapterHandle, NDIS_PHYSICAL_ADDRESS PhysicalAddress, UINT Length);
NDIS_STATUS __stdcall NdisMNetPnPEvent(NDIS_HANDLE MiniportAdapterHandle, PNET_PNP_EVENT_NOTIFICATION NetPnPEventNotification);
NDIS_STATUS __stdcall NdisMPciAssignResources(NDIS_HANDLE MiniportHandle, ULONG SlotNumber, PNDIS_RESOURCE_LIST *AssignedResources);
NDIS_STATUS __stdcall NdisMPromoteMiniport(NDIS_HANDLE MiniportHandle);
NDIS_STATUS __stdcall NdisMQueryAdapterInstanceName(PNDIS_STRING pAdapterInstanceName, NDIS_HANDLE MiniportHandle);
NDIS_STATUS __stdcall NdisMQueryProbedBars(NDIS_HANDLE NdisMiniportHandle, PULONG BaseRegisterValues);
NDIS_STATUS __stdcall NdisMReadConfigBlock(NDIS_HANDLE NdisMiniportHandle, ULONG BlockId, PVOID Buffer, ULONG Length);
NDIS_STATUS __stdcall NdisMRegisterDevice(NDIS_HANDLE NdisWrapperHandle, PNDIS_STRING DeviceName, PNDIS_STRING SymbolicName, PDRIVER_DISPATCH *MajorFunctions, PDEVICE_OBJECT *pDeviceObject, NDIS_HANDLE *NdisDeviceHandle);
NDIS_STATUS __stdcall NdisMRegisterDmaChannel(PNDIS_HANDLE MiniportDmaHandle, NDIS_HANDLE MiniportAdapterHandle, UINT DmaChannel, BOOLEAN Dma32BitAddresses, PNDIS_DMA_DESCRIPTION DmaDescription, ULONG MaximumLength);
NDIS_STATUS __stdcall NdisMRegisterInterrupt(PNDIS_MINIPORT_INTERRUPT Interrupt, NDIS_HANDLE MiniportAdapterHandle, UINT InterruptVector, UINT InterruptLevel, BOOLEAN RequestIsr, BOOLEAN SharedInterrupt, NDIS_INTERRUPT_MODE InterruptMode);
NDIS_STATUS __stdcall NdisMRegisterInterruptEx(NDIS_HANDLE MiniportAdapterHandle, NDIS_HANDLE MiniportInterruptContext, PNDIS_MINIPORT_INTERRUPT_CHARACTERISTICS MiniportInterruptCharacteristics, PNDIS_HANDLE NdisInterruptHandle);
NDIS_STATUS __stdcall NdisMRegisterIoPortRange(PVOID *PortOffset, NDIS_HANDLE MiniportAdapterHandle, UINT InitialPort, UINT NumberOfPorts);
NDIS_STATUS __stdcall NdisMRegisterMiniport(NDIS_HANDLE NdisWrapperHandle, PNDIS_MINIPORT_CHARACTERISTICS MiniportCharacteristics, UINT CharacteristicsLength);
NDIS_STATUS __stdcall NdisMRegisterMiniportDriver(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath, NDIS_HANDLE MiniportDriverContext, PNDIS_MINIPORT_DRIVER_CHARACTERISTICS MiniportDriverCharacteristics, PNDIS_HANDLE NdisMiniportDriverHandle);
NDIS_STATUS __stdcall NdisMRegisterScatterGatherDma(NDIS_HANDLE MiniportAdapterHandle, PNDIS_SG_DMA_DESCRIPTION DmaDescription, PNDIS_HANDLE NdisMiniportDmaHandle);
NDIS_STATUS __stdcall NdisMRegisterWdiMiniportDriver(DRIVER_OBJECT *DriverObject, PCUNICODE_STRING RegistryPath, NDIS_MINIPORT_DRIVER_CONTEXT NdisDriverContext, NDIS_MINIPORT_DRIVER_CHARACTERISTICS *MiniportDriverCharacteristics, NDIS_MINIPORT_DRIVER_WDI_CHARACTERISTICS *MiniportWdiCharacteristics, NDIS_MINIPORT_DRIVER_HANDLE *NdisMiniportDriverHandle);
NDIS_STATUS __stdcall NdisMRemoveMiniport(NDIS_HANDLE MiniportHandle);
NDIS_STATUS __stdcall NdisMSetMiniportAttributes(NDIS_HANDLE NdisMiniportHandle, PNDIS_MINIPORT_ADAPTER_ATTRIBUTES MiniportAttributes);
NDIS_STATUS __stdcall NdisMSetMiniportSecondary(NDIS_HANDLE MiniportHandle, NDIS_HANDLE PrimaryMiniportHandle);
NDIS_STATUS __stdcall NdisMWriteConfigBlock(NDIS_HANDLE NdisMiniportHandle, ULONG BlockId, PVOID Buffer, ULONG Length);
NDIS_STATUS __stdcall NdisMWriteLogData(NDIS_HANDLE LogHandle, PVOID LogBuffer, UINT LogBufferSize);
NDIS_STATUS __stdcall NdisOffloadTcpDisconnect(PNDIS_OFFLOAD_HANDLE NdisOffloadHandle, PNET_BUFFER_LIST NetBufferList, ULONG Flags);
NDIS_STATUS __stdcall NdisOffloadTcpForward(PNDIS_OFFLOAD_HANDLE NdisOffloadHandle, PNET_BUFFER_LIST NetBufferList);
NDIS_STATUS __stdcall NdisOffloadTcpReceive(PNDIS_OFFLOAD_HANDLE NdisOffloadHandle, PNET_BUFFER_LIST NetBufferList);
NDIS_STATUS __stdcall NdisOffloadTcpSend(PNDIS_OFFLOAD_HANDLE NdisOffloadHandle, PNET_BUFFER_LIST NetBufferList);
NDIS_STATUS __stdcall NdisOidRequest(NDIS_HANDLE NdisBindingHandle, PNDIS_OID_REQUEST OidRequest);
NDIS_STATUS __stdcall NdisOpenAdapterEx(NDIS_HANDLE NdisProtocolHandle, NDIS_HANDLE ProtocolBindingContext, PNDIS_OPEN_PARAMETERS OpenParameters, NDIS_HANDLE BindContext, PNDIS_HANDLE NdisBindingHandle);
NDIS_STATUS __stdcall NdisOpenConfigurationEx(PNDIS_CONFIGURATION_OBJECT ConfigObject, PNDIS_HANDLE ConfigurationHandle);
NDIS_STATUS __stdcall NdisQueryAdapterInstanceName(PNDIS_STRING pAdapterInstanceName, NDIS_HANDLE NdisBindingHandle);
NDIS_STATUS __stdcall NdisQueryBindInstanceName(PNDIS_STRING pAdapterInstanceName, NDIS_HANDLE BindingContext);
NDIS_STATUS __stdcall NdisRegisterDeviceEx(NDIS_HANDLE NdisHandle, PNDIS_DEVICE_OBJECT_ATTRIBUTES DeviceObjectAttributes, PDEVICE_OBJECT *pDeviceObject, PNDIS_HANDLE NdisDeviceHandle);
NDIS_STATUS __stdcall NdisRegisterProtocolDriver(NDIS_HANDLE ProtocolDriverContext, PNDIS_PROTOCOL_DRIVER_CHARACTERISTICS ProtocolCharacteristics, PNDIS_HANDLE NdisProtocolHandle);
NDIS_STATUS __stdcall NdisRetreatNetBufferDataStart(PNET_BUFFER NetBuffer, ULONG DataOffsetDelta, ULONG DataBackFill, NET_BUFFER_ALLOCATE_MDL_HANDLER AllocateMdlHandler);
NDIS_STATUS __stdcall NdisRetreatNetBufferListDataStart(PNET_BUFFER_LIST NetBufferList, ULONG DataOffsetDelta, ULONG DataBackFill, NET_BUFFER_ALLOCATE_MDL_HANDLER AllocateMdlHandler, NET_BUFFER_FREE_MDL_HANDLER FreeMdlHandler);
NDIS_STATUS __stdcall NdisScheduleWorkItem(PNDIS_WORK_ITEM WorkItem);
NDIS_STATUS __stdcall NdisSetOptionalHandlers(NDIS_HANDLE NdisHandle, PNDIS_DRIVER_OPTIONAL_HANDLERS OptionalHandlers);
NDIS_STATUS __stdcall NdisUnbindAdapter(NDIS_HANDLE NdisBindingHandle);
NDIS_STATUS __stdcall NdisWriteEventLogEntry(PVOID LogHandle, NDIS_STATUS EventCode, ULONG UniqueEventValue, USHORT NumStrings, PVOID StringsList, ULONG DataSize, PVOID Data);
NDIS_STATUS __stdcall Wdi_NdisMRegisterWdiMiniportDriver(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath, NDIS_HANDLE MiniportDriverContext, PNDIS_MINIPORT_DRIVER_CHARACTERISTICS MiniportDriverCharacteristics, PNDIS_MINIPORT_DRIVER_WDI_CHARACTERISTICS MiniportWdiCharacteristics, PNDIS_HANDLE NdisMiniportDriverHandle);
NDR_SCONTEXT __stdcall NDRSContextUnmarshall(void *pBuff, unsigned int DataRepresentation);
NDR_SCONTEXT __stdcall NDRSContextUnmarshall2(RPC_BINDING_HANDLE BindingHandle, void *pBuff, unsigned int DataRepresentation, void *CtxGuard, unsigned int Flags);
NDR_SCONTEXT __stdcall NDRSContextUnmarshallEx(RPC_BINDING_HANDLE BindingHandle, void *pBuff, unsigned int DataRepresentation);
NDR_SCONTEXT __stdcall NdrContextHandleInitialize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
NDR_SCONTEXT __stdcall NdrServerContextNewUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
NDR_SCONTEXT __stdcall NdrServerContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg);
NETADAPTER __stdcall NetRequestGetAdapter(NETREQUEST Request);
NETADAPTER __stdcall NetRequestQueueGetAdapter(NETREQUESTQUEUE NetRequestQueue);
NETPOWERSETTINGS __stdcall NetAdapterGetPowerSettings(NETADAPTER Adapter);
NET_IFINDEX __stdcall if_nametoindex(PCSTR InterfaceName);
NET_IF_COMPARTMENT_ID __stdcall GetCurrentThreadCompartmentId();
NET_IF_COMPARTMENT_ID __stdcall GetDefaultCompartmentId();
NET_IF_COMPARTMENT_ID __stdcall GetJobCompartmentId(HANDLE JobHandle);
NET_IF_COMPARTMENT_ID __stdcall GetSessionCompartmentId(ULONG SessionId);
NET_LUID __stdcall NetAdapterGetNetLuid(NETADAPTER Adapter);
NET_PACKET *__stdcall NetRingBufferAdvanceNextPacket(const NET_DATAPATH_DESCRIPTOR *Descriptor);
NET_PACKET *__stdcall NetRingBufferGetNextPacket(const NET_DATAPATH_DESCRIPTOR *Descriptor);
NET_PACKET *__stdcall NetRingBufferGetPacketAtIndex(const NET_DATAPATH_DESCRIPTOR *Descriptor, UINT32 Index);
NET_PACKET_CHECKSUM *__stdcall NetPacketGetPacketChecksum(const NET_PACKET *packet, size_t offset);
NET_PACKET_LARGE_SEND_SEGMENTATION *__stdcall NetPacketGetPacketLargeSendSegmentation(const NET_PACKET *packet, size_t offset);
NET_PACKET_RECEIVE_SEGMENT_COALESCENCE *__stdcall NetPacketGetPacketReceiveSegmentCoalescence(const NET_PACKET *packet, size_t offset);
NL_ADDRESS_TYPE __stdcall Ipv4AddressType(const UCHAR *Address);
NL_ADDRESS_TYPE __stdcall Ipv6AddressType(const UCHAR *Address);
NTSTATUS CcWaitForCurrentLazyWriterActivity(void);
NTSTATUS ClfsInitialize(void);
NTSTATUS KdDisableDebugger(void);
NTSTATUS KdEnableDebugger(void);
NTSTATUS MmCreateMirror(void);
NTSTATUS RtlInitializeSidEx(PSID Sid, PSID_IDENTIFIER_AUTHORITY IdentifierAuthority, UCHAR SubAuthorityCount, ...);
NTSTATUS RtlStringCbPrintfA(NTSTRSAFE_PSTR pszDest, size_t cbDest, NTSTRSAFE_PCSTR pszFormat, ...);
NTSTATUS RtlStringCbPrintfExA(NTSTRSAFE_PSTR pszDest, size_t cbDest, NTSTRSAFE_PSTR *ppszDestEnd, size_t *pcbRemaining, ULONG dwFlags, NTSTRSAFE_PCSTR pszFormat, ...);
NTSTATUS RtlStringCbPrintfExW(NTSTRSAFE_PWSTR pszDest, size_t cbDest, NTSTRSAFE_PWSTR *ppszDestEnd, size_t *pcbRemaining, ULONG dwFlags, NTSTRSAFE_PCWSTR pszFormat, ...);
NTSTATUS RtlStringCbPrintfW(NTSTRSAFE_PWSTR pszDest, size_t cbDest, NTSTRSAFE_PCWSTR pszFormat, ...);
NTSTATUS RtlStringCchPrintfA(NTSTRSAFE_PSTR pszDest, size_t cchDest, NTSTRSAFE_PCSTR pszFormat, ...);
NTSTATUS RtlStringCchPrintfExA(NTSTRSAFE_PSTR pszDest, size_t cchDest, NTSTRSAFE_PSTR *ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags, NTSTRSAFE_PCSTR pszFormat, ...);
NTSTATUS RtlStringCchPrintfExW(NTSTRSAFE_PWSTR pszDest, size_t cchDest, NTSTRSAFE_PWSTR *ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags, NTSTRSAFE_PCWSTR pszFormat, ...);
NTSTATUS RtlStringCchPrintfW(NTSTRSAFE_PWSTR pszDest, size_t cchDest, NTSTRSAFE_PCWSTR pszFormat, ...);
NTSTATUS RtlUnicodeStringPrintf(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszFormat, ...);
NTSTATUS RtlUnicodeStringPrintfEx(PUNICODE_STRING DestinationString, PUNICODE_STRING RemainingString, ULONG dwFlags, NTSTRSAFE_PCWSTR pszFormat, ...);
NTSTATUS RxInitializeLog(void);
NTSTATUS TrSecureDeviceLogMessage(WDFDEVICE Device, ULONG Severity, PCSTR Message, ...);
NTSTATUS __stdcall AddResourceGroup(ULONG Handle, PCSRT_RESOURCE_GROUP_HEADER ResourceGroup);
NTSTATUS __stdcall AuxKlibEnumerateSystemFirmwareTables(ULONG FirmwareTableProviderSignature, PVOID FirmwareTableBuffer, ULONG BufferLength, PULONG ReturnLength);
NTSTATUS __stdcall AuxKlibGetBugCheckData(PKBUGCHECK_DATA BugCheckData);
NTSTATUS __stdcall AuxKlibGetSystemFirmwareTable(ULONG FirmwareTableProviderSignature, ULONG FirmwareTableID, PVOID FirmwareTableBuffer, ULONG BufferLength, PULONG ReturnLength);
NTSTATUS __stdcall AuxKlibInitialize();
NTSTATUS __stdcall AuxKlibQueryModuleInformation(PULONG BufferSize, ULONG ElementSize, PVOID QueryInfo);
NTSTATUS __stdcall BCryptAddContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG dwPosition);
NTSTATUS __stdcall BCryptCloseAlgorithmProvider(BCRYPT_ALG_HANDLE hAlgorithm, ULONG dwFlags);
NTSTATUS __stdcall BCryptConfigureContext(ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig);
NTSTATUS __stdcall BCryptConfigureContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig);
NTSTATUS __stdcall BCryptCreateContext(ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig);
NTSTATUS __stdcall BCryptCreateHash(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE *phHash, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
NTSTATUS __stdcall BCryptCreateMultiHash(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE *phHash, ULONG nHashes, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
NTSTATUS __stdcall BCryptDecrypt(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
NTSTATUS __stdcall BCryptDeleteContext(ULONG dwTable, LPCWSTR pszContext);
NTSTATUS __stdcall BCryptDeriveKey(BCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags);
NTSTATUS __stdcall BCryptDeriveKeyCapi(BCRYPT_HASH_HANDLE hHash, BCRYPT_ALG_HANDLE hTargetAlg, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags);
NTSTATUS __stdcall BCryptDeriveKeyPBKDF2(BCRYPT_ALG_HANDLE hPrf, PUCHAR pbPassword, ULONG cbPassword, PUCHAR pbSalt, ULONG cbSalt, ULONGLONG cIterations, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags);
NTSTATUS __stdcall BCryptDestroyHash(BCRYPT_HASH_HANDLE hHash);
NTSTATUS __stdcall BCryptDestroyKey(BCRYPT_KEY_HANDLE hKey);
NTSTATUS __stdcall BCryptDestroySecret(BCRYPT_SECRET_HANDLE hSecret);
NTSTATUS __stdcall BCryptDuplicateHash(BCRYPT_HASH_HANDLE hHash, BCRYPT_HASH_HANDLE *phNewHash, PUCHAR pbHashObject, ULONG cbHashObject, ULONG dwFlags);
NTSTATUS __stdcall BCryptDuplicateKey(BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE *phNewKey, PUCHAR pbKeyObject, ULONG cbKeyObject, ULONG dwFlags);
NTSTATUS __stdcall BCryptEncrypt(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
NTSTATUS __stdcall BCryptEnumAlgorithms(ULONG dwAlgOperations, ULONG *pAlgCount, BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList, ULONG dwFlags);
NTSTATUS __stdcall BCryptEnumContextFunctionProviders(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer);
NTSTATUS __stdcall BCryptEnumContextFunctions(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTIONS *ppBuffer);
NTSTATUS __stdcall BCryptEnumContexts(ULONG dwTable, ULONG *pcbBuffer, PCRYPT_CONTEXTS *ppBuffer);
NTSTATUS __stdcall BCryptEnumProviders(LPCWSTR pszAlgId, ULONG *pImplCount, BCRYPT_PROVIDER_NAME **ppImplList, ULONG dwFlags);
NTSTATUS __stdcall BCryptEnumRegisteredProviders(ULONG *pcbBuffer, PCRYPT_PROVIDERS *ppBuffer);
NTSTATUS __stdcall BCryptExportKey(BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
NTSTATUS __stdcall BCryptFinalizeKeyPair(BCRYPT_KEY_HANDLE hKey, ULONG dwFlags);
NTSTATUS __stdcall BCryptFinishHash(BCRYPT_HASH_HANDLE hHash, PUCHAR pbOutput, ULONG cbOutput, ULONG dwFlags);
NTSTATUS __stdcall BCryptGenRandom(BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbBuffer, ULONG cbBuffer, ULONG dwFlags);
NTSTATUS __stdcall BCryptGenerateKeyPair(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, ULONG dwLength, ULONG dwFlags);
NTSTATUS __stdcall BCryptGenerateSymmetricKey(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags);
NTSTATUS __stdcall BCryptGetFipsAlgorithmMode(BOOLEAN *pfEnabled);
NTSTATUS __stdcall BCryptGetProperty(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
NTSTATUS __stdcall BCryptHash(BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbSecret, ULONG cbSecret, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput);
NTSTATUS __stdcall BCryptHashData(BCRYPT_HASH_HANDLE hHash, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
NTSTATUS __stdcall BCryptImportKey(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
NTSTATUS __stdcall BCryptImportKeyPair(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
NTSTATUS __stdcall BCryptKeyDerivation(BCRYPT_KEY_HANDLE hKey, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags);
NTSTATUS __stdcall BCryptOpenAlgorithmProvider(BCRYPT_ALG_HANDLE *phAlgorithm, LPCWSTR pszAlgId, LPCWSTR pszImplementation, ULONG dwFlags);
NTSTATUS __stdcall BCryptProcessMultiOperations(BCRYPT_HANDLE hObject, BCRYPT_MULTI_OPERATION_TYPE operationType, PVOID pOperations, ULONG cbOperations, ULONG dwFlags);
NTSTATUS __stdcall BCryptQueryContextConfiguration(ULONG dwTable, LPCWSTR pszContext, ULONG *pcbBuffer, PCRYPT_CONTEXT_CONFIG *ppBuffer);
NTSTATUS __stdcall BCryptQueryContextFunctionConfiguration(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer);
NTSTATUS __stdcall BCryptQueryContextFunctionProperty(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG *pcbValue, PUCHAR *ppbValue);
NTSTATUS __stdcall BCryptQueryProviderRegistration(LPCWSTR pszProvider, ULONG dwMode, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_PROVIDER_REG *ppBuffer);
NTSTATUS __stdcall BCryptRegisterConfigChangeNotify(HANDLE *phEvent);
NTSTATUS __stdcall BCryptRemoveContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction);
NTSTATUS __stdcall BCryptResolveProviders(LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProvider, ULONG dwMode, ULONG dwFlags, ULONG *pcbBuffer, PCRYPT_PROVIDER_REFS *ppBuffer);
NTSTATUS __stdcall BCryptSecretAgreement(BCRYPT_KEY_HANDLE hPrivKey, BCRYPT_KEY_HANDLE hPubKey, BCRYPT_SECRET_HANDLE *phAgreedSecret, ULONG dwFlags);
NTSTATUS __stdcall BCryptSetContextFunctionProperty(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG cbValue, PUCHAR pbValue);
NTSTATUS __stdcall BCryptSetProperty(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags);
NTSTATUS __stdcall BCryptSignHash(BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags);
NTSTATUS __stdcall BCryptUnregisterConfigChangeNotify(HANDLE hEvent);
NTSTATUS __stdcall BCryptVerifySignature(BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbHash, ULONG cbHash, PUCHAR pbSignature, ULONG cbSignature, ULONG dwFlags);
NTSTATUS __stdcall BatteryClassInitializeDevice(PBATTERY_MINIPORT_INFO MiniportInfo, PVOID *ClassData);
NTSTATUS __stdcall BatteryClassIoctl(PVOID ClassData, PIRP Irp);
NTSTATUS __stdcall BatteryClassQueryWmiDataBlock(PVOID ClassData, PDEVICE_OBJECT DeviceObject, PIRP Irp, ULONG GuidIndex, PULONG InstanceLengthArray, ULONG OutBufferSize, PUCHAR Buffer);
NTSTATUS __stdcall BatteryClassStatusNotify(PVOID ClassData);
NTSTATUS __stdcall BatteryClassSystemControl(PVOID ClassData, PVOID WmiLibContext, PDEVICE_OBJECT DeviceObject, PIRP Irp, PVOID Disposition);
NTSTATUS __stdcall BatteryClassUnload(PVOID ClassData);
NTSTATUS __stdcall BatteryClassUpdateData(PVOID ClassData, PBATTERY_MINIPORT_UPDATE_DATA UpdateData);
NTSTATUS __stdcall BdaCheckChanges(PIRP pIrp);
NTSTATUS __stdcall BdaCommitChanges(PIRP pIrp);
NTSTATUS __stdcall BdaCreateFilterFactory(PKSDEVICE pKSDevice, const KSFILTER_DESCRIPTOR *pFilterDescriptor, const BDA_FILTER_TEMPLATE *pBdaFilterTemplate);
NTSTATUS __stdcall BdaCreateFilterFactoryEx(PKSDEVICE pKSDevice, const KSFILTER_DESCRIPTOR *pFilterDescriptor, const BDA_FILTER_TEMPLATE *pBdaFilterTemplate, PKSFILTERFACTORY *ppKSFilterFactory);
NTSTATUS __stdcall BdaCreatePin(PKSFILTER pKSFilter, ULONG ulPinType, PULONG pulPinId);
NTSTATUS __stdcall BdaCreateTopology(PKSFILTER pKSFilter, ULONG InputPinId, ULONG OutputPinId);
NTSTATUS __stdcall BdaDeletePin(PKSFILTER pKSFilter, PULONG pulPinId);
NTSTATUS __stdcall BdaFilterFactoryUpdateCacheData(PKSFILTERFACTORY pFilterFactory, const KSFILTER_DESCRIPTOR *pFilterDescriptor);
NTSTATUS __stdcall BdaGetChangeState(PIRP pIrp, PBDA_CHANGE_STATE pChangeState);
NTSTATUS __stdcall BdaInitFilter(PKSFILTER pKSFilter, const BDA_FILTER_TEMPLATE *pBdaFilterTemplate);
NTSTATUS __stdcall BdaMethodCreatePin(PIRP pIrp, PKSMETHOD pKSMethod, PULONG pulPinFactoryID);
NTSTATUS __stdcall BdaMethodCreateTopology(PIRP pIrp, PKSMETHOD pKSMethod, PVOID pvIgnored);
NTSTATUS __stdcall BdaMethodDeletePin(PIRP pIrp, PKSMETHOD pKSMethod, PVOID pvIgnored);
NTSTATUS __stdcall BdaPropertyGetControllingPinId(PIRP Irp, PKSP_BDA_NODE_PIN Property, PULONG pulControllingPinId);
NTSTATUS __stdcall BdaPropertyGetPinControl(PIRP Irp, PKSPROPERTY Property, ULONG *pulProperty);
NTSTATUS __stdcall BdaPropertyNodeDescriptors(PIRP pIrp, PKSPROPERTY pKSProperty, BDANODE_DESCRIPTOR *pNodeDescriptorProperty);
NTSTATUS __stdcall BdaPropertyNodeEvents(PIRP pIrp, PKSP_NODE pKSProperty, GUID *pguidProperty);
NTSTATUS __stdcall BdaPropertyNodeMethods(PIRP pIrp, PKSP_NODE pKSProperty, GUID *pguidProperty);
NTSTATUS __stdcall BdaPropertyNodeProperties(PIRP pIrp, PKSP_NODE pKSProperty, GUID *pguidProperty);
NTSTATUS __stdcall BdaPropertyNodeTypes(PIRP pIrp, PKSPROPERTY pKSProperty, ULONG *pulProperty);
NTSTATUS __stdcall BdaPropertyPinTypes(PIRP pIrp, PKSPROPERTY pKSProperty, ULONG *pulProperty);
NTSTATUS __stdcall BdaPropertyTemplateConnections(PIRP pIrp, PKSPROPERTY pKSProperty, PKSTOPOLOGY_CONNECTION pConnectionProperty);
NTSTATUS __stdcall BdaStartChanges(PIRP pIrp);
NTSTATUS __stdcall BdaUninitFilter(PKSFILTER pKSFilter);
NTSTATUS __stdcall BdaValidateNodeProperty(PIRP pIrp, PKSPROPERTY pProperty);
NTSTATUS __stdcall CancelMibChangeNotify2(HANDLE NotificationHandle);
NTSTATUS __stdcall CcSetFileSizesEx(PFILE_OBJECT FileObject, PCC_FILE_SIZES FileSizes);
NTSTATUS __stdcall ChangerClassInitialize(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath, PMCD_INIT_DATA ChangerInitData);
NTSTATUS __stdcall ChangerClassSendSrbSynchronous(PDEVICE_OBJECT DeviceObject, PSCSI_REQUEST_BLOCK Srb, PVOID Buffer, ULONG BufferSize, BOOLEAN WriteToDevice);
NTSTATUS __stdcall ChangerExchangeMedium(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ChangerGetElementStatus(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ChangerGetParameters(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ChangerGetProductData(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ChangerGetStatus(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ChangerInitialize(PDEVICE_OBJECT DeviceObject);
NTSTATUS __stdcall ChangerInitializeElementStatus(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ChangerMoveMedium(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ChangerPerformDiagnostics(PDEVICE_OBJECT DeviceObject, PWMI_CHANGER_PROBLEM_DEVICE_ERROR changerDeviceError);
NTSTATUS __stdcall ChangerQueryVolumeTags(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ChangerReinitializeUnit(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ChangerSetAccess(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ChangerSetPosition(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ClassBuildRequest(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ClassClaimDevice(PDEVICE_OBJECT LowerDeviceObject, BOOLEAN Release);
NTSTATUS __stdcall ClassCreateDeviceObject(PDRIVER_OBJECT DriverObject, PCCHAR ObjectNameBuffer, PDEVICE_OBJECT LowerDeviceObject, BOOLEAN IsFdo, PDEVICE_OBJECT *DeviceObject);
NTSTATUS __stdcall ClassDeviceControl(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ClassForwardIrpSynchronous(PCOMMON_DEVICE_EXTENSION CommonExtension, PIRP Irp);
NTSTATUS __stdcall ClassGetDescriptor(PDEVICE_OBJECT DeviceObject, PSTORAGE_PROPERTY_ID PropertyId, PVOID *Descriptor);
NTSTATUS __stdcall ClassInitializeTestUnitPolling(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension, BOOLEAN AllowDriveToSleep);
NTSTATUS __stdcall ClassModeSelect(PDEVICE_OBJECT Fdo, PCHAR ModeSelectBuffer, ULONG Length, BOOLEAN SavePages);
NTSTATUS __stdcall ClassModeSenseTranslate(PDEVICE_OBJECT DeviceObject, PMODE_PARAMETER_HEADER ModeSenseData, PULONG ModeSenseBufferSize);
NTSTATUS __stdcall ClassReadDriveCapacity(PDEVICE_OBJECT DeviceObject);
NTSTATUS __stdcall ClassRemoveDevice(PDEVICE_OBJECT DeviceObject, UCHAR RemoveType);
NTSTATUS __stdcall ClassSendIrpSynchronous(PDEVICE_OBJECT TargetDeviceObject, PIRP Irp);
NTSTATUS __stdcall ClassSendSrbAsynchronous(PDEVICE_OBJECT DeviceObject, PSCSI_REQUEST_BLOCK Srb, PIRP Irp, PVOID BufferAddress, ULONG BufferLength, BOOLEAN WriteToDevice);
NTSTATUS __stdcall ClassSendSrbSynchronous(PDEVICE_OBJECT DeviceObject, PSCSI_REQUEST_BLOCK Srb, PVOID BufferAddress, ULONG BufferLength, BOOLEAN WriteToDevice);
NTSTATUS __stdcall ClassSetDeviceParameter(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension, PWSTR SubkeyName, PWSTR ParameterName, ULONG ParameterValue);
NTSTATUS __stdcall ClassSetFailurePredictionPoll(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension, FAILURE_PREDICTION_METHOD FailurePredictionMethod, ULONG PollingPeriod);
NTSTATUS __stdcall ClassSpinDownPowerHandler(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ClassStopUnitPowerHandler(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ClassWmiCompleteRequest(PDEVICE_OBJECT DeviceObject, PIRP Irp, NTSTATUS Status, ULONG BufferUsed, CCHAR PriorityBoost);
NTSTATUS __stdcall ClassWmiFireEvent(PDEVICE_OBJECT DeviceObject, LPGUID Guid, ULONG InstanceIndex, ULONG EventDataSize, PVOID EventData);
NTSTATUS __stdcall ClfsAddLogContainer(PLOG_FILE_OBJECT plfoLog, PULONGLONG pcbContainer, PUNICODE_STRING puszContainerPath);
NTSTATUS __stdcall ClfsAddLogContainerSet(PLOG_FILE_OBJECT plfoLog, USHORT cContainers, PULONGLONG pcbContainer, PUNICODE_STRING rguszContainerPath);
NTSTATUS __stdcall ClfsAdvanceLogBase(PVOID pvMarshalContext, PCLFS_LSN plsnBase, ULONG fFlags);
NTSTATUS __stdcall ClfsAlignReservedLog(PVOID pvMarshalContext, ULONG cRecords, LONGLONG rgcbReservation[], PLONGLONG pcbAlignReservation);
NTSTATUS __stdcall ClfsAllocReservedLog(PVOID pvMarshalContext, ULONG cRecords, PLONGLONG pcbAdjustment);
NTSTATUS __stdcall ClfsCloseAndResetLogFile(PLOG_FILE_OBJECT plfoLog);
NTSTATUS __stdcall ClfsCloseLogFileObject(PLOG_FILE_OBJECT plfoLog);
NTSTATUS __stdcall ClfsCreateLogFile(PPLOG_FILE_OBJECT pplfoLog, PUNICODE_STRING puszLogFileName, ACCESS_MASK fDesiredAccess, ULONG dwShareMode, PSECURITY_DESCRIPTOR psdLogFile, ULONG fCreateDisposition, ULONG fCreateOptions, ULONG fFlagsAndAttributes, ULONG fLogOptionFlag, PVOID pvContext, ULONG cbContext);
NTSTATUS __stdcall ClfsCreateMarshallingArea(PLOG_FILE_OBJECT plfoLog, POOL_TYPE ePoolType, PALLOCATE_FUNCTION pfnAllocBuffer, PFREE_FUNCTION pfnFreeBuffer, ULONG cbMarshallingBuffer, ULONG cMaxWriteBuffers, ULONG cMaxReadBuffers, PVOID *ppvMarshalContext);
NTSTATUS __stdcall ClfsCreateMarshallingAreaEx(PLOG_FILE_OBJECT plfoLog, POOL_TYPE ePoolType, PALLOCATE_FUNCTION pfnAllocBuffer, PFREE_FUNCTION pfnFreeBuffer, ULONG cbMarshallingBuffer, ULONG cMaxWriteBuffers, ULONG cMaxReadBuffers, ULONG cAlignmentSize, ULONGLONG fFlags, PVOID *ppvMarshalContext);
NTSTATUS __stdcall ClfsCreateScanContext(PLOG_FILE_OBJECT plfoLog, ULONG cFromContainer, ULONG cContainers, CLFS_SCAN_MODE eScanMode, PCLFS_SCAN_CONTEXT pcxScan);
NTSTATUS __stdcall ClfsDeleteLogByPointer(PLOG_FILE_OBJECT plfoLog);
NTSTATUS __stdcall ClfsDeleteLogFile(PUNICODE_STRING puszLogFileName, PVOID pvReserved, ULONG fLogOptionFlag, PVOID pvContext, ULONG cbContext);
NTSTATUS __stdcall ClfsDeleteMarshallingArea(PVOID pvMarshalContext);
NTSTATUS __stdcall ClfsFlushBuffers(PVOID pvMarshalContext);
NTSTATUS __stdcall ClfsFlushToLsn(PVOID pvMarshalContext, PCLFS_LSN plsnFlush, PCLFS_LSN plsnLastFlushed);
NTSTATUS __stdcall ClfsFreeReservedLog(PVOID pvMarshalContext, ULONG cRecords, PLONGLONG pcbAdjustment);
NTSTATUS __stdcall ClfsGetContainerName(PLOG_FILE_OBJECT plfoLog, CLFS_CONTAINER_ID cidLogicalContainer, PUNICODE_STRING puszContainerName, PULONG pcActualLenContainerName);
NTSTATUS __stdcall ClfsGetIoStatistics(PLOG_FILE_OBJECT plfoLog, PVOID pvStatsBuffer, ULONG cbStatsBuffer, CLFS_IOSTATS_CLASS eStatsClass, PULONG pcbStatsWritten);
NTSTATUS __stdcall ClfsGetLastLsn(PLOG_FILE_OBJECT plfoLog, PCLFS_LSN plsnLast);
NTSTATUS __stdcall ClfsGetLogFileInformation(PLOG_FILE_OBJECT plfoLog, PCLFS_INFORMATION pinfoBuffer, PULONG pcbInfoBuffer);
NTSTATUS __stdcall ClfsLsnDifference(PCLFS_LSN plsnStart, PCLFS_LSN plsnFinish, ULONG cbContainer, ULONG cbMaxBlock, PLONGLONG pcbDifference);
NTSTATUS __stdcall ClfsMgmtDeregisterManagedClient(CLFS_MGMT_CLIENT ClientCookie);
NTSTATUS __stdcall ClfsMgmtHandleLogFileFull(CLFS_MGMT_CLIENT Client);
NTSTATUS __stdcall ClfsMgmtInstallPolicy(PLOG_FILE_OBJECT LogFile, PCLFS_MGMT_POLICY Policy, ULONG PolicyLength);
NTSTATUS __stdcall ClfsMgmtQueryPolicy(PLOG_FILE_OBJECT LogFile, CLFS_MGMT_POLICY_TYPE PolicyType, PCLFS_MGMT_POLICY Policy, PULONG PolicyLength);
NTSTATUS __stdcall ClfsMgmtRegisterManagedClient(PLOG_FILE_OBJECT LogFile, PCLFS_MGMT_CLIENT_REGISTRATION RegistrationData, PCLFS_MGMT_CLIENT ClientCookie);
NTSTATUS __stdcall ClfsMgmtRemovePolicy(PLOG_FILE_OBJECT LogFile, CLFS_MGMT_POLICY_TYPE PolicyType);
NTSTATUS __stdcall ClfsMgmtSetLogFileSize(PLOG_FILE_OBJECT LogFile, PULONGLONG NewSizeInContainers, PULONGLONG ResultingSizeInContainers, PCLFS_SET_LOG_SIZE_COMPLETE_CALLBACK CompletionRoutine, PVOID CompletionRoutineData);
NTSTATUS __stdcall ClfsMgmtSetLogFileSizeAsClient(PLOG_FILE_OBJECT LogFile, PCLFS_MGMT_CLIENT ClientCookie, PULONGLONG NewSizeInContainers, PULONGLONG ResultingSizeInContainers, PCLFS_SET_LOG_SIZE_COMPLETE_CALLBACK CompletionRoutine, PVOID CompletionRoutineData);
NTSTATUS __stdcall ClfsMgmtTailAdvanceFailure(CLFS_MGMT_CLIENT Client, NTSTATUS Reason);
NTSTATUS __stdcall ClfsQueryLogFileInformation(PLOG_FILE_OBJECT plfoLog, CLFS_LOG_INFORMATION_CLASS eInformationClass, PVOID pinfoInputBuffer, ULONG cbinfoInputBuffer, PVOID pinfoBuffer, PULONG pcbInfoBuffer);
NTSTATUS __stdcall ClfsReadLogRecord(PVOID pvMarshalContext, PCLFS_LSN plsnFirst, CLFS_CONTEXT_MODE peContextMode, PVOID *ppvReadBuffer, PULONG pcbReadBuffer, PCLFS_RECORD_TYPE peRecordType, PCLFS_LSN plsnUndoNext, PCLFS_LSN plsnPrevious, PVOID *ppvReadContext);
NTSTATUS __stdcall ClfsReadNextLogRecord(PVOID pvReadContext, PVOID *ppvBuffer, PULONG pcbBuffer, PCLFS_RECORD_TYPE peRecordType, PCLFS_LSN plsnUser, PCLFS_LSN plsnUndoNext, PCLFS_LSN plsnPrevious, PCLFS_LSN plsnRecord);
NTSTATUS __stdcall ClfsReadPreviousRestartArea(PVOID pvReadContext, PVOID *ppvRestartBuffer, PULONG pcbRestartBuffer, PCLFS_LSN plsnRestart);
NTSTATUS __stdcall ClfsReadRestartArea(PVOID pvMarshalContext, PVOID *ppvRestartBuffer, PULONG pcbRestartBuffer, PCLFS_LSN plsn, PVOID *ppvReadContext);
NTSTATUS __stdcall ClfsRemoveLogContainer(PLOG_FILE_OBJECT plfoLog, PUNICODE_STRING puszContainerPath, BOOLEAN fForce);
NTSTATUS __stdcall ClfsRemoveLogContainerSet(PLOG_FILE_OBJECT plfoLog, USHORT cContainers, PUNICODE_STRING rgwszContainerPath, BOOLEAN fForce);
NTSTATUS __stdcall ClfsReserveAndAppendLog(PVOID pvMarshalContext, PCLFS_WRITE_ENTRY rgWriteEntries, ULONG cWriteEntries, PCLFS_LSN plsnUndoNext, PCLFS_LSN plsnPrevious, ULONG cReserveRecords, PLONGLONG rgcbReservation, ULONG fFlags, PCLFS_LSN plsn);
NTSTATUS __stdcall ClfsReserveAndAppendLogAligned(PVOID pvMarshalContext, PCLFS_WRITE_ENTRY rgWriteEntries, ULONG cWriteEntries, ULONG cbEntryAlignment, PCLFS_LSN plsnUndoNext, PCLFS_LSN plsnPrevious, ULONG cReserveRecords, PLONGLONG rgcbReservation, ULONG fFlags, PCLFS_LSN plsn);
NTSTATUS __stdcall ClfsScanLogContainers(PCLFS_SCAN_CONTEXT pcxScan, CLFS_SCAN_MODE eScanMode);
NTSTATUS __stdcall ClfsSetArchiveTail(PLOG_FILE_OBJECT plfoLog, PCLFS_LSN plsnArchiveTail);
NTSTATUS __stdcall ClfsSetEndOfLog(PLOG_FILE_OBJECT plfoLog, PCLFS_LSN plsnEnd);
NTSTATUS __stdcall ClfsSetLogFileInformation(PLOG_FILE_OBJECT plfoLog, CLFS_LOG_INFORMATION_CLASS eInformationClass, PVOID pinfoBuffer, ULONG cbBuffer);
NTSTATUS __stdcall ClfsTerminateReadLog(PVOID pvCursorContext);
NTSTATUS __stdcall ClfsWriteRestartArea(PVOID pvMarshalContext, PVOID pvRestartBuffer, ULONG cbRestartBuffer, PCLFS_LSN plsnBase, ULONG fFlags, PULONG pcbWritten, PCLFS_LSN plsnNext);
NTSTATUS __stdcall CmCallbackGetKeyObjectID(PLARGE_INTEGER Cookie, PVOID Object, PULONG_PTR ObjectID, PCUNICODE_STRING *ObjectName);
NTSTATUS __stdcall CmCallbackGetKeyObjectIDEx(PLARGE_INTEGER Cookie, PVOID Object, PULONG_PTR ObjectID, PCUNICODE_STRING *ObjectName, ULONG Flags);
NTSTATUS __stdcall CmRegisterCallback(PEX_CALLBACK_FUNCTION Function, PVOID Context, PLARGE_INTEGER Cookie);
NTSTATUS __stdcall CmRegisterCallbackEx(PEX_CALLBACK_FUNCTION Function, PCUNICODE_STRING Altitude, PVOID Driver, PVOID Context, PLARGE_INTEGER Cookie, PVOID Reserved);
NTSTATUS __stdcall CmSetCallbackObjectContext(PVOID Object, PLARGE_INTEGER Cookie, PVOID NewContext, PVOID *OldContext);
NTSTATUS __stdcall CmUnRegisterCallback(LARGE_INTEGER Cookie);
NTSTATUS __stdcall ConvertCompartmentGuidToId(const GUID *CompartmentGuid, PNET_IF_COMPARTMENT_ID CompartmentId);
NTSTATUS __stdcall ConvertCompartmentIdToGuid(NET_IF_COMPARTMENT_ID CompartmentId, GUID *CompartmentGuid);
NTSTATUS __stdcall ConvertInterfaceAliasToLuid(const WCHAR *InterfaceAlias, PNET_LUID InterfaceLuid);
NTSTATUS __stdcall ConvertInterfaceGuidToLuid(const GUID *InterfaceGuid, PNET_LUID InterfaceLuid);
NTSTATUS __stdcall ConvertInterfaceIndexToLuid(NET_IFINDEX InterfaceIndex, PNET_LUID InterfaceLuid);
NTSTATUS __stdcall ConvertInterfaceLuidToAlias(const NET_LUID *InterfaceLuid, PWSTR InterfaceAlias, SIZE_T Length);
NTSTATUS __stdcall ConvertInterfaceLuidToGuid(const NET_LUID *InterfaceLuid, GUID *InterfaceGuid);
NTSTATUS __stdcall ConvertInterfaceLuidToIndex(const NET_LUID *InterfaceLuid, PNET_IFINDEX InterfaceIndex);
NTSTATUS __stdcall ConvertInterfaceLuidToNameA(const NET_LUID *InterfaceLuid, PSTR InterfaceName, SIZE_T Length);
NTSTATUS __stdcall ConvertInterfaceLuidToNameW(const NET_LUID *InterfaceLuid, PWSTR InterfaceName, SIZE_T Length);
NTSTATUS __stdcall ConvertInterfaceNameToLuidA(const CHAR *InterfaceName, NET_LUID *InterfaceLuid);
NTSTATUS __stdcall ConvertInterfaceNameToLuidW(const WCHAR *InterfaceName, NET_LUID *InterfaceLuid);
NTSTATUS __stdcall ConvertIpv4MaskToLength(ULONG Mask, PUINT8 MaskLength);
NTSTATUS __stdcall ConvertLengthToIpv4Mask(ULONG MaskLength, PULONG Mask);
NTSTATUS __stdcall CreateAnycastIpAddressEntry(const MIB_ANYCASTIPADDRESS_ROW *Row);
NTSTATUS __stdcall CreateIpForwardEntry2(const MIB_IPFORWARD_ROW2 *Row);
NTSTATUS __stdcall CreateIpNetEntry2(const MIB_IPNET_ROW2 *Row);
NTSTATUS __stdcall CreateSortedAddressPairs(const PSOCKADDR_IN6 SourceAddressList, ULONG SourceAddressCount, const PSOCKADDR_IN6 DestinationAddressList, ULONG DestinationAddressCount, ULONG AddressSortOptions, PSOCKADDR_IN6_PAIR *SortedAddressPairList, ULONG *SortedAddressPairCount);
NTSTATUS __stdcall CreateUnicastIpAddressEntry(const MIB_UNICASTIPADDRESS_ROW *Row);
NTSTATUS __stdcall D3DKMTAbandonSwapChain(D3DKMT_ABANDONSWAPCHAIN *);
NTSTATUS __stdcall D3DKMTAcquireKeyedMutex(D3DKMT_ACQUIREKEYEDMUTEX *);
NTSTATUS __stdcall D3DKMTAcquireKeyedMutex2(D3DKMT_ACQUIREKEYEDMUTEX2 *);
NTSTATUS __stdcall D3DKMTAcquireSwapChain(D3DKMT_ACQUIRESWAPCHAIN *);
NTSTATUS __stdcall D3DKMTAdjustFullscreenGamma(D3DKMT_ADJUSTFULLSCREENGAMMA *);
NTSTATUS __stdcall D3DKMTChangeSurfacePointer(const D3DKMT_CHANGESURFACEPOINTER *);
NTSTATUS __stdcall D3DKMTChangeVideoMemoryReservation(const D3DKMT_CHANGEVIDEOMEMORYRESERVATION *);
NTSTATUS __stdcall D3DKMTCheckMonitorPowerState(const D3DKMT_CHECKMONITORPOWERSTATE *);
NTSTATUS __stdcall D3DKMTCheckMultiPlaneOverlaySupport(D3DKMT_CHECKMULTIPLANEOVERLAYSUPPORT *);
NTSTATUS __stdcall D3DKMTCheckMultiPlaneOverlaySupport2(D3DKMT_CHECKMULTIPLANEOVERLAYSUPPORT2 *);
NTSTATUS __stdcall D3DKMTCheckMultiPlaneOverlaySupport3(D3DKMT_CHECKMULTIPLANEOVERLAYSUPPORT3 *);
NTSTATUS __stdcall D3DKMTCheckOcclusion(const D3DKMT_CHECKOCCLUSION *);
NTSTATUS __stdcall D3DKMTCheckSharedResourceAccess(const D3DKMT_CHECKSHAREDRESOURCEACCESS *);
NTSTATUS __stdcall D3DKMTCheckVidPnExclusiveOwnership(const D3DKMT_CHECKVIDPNEXCLUSIVEOWNERSHIP *);
NTSTATUS __stdcall D3DKMTCloseAdapter(const D3DKMT_CLOSEADAPTER *);
NTSTATUS __stdcall D3DKMTConfigureSharedResource(const D3DKMT_CONFIGURESHAREDRESOURCE *);
NTSTATUS __stdcall D3DKMTCreateAllocation(D3DKMT_CREATEALLOCATION *);
NTSTATUS __stdcall D3DKMTCreateAllocation2(D3DKMT_CREATEALLOCATION *);
NTSTATUS __stdcall D3DKMTCreateContext(D3DKMT_CREATECONTEXT *);
NTSTATUS __stdcall D3DKMTCreateContextVirtual(D3DKMT_CREATECONTEXTVIRTUAL *);
NTSTATUS __stdcall D3DKMTCreateDCFromMemory(D3DKMT_CREATEDCFROMMEMORY *);
NTSTATUS __stdcall D3DKMTCreateDevice(D3DKMT_CREATEDEVICE *);
NTSTATUS __stdcall D3DKMTCreateHwContext(D3DKMT_CREATEHWCONTEXT *);
NTSTATUS __stdcall D3DKMTCreateHwQueue(D3DKMT_CREATEHWQUEUE *);
NTSTATUS __stdcall D3DKMTCreateKeyedMutex(D3DKMT_CREATEKEYEDMUTEX *);
NTSTATUS __stdcall D3DKMTCreateKeyedMutex2(D3DKMT_CREATEKEYEDMUTEX2 *);
NTSTATUS __stdcall D3DKMTCreateOutputDupl(const D3DKMT_CREATE_OUTPUTDUPL *);
NTSTATUS __stdcall D3DKMTCreateOverlay(D3DKMT_CREATEOVERLAY *);
NTSTATUS __stdcall D3DKMTCreatePagingQueue(D3DKMT_CREATEPAGINGQUEUE *);
NTSTATUS __stdcall D3DKMTCreateProtectedSession(D3DKMT_CREATEPROTECTEDSESSION *);
NTSTATUS __stdcall D3DKMTCreateSwapChain(D3DKMT_CREATESWAPCHAIN *);
NTSTATUS __stdcall D3DKMTCreateSynchronizationObject(D3DKMT_CREATESYNCHRONIZATIONOBJECT *);
NTSTATUS __stdcall D3DKMTCreateSynchronizationObject2(D3DKMT_CREATESYNCHRONIZATIONOBJECT2 *);
NTSTATUS __stdcall D3DKMTCreateTrackedWorkload(D3DKMT_CREATETRACKEDWORKLOAD *);
NTSTATUS __stdcall D3DKMTDestroyAllocation(const D3DKMT_DESTROYALLOCATION *);
NTSTATUS __stdcall D3DKMTDestroyAllocation2(const D3DKMT_DESTROYALLOCATION2 *);
NTSTATUS __stdcall D3DKMTDestroyContext(const D3DKMT_DESTROYCONTEXT *);
NTSTATUS __stdcall D3DKMTDestroyDCFromMemory(const D3DKMT_DESTROYDCFROMMEMORY *);
NTSTATUS __stdcall D3DKMTDestroyDevice(const D3DKMT_DESTROYDEVICE *);
NTSTATUS __stdcall D3DKMTDestroyHwContext(const D3DKMT_DESTROYHWCONTEXT *);
NTSTATUS __stdcall D3DKMTDestroyHwQueue(const D3DKMT_DESTROYHWQUEUE *);
NTSTATUS __stdcall D3DKMTDestroyKeyedMutex(const D3DKMT_DESTROYKEYEDMUTEX *);
NTSTATUS __stdcall D3DKMTDestroyOutputDupl(const D3DKMT_DESTROY_OUTPUTDUPL *);
NTSTATUS __stdcall D3DKMTDestroyOverlay(const D3DKMT_DESTROYOVERLAY *);
NTSTATUS __stdcall D3DKMTDestroyPagingQueue(D3DDDI_DESTROYPAGINGQUEUE *);
NTSTATUS __stdcall D3DKMTDestroyProtectedSession(D3DKMT_DESTROYPROTECTEDSESSION *);
NTSTATUS __stdcall D3DKMTDestroySynchronizationObject(const D3DKMT_DESTROYSYNCHRONIZATIONOBJECT *);
NTSTATUS __stdcall D3DKMTDestroyTrackedWorkload(D3DKMT_DESTROYTRACKEDWORKLOAD *);
NTSTATUS __stdcall D3DKMTEndTrackedWorkload(D3DKMT_ENDTRACKEDWORKLOAD *);
NTSTATUS __stdcall D3DKMTEnumAdapters(const D3DKMT_ENUMADAPTERS *);
NTSTATUS __stdcall D3DKMTEnumAdapters2(const D3DKMT_ENUMADAPTERS2 *);
NTSTATUS __stdcall D3DKMTEscape(const D3DKMT_ESCAPE *);
NTSTATUS __stdcall D3DKMTEvict(D3DKMT_EVICT *);
NTSTATUS __stdcall D3DKMTFlipOverlay(const D3DKMT_FLIPOVERLAY *);
NTSTATUS __stdcall D3DKMTFlushHeapTransitions(D3DKMT_FLUSHHEAPTRANSITIONS *);
NTSTATUS __stdcall D3DKMTFreeGpuVirtualAddress(const D3DKMT_FREEGPUVIRTUALADDRESS *);
NTSTATUS __stdcall D3DKMTGetAllocationPriority(const D3DKMT_GETALLOCATIONPRIORITY *);
NTSTATUS __stdcall D3DKMTGetAvailableTrackedWorkloadIndex(D3DKMT_GETAVAILABLETRACKEDWORKLOADINDEX *);
NTSTATUS __stdcall D3DKMTGetContextInProcessSchedulingPriority(D3DKMT_GETCONTEXTINPROCESSSCHEDULINGPRIORITY *);
NTSTATUS __stdcall D3DKMTGetContextSchedulingPriority(D3DKMT_GETCONTEXTSCHEDULINGPRIORITY *);
NTSTATUS __stdcall D3DKMTGetDWMVerticalBlankEvent(const D3DKMT_GETVERTICALBLANKEVENT *);
NTSTATUS __stdcall D3DKMTGetDeviceState(D3DKMT_GETDEVICESTATE *);
NTSTATUS __stdcall D3DKMTGetDisplayModeList(D3DKMT_GETDISPLAYMODELIST *);
NTSTATUS __stdcall D3DKMTGetMultiPlaneOverlayCaps(D3DKMT_GET_MULTIPLANE_OVERLAY_CAPS *);
NTSTATUS __stdcall D3DKMTGetMultisampleMethodList(D3DKMT_GETMULTISAMPLEMETHODLIST *);
NTSTATUS __stdcall D3DKMTGetOverlayState(D3DKMT_GETOVERLAYSTATE *);
NTSTATUS __stdcall D3DKMTGetPostCompositionCaps(D3DKMT_GET_POST_COMPOSITION_CAPS *);
NTSTATUS __stdcall D3DKMTGetPresentHistory(D3DKMT_GETPRESENTHISTORY *);
NTSTATUS __stdcall D3DKMTGetPresentQueueEvent(D3DKMT_HANDLE hAdapter, HANDLE *);
NTSTATUS __stdcall D3DKMTGetProcessDeviceRemovalSupport(D3DKMT_GETPROCESSDEVICEREMOVALSUPPORT *);
NTSTATUS __stdcall D3DKMTGetProcessSchedulingPriorityClass(HANDLE, D3DKMT_SCHEDULINGPRIORITYCLASS *);
NTSTATUS __stdcall D3DKMTGetResourcePresentPrivateDriverData(D3DDDI_GETRESOURCEPRESENTPRIVATEDRIVERDATA *);
NTSTATUS __stdcall D3DKMTGetRuntimeData(const D3DKMT_GETRUNTIMEDATA *);
NTSTATUS __stdcall D3DKMTGetScanLine(D3DKMT_GETSCANLINE *);
NTSTATUS __stdcall D3DKMTGetSetSwapChainMetadata(D3DKMT_GETSETSWAPCHAINMETADATA *);
NTSTATUS __stdcall D3DKMTGetSharedPrimaryHandle(D3DKMT_GETSHAREDPRIMARYHANDLE *);
NTSTATUS __stdcall D3DKMTGetSharedResourceAdapterLuid(D3DKMT_GETSHAREDRESOURCEADAPTERLUID *);
NTSTATUS __stdcall D3DKMTGetTrackedWorkloadStatistics(D3DKMT_GETTRACKEDWORKLOADSTATISTICS *);
NTSTATUS __stdcall D3DKMTInvalidateActiveVidPn(const D3DKMT_INVALIDATEACTIVEVIDPN *);
NTSTATUS __stdcall D3DKMTInvalidateCache(const D3DKMT_INVALIDATECACHE *);
NTSTATUS __stdcall D3DKMTLock(D3DKMT_LOCK *);
NTSTATUS __stdcall D3DKMTLock2(D3DKMT_LOCK2 *);
NTSTATUS __stdcall D3DKMTMakeResident(D3DDDI_MAKERESIDENT *);
NTSTATUS __stdcall D3DKMTMapGpuVirtualAddress(D3DDDI_MAPGPUVIRTUALADDRESS *);
NTSTATUS __stdcall D3DKMTMarkDeviceAsError(D3DKMT_MARKDEVICEASERROR *);
NTSTATUS __stdcall D3DKMTOfferAllocations(const D3DKMT_OFFERALLOCATIONS *);
NTSTATUS __stdcall D3DKMTOpenAdapterFromDeviceName(D3DKMT_OPENADAPTERFROMDEVICENAME *);
NTSTATUS __stdcall D3DKMTOpenAdapterFromGdiDisplayName(D3DKMT_OPENADAPTERFROMGDIDISPLAYNAME *);
NTSTATUS __stdcall D3DKMTOpenAdapterFromHdc(D3DKMT_OPENADAPTERFROMHDC *);
NTSTATUS __stdcall D3DKMTOpenAdapterFromLuid(const D3DKMT_OPENADAPTERFROMLUID *);
NTSTATUS __stdcall D3DKMTOpenKeyedMutex(D3DKMT_OPENKEYEDMUTEX *);
NTSTATUS __stdcall D3DKMTOpenKeyedMutex2(D3DKMT_OPENKEYEDMUTEX2 *);
NTSTATUS __stdcall D3DKMTOpenKeyedMutexFromNtHandle(D3DKMT_OPENKEYEDMUTEXFROMNTHANDLE *);
NTSTATUS __stdcall D3DKMTOpenNtHandleFromName(D3DKMT_OPENNTHANDLEFROMNAME *);
NTSTATUS __stdcall D3DKMTOpenProtectedSessionFromNtHandle(D3DKMT_OPENPROTECTEDSESSIONFROMNTHANDLE *);
NTSTATUS __stdcall D3DKMTOpenResource(D3DKMT_OPENRESOURCE *);
NTSTATUS __stdcall D3DKMTOpenResource2(D3DKMT_OPENRESOURCE *);
NTSTATUS __stdcall D3DKMTOpenResourceFromNtHandle(D3DKMT_OPENRESOURCEFROMNTHANDLE *);
NTSTATUS __stdcall D3DKMTOpenSwapChain(D3DKMT_OPENSWAPCHAIN *);
NTSTATUS __stdcall D3DKMTOpenSyncObjectFromNtHandle(D3DKMT_OPENSYNCOBJECTFROMNTHANDLE *);
NTSTATUS __stdcall D3DKMTOpenSyncObjectFromNtHandle2(D3DKMT_OPENSYNCOBJECTFROMNTHANDLE2 *);
NTSTATUS __stdcall D3DKMTOpenSyncObjectNtHandleFromName(D3DKMT_OPENSYNCOBJECTNTHANDLEFROMNAME *);
NTSTATUS __stdcall D3DKMTOpenSynchronizationObject(D3DKMT_OPENSYNCHRONIZATIONOBJECT *);
NTSTATUS __stdcall D3DKMTOutputDuplGetFrameInfo(D3DKMT_OUTPUTDUPL_GET_FRAMEINFO *);
NTSTATUS __stdcall D3DKMTOutputDuplGetMetaData(D3DKMT_OUTPUTDUPL_METADATA *);
NTSTATUS __stdcall D3DKMTOutputDuplGetPointerShapeData(D3DKMT_OUTPUTDUPL_GET_POINTER_SHAPE_DATA *);
NTSTATUS __stdcall D3DKMTOutputDuplPresent(const D3DKMT_OUTPUTDUPLPRESENT *);
NTSTATUS __stdcall D3DKMTOutputDuplReleaseFrame(D3DKMT_OUTPUTDUPL_RELEASE_FRAME *);
NTSTATUS __stdcall D3DKMTPollDisplayChildren(const D3DKMT_POLLDISPLAYCHILDREN *);
NTSTATUS __stdcall D3DKMTPresent(D3DKMT_PRESENT *);
NTSTATUS __stdcall D3DKMTPresentMultiPlaneOverlay(const D3DKMT_PRESENT_MULTIPLANE_OVERLAY *);
NTSTATUS __stdcall D3DKMTPresentMultiPlaneOverlay2(const D3DKMT_PRESENT_MULTIPLANE_OVERLAY2 *);
NTSTATUS __stdcall D3DKMTPresentMultiPlaneOverlay3(const D3DKMT_PRESENT_MULTIPLANE_OVERLAY3 *);
NTSTATUS __stdcall D3DKMTPresentRedirected(D3DKMT_PRESENT_REDIRECTED *);
NTSTATUS __stdcall D3DKMTQueryAdapterInfo(const D3DKMT_QUERYADAPTERINFO *);
NTSTATUS __stdcall D3DKMTQueryAllocationResidency(const D3DKMT_QUERYALLOCATIONRESIDENCY *);
NTSTATUS __stdcall D3DKMTQueryClockCalibration(D3DKMT_QUERYCLOCKCALIBRATION *);
NTSTATUS __stdcall D3DKMTQueryFSEBlock(D3DKMT_QUERYFSEBLOCK *);
NTSTATUS __stdcall D3DKMTQueryProcessOfferInfo(D3DKMT_QUERYPROCESSOFFERINFO *);
NTSTATUS __stdcall D3DKMTQueryProtectedSessionInfoFromNtHandle(D3DKMT_QUERYPROTECTEDSESSIONINFOFROMNTHANDLE *);
NTSTATUS __stdcall D3DKMTQueryProtectedSessionStatus(D3DKMT_QUERYPROTECTEDSESSIONSTATUS *);
NTSTATUS __stdcall D3DKMTQueryRemoteVidPnSourceFromGdiDisplayName(D3DKMT_QUERYREMOTEVIDPNSOURCEFROMGDIDISPLAYNAME *);
NTSTATUS __stdcall D3DKMTQueryResourceInfo(D3DKMT_QUERYRESOURCEINFO *);
NTSTATUS __stdcall D3DKMTQueryResourceInfoFromNtHandle(D3DKMT_QUERYRESOURCEINFOFROMNTHANDLE *);
NTSTATUS __stdcall D3DKMTQueryVidPnExclusiveOwnership(D3DKMT_QUERYVIDPNEXCLUSIVEOWNERSHIP *);
NTSTATUS __stdcall D3DKMTQueryVideoMemoryInfo(D3DKMT_QUERYVIDEOMEMORYINFO *);
NTSTATUS __stdcall D3DKMTReclaimAllocations(const D3DKMT_RECLAIMALLOCATIONS *);
NTSTATUS __stdcall D3DKMTReclaimAllocations2(D3DKMT_RECLAIMALLOCATIONS2 *);
NTSTATUS __stdcall D3DKMTRegisterTrimNotification(D3DKMT_REGISTERTRIMNOTIFICATION *);
NTSTATUS __stdcall D3DKMTReleaseKeyedMutex(D3DKMT_RELEASEKEYEDMUTEX *);
NTSTATUS __stdcall D3DKMTReleaseKeyedMutex2(D3DKMT_RELEASEKEYEDMUTEX2 *);
NTSTATUS __stdcall D3DKMTReleaseProcessVidPnSourceOwners(HANDLE);
NTSTATUS __stdcall D3DKMTReleaseSwapChain(D3DKMT_RELEASESWAPCHAIN *);
NTSTATUS __stdcall D3DKMTRender(D3DKMT_RENDER *);
NTSTATUS __stdcall D3DKMTReserveGpuVirtualAddress(D3DDDI_RESERVEGPUVIRTUALADDRESS *);
NTSTATUS __stdcall D3DKMTResetTrackedWorkload(D3DKMT_RESETTRACKEDWORKLOAD *);
NTSTATUS __stdcall D3DKMTSetAllocationPriority(const D3DKMT_SETALLOCATIONPRIORITY *);
NTSTATUS __stdcall D3DKMTSetContextInProcessSchedulingPriority(const D3DKMT_SETCONTEXTINPROCESSSCHEDULINGPRIORITY *);
NTSTATUS __stdcall D3DKMTSetContextSchedulingPriority(const D3DKMT_SETCONTEXTSCHEDULINGPRIORITY *);
NTSTATUS __stdcall D3DKMTSetDisplayMode(const D3DKMT_SETDISPLAYMODE *);
NTSTATUS __stdcall D3DKMTSetDisplayPrivateDriverFormat(const D3DKMT_SETDISPLAYPRIVATEDRIVERFORMAT *);
NTSTATUS __stdcall D3DKMTSetDodIndirectSwapchain(D3DKMT_SETDODINDIRECTSWAPCHAIN *);
NTSTATUS __stdcall D3DKMTSetFSEBlock(const D3DKMT_SETFSEBLOCK *);
NTSTATUS __stdcall D3DKMTSetGammaRamp(const D3DKMT_SETGAMMARAMP *);
NTSTATUS __stdcall D3DKMTSetHwProtectionTeardownRecovery(D3DKMT_SETHWPROTECTIONTEARDOWNRECOVERY *);
NTSTATUS __stdcall D3DKMTSetMonitorColorSpaceTransform(D3DKMT_SET_COLORSPACE_TRANSFORM *);
NTSTATUS __stdcall D3DKMTSetProcessSchedulingPriorityClass(HANDLE, D3DKMT_SCHEDULINGPRIORITYCLASS);
NTSTATUS __stdcall D3DKMTSetQueuedLimit(const D3DKMT_SETQUEUEDLIMIT *);
NTSTATUS __stdcall D3DKMTSetStablePowerState(const D3DKMT_SETSTABLEPOWERSTATE *);
NTSTATUS __stdcall D3DKMTSetSyncRefreshCountWaitTarget(const D3DKMT_SETSYNCREFRESHCOUNTWAITTARGET *);
NTSTATUS __stdcall D3DKMTSetVidPnSourceHwProtection(D3DKMT_SETVIDPNSOURCEHWPROTECTION *);
NTSTATUS __stdcall D3DKMTSetVidPnSourceOwner(const D3DKMT_SETVIDPNSOURCEOWNER *);
NTSTATUS __stdcall D3DKMTSetVidPnSourceOwner1(const D3DKMT_SETVIDPNSOURCEOWNER1 *);
NTSTATUS __stdcall D3DKMTSetVidPnSourceOwner2(const D3DKMT_SETVIDPNSOURCEOWNER2 *);
NTSTATUS __stdcall D3DKMTShareObjects(UINT cObjects, const D3DKMT_HANDLE *hObjects, POBJECT_ATTRIBUTES pObjectAttributes, ULONG dwDesiredAccess, HANDLE *phSharedNtHandle);
NTSTATUS __stdcall D3DKMTSharedPrimaryLockNotification(const D3DKMT_SHAREDPRIMARYLOCKNOTIFICATION *);
NTSTATUS __stdcall D3DKMTSharedPrimaryUnLockNotification(const D3DKMT_SHAREDPRIMARYUNLOCKNOTIFICATION *);
NTSTATUS __stdcall D3DKMTSignalSynchronizationObject(const D3DKMT_SIGNALSYNCHRONIZATIONOBJECT *);
NTSTATUS __stdcall D3DKMTSignalSynchronizationObject2(const D3DKMT_SIGNALSYNCHRONIZATIONOBJECT2 *);
NTSTATUS __stdcall D3DKMTSignalSynchronizationObjectFromCpu(const D3DKMT_SIGNALSYNCHRONIZATIONOBJECTFROMCPU *);
NTSTATUS __stdcall D3DKMTSignalSynchronizationObjectFromGpu(const D3DKMT_SIGNALSYNCHRONIZATIONOBJECTFROMGPU *);
NTSTATUS __stdcall D3DKMTSignalSynchronizationObjectFromGpu2(const D3DKMT_SIGNALSYNCHRONIZATIONOBJECTFROMGPU2 *);
NTSTATUS __stdcall D3DKMTSubmitCommand(const D3DKMT_SUBMITCOMMAND *);
NTSTATUS __stdcall D3DKMTSubmitCommandToHwQueue(const D3DKMT_SUBMITCOMMANDTOHWQUEUE *);
NTSTATUS __stdcall D3DKMTSubmitPresentBltToHwQueue(const D3DKMT_SUBMITPRESENTBLTTOHWQUEUE *);
NTSTATUS __stdcall D3DKMTSubmitPresentToHwQueue(const D3DKMT_SUBMITPRESENTTOHWQUEUE *);
NTSTATUS __stdcall D3DKMTSubmitSignalSyncObjectsToHwQueue(const D3DKMT_SUBMITSIGNALSYNCOBJECTSTOHWQUEUE *);
NTSTATUS __stdcall D3DKMTSubmitWaitForSyncObjectsToHwQueue(const D3DKMT_SUBMITWAITFORSYNCOBJECTSTOHWQUEUE *);
NTSTATUS __stdcall D3DKMTTrimProcessCommitment(D3DKMT_TRIMPROCESSCOMMITMENT *);
NTSTATUS __stdcall D3DKMTUnlock(const D3DKMT_UNLOCK *);
NTSTATUS __stdcall D3DKMTUnlock2(const D3DKMT_UNLOCK2 *);
NTSTATUS __stdcall D3DKMTUnregisterTrimNotification(D3DKMT_UNREGISTERTRIMNOTIFICATION *);
NTSTATUS __stdcall D3DKMTUpdateAllocationProperty(D3DDDI_UPDATEALLOCPROPERTY *);
NTSTATUS __stdcall D3DKMTUpdateGpuVirtualAddress(const D3DKMT_UPDATEGPUVIRTUALADDRESS *);
NTSTATUS __stdcall D3DKMTUpdateOverlay(const D3DKMT_UPDATEOVERLAY *);
NTSTATUS __stdcall D3DKMTUpdateTrackedWorkload(D3DKMT_UPDATETRACKEDWORKLOAD *);
NTSTATUS __stdcall D3DKMTWaitForIdle(const D3DKMT_WAITFORIDLE *);
NTSTATUS __stdcall D3DKMTWaitForSynchronizationObject(const D3DKMT_WAITFORSYNCHRONIZATIONOBJECT *);
NTSTATUS __stdcall D3DKMTWaitForSynchronizationObject2(const D3DKMT_WAITFORSYNCHRONIZATIONOBJECT2 *);
NTSTATUS __stdcall D3DKMTWaitForSynchronizationObjectFromCpu(const D3DKMT_WAITFORSYNCHRONIZATIONOBJECTFROMCPU *);
NTSTATUS __stdcall D3DKMTWaitForSynchronizationObjectFromGpu(const D3DKMT_WAITFORSYNCHRONIZATIONOBJECTFROMGPU *);
NTSTATUS __stdcall D3DKMTWaitForVerticalBlankEvent(const D3DKMT_WAITFORVERTICALBLANKEVENT *);
NTSTATUS __stdcall D3DKMTWaitForVerticalBlankEvent2(const D3DKMT_WAITFORVERTICALBLANKEVENT2 *);
NTSTATUS __stdcall DbgQueryDebugFilterState(ULONG ComponentId, ULONG Level);
NTSTATUS __stdcall DbgSetDebugFilterState(ULONG ComponentId, ULONG Level, BOOLEAN State);
NTSTATUS __stdcall DbgSetDebugPrintCallback(PDEBUG_PRINT_CALLBACK DebugPrintCallback, BOOLEAN Enable);
NTSTATUS __stdcall DeRegisterOpRegionHandler(PDEVICE_OBJECT DeviceObject, PVOID OperationRegionObject);
NTSTATUS __stdcall DeleteAnycastIpAddressEntry(const MIB_ANYCASTIPADDRESS_ROW *Row);
NTSTATUS __stdcall DeleteIpForwardEntry2(const MIB_IPFORWARD_ROW2 *Row);
NTSTATUS __stdcall DeleteIpNetEntry2(const MIB_IPNET_ROW2 *Row);
NTSTATUS __stdcall DeleteUnicastIpAddressEntry(const MIB_UNICASTIPADDRESS_ROW *Row);
NTSTATUS __stdcall DlEvalAcpiMethod(HANDLE DeviceHandle, ULONG DeviceUid, PACPI_EVAL_INPUT_BUFFER_COMPLEX AcpiInputBuffer, ULONG AcpiInputSize, PACPI_EVAL_OUTPUT_BUFFER AcpiOutputBuffer, ULONG AcpiOutputSize);
NTSTATUS __stdcall DlGetAccessRanges(PVOID DeviceHandle, ULONG NumRequestedResources, PIO_RESOURCE_DESCRIPTOR RequestedResources, ULONG NumAccessRanges, PVIDEO_ACCESS_RANGE AccessRanges, PVOID VendorId, PVOID DeviceId, PULONG Slot);
NTSTATUS __stdcall DlGetDeviceInformation(PVOID DeviceHandle, PDXGK_DEVICE_INFO DeviceInfo);
NTSTATUS __stdcall DlIndicateChildStatus(PVOID DeviceHandle, PDXGK_CHILD_STATUS ChildStatus);
NTSTATUS __stdcall DlMapMemoryEx(PVOID DeviceHandle, LARGE_INTEGER TranslatedAddress, PULONG Length, PULONG InIoSpace, HANDLE ProcessHandle, PVOID *VirtualAddress, BOOLEAN MapToUserMode);
NTSTATUS __stdcall DlQueryServices(PVOID DeviceHandle, VIDEO_PORT_SERVICES ServicesType, PINTERFACE Interface);
NTSTATUS __stdcall DlUnmapMemory(PVOID DeviceHandle, PVOID VirtualAddress, HANDLE ProcessHandle);
NTSTATUS __stdcall DriverEntry(_DRIVER_OBJECT *DriverObject, PUNICODE_STRING RegistryPath);
NTSTATUS __stdcall DrmAddContentHandlers(ULONG ContentId, PVOID *paHandlers, ULONG NumHandlers);
NTSTATUS __stdcall DrmCreateContentMixed(PULONG paContentId, ULONG cContentId, PULONG pMixedContentId);
NTSTATUS __stdcall DrmDestroyContent(ULONG ContentId);
NTSTATUS __stdcall DrmForwardContentToDeviceObject(ULONG ContentId, PVOID Reserved, PCDRMFORWARD DrmForward);
NTSTATUS __stdcall DrmForwardContentToFileObject(ULONG ContentId, PFILE_OBJECT FileObject);
NTSTATUS __stdcall DrmForwardContentToInterface(ULONG ContentId, PUNKNOWN pUnknown, ULONG NumMethods);
NTSTATUS __stdcall DrmGetContentRights(ULONG ContentId, PDRMRIGHTS DrmRights);
NTSTATUS __stdcall DsmGetScsiAddress(PDEVICE_OBJECT DeviceObject, PSCSI_ADDRESS *ScsiAddress);
NTSTATUS __stdcall DsmGetVersion(PMPIO_VERSION_INFO MpioVersion, ULONG MpioVersionSize);
NTSTATUS __stdcall DsmReleaseQueue(PDEVICE_OBJECT TargetDevice);
NTSTATUS __stdcall DsmSendPassThroughDirect(PDEVICE_OBJECT DeviceObject, PSCSI_PASS_THROUGH_DIRECT ScsiPassThrough, ULONG InputBufferLength, ULONG OutputBufferLength);
NTSTATUS __stdcall DsmSendRequest(PVOID MPIOContext, PDEVICE_OBJECT TargetDevice, PIRP Irp, PVOID DsmId);
NTSTATUS __stdcall DsmSendRequestEx(PVOID MPIOContext, PDEVICE_OBJECT TargetDevice, PIRP Irp, PVOID DsmId, ULONG Flags);
NTSTATUS __stdcall DsmSendTUR(PDEVICE_OBJECT TargetDevice);
NTSTATUS __stdcall DsmWriteEvent(PVOID MPIOContext, PWSTR ComponentName, PWSTR EventDescription, ULONG Severity);
NTSTATUS __stdcall DuplicateConnectionInformation(PRXCE_CONNECTION_INFORMATION *Copy, PRXCE_CONNECTION_INFORMATION Original, POOL_TYPE PoolType);
NTSTATUS __stdcall DuplicateTransportAddress(PTRANSPORT_ADDRESS *Copy, PTRANSPORT_ADDRESS Original, POOL_TYPE PoolType);
NTSTATUS __stdcall DxgkInitialize(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath, PDRIVER_INITIALIZATION_DATA DriverInitializationData);
NTSTATUS __stdcall DxgkInitializeDisplayOnlyDriver(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath, PKMDDOD_INITIALIZATION_DATA KmdDodInitializationData);
NTSTATUS __stdcall DxgkUnInitialize(PDRIVER_OBJECT DriverObject);
NTSTATUS __stdcall EntropyProvideData(ENTROPY_SOURCE_HANDLE hEntropySource, PCBYTE pbData, SIZE_T cbData, ULONG entropyEstimateInMilliBits);
NTSTATUS __stdcall EntropyRegisterCallback(ENTROPY_SOURCE_HANDLE hEntropySource, PENTROPY_SOURCE_CALLBACK_FUNCTION pCallbackFunction, PVOID context);
NTSTATUS __stdcall EntropyRegisterSource(ENTROPY_SOURCE_HANDLE *phEntropySource, ENTROPY_SOURCE_TYPE entropySourceType, PCWSTR entropySourceName);
NTSTATUS __stdcall EntropyUnregisterSource(ENTROPY_SOURCE_HANDLE hEntropySource);
NTSTATUS __stdcall EtwActivityIdControl(ULONG ControlCode, LPGUID ActivityId);
NTSTATUS __stdcall EtwRegister(LPCGUID ProviderId, PETWENABLECALLBACK EnableCallback, PVOID CallbackContext, PREGHANDLE RegHandle);
NTSTATUS __stdcall EtwSetInformation(REGHANDLE RegHandle, EVENT_INFO_CLASS InformationClass, PVOID EventInformation, ULONG InformationLength);
NTSTATUS __stdcall EtwUnregister(REGHANDLE RegHandle);
NTSTATUS __stdcall EtwWrite(REGHANDLE RegHandle, PCEVENT_DESCRIPTOR EventDescriptor, LPCGUID ActivityId, ULONG UserDataCount, PEVENT_DATA_DESCRIPTOR UserData);
NTSTATUS __stdcall EtwWriteEx(REGHANDLE RegHandle, PCEVENT_DESCRIPTOR EventDescriptor, ULONG64 Filter, ULONG Flags, LPCGUID ActivityId, LPCGUID RelatedActivityId, ULONG UserDataCount, PEVENT_DATA_DESCRIPTOR UserData);
NTSTATUS __stdcall EtwWriteString(REGHANDLE RegHandle, UCHAR Level, ULONGLONG Keyword, LPCGUID ActivityId, PCWSTR String);
NTSTATUS __stdcall EtwWriteTransfer(REGHANDLE RegHandle, PCEVENT_DESCRIPTOR EventDescriptor, LPCGUID ActivityId, LPCGUID RelatedActivityId, ULONG UserDataCount, PEVENT_DATA_DESCRIPTOR UserData);
NTSTATUS __stdcall ExCreateCallback(PCALLBACK_OBJECT *CallbackObject, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN Create, BOOLEAN AllowMultipleCallbacks);
NTSTATUS __stdcall ExDeleteResourceLite(PERESOURCE Resource);
NTSTATUS __stdcall ExEnumerateSystemFirmwareTables(ULONG FirmwareTableProviderSignature, PVOID FirmwareTableBuffer, ULONG BufferLength, PULONG ReturnLength);
NTSTATUS __stdcall ExExtendZone(PZONE_HEADER Zone, PVOID Segment, ULONG SegmentSize);
NTSTATUS __stdcall ExGetFirmwareEnvironmentVariable(PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);
NTSTATUS __stdcall ExGetSystemFirmwareTable(ULONG FirmwareTableProviderSignature, ULONG FirmwareTableID, PVOID FirmwareTableBuffer, ULONG BufferLength, PULONG ReturnLength);
NTSTATUS __stdcall ExInitializeLookasideListEx(PLOOKASIDE_LIST_EX Lookaside, PALLOCATE_FUNCTION_EX Allocate, PFREE_FUNCTION_EX Free, POOL_TYPE PoolType, ULONG Flags, SIZE_T Size, ULONG Tag, USHORT Depth);
NTSTATUS __stdcall ExInitializeResourceLite(PERESOURCE Resource);
NTSTATUS __stdcall ExInitializeZone(PZONE_HEADER Zone, ULONG BlockSize, PVOID InitialSegment, ULONG InitialSegmentSize);
NTSTATUS __stdcall ExInterlockedExtendZone(PZONE_HEADER Zone, PVOID Segment, ULONG SegmentSize, PKSPIN_LOCK Lock);
NTSTATUS __stdcall ExReinitializeResourceLite(PERESOURCE Resource);
NTSTATUS __stdcall ExSetFirmwareEnvironmentVariable(PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);
NTSTATUS __stdcall ExUuidCreate(UUID *Uuid);
NTSTATUS __stdcall FltAddOpenReparseEntry(PFLT_FILTER Filter, PFLT_CALLBACK_DATA Data, POPEN_REPARSE_LIST_ENTRY OpenReparseEntry);
NTSTATUS __stdcall FltAdjustDeviceStackSizeForIoRedirection(PFLT_INSTANCE SourceInstance, PFLT_INSTANCE TargetInstance, PBOOLEAN SourceDeviceStackSizeModified);
NTSTATUS __stdcall FltAllocateCallbackData(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PFLT_CALLBACK_DATA *RetNewCallbackData);
NTSTATUS __stdcall FltAllocateCallbackDataEx(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, FLT_ALLOCATE_CALLBACK_DATA_FLAGS Flags, PFLT_CALLBACK_DATA *RetNewCallbackData);
NTSTATUS __stdcall FltAllocateContext(PFLT_FILTER Filter, FLT_CONTEXT_TYPE ContextType, SIZE_T ContextSize, POOL_TYPE PoolType, PFLT_CONTEXT *ReturnedContext);
NTSTATUS __stdcall FltAllocateExtraCreateParameter(PFLT_FILTER Filter, LPCGUID EcpType, ULONG SizeOfContext, FSRTL_ALLOCATE_ECP_FLAGS Flags, PFSRTL_EXTRA_CREATE_PARAMETER_CLEANUP_CALLBACK CleanupCallback, ULONG PoolTag, PVOID *EcpContext);
NTSTATUS __stdcall FltAllocateExtraCreateParameterFromLookasideList(PFLT_FILTER Filter, LPCGUID EcpType, ULONG SizeOfContext, FSRTL_ALLOCATE_ECP_FLAGS Flags, PFSRTL_EXTRA_CREATE_PARAMETER_CLEANUP_CALLBACK CleanupCallback, PVOID LookasideList, PVOID *EcpContext);
NTSTATUS __stdcall FltAllocateExtraCreateParameterList(PFLT_FILTER Filter, FSRTL_ALLOCATE_ECPLIST_FLAGS Flags, PECP_LIST *EcpList);
NTSTATUS __stdcall FltApplyPriorityInfoThread(PIO_PRIORITY_INFO InputPriorityInfo, PIO_PRIORITY_INFO OutputPriorityInfo, PETHREAD Thread);
NTSTATUS __stdcall FltAttachVolume(PFLT_FILTER Filter, PFLT_VOLUME Volume, PCUNICODE_STRING InstanceName, PFLT_INSTANCE *RetInstance);
NTSTATUS __stdcall FltAttachVolumeAtAltitude(PFLT_FILTER Filter, PFLT_VOLUME Volume, PCUNICODE_STRING Altitude, PCUNICODE_STRING InstanceName, PFLT_INSTANCE *RetInstance);
NTSTATUS __stdcall FltBuildDefaultSecurityDescriptor(PSECURITY_DESCRIPTOR *SecurityDescriptor, ACCESS_MASK DesiredAccess);
NTSTATUS __stdcall FltCancellableWaitForMultipleObjects(ULONG Count, PVOID ObjectArray[], WAIT_TYPE WaitType, PLARGE_INTEGER Timeout, PKWAIT_BLOCK WaitBlockArray, PFLT_CALLBACK_DATA CallbackData);
NTSTATUS __stdcall FltCancellableWaitForSingleObject(PVOID Object, PLARGE_INTEGER Timeout, PFLT_CALLBACK_DATA CallbackData);
NTSTATUS __stdcall FltCbdqInitialize(PFLT_INSTANCE Instance, PFLT_CALLBACK_DATA_QUEUE Cbdq, PFLT_CALLBACK_DATA_QUEUE_INSERT_IO CbdqInsertIo, PFLT_CALLBACK_DATA_QUEUE_REMOVE_IO CbdqRemoveIo, PFLT_CALLBACK_DATA_QUEUE_PEEK_NEXT_IO CbdqPeekNextIo, PFLT_CALLBACK_DATA_QUEUE_ACQUIRE CbdqAcquire, PFLT_CALLBACK_DATA_QUEUE_RELEASE CbdqRelease, PFLT_CALLBACK_DATA_QUEUE_COMPLETE_CANCELED_IO CbdqCompleteCanceledIo);
NTSTATUS __stdcall FltCbdqInsertIo(PFLT_CALLBACK_DATA_QUEUE Cbdq, PFLT_CALLBACK_DATA Cbd, PFLT_CALLBACK_DATA_QUEUE_IO_CONTEXT Context, PVOID InsertContext);
NTSTATUS __stdcall FltCheckAndGrowNameControl(PFLT_NAME_CONTROL NameCtrl, USHORT NewSize);
NTSTATUS __stdcall FltClearCancelCompletion(PFLT_CALLBACK_DATA CallbackData);
NTSTATUS __stdcall FltClose(HANDLE FileHandle);
NTSTATUS __stdcall FltCloseSectionForDataScan(PFLT_CONTEXT SectionContext);
NTSTATUS __stdcall FltCommitComplete(PFLT_INSTANCE Instance, PKTRANSACTION Transaction, PFLT_CONTEXT TransactionContext);
NTSTATUS __stdcall FltCommitFinalizeComplete(PFLT_INSTANCE Instance, PKTRANSACTION Transaction, PFLT_CONTEXT TransactionContext);
NTSTATUS __stdcall FltCopyOpenReparseList(PFLT_FILTER Filter, PFLT_CALLBACK_DATA Data, PECP_LIST EcpList);
NTSTATUS __stdcall FltCreateCommunicationPort(PFLT_FILTER Filter, PFLT_PORT *ServerPort, POBJECT_ATTRIBUTES ObjectAttributes, PVOID ServerPortCookie, PFLT_CONNECT_NOTIFY ConnectNotifyCallback, PFLT_DISCONNECT_NOTIFY DisconnectNotifyCallback, PFLT_MESSAGE_NOTIFY MessageNotifyCallback, LONG MaxConnections);
NTSTATUS __stdcall FltCreateFile(PFLT_FILTER Filter, PFLT_INSTANCE Instance, PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength, ULONG Flags);
NTSTATUS __stdcall FltCreateFileEx(PFLT_FILTER Filter, PFLT_INSTANCE Instance, PHANDLE FileHandle, PFILE_OBJECT *FileObject, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength, ULONG Flags);
NTSTATUS __stdcall FltCreateFileEx2(PFLT_FILTER Filter, PFLT_INSTANCE Instance, PHANDLE FileHandle, PFILE_OBJECT *FileObject, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength, ULONG Flags, PIO_DRIVER_CREATE_CONTEXT DriverContext);
NTSTATUS __stdcall FltCreateMailslotFile(PFLT_FILTER Filter, PFLT_INSTANCE Instance, PHANDLE FileHandle, PFILE_OBJECT *FileObject, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout, PIO_DRIVER_CREATE_CONTEXT DriverContext);
NTSTATUS __stdcall FltCreateNamedPipeFile(PFLT_FILTER Filter, PFLT_INSTANCE Instance, PHANDLE FileHandle, PFILE_OBJECT *FileObject, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout, PIO_DRIVER_CREATE_CONTEXT DriverContext);
NTSTATUS __stdcall FltCreateSectionForDataScan(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PFLT_CONTEXT SectionContext, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, ULONG Flags, PHANDLE SectionHandle, PVOID *SectionObject, PLARGE_INTEGER SectionFileSize);
NTSTATUS __stdcall FltCreateSystemVolumeInformationFolder(PFLT_INSTANCE Instance);
NTSTATUS __stdcall FltDecodeParameters(PFLT_CALLBACK_DATA CallbackData, PMDL **MdlAddressPointer, PVOID **Buffer, PULONG *Length, LOCK_OPERATION *DesiredAccess);
NTSTATUS __stdcall FltDeleteFileContext(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PFLT_CONTEXT *OldContext);
NTSTATUS __stdcall FltDeleteInstanceContext(PFLT_INSTANCE Instance, PFLT_CONTEXT *OldContext);
NTSTATUS __stdcall FltDeleteStreamContext(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PFLT_CONTEXT *OldContext);
NTSTATUS __stdcall FltDeleteStreamHandleContext(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PFLT_CONTEXT *OldContext);
NTSTATUS __stdcall FltDeleteTransactionContext(PFLT_INSTANCE Instance, PKTRANSACTION Transaction, PFLT_CONTEXT *OldContext);
NTSTATUS __stdcall FltDeleteVolumeContext(PFLT_FILTER Filter, PFLT_VOLUME Volume, PFLT_CONTEXT *OldContext);
NTSTATUS __stdcall FltDetachVolume(PFLT_FILTER Filter, PFLT_VOLUME Volume, PCUNICODE_STRING InstanceName);
NTSTATUS __stdcall FltDeviceIoControlFile(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG LengthReturned);
NTSTATUS __stdcall FltEnlistInTransaction(PFLT_INSTANCE Instance, PKTRANSACTION Transaction, PFLT_CONTEXT TransactionContext, NOTIFICATION_MASK NotificationMask);
NTSTATUS __stdcall FltEnumerateFilterInformation(ULONG Index, FILTER_INFORMATION_CLASS InformationClass, PVOID Buffer, ULONG BufferSize, PULONG BytesReturned);
NTSTATUS __stdcall FltEnumerateFilters(PFLT_FILTER *FilterList, ULONG FilterListSize, PULONG NumberFiltersReturned);
NTSTATUS __stdcall FltEnumerateInstanceInformationByDeviceObject(PDEVICE_OBJECT DeviceObject, ULONG Index, INSTANCE_INFORMATION_CLASS InformationClass, PVOID Buffer, ULONG BufferSize, PULONG BytesReturned);
NTSTATUS __stdcall FltEnumerateInstanceInformationByFilter(PFLT_FILTER Filter, ULONG Index, INSTANCE_INFORMATION_CLASS InformationClass, PVOID Buffer, ULONG BufferSize, PULONG BytesReturned);
NTSTATUS __stdcall FltEnumerateInstanceInformationByVolume(PFLT_VOLUME Volume, ULONG Index, INSTANCE_INFORMATION_CLASS InformationClass, PVOID Buffer, ULONG BufferSize, PULONG BytesReturned);
NTSTATUS __stdcall FltEnumerateInstanceInformationByVolumeName(PUNICODE_STRING VolumeName, ULONG Index, INSTANCE_INFORMATION_CLASS InformationClass, PVOID Buffer, ULONG BufferSize, PULONG BytesReturned);
NTSTATUS __stdcall FltEnumerateInstances(PFLT_VOLUME Volume, PFLT_FILTER Filter, PFLT_INSTANCE *InstanceList, ULONG InstanceListSize, PULONG NumberInstancesReturned);
NTSTATUS __stdcall FltEnumerateVolumeInformation(PFLT_FILTER Filter, ULONG Index, FILTER_VOLUME_INFORMATION_CLASS InformationClass, PVOID Buffer, ULONG BufferSize, PULONG BytesReturned);
NTSTATUS __stdcall FltEnumerateVolumes(PFLT_FILTER Filter, PFLT_VOLUME *VolumeList, ULONG VolumeListSize, PULONG NumberVolumesReturned);
NTSTATUS __stdcall FltFindExtraCreateParameter(PFLT_FILTER Filter, PECP_LIST EcpList, LPCGUID EcpType, PVOID *EcpContext, ULONG *EcpContextSize);
NTSTATUS __stdcall FltFlushBuffers(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject);
NTSTATUS __stdcall FltFsControlFile(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, ULONG FsControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG LengthReturned);
NTSTATUS __stdcall FltGetActivityIdCallbackData(PFLT_CALLBACK_DATA CallbackData, LPGUID Guid);
NTSTATUS __stdcall FltGetBottomInstance(PFLT_VOLUME Volume, PFLT_INSTANCE *Instance);
NTSTATUS __stdcall FltGetContextsEx(PCFLT_RELATED_OBJECTS FltObjects, FLT_CONTEXT_TYPE DesiredContexts, SIZE_T ContextsSize, PFLT_RELATED_CONTEXTS_EX Contexts);
NTSTATUS __stdcall FltGetDestinationFileNameInformation(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, HANDLE RootDirectory, PWSTR FileName, ULONG FileNameLength, FLT_FILE_NAME_OPTIONS NameOptions, PFLT_FILE_NAME_INFORMATION *RetFileNameInformation);
NTSTATUS __stdcall FltGetDeviceObject(PFLT_VOLUME Volume, PDEVICE_OBJECT *DeviceObject);
NTSTATUS __stdcall FltGetDiskDeviceObject(PFLT_VOLUME Volume, PDEVICE_OBJECT *DiskDeviceObject);
NTSTATUS __stdcall FltGetEcpListFromCallbackData(PFLT_FILTER Filter, PFLT_CALLBACK_DATA CallbackData, PECP_LIST *EcpList);
NTSTATUS __stdcall FltGetFileContext(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PFLT_CONTEXT *Context);
NTSTATUS __stdcall FltGetFileNameInformation(PFLT_CALLBACK_DATA CallbackData, FLT_FILE_NAME_OPTIONS NameOptions, PFLT_FILE_NAME_INFORMATION *FileNameInformation);
NTSTATUS __stdcall FltGetFileNameInformationUnsafe(PFILE_OBJECT FileObject, PFLT_INSTANCE Instance, FLT_FILE_NAME_OPTIONS NameOptions, PFLT_FILE_NAME_INFORMATION *FileNameInformation);
NTSTATUS __stdcall FltGetFileSystemType(PVOID FltObject, PFLT_FILESYSTEM_TYPE FileSystemType);
NTSTATUS __stdcall FltGetFilterFromInstance(PFLT_INSTANCE Instance, PFLT_FILTER *RetFilter);
NTSTATUS __stdcall FltGetFilterFromName(PCUNICODE_STRING FilterName, PFLT_FILTER *RetFilter);
NTSTATUS __stdcall FltGetFilterInformation(PFLT_FILTER Filter, FILTER_INFORMATION_CLASS InformationClass, PVOID Buffer, ULONG BufferSize, PULONG BytesReturned);
NTSTATUS __stdcall FltGetFsZeroingOffset(PFLT_CALLBACK_DATA Data, PULONG ZeroingOffset);
NTSTATUS __stdcall FltGetInstanceContext(PFLT_INSTANCE Instance, PFLT_CONTEXT *Context);
NTSTATUS __stdcall FltGetInstanceInformation(PFLT_INSTANCE Instance, INSTANCE_INFORMATION_CLASS InformationClass, PVOID Buffer, ULONG BufferSize, PULONG BytesReturned);
NTSTATUS __stdcall FltGetLowerInstance(PFLT_INSTANCE CurrentInstance, PFLT_INSTANCE *LowerInstance);
NTSTATUS __stdcall FltGetNextExtraCreateParameter(PFLT_FILTER Filter, PECP_LIST EcpList, PVOID CurrentEcpContext, LPGUID NextEcpType, PVOID *NextEcpContext, ULONG *NextEcpContextSize);
NTSTATUS __stdcall FltGetRequestorSessionId(PFLT_CALLBACK_DATA CallbackData, PULONG SessionId);
NTSTATUS __stdcall FltGetSectionContext(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PFLT_CONTEXT *Context);
NTSTATUS __stdcall FltGetStreamContext(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PFLT_CONTEXT *Context);
NTSTATUS __stdcall FltGetStreamHandleContext(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PFLT_CONTEXT *Context);
NTSTATUS __stdcall FltGetTopInstance(PFLT_VOLUME Volume, PFLT_INSTANCE *Instance);
NTSTATUS __stdcall FltGetTransactionContext(PFLT_INSTANCE Instance, PKTRANSACTION Transaction, PFLT_CONTEXT *Context);
NTSTATUS __stdcall FltGetTunneledName(PFLT_CALLBACK_DATA CallbackData, PFLT_FILE_NAME_INFORMATION FileNameInformation, PFLT_FILE_NAME_INFORMATION *RetTunneledFileNameInformation);
NTSTATUS __stdcall FltGetUpperInstance(PFLT_INSTANCE CurrentInstance, PFLT_INSTANCE *UpperInstance);
NTSTATUS __stdcall FltGetVolumeContext(PFLT_FILTER Filter, PFLT_VOLUME Volume, PFLT_CONTEXT *Context);
NTSTATUS __stdcall FltGetVolumeFromDeviceObject(PFLT_FILTER Filter, PDEVICE_OBJECT DeviceObject, PFLT_VOLUME *RetVolume);
NTSTATUS __stdcall FltGetVolumeFromFileObject(PFLT_FILTER Filter, PFILE_OBJECT FileObject, PFLT_VOLUME *RetVolume);
NTSTATUS __stdcall FltGetVolumeFromInstance(PFLT_INSTANCE Instance, PFLT_VOLUME *RetVolume);
NTSTATUS __stdcall FltGetVolumeFromName(PFLT_FILTER Filter, PCUNICODE_STRING VolumeName, PFLT_VOLUME *RetVolume);
NTSTATUS __stdcall FltGetVolumeGuidName(PFLT_VOLUME Volume, PUNICODE_STRING VolumeGuidName, PULONG BufferSizeNeeded);
NTSTATUS __stdcall FltGetVolumeInformation(PFLT_VOLUME Volume, FILTER_VOLUME_INFORMATION_CLASS InformationClass, PVOID Buffer, ULONG BufferSize, PULONG BytesReturned);
NTSTATUS __stdcall FltGetVolumeInstanceFromName(PFLT_FILTER Filter, PFLT_VOLUME Volume, PCUNICODE_STRING InstanceName, PFLT_INSTANCE *RetInstance);
NTSTATUS __stdcall FltGetVolumeName(PFLT_VOLUME Volume, PUNICODE_STRING VolumeName, PULONG BufferSizeNeeded);
NTSTATUS __stdcall FltGetVolumeProperties(PFLT_VOLUME Volume, PFLT_VOLUME_PROPERTIES VolumeProperties, ULONG VolumePropertiesLength, PULONG LengthReturned);
NTSTATUS __stdcall FltInsertExtraCreateParameter(PFLT_FILTER Filter, PECP_LIST EcpList, PVOID EcpContext);
NTSTATUS __stdcall FltIsDirectory(PFILE_OBJECT FileObject, PFLT_INSTANCE Instance, PBOOLEAN IsDirectory);
NTSTATUS __stdcall FltIsIoRedirectionAllowed(PFLT_INSTANCE SourceInstance, PFLT_INSTANCE TargetInstance, PBOOLEAN RedirectionAllowed);
NTSTATUS __stdcall FltIsIoRedirectionAllowedForOperation(PFLT_CALLBACK_DATA Data, PFLT_INSTANCE TargetInstance, PBOOLEAN RedirectionAllowedThisIo, PBOOLEAN RedirectionAllowedAllIo);
NTSTATUS __stdcall FltIsVolumeSnapshot(PVOID FltObject, PBOOLEAN IsSnapshotVolume);
NTSTATUS __stdcall FltIsVolumeWritable(PVOID FltObject, PBOOLEAN IsWritable);
NTSTATUS __stdcall FltLoadFilter(PCUNICODE_STRING FilterName);
NTSTATUS __stdcall FltLockUserBuffer(PFLT_CALLBACK_DATA CallbackData);
NTSTATUS __stdcall FltObjectReference(PVOID FltObject);
NTSTATUS __stdcall FltOpenVolume(PFLT_INSTANCE Instance, PHANDLE VolumeHandle, PFILE_OBJECT *VolumeFileObject);
NTSTATUS __stdcall FltParseFileName(PCUNICODE_STRING FileName, PUNICODE_STRING Extension, PUNICODE_STRING Stream, PUNICODE_STRING FinalComponent);
NTSTATUS __stdcall FltParseFileNameInformation(PFLT_FILE_NAME_INFORMATION FileNameInformation);
NTSTATUS __stdcall FltPerformAsynchronousIo(PFLT_CALLBACK_DATA CallbackData, PFLT_COMPLETED_ASYNC_IO_CALLBACK CallbackRoutine, PVOID CallbackContext);
NTSTATUS __stdcall FltPrePrepareComplete(PFLT_INSTANCE Instance, PKTRANSACTION Transaction, PFLT_CONTEXT TransactionContext);
NTSTATUS __stdcall FltPrepareComplete(PFLT_INSTANCE Instance, PKTRANSACTION Transaction, PFLT_CONTEXT TransactionContext);
NTSTATUS __stdcall FltPropagateActivityIdToThread(PFLT_CALLBACK_DATA CallbackData, LPGUID PropagateId, LPCGUID *OriginalId);
NTSTATUS __stdcall FltPropagateIrpExtension(PFLT_CALLBACK_DATA SourceData, PFLT_CALLBACK_DATA TargetData, ULONG Flags);
NTSTATUS __stdcall FltPurgeFileNameInformationCache(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject);
NTSTATUS __stdcall FltQueryDirectoryFile(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan, PULONG LengthReturned);
NTSTATUS __stdcall FltQueryDirectoryFileEx(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, ULONG QueryFlags, PUNICODE_STRING FileName, PULONG LengthReturned);
NTSTATUS __stdcall FltQueryEaFile(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PVOID ReturnedEaData, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan, PULONG LengthReturned);
NTSTATUS __stdcall FltQueryInformationByName(PFLT_FILTER Filter, PFLT_INSTANCE Instance, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, PIO_DRIVER_CREATE_CONTEXT DriverContext);
NTSTATUS __stdcall FltQueryInformationFile(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, PULONG LengthReturned);
NTSTATUS __stdcall FltQueryQuotaInformationFile(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan, PULONG LengthReturned);
NTSTATUS __stdcall FltQuerySecurityObject(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);
NTSTATUS __stdcall FltQueryVolumeInformation(PFLT_INSTANCE Instance, PIO_STATUS_BLOCK Iosb, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);
NTSTATUS __stdcall FltQueryVolumeInformationFile(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass, PULONG LengthReturned);
NTSTATUS __stdcall FltQueueDeferredIoWorkItem(PFLT_DEFERRED_IO_WORKITEM FltWorkItem, PFLT_CALLBACK_DATA Data, PFLT_DEFERRED_IO_WORKITEM_ROUTINE WorkerRoutine, WORK_QUEUE_TYPE QueueType, PVOID Context);
NTSTATUS __stdcall FltQueueGenericWorkItem(PFLT_GENERIC_WORKITEM FltWorkItem, PVOID FltObject, PFLT_GENERIC_WORKITEM_ROUTINE WorkerRoutine, WORK_QUEUE_TYPE QueueType, PVOID Context);
NTSTATUS __stdcall FltReadFile(PFLT_INSTANCE InitiatingInstance, PFILE_OBJECT FileObject, PLARGE_INTEGER ByteOffset, ULONG Length, PVOID Buffer, FLT_IO_OPERATION_FLAGS Flags, PULONG BytesRead, PFLT_COMPLETED_ASYNC_IO_CALLBACK CallbackRoutine, PVOID CallbackContext);
NTSTATUS __stdcall FltReadFileEx(PFLT_INSTANCE InitiatingInstance, PFILE_OBJECT FileObject, PLARGE_INTEGER ByteOffset, ULONG Length, PVOID Buffer, FLT_IO_OPERATION_FLAGS Flags, PULONG BytesRead, PFLT_COMPLETED_ASYNC_IO_CALLBACK CallbackRoutine, PVOID CallbackContext, PULONG Key, PMDL Mdl);
NTSTATUS __stdcall FltRegisterFilter(PDRIVER_OBJECT Driver, const FLT_REGISTRATION *Registration, PFLT_FILTER *RetFilter);
NTSTATUS __stdcall FltRegisterForDataScan(PFLT_INSTANCE Instance);
NTSTATUS __stdcall FltRemoveExtraCreateParameter(PFLT_FILTER Filter, PECP_LIST EcpList, LPCGUID EcpType, PVOID *EcpContext, ULONG *EcpContextSize);
NTSTATUS __stdcall FltRequestFileInfoOnCreateCompletion(PFLT_FILTER Filter, PFLT_CALLBACK_DATA Data, ULONG InfoClassFlags);
NTSTATUS __stdcall FltRequestOperationStatusCallback(PFLT_CALLBACK_DATA Data, PFLT_GET_OPERATION_STATUS_CALLBACK CallbackRoutine, PVOID RequesterContext);
NTSTATUS __stdcall FltRetrieveIoPriorityInfo(PFLT_CALLBACK_DATA Data, PFILE_OBJECT FileObject, PETHREAD Thread, PIO_PRIORITY_INFO PriorityInfo);
NTSTATUS __stdcall FltRollbackComplete(PFLT_INSTANCE Instance, PKTRANSACTION Transaction, PFLT_CONTEXT TransactionContext);
NTSTATUS __stdcall FltRollbackEnlistment(PFLT_INSTANCE Instance, PKTRANSACTION Transaction, PFLT_CONTEXT TransactionContext);
NTSTATUS __stdcall FltSendMessage(PFLT_FILTER Filter, PFLT_PORT *ClientPort, PVOID SenderBuffer, ULONG SenderBufferLength, PVOID ReplyBuffer, PULONG ReplyLength, PLARGE_INTEGER Timeout);
NTSTATUS __stdcall FltSetActivityIdCallbackData(PFLT_CALLBACK_DATA CallbackData, LPCGUID Guid);
NTSTATUS __stdcall FltSetCancelCompletion(PFLT_CALLBACK_DATA CallbackData, PFLT_COMPLETE_CANCELED_CALLBACK CanceledCallback);
NTSTATUS __stdcall FltSetEaFile(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PVOID EaBuffer, ULONG Length);
NTSTATUS __stdcall FltSetEcpListIntoCallbackData(PFLT_FILTER Filter, PFLT_CALLBACK_DATA CallbackData, PECP_LIST EcpList);
NTSTATUS __stdcall FltSetFileContext(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, FLT_SET_CONTEXT_OPERATION Operation, PFLT_CONTEXT NewContext, PFLT_CONTEXT *OldContext);
NTSTATUS __stdcall FltSetFsZeroingOffset(PFLT_CALLBACK_DATA Data, ULONG ZeroingOffset);
NTSTATUS __stdcall FltSetFsZeroingOffsetRequired(PFLT_CALLBACK_DATA Data);
NTSTATUS __stdcall FltSetInformationFile(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
NTSTATUS __stdcall FltSetInstanceContext(PFLT_INSTANCE Instance, FLT_SET_CONTEXT_OPERATION Operation, PFLT_CONTEXT NewContext, PFLT_CONTEXT *OldContext);
NTSTATUS __stdcall FltSetIoPriorityHintIntoCallbackData(PFLT_CALLBACK_DATA Data, IO_PRIORITY_HINT PriorityHint);
NTSTATUS __stdcall FltSetIoPriorityHintIntoFileObject(PFILE_OBJECT FileObject, IO_PRIORITY_HINT PriorityHint);
NTSTATUS __stdcall FltSetIoPriorityHintIntoThread(PETHREAD Thread, IO_PRIORITY_HINT PriorityHint);
NTSTATUS __stdcall FltSetQuotaInformationFile(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, PVOID Buffer, ULONG Length);
NTSTATUS __stdcall FltSetSecurityObject(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);
NTSTATUS __stdcall FltSetStreamContext(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, FLT_SET_CONTEXT_OPERATION Operation, PFLT_CONTEXT NewContext, PFLT_CONTEXT *OldContext);
NTSTATUS __stdcall FltSetStreamHandleContext(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject, FLT_SET_CONTEXT_OPERATION Operation, PFLT_CONTEXT NewContext, PFLT_CONTEXT *OldContext);
NTSTATUS __stdcall FltSetTransactionContext(PFLT_INSTANCE Instance, PKTRANSACTION Transaction, FLT_SET_CONTEXT_OPERATION Operation, PFLT_CONTEXT NewContext, PFLT_CONTEXT *OldContext);
NTSTATUS __stdcall FltSetVolumeContext(PFLT_VOLUME Volume, FLT_SET_CONTEXT_OPERATION Operation, PFLT_CONTEXT NewContext, PFLT_CONTEXT *OldContext);
NTSTATUS __stdcall FltSetVolumeInformation(PFLT_INSTANCE Instance, PIO_STATUS_BLOCK Iosb, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);
NTSTATUS __stdcall FltStartFiltering(PFLT_FILTER Filter);
NTSTATUS __stdcall FltTagFile(PFLT_INSTANCE InitiatingInstance, PFILE_OBJECT FileObject, ULONG FileTag, GUID *Guid, PVOID DataBuffer, USHORT DataBufferLength);
NTSTATUS __stdcall FltTagFileEx(PFLT_INSTANCE InitiatingInstance, PFILE_OBJECT FileObject, ULONG FileTag, GUID *Guid, PVOID DataBuffer, USHORT DataBufferLength, ULONG ExistingFileTag, GUID *ExistingGuid, ULONG Flags);
NTSTATUS __stdcall FltUnloadFilter(PCUNICODE_STRING FilterName);
NTSTATUS __stdcall FltUntagFile(PFLT_INSTANCE InitiatingInstance, PFILE_OBJECT FileObject, ULONG FileTag, GUID *Guid);
NTSTATUS __stdcall FltWriteFile(PFLT_INSTANCE InitiatingInstance, PFILE_OBJECT FileObject, PLARGE_INTEGER ByteOffset, ULONG Length, PVOID Buffer, FLT_IO_OPERATION_FLAGS Flags, PULONG BytesWritten, PFLT_COMPLETED_ASYNC_IO_CALLBACK CallbackRoutine, PVOID CallbackContext);
NTSTATUS __stdcall FltWriteFileEx(PFLT_INSTANCE InitiatingInstance, PFILE_OBJECT FileObject, PLARGE_INTEGER ByteOffset, ULONG Length, PVOID Buffer, FLT_IO_OPERATION_FLAGS Flags, PULONG BytesWritten, PFLT_COMPLETED_ASYNC_IO_CALLBACK CallbackRoutine, PVOID CallbackContext, PULONG Key, PMDL Mdl);
NTSTATUS __stdcall FltpTraceRedirectedFileIo(PFILE_OBJECT OriginatingFileObject, PFLT_CALLBACK_DATA ChildCallbackData);
NTSTATUS __stdcall FlushIpNetTable2(ADDRESS_FAMILY Family, NET_IFINDEX InterfaceIndex);
NTSTATUS __stdcall FlushIpPathTable(ADDRESS_FAMILY Family);
NTSTATUS __stdcall FsRtlAddBaseMcbEntryEx(PBASE_MCB Mcb, LONGLONG Vbn, LONGLONG Lbn, LONGLONG SectorCount);
NTSTATUS __stdcall FsRtlAllocateExtraCreateParameter(LPCGUID EcpType, ULONG SizeOfContext, FSRTL_ALLOCATE_ECP_FLAGS Flags, PFSRTL_EXTRA_CREATE_PARAMETER_CLEANUP_CALLBACK CleanupCallback, ULONG PoolTag, PVOID *EcpContext);
NTSTATUS __stdcall FsRtlAllocateExtraCreateParameterFromLookasideList(LPCGUID EcpType, ULONG SizeOfContext, FSRTL_ALLOCATE_ECP_FLAGS Flags, PFSRTL_EXTRA_CREATE_PARAMETER_CLEANUP_CALLBACK CleanupCallback, PVOID LookasideList, PVOID *EcpContext);
NTSTATUS __stdcall FsRtlAllocateExtraCreateParameterList(FSRTL_ALLOCATE_ECPLIST_FLAGS Flags, PECP_LIST *EcpList);
NTSTATUS __stdcall FsRtlBalanceReads(PDEVICE_OBJECT TargetDevice);
NTSTATUS __stdcall FsRtlCancellableWaitForMultipleObjects(ULONG Count, PVOID ObjectArray[], WAIT_TYPE WaitType, PLARGE_INTEGER Timeout, PKWAIT_BLOCK WaitBlockArray, PIRP Irp);
NTSTATUS __stdcall FsRtlCancellableWaitForSingleObject(PVOID Object, PLARGE_INTEGER Timeout, PIRP Irp);
NTSTATUS __stdcall FsRtlChangeBackingFileObject(PFILE_OBJECT CurrentFileObject, PFILE_OBJECT NewFileObject, FSRTL_CHANGE_BACKING_TYPE ChangeBackingType, ULONG Flags);
NTSTATUS __stdcall FsRtlCheckOplock(POPLOCK Oplock, PIRP Irp, PVOID Context, POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine, POPLOCK_FS_PREPOST_IRP PostIrpRoutine);
NTSTATUS __stdcall FsRtlCheckOplockEx(POPLOCK Oplock, PIRP Irp, ULONG Flags, PVOID Context, POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine, POPLOCK_FS_PREPOST_IRP PostIrpRoutine);
NTSTATUS __stdcall FsRtlCheckUpperOplock(POPLOCK Oplock, ULONG NewLowerOplockState, PVOID CompletionRoutineContext, POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine, POPLOCK_FS_PREPOST_IRP PrePendRoutine, ULONG Flags);
NTSTATUS __stdcall FsRtlCreateSectionForDataScan(PHANDLE SectionHandle, PVOID *SectionObject, PLARGE_INTEGER SectionFileSize, PFILE_OBJECT FileObject, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, ULONG Flags);
NTSTATUS __stdcall FsRtlFastUnlockAll(PFILE_LOCK FileLock, PFILE_OBJECT FileObject, PEPROCESS ProcessId, PVOID Context);
NTSTATUS __stdcall FsRtlFastUnlockAllByKey(PFILE_LOCK FileLock, PFILE_OBJECT FileObject, PEPROCESS ProcessId, ULONG Key, PVOID Context);
NTSTATUS __stdcall FsRtlFastUnlockSingle(PFILE_LOCK FileLock, PFILE_OBJECT FileObject, LARGE_INTEGER *FileOffset, PLARGE_INTEGER Length, PEPROCESS ProcessId, ULONG Key, PVOID Context, BOOLEAN AlreadySynchronized);
NTSTATUS __stdcall FsRtlFindExtraCreateParameter(PECP_LIST EcpList, LPCGUID EcpType, PVOID *EcpContext, ULONG *EcpContextSize);
NTSTATUS __stdcall FsRtlGetEcpListFromIrp(PIRP Irp, PECP_LIST *EcpList);
NTSTATUS __stdcall FsRtlGetFileSize(PFILE_OBJECT FileObject, PLARGE_INTEGER FileSize);
NTSTATUS __stdcall FsRtlGetNextExtraCreateParameter(PECP_LIST EcpList, PVOID CurrentEcpContext, LPGUID NextEcpType, PVOID *NextEcpContext, ULONG *NextEcpContextSize);
NTSTATUS __stdcall FsRtlGetSectorSizeInformation(PDEVICE_OBJECT DeviceObject, PFILE_FS_SECTOR_SIZE_INFORMATION SectorSizeInfo);
NTSTATUS __stdcall FsRtlGetSupportedFeatures(PDEVICE_OBJECT DeviceObject, PULONG SupportedFeatures);
NTSTATUS __stdcall FsRtlGetVirtualDiskNestingLevel(PDEVICE_OBJECT DeviceObject, PULONG NestingLevel, PULONG NestingFlags);
NTSTATUS __stdcall FsRtlInitializeExtraCreateParameterList(PECP_LIST EcpList);
NTSTATUS __stdcall FsRtlInsertExtraCreateParameter(PECP_LIST EcpList, PVOID EcpContext);
NTSTATUS __stdcall FsRtlInsertPerFileContext(PVOID *PerFileContextPointer, PFSRTL_PER_FILE_CONTEXT Ptr);
NTSTATUS __stdcall FsRtlInsertPerFileObjectContext(PFILE_OBJECT FileObject, PFSRTL_PER_FILEOBJECT_CONTEXT Ptr);
NTSTATUS __stdcall FsRtlInsertPerStreamContext(PFSRTL_ADVANCED_FCB_HEADER PerStreamContext, PFSRTL_PER_STREAM_CONTEXT Ptr);
NTSTATUS __stdcall FsRtlIssueDeviceIoControl(PDEVICE_OBJECT DeviceObject, ULONG IoCtl, UCHAR Flags, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG_PTR IosbInformation);
NTSTATUS __stdcall FsRtlKernelFsControlFile(PFILE_OBJECT FileObject, ULONG FsControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG RetOutputBufferSize);
NTSTATUS __stdcall FsRtlLogCcFlushError(PUNICODE_STRING FileName, PDEVICE_OBJECT DeviceObject, PSECTION_OBJECT_POINTERS SectionObjectPointer, NTSTATUS FlushError, ULONG Flags);
NTSTATUS __stdcall FsRtlMdlReadEx(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, ULONG LockKey, PMDL *MdlChain, PIO_STATUS_BLOCK IoStatus);
NTSTATUS __stdcall FsRtlMupGetProviderIdFromName(PCUNICODE_STRING pProviderName, PULONG32 pProviderId);
NTSTATUS __stdcall FsRtlMupGetProviderInfoFromFileObject(PFILE_OBJECT pFileObject, ULONG Level, PVOID pBuffer, PULONG pBufferSize);
NTSTATUS __stdcall FsRtlNormalizeNtstatus(NTSTATUS Exception, NTSTATUS GenericException);
NTSTATUS __stdcall FsRtlNotifyStreamFileObject(struct _FILE_OBJECT *StreamFileObject, struct _DEVICE_OBJECT *DeviceObjectHint, FS_FILTER_STREAM_FO_NOTIFICATION_TYPE NotificationType, BOOLEAN SafeToRecurse);
NTSTATUS __stdcall FsRtlNotifyVolumeEvent(PFILE_OBJECT FileObject, ULONG EventCode);
NTSTATUS __stdcall FsRtlNotifyVolumeEventEx(PFILE_OBJECT FileObject, ULONG EventCode, PTARGET_DEVICE_CUSTOM_NOTIFICATION Event);
NTSTATUS __stdcall FsRtlOplockBreakH(POPLOCK Oplock, PIRP Irp, ULONG Flags, PVOID Context, POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine, POPLOCK_FS_PREPOST_IRP PostIrpRoutine);
NTSTATUS __stdcall FsRtlOplockBreakToNone(POPLOCK Oplock, PIO_STACK_LOCATION IrpSp, PIRP Irp, PVOID Context, POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine, POPLOCK_FS_PREPOST_IRP PostIrpRoutine);
NTSTATUS __stdcall FsRtlOplockBreakToNoneEx(POPLOCK Oplock, PIRP Irp, ULONG Flags, PVOID Context, POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine, POPLOCK_FS_PREPOST_IRP PostIrpRoutine);
NTSTATUS __stdcall FsRtlOplockFsctrl(POPLOCK Oplock, PIRP Irp, ULONG OpenCount);
NTSTATUS __stdcall FsRtlOplockFsctrlEx(POPLOCK Oplock, PIRP Irp, ULONG OpenCount, ULONG Flags);
NTSTATUS __stdcall FsRtlPrepareMdlWriteEx(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, ULONG LockKey, PMDL *MdlChain, PIO_STATUS_BLOCK IoStatus);
NTSTATUS __stdcall FsRtlProcessFileLock(PFILE_LOCK FileLock, PIRP Irp, PVOID Context);
NTSTATUS __stdcall FsRtlQueryCachedVdl(PFILE_OBJECT FileObject, PLONGLONG Vdl);
NTSTATUS __stdcall FsRtlQueryInformationFile(PFILE_OBJECT FileObject, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, PULONG RetFileInformationSize);
NTSTATUS __stdcall FsRtlQueryKernelEaFile(PFILE_OBJECT FileObject, PVOID ReturnedEaData, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan, PULONG LengthReturned);
NTSTATUS __stdcall FsRtlRegisterFileSystemFilterCallbacks(struct _DRIVER_OBJECT *FilterDriverObject, PFS_FILTER_CALLBACKS Callbacks);
NTSTATUS __stdcall FsRtlRegisterUncProvider(PHANDLE MupHandle, PCUNICODE_STRING RedirectorDeviceName, BOOLEAN MailslotsSupported);
NTSTATUS __stdcall FsRtlRegisterUncProviderEx(PHANDLE MupHandle, PCUNICODE_STRING RedirDevName, PDEVICE_OBJECT DeviceObject, FSRTL_UNC_PROVIDER_FLAGS Flags);
NTSTATUS __stdcall FsRtlRegisterUncProviderEx2(PCUNICODE_STRING RedirDevName, PDEVICE_OBJECT DeviceObject, const FSRTL_UNC_PROVIDER_REGISTRATION *Registration, PHANDLE MupHandle);
NTSTATUS __stdcall FsRtlRemoveDotsFromPath(PWSTR OriginalString, USHORT PathLength, USHORT *NewLength);
NTSTATUS __stdcall FsRtlRemoveExtraCreateParameter(PECP_LIST EcpList, LPCGUID EcpType, PVOID *EcpContext, ULONG *EcpContextSize);
NTSTATUS __stdcall FsRtlSetDriverBacking(PDRIVER_OBJECT DriverObj, ULONG Flags);
NTSTATUS __stdcall FsRtlSetEcpListIntoIrp(PIRP Irp, PECP_LIST EcpList);
NTSTATUS __stdcall FsRtlSetKernelEaFile(PFILE_OBJECT FileObject, PVOID EaBuffer, ULONG Length);
NTSTATUS __stdcall FsRtlUpperOplockFsctrl(POPLOCK Oplock, PIRP Irp, ULONG OpenCount, ULONG LowerOplockState, ULONG Flags);
NTSTATUS __stdcall FsRtlValidateReparsePointBuffer(ULONG BufferLength, PREPARSE_DATA_BUFFER ReparseBuffer);
NTSTATUS __stdcall FsRtlVolumeDeviceToCorrelationId(PDEVICE_OBJECT VolumeDeviceObject, GUID *Guid);
NTSTATUS __stdcall FwpmBfeStateSubscribeChanges0(void *deviceObject, FWPM_SERVICE_STATE_CHANGE_CALLBACK0 callback, void *context, HANDLE *changeHandle);
NTSTATUS __stdcall FwpmBfeStateUnsubscribeChanges0(HANDLE changeHandle);
NTSTATUS __stdcall FwpmBitmapIndexFree0(HANDLE engineHandle, const GUID *fieldId, UINT8 *idx);
NTSTATUS __stdcall FwpmBitmapIndexGet0(HANDLE engineHandle, const GUID *fieldId, UINT8 *idx);
NTSTATUS __stdcall FwpmCalloutAdd0(HANDLE engineHandle, const FWPM_CALLOUT0 *callout, PSECURITY_DESCRIPTOR sd, UINT32 *id);
NTSTATUS __stdcall FwpmCalloutCreateEnumHandle0(HANDLE engineHandle, const FWPM_CALLOUT_ENUM_TEMPLATE0 *enumTemplate, HANDLE *enumHandle);
NTSTATUS __stdcall FwpmCalloutDeleteById0(HANDLE engineHandle, UINT32 id);
NTSTATUS __stdcall FwpmCalloutDeleteByKey0(HANDLE engineHandle, const GUID *key);
NTSTATUS __stdcall FwpmCalloutDestroyEnumHandle0(HANDLE engineHandle, HANDLE enumHandle);
NTSTATUS __stdcall FwpmCalloutEnum0(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_CALLOUT0 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmCalloutGetById0(HANDLE engineHandle, UINT32 id, FWPM_CALLOUT0 **callout);
NTSTATUS __stdcall FwpmCalloutGetByKey0(HANDLE engineHandle, const GUID *key, FWPM_CALLOUT0 **callout);
NTSTATUS __stdcall FwpmCalloutGetSecurityInfoByKey0(HANDLE engineHandle, const GUID *key, SECURITY_INFORMATION securityInfo, PSID *sidOwner, PSID *sidGroup, PACL *dacl, PACL *sacl, PSECURITY_DESCRIPTOR *securityDescriptor);
NTSTATUS __stdcall FwpmCalloutSetSecurityInfoByKey0(HANDLE engineHandle, const GUID *key, SECURITY_INFORMATION securityInfo, const SID *sidOwner, const SID *sidGroup, const ACL *dacl, const ACL *sacl);
NTSTATUS __stdcall FwpmConnectionCreateEnumHandle0(HANDLE engineHandle, const FWPM_CONNECTION_ENUM_TEMPLATE0 *enumTemplate, HANDLE *enumHandle);
NTSTATUS __stdcall FwpmConnectionDestroyEnumHandle0(HANDLE engineHandle, HANDLE enumHandle);
NTSTATUS __stdcall FwpmConnectionEnum0(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_CONNECTION0 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmConnectionGetById0(HANDLE engineHandle, UINT64 id, FWPM_CONNECTION0 **connection);
NTSTATUS __stdcall FwpmConnectionGetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, PSID *sidOwner, PSID *sidGroup, PACL *dacl, PACL *sacl, PSECURITY_DESCRIPTOR *securityDescriptor);
NTSTATUS __stdcall FwpmConnectionSetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, const SID *sidOwner, const SID *sidGroup, const ACL *dacl, const ACL *sacl);
NTSTATUS __stdcall FwpmEngineClose0(HANDLE engineHandle);
NTSTATUS __stdcall FwpmEngineGetOption0(HANDLE engineHandle, FWPM_ENGINE_OPTION option, FWP_VALUE0 **value);
NTSTATUS __stdcall FwpmEngineGetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, PSID *sidOwner, PSID *sidGroup, PACL *dacl, PACL *sacl, PSECURITY_DESCRIPTOR *securityDescriptor);
NTSTATUS __stdcall FwpmEngineOpen0(const wchar_t *serverName, UINT32 authnService, SEC_WINNT_AUTH_IDENTITY_W *authIdentity, const FWPM_SESSION0 *session, HANDLE *engineHandle);
NTSTATUS __stdcall FwpmEngineSetOption0(HANDLE engineHandle, FWPM_ENGINE_OPTION option, const FWP_VALUE0 *newValue);
NTSTATUS __stdcall FwpmEngineSetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, const SID *sidOwner, const SID *sidGroup, const ACL *dacl, const ACL *sacl);
NTSTATUS __stdcall FwpmFilterAdd0(HANDLE engineHandle, const FWPM_FILTER0 *filter, PSECURITY_DESCRIPTOR sd, UINT64 *id);
NTSTATUS __stdcall FwpmFilterCreateEnumHandle0(HANDLE engineHandle, const FWPM_FILTER_ENUM_TEMPLATE0 *enumTemplate, HANDLE *enumHandle);
NTSTATUS __stdcall FwpmFilterDeleteById0(HANDLE engineHandle, UINT64 id);
NTSTATUS __stdcall FwpmFilterDeleteByKey0(HANDLE engineHandle, const GUID *key);
NTSTATUS __stdcall FwpmFilterDestroyEnumHandle0(HANDLE engineHandle, HANDLE enumHandle);
NTSTATUS __stdcall FwpmFilterEnum0(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_FILTER0 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmFilterGetById0(HANDLE engineHandle, UINT64 id, FWPM_FILTER0 **filter);
NTSTATUS __stdcall FwpmFilterGetByKey0(HANDLE engineHandle, const GUID *key, FWPM_FILTER0 **filter);
NTSTATUS __stdcall FwpmFilterGetSecurityInfoByKey0(HANDLE engineHandle, const GUID *key, SECURITY_INFORMATION securityInfo, PSID *sidOwner, PSID *sidGroup, PACL *dacl, PACL *sacl, PSECURITY_DESCRIPTOR *securityDescriptor);
NTSTATUS __stdcall FwpmFilterSetSecurityInfoByKey0(HANDLE engineHandle, const GUID *key, SECURITY_INFORMATION securityInfo, const SID *sidOwner, const SID *sidGroup, const ACL *dacl, const ACL *sacl);
NTSTATUS __stdcall FwpmIPsecTunnelAdd0(HANDLE engineHandle, UINT32 flags, const FWPM_PROVIDER_CONTEXT0 *mainModePolicy, const FWPM_PROVIDER_CONTEXT0 *tunnelPolicy, UINT32 numFilterConditions, const FWPM_FILTER_CONDITION0 *filterConditions, PSECURITY_DESCRIPTOR sd);
NTSTATUS __stdcall FwpmIPsecTunnelAdd1(HANDLE engineHandle, UINT32 flags, const FWPM_PROVIDER_CONTEXT1 *mainModePolicy, const FWPM_PROVIDER_CONTEXT1 *tunnelPolicy, UINT32 numFilterConditions, const FWPM_FILTER_CONDITION0 *filterConditions, const GUID *keyModKey, PSECURITY_DESCRIPTOR sd);
NTSTATUS __stdcall FwpmIPsecTunnelAdd2(HANDLE engineHandle, UINT32 flags, const FWPM_PROVIDER_CONTEXT2 *mainModePolicy, const FWPM_PROVIDER_CONTEXT2 *tunnelPolicy, UINT32 numFilterConditions, const FWPM_FILTER_CONDITION0 *filterConditions, const GUID *keyModKey, PSECURITY_DESCRIPTOR sd);
NTSTATUS __stdcall FwpmIPsecTunnelAdd3(HANDLE engineHandle, UINT32 flags, const FWPM_PROVIDER_CONTEXT3 *mainModePolicy, const FWPM_PROVIDER_CONTEXT3 *tunnelPolicy, UINT32 numFilterConditions, const FWPM_FILTER_CONDITION0 *filterConditions, const GUID *keyModKey, PSECURITY_DESCRIPTOR sd);
NTSTATUS __stdcall FwpmIPsecTunnelDeleteByKey0(HANDLE engineHandle, const GUID *key);
NTSTATUS __stdcall FwpmLayerCreateEnumHandle0(HANDLE engineHandle, const FWPM_LAYER_ENUM_TEMPLATE0 *enumTemplate, HANDLE *enumHandle);
NTSTATUS __stdcall FwpmLayerDestroyEnumHandle0(HANDLE engineHandle, HANDLE enumHandle);
NTSTATUS __stdcall FwpmLayerEnum0(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_LAYER0 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmLayerGetById0(HANDLE engineHandle, UINT16 id, FWPM_LAYER0 **layer);
NTSTATUS __stdcall FwpmLayerGetByKey0(HANDLE engineHandle, const GUID *key, FWPM_LAYER0 **layer);
NTSTATUS __stdcall FwpmLayerGetSecurityInfoByKey0(HANDLE engineHandle, const GUID *key, SECURITY_INFORMATION securityInfo, PSID *sidOwner, PSID *sidGroup, PACL *dacl, PACL *sacl, PSECURITY_DESCRIPTOR *securityDescriptor);
NTSTATUS __stdcall FwpmLayerSetSecurityInfoByKey0(HANDLE engineHandle, const GUID *key, SECURITY_INFORMATION securityInfo, const SID *sidOwner, const SID *sidGroup, const ACL *dacl, const ACL *sacl);
NTSTATUS __stdcall FwpmNetEventCreateEnumHandle0(HANDLE engineHandle, const FWPM_NET_EVENT_ENUM_TEMPLATE0 *enumTemplate, HANDLE *enumHandle);
NTSTATUS __stdcall FwpmNetEventDestroyEnumHandle0(HANDLE engineHandle, HANDLE enumHandle);
NTSTATUS __stdcall FwpmNetEventEnum0(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_NET_EVENT0 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmNetEventEnum1(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_NET_EVENT1 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmNetEventEnum2(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_NET_EVENT2 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmNetEventEnum3(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_NET_EVENT3 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmNetEventEnum4(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_NET_EVENT4 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmNetEventEnum5(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_NET_EVENT5 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmNetEventsGetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, PSID *sidOwner, PSID *sidGroup, PACL *dacl, PACL *sacl, PSECURITY_DESCRIPTOR *securityDescriptor);
NTSTATUS __stdcall FwpmNetEventsSetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, const SID *sidOwner, const SID *sidGroup, const ACL *dacl, const ACL *sacl);
NTSTATUS __stdcall FwpmProviderAdd0(HANDLE engineHandle, const FWPM_PROVIDER0 *provider, PSECURITY_DESCRIPTOR sd);
NTSTATUS __stdcall FwpmProviderContextAdd0(HANDLE engineHandle, const FWPM_PROVIDER_CONTEXT0 *providerContext, PSECURITY_DESCRIPTOR sd, UINT64 *id);
NTSTATUS __stdcall FwpmProviderContextAdd1(HANDLE engineHandle, const FWPM_PROVIDER_CONTEXT1 *providerContext, PSECURITY_DESCRIPTOR sd, UINT64 *id);
NTSTATUS __stdcall FwpmProviderContextAdd2(HANDLE engineHandle, const FWPM_PROVIDER_CONTEXT2 *providerContext, PSECURITY_DESCRIPTOR sd, UINT64 *id);
NTSTATUS __stdcall FwpmProviderContextAdd3(HANDLE engineHandle, const FWPM_PROVIDER_CONTEXT3 *providerContext, PSECURITY_DESCRIPTOR sd, UINT64 *id);
NTSTATUS __stdcall FwpmProviderContextCreateEnumHandle0(HANDLE engineHandle, const FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0 *enumTemplate, HANDLE *enumHandle);
NTSTATUS __stdcall FwpmProviderContextDeleteById0(HANDLE engineHandle, UINT64 id);
NTSTATUS __stdcall FwpmProviderContextDeleteByKey0(HANDLE engineHandle, const GUID *key);
NTSTATUS __stdcall FwpmProviderContextDestroyEnumHandle0(HANDLE engineHandle, HANDLE enumHandle);
NTSTATUS __stdcall FwpmProviderContextEnum0(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_PROVIDER_CONTEXT0 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmProviderContextEnum1(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_PROVIDER_CONTEXT1 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmProviderContextEnum2(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_PROVIDER_CONTEXT2 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmProviderContextEnum3(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_PROVIDER_CONTEXT3 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmProviderContextGetById0(HANDLE engineHandle, UINT64 id, FWPM_PROVIDER_CONTEXT0 **providerContext);
NTSTATUS __stdcall FwpmProviderContextGetById1(HANDLE engineHandle, UINT64 id, FWPM_PROVIDER_CONTEXT1 **providerContext);
NTSTATUS __stdcall FwpmProviderContextGetById2(HANDLE engineHandle, UINT64 id, FWPM_PROVIDER_CONTEXT2 **providerContext);
NTSTATUS __stdcall FwpmProviderContextGetById3(HANDLE engineHandle, UINT64 id, FWPM_PROVIDER_CONTEXT3 **providerContext);
NTSTATUS __stdcall FwpmProviderContextGetByKey0(HANDLE engineHandle, const GUID *key, FWPM_PROVIDER_CONTEXT0 **providerContext);
NTSTATUS __stdcall FwpmProviderContextGetByKey1(HANDLE engineHandle, const GUID *key, FWPM_PROVIDER_CONTEXT1 **providerContext);
NTSTATUS __stdcall FwpmProviderContextGetByKey2(HANDLE engineHandle, const GUID *key, FWPM_PROVIDER_CONTEXT2 **providerContext);
NTSTATUS __stdcall FwpmProviderContextGetByKey3(HANDLE engineHandle, const GUID *key, FWPM_PROVIDER_CONTEXT3 **providerContext);
NTSTATUS __stdcall FwpmProviderContextGetSecurityInfoByKey0(HANDLE engineHandle, const GUID *key, SECURITY_INFORMATION securityInfo, PSID *sidOwner, PSID *sidGroup, PACL *dacl, PACL *sacl, PSECURITY_DESCRIPTOR *securityDescriptor);
NTSTATUS __stdcall FwpmProviderContextSetSecurityInfoByKey0(HANDLE engineHandle, const GUID *key, SECURITY_INFORMATION securityInfo, const SID *sidOwner, const SID *sidGroup, const ACL *dacl, const ACL *sacl);
NTSTATUS __stdcall FwpmProviderCreateEnumHandle0(HANDLE engineHandle, const FWPM_PROVIDER_ENUM_TEMPLATE0 *enumTemplate, HANDLE *enumHandle);
NTSTATUS __stdcall FwpmProviderDeleteByKey0(HANDLE engineHandle, const GUID *key);
NTSTATUS __stdcall FwpmProviderDestroyEnumHandle0(HANDLE engineHandle, HANDLE enumHandle);
NTSTATUS __stdcall FwpmProviderEnum0(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_PROVIDER0 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmProviderGetByKey0(HANDLE engineHandle, const GUID *key, FWPM_PROVIDER0 **provider);
NTSTATUS __stdcall FwpmProviderGetSecurityInfoByKey0(HANDLE engineHandle, const GUID *key, SECURITY_INFORMATION securityInfo, PSID *sidOwner, PSID *sidGroup, PACL *dacl, PACL *sacl, PSECURITY_DESCRIPTOR *securityDescriptor);
NTSTATUS __stdcall FwpmProviderSetSecurityInfoByKey0(HANDLE engineHandle, const GUID *key, SECURITY_INFORMATION securityInfo, const SID *sidOwner, const SID *sidGroup, const ACL *dacl, const ACL *sacl);
NTSTATUS __stdcall FwpmSessionCreateEnumHandle0(HANDLE engineHandle, const FWPM_SESSION_ENUM_TEMPLATE0 *enumTemplate, HANDLE *enumHandle);
NTSTATUS __stdcall FwpmSessionDestroyEnumHandle0(HANDLE engineHandle, HANDLE enumHandle);
NTSTATUS __stdcall FwpmSessionEnum0(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_SESSION0 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmSubLayerAdd0(HANDLE engineHandle, const FWPM_SUBLAYER0 *subLayer, PSECURITY_DESCRIPTOR sd);
NTSTATUS __stdcall FwpmSubLayerCreateEnumHandle0(HANDLE engineHandle, const FWPM_SUBLAYER_ENUM_TEMPLATE0 *enumTemplate, HANDLE *enumHandle);
NTSTATUS __stdcall FwpmSubLayerDeleteByKey0(HANDLE engineHandle, const GUID *key);
NTSTATUS __stdcall FwpmSubLayerDestroyEnumHandle0(HANDLE engineHandle, HANDLE enumHandle);
NTSTATUS __stdcall FwpmSubLayerEnum0(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPM_SUBLAYER0 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpmSubLayerGetByKey0(HANDLE engineHandle, const GUID *key, FWPM_SUBLAYER0 **subLayer);
NTSTATUS __stdcall FwpmSubLayerGetSecurityInfoByKey0(HANDLE engineHandle, const GUID *key, SECURITY_INFORMATION securityInfo, PSID *sidOwner, PSID *sidGroup, PACL *dacl, PACL *sacl, PSECURITY_DESCRIPTOR *securityDescriptor);
NTSTATUS __stdcall FwpmSubLayerSetSecurityInfoByKey0(HANDLE engineHandle, const GUID *key, SECURITY_INFORMATION securityInfo, const SID *sidOwner, const SID *sidGroup, const ACL *dacl, const ACL *sacl);
NTSTATUS __stdcall FwpmTransactionAbort0(HANDLE engineHandle);
NTSTATUS __stdcall FwpmTransactionBegin0(HANDLE engineHandle, UINT32 flags);
NTSTATUS __stdcall FwpmTransactionCommit0(HANDLE engineHandle);
NTSTATUS __stdcall FwpmvSwitchEventsGetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, PSID *sidOwner, PSID *sidGroup, PACL *dacl, PACL *sacl, PSECURITY_DESCRIPTOR *securityDescriptor);
NTSTATUS __stdcall FwpmvSwitchEventsSetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, const SID *sidOwner, const SID *sidGroup, const ACL *dacl, const ACL *sacl);
NTSTATUS __stdcall FwpsAcquireClassifyHandle0(void *classifyContext, UINT32 flags, UINT64 *classifyHandle);
NTSTATUS __stdcall FwpsAcquireWritableLayerDataPointer0(UINT64 classifyHandle, UINT64 filterId, UINT32 flags, PVOID *writableLayerData, FWPS_CLASSIFY_OUT0 *classifyOut);
NTSTATUS __stdcall FwpsAleEndpointCreateEnumHandle0(HANDLE engineHandle, const FWPS_ALE_ENDPOINT_ENUM_TEMPLATE0 *enumTemplate, HANDLE *enumHandle);
NTSTATUS __stdcall FwpsAleEndpointDestroyEnumHandle0(HANDLE engineHandle, HANDLE enumHandle);
NTSTATUS __stdcall FwpsAleEndpointEnum0(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, FWPS_ALE_ENDPOINT_PROPERTIES0 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall FwpsAleEndpointGetById0(HANDLE engineHandle, UINT64 endpointId, FWPS_ALE_ENDPOINT_PROPERTIES0 **properties);
NTSTATUS __stdcall FwpsAleEndpointGetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, PSID *sidOwner, PSID *sidGroup, PACL *dacl, PACL *sacl, PSECURITY_DESCRIPTOR *securityDescriptor);
NTSTATUS __stdcall FwpsAleEndpointSetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, const SID *sidOwner, const SID *sidGroup, const ACL *dacl, const ACL *sacl);
NTSTATUS __stdcall FwpsAllocateCloneNetBufferList0(NET_BUFFER_LIST *originalNetBufferList, NDIS_HANDLE netBufferListPoolHandle, NDIS_HANDLE netBufferPoolHandle, ULONG allocateCloneFlags, NET_BUFFER_LIST **netBufferList);
NTSTATUS __stdcall FwpsAllocateNetBufferAndNetBufferList0(NDIS_HANDLE poolHandle, USHORT contextSize, USHORT contextBackFill, MDL *mdlChain, ULONG dataOffset, SIZE_T dataLength, NET_BUFFER_LIST **netBufferList);
NTSTATUS __stdcall FwpsCalloutRegister0(void *deviceObject, const FWPS_CALLOUT0 *callout, UINT32 *calloutId);
NTSTATUS __stdcall FwpsCalloutRegister1(void *deviceObject, const FWPS_CALLOUT1 *callout, UINT32 *calloutId);
NTSTATUS __stdcall FwpsCalloutRegister2(void *deviceObject, const FWPS_CALLOUT2 *callout, UINT32 *calloutId);
NTSTATUS __stdcall FwpsCalloutRegister3(void *deviceObject, const FWPS_CALLOUT3 *callout, UINT32 *calloutId);
NTSTATUS __stdcall FwpsCalloutUnregisterById0(const UINT32 calloutId);
NTSTATUS __stdcall FwpsCalloutUnregisterByKey0(const GUID *calloutKey);
NTSTATUS __stdcall FwpsClassifyOptionSet0(const FWPS_INCOMING_METADATA_VALUES0 *inMetadataValues, const FWP_CLASSIFY_OPTION_TYPE option, const FWP_VALUE0 *newValue);
NTSTATUS __stdcall FwpsCloneStreamData0(FWPS_STREAM_DATA0 *calloutStreamData, NDIS_HANDLE netBufferListPoolHandle, NDIS_HANDLE netBufferPoolHandle, ULONG allocateCloneFlags, NET_BUFFER_LIST **netBufferListChain);
NTSTATUS __stdcall FwpsConstructIpHeaderForTransportPacket0(NET_BUFFER_LIST *netBufferList, ULONG headerIncludeHeaderLength, ADDRESS_FAMILY addressFamily, const UCHAR *sourceAddress, const UCHAR *remoteAddress, IPPROTO nextProtocol, UINT64 endpointHandle, const WSACMSGHDR *controlData, ULONG controlDataLength, UINT32 flags, PVOID reserved, IF_INDEX interfaceIndex, IF_INDEX subInterfaceIndex);
NTSTATUS __stdcall FwpsFlowAbort0(UINT64 flowId);
NTSTATUS __stdcall FwpsFlowAssociateContext0(UINT64 flowId, UINT16 layerId, UINT32 calloutId, UINT64 flowContext);
NTSTATUS __stdcall FwpsFlowRemoveContext0(UINT64 flowId, UINT16 layerId, UINT32 calloutId);
NTSTATUS __stdcall FwpsGetPacketListSecurityInformation0(NET_BUFFER_LIST *packetList, UINT32 queryFlags, FWPS_PACKET_LIST_INFORMATION0 *packetInformation);
NTSTATUS __stdcall FwpsInjectForwardAsync0(HANDLE injectionHandle, HANDLE injectionContext, UINT32 flags, ADDRESS_FAMILY addressFamily, COMPARTMENT_ID compartmentId, IF_INDEX interfaceIndex, NET_BUFFER_LIST *netBufferList, FWPS_INJECT_COMPLETE0 completionFn, HANDLE completionContext);
NTSTATUS __stdcall FwpsInjectMacReceiveAsync0(HANDLE injectionHandle, HANDLE injectionContext, UINT32 flags, UINT16 layerId, IF_INDEX interfaceIndex, NDIS_PORT_NUMBER NdisPortNumber, NET_BUFFER_LIST *netBufferLists, FWPS_INJECT_COMPLETE0 completionFn, HANDLE completionContext);
NTSTATUS __stdcall FwpsInjectMacSendAsync0(HANDLE injectionHandle, HANDLE injectionContext, UINT32 flags, UINT16 layerId, IF_INDEX interfaceIndex, NDIS_PORT_NUMBER NdisPortNumber, NET_BUFFER_LIST *netBufferLists, FWPS_INJECT_COMPLETE0 completionFn, HANDLE completionContext);
NTSTATUS __stdcall FwpsInjectNetworkReceiveAsync0(HANDLE injectionHandle, HANDLE injectionContext, UINT32 flags, COMPARTMENT_ID compartmentId, IF_INDEX interfaceIndex, IF_INDEX subInterfaceIndex, NET_BUFFER_LIST *netBufferList, FWPS_INJECT_COMPLETE0 completionFn, HANDLE completionContext);
NTSTATUS __stdcall FwpsInjectNetworkSendAsync0(HANDLE injectionHandle, HANDLE injectionContext, UINT32 flags, COMPARTMENT_ID compartmentId, NET_BUFFER_LIST *netBufferList, FWPS_INJECT_COMPLETE0 completionFn, HANDLE completionContext);
NTSTATUS __stdcall FwpsInjectTransportReceiveAsync0(HANDLE injectionHandle, HANDLE injectionContext, PVOID reserved, UINT32 flags, ADDRESS_FAMILY addressFamily, COMPARTMENT_ID compartmentId, IF_INDEX interfaceIndex, IF_INDEX subInterfaceIndex, NET_BUFFER_LIST *netBufferList, FWPS_INJECT_COMPLETE0 completionFn, HANDLE completionContext);
NTSTATUS __stdcall FwpsInjectTransportSendAsync0(HANDLE injectionHandle, HANDLE injectionContext, UINT64 endpointHandle, UINT32 flags, FWPS_TRANSPORT_SEND_PARAMS0 *sendArgs, ADDRESS_FAMILY addressFamily, COMPARTMENT_ID compartmentId, NET_BUFFER_LIST *netBufferList, FWPS_INJECT_COMPLETE0 completionFn, HANDLE completionContext);
NTSTATUS __stdcall FwpsInjectTransportSendAsync1(HANDLE injectionHandle, HANDLE injectionContext, UINT64 endpointHandle, UINT32 flags, FWPS_TRANSPORT_SEND_PARAMS1 *sendArgs, ADDRESS_FAMILY addressFamily, COMPARTMENT_ID compartmentId, NET_BUFFER_LIST *netBufferList, FWPS_INJECT_COMPLETE0 completionFn, HANDLE completionContext);
NTSTATUS __stdcall FwpsInjectionHandleCreate0(ADDRESS_FAMILY addressFamily, UINT32 flags, HANDLE *injectionHandle);
NTSTATUS __stdcall FwpsInjectionHandleDestroy0(HANDLE injectionHandle);
NTSTATUS __stdcall FwpsInjectvSwitchEthernetIngressAsync0(HANDLE injectionHandle, HANDLE injectionContext, UINT32 flags, void *reserved, const FWP_BYTE_BLOB *vSwitchId, NDIS_SWITCH_PORT_ID vSwitchSourcePortId, NDIS_SWITCH_NIC_INDEX vSwitchSourceNicIndex, NET_BUFFER_LIST *netBufferLists, FWPS_INJECT_COMPLETE0 completionFn, HANDLE completionContext);
NTSTATUS __stdcall FwpsNetBufferListAssociateContext0(NET_BUFFER_LIST *netBufferList, UINT16 layerId, UINT64 context, UINT64 contextTag, GUID *providerGuid, void *deviceObject, FWPS_NET_BUFFER_LIST_NOTIFY_FN0 notifyFn, UINT32 flags);
NTSTATUS __stdcall FwpsNetBufferListAssociateContext1(NET_BUFFER_LIST *netBufferList, UINT16 layerId, UINT64 context, UINT64 contextTag, GUID *providerGuid, void *deviceObject, FWPS_NET_BUFFER_LIST_NOTIFY_FN1 notifyFn, UINT32 flags);
NTSTATUS __stdcall FwpsNetBufferListRemoveContext0(NET_BUFFER_LIST *netBufferList, UINT64 contextTag, UINT32 flags);
NTSTATUS __stdcall FwpsNetBufferListRetrieveContext0(NET_BUFFER_LIST *netBufferList, UINT64 contextTag, BOOLEAN removeContext, UINT32 flags, UINT64 *context);
NTSTATUS __stdcall FwpsOpenToken0(HANDLE engineHandle, LUID modifiedId, ULONG desiredAccess, HANDLE *accessToken);
NTSTATUS __stdcall FwpsPendClassify0(UINT64 classifyHandle, UINT64 filterId, UINT32 flags, FWPS_CLASSIFY_OUT0 *classifyOut);
NTSTATUS __stdcall FwpsPendOperation0(HANDLE completionHandle, HANDLE *completionContext);
NTSTATUS __stdcall FwpsQueryConnectionSioFormatRedirectRecords0(HANDLE RedirectRecords, PVOID OutputBuffer, SIZE_T OutputBufferLength, PSIZE_T BytesTransferred);
NTSTATUS __stdcall FwpsReassembleForwardFragmentGroup0(ADDRESS_FAMILY addressFamily, NET_BUFFER_LIST *fragmentGroupNblChain, NDIS_HANDLE netBufferAndNetBufferListPoolHandle, ULONG dataBackFill, ULONG flags, NET_BUFFER_LIST **reassembledNbl);
NTSTATUS __stdcall FwpsRedirectHandleCreate0(const GUID *providerGuid, UINT32 flags, HANDLE *redirectHandle);
NTSTATUS __stdcall FwpsStreamContinue0(UINT64 flowId, UINT32 calloutId, UINT16 layerId, UINT32 streamFlags);
NTSTATUS __stdcall FwpsStreamInjectAsync0(HANDLE injectionHandle, HANDLE injectionContext, UINT32 flags, UINT64 flowId, UINT32 calloutId, UINT16 layerId, UINT32 streamFlags, NET_BUFFER_LIST *netBufferList, SIZE_T dataLength, FWPS_INJECT_COMPLETE0 completionFn, HANDLE completionContext);
NTSTATUS __stdcall FwpsVirtualIfTunnelInfoGet0(const FWPS_INCOMING_METADATA_VALUES0 *metadata, IPSEC_VIRTUAL_IF_TUNNEL_INFO0 *virtualIfTunnelInfo);
NTSTATUS __stdcall FwpsVirtualIfTunnelInfoSet0(NET_BUFFER_LIST *netBufferList, const IPSEC_VIRTUAL_IF_TUNNEL_INFO0 *virtualIfTunnelInfo);
NTSTATUS __stdcall FwpsvSwitchEventsSubscribe0(const GUID *providerGuid, void *notifyContext, UINT32 flags, void *reserved, const FWPS_VSWITCH_EVENT_DISPATCH_TABLE0 *eventDispatchTable, UINT32 *subscriptionId);
NTSTATUS __stdcall GPIO_CLX_ProcessAddDevicePostDeviceCreate(WDFDRIVER Driver, WDFDEVICE Device);
NTSTATUS __stdcall GPIO_CLX_ProcessAddDevicePreDeviceCreate(WDFDRIVER Driver, PWDFDEVICE_INIT DeviceInit, PWDF_OBJECT_ATTRIBUTES FdoAttributes);
NTSTATUS __stdcall GPIO_CLX_RegisterClient(WDFDRIVER Driver, PGPIO_CLIENT_REGISTRATION_PACKET RegistrationPacket, PUNICODE_STRING RegistryPath);
NTSTATUS __stdcall GPIO_CLX_UnregisterClient(WDFDRIVER Driver);
NTSTATUS __stdcall GetAnycastIpAddressEntry(PMIB_ANYCASTIPADDRESS_ROW Row);
NTSTATUS __stdcall GetAnycastIpAddressTable(ADDRESS_FAMILY Family, PMIB_ANYCASTIPADDRESS_TABLE *Table);
NTSTATUS __stdcall GetBestRoute2(NET_LUID *InterfaceLuid, NET_IFINDEX InterfaceIndex, const SOCKADDR_INET *SourceAddress, const SOCKADDR_INET *DestinationAddress, ULONG AddressSortOptions, PMIB_IPFORWARD_ROW2 BestRoute, SOCKADDR_INET *BestSourceAddress);
NTSTATUS __stdcall GetDnsSettings(DNS_SETTINGS *Settings);
NTSTATUS __stdcall GetIfEntry2(PMIB_IF_ROW2 Row);
NTSTATUS __stdcall GetIfEntry2Ex(MIB_IF_ENTRY_LEVEL Level, PMIB_IF_ROW2 Row);
NTSTATUS __stdcall GetIfStackTable(PMIB_IFSTACK_TABLE *Table);
NTSTATUS __stdcall GetIfTable2(PMIB_IF_TABLE2 *Table);
NTSTATUS __stdcall GetIfTable2Ex(MIB_IF_TABLE_LEVEL Level, PMIB_IF_TABLE2 *Table);
NTSTATUS __stdcall GetInterfaceDnsSettings(GUID Interface, DNS_INTERFACE_SETTINGS *Settings);
NTSTATUS __stdcall GetInvertedIfStackTable(PMIB_INVERTEDIFSTACK_TABLE *Table);
NTSTATUS __stdcall GetIpForwardEntry2(PMIB_IPFORWARD_ROW2 Row);
NTSTATUS __stdcall GetIpForwardTable2(ADDRESS_FAMILY Family, PMIB_IPFORWARD_TABLE2 *Table);
NTSTATUS __stdcall GetIpInterfaceEntry(PMIB_IPINTERFACE_ROW Row);
NTSTATUS __stdcall GetIpInterfaceTable(ADDRESS_FAMILY Family, PMIB_IPINTERFACE_TABLE *Table);
NTSTATUS __stdcall GetIpNetEntry2(PMIB_IPNET_ROW2 Row);
NTSTATUS __stdcall GetIpNetTable2(ADDRESS_FAMILY Family, PMIB_IPNET_TABLE2 *Table);
NTSTATUS __stdcall GetIpNetworkConnectionBandwidthEstimates(NET_IFINDEX InterfaceIndex, ADDRESS_FAMILY AddressFamily, PMIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES BandwidthEstimates);
NTSTATUS __stdcall GetIpPathEntry(PMIB_IPPATH_ROW Row);
NTSTATUS __stdcall GetIpPathTable(ADDRESS_FAMILY Family, PMIB_IPPATH_TABLE *Table);
NTSTATUS __stdcall GetMulticastIpAddressEntry(PMIB_MULTICASTIPADDRESS_ROW Row);
NTSTATUS __stdcall GetMulticastIpAddressTable(ADDRESS_FAMILY Family, PMIB_MULTICASTIPADDRESS_TABLE *Table);
NTSTATUS __stdcall GetNetworkInformation(const NET_IF_NETWORK_GUID *NetworkGuid, PNET_IF_COMPARTMENT_ID CompartmentId, PULONG SiteId, PWCHAR NetworkName, ULONG Length);
NTSTATUS __stdcall GetSecurityUserInfo(PLUID LogonId, ULONG Flags, PSecurityUserData *UserInformation);
NTSTATUS __stdcall GetTeredoPort(USHORT *Port);
NTSTATUS __stdcall GetUnicastIpAddressEntry(PMIB_UNICASTIPADDRESS_ROW Row);
NTSTATUS __stdcall GetUnicastIpAddressTable(ADDRESS_FAMILY Family, PMIB_UNICASTIPADDRESS_TABLE *Table);
NTSTATUS __stdcall HalAllocateHardwareCounters(PGROUP_AFFINITY GroupAffinty, ULONG GroupCount, PPHYSICAL_COUNTER_RESOURCE_LIST ResourceList, PHANDLE CounterSetHandle);
NTSTATUS __stdcall HalDmaAllocateCrashDumpRegistersEx(PADAPTER_OBJECT Adapter, ULONG NumberOfMapRegisters, HAL_DMA_CRASH_DUMP_REGISTER_TYPE Type, PVOID *MapRegisterBase, PULONG MapRegistersAvailable);
NTSTATUS __stdcall HalDmaFreeCrashDumpRegistersEx(PADAPTER_OBJECT Adapter, HAL_DMA_CRASH_DUMP_REGISTER_TYPE Type);
NTSTATUS __stdcall HalFreeHardwareCounters(HANDLE CounterSetHandle);
NTSTATUS __stdcall HalGetScatterGatherList(PADAPTER_OBJECT DmaAdapter, PDEVICE_OBJECT DeviceObject, PMDL Mdl, PVOID CurrentVa, ULONG Length, PDRIVER_LIST_CONTROL ExecutionRoutine, PVOID Context, BOOLEAN WriteToDevice);
NTSTATUS __stdcall HalRegisterPermanentAddressUsage(LARGE_INTEGER PhysicalAddress, ULONG SizeInBytes);
NTSTATUS __stdcall HidNotifyPresence(PDEVICE_OBJECT DeviceObject, BOOLEAN IsPresent);
NTSTATUS __stdcall HidP_GetButtonCaps(HIDP_REPORT_TYPE ReportType, PHIDP_BUTTON_CAPS ButtonCaps, PUSHORT ButtonCapsLength, PHIDP_PREPARSED_DATA PreparsedData);
NTSTATUS __stdcall HidP_GetCaps(PHIDP_PREPARSED_DATA PreparsedData, PHIDP_CAPS Capabilities);
NTSTATUS __stdcall HidP_GetCollectionDescription(PHIDP_REPORT_DESCRIPTOR ReportDesc, ULONG DescLength, POOL_TYPE PoolType, PHIDP_DEVICE_DESC DeviceDescription);
NTSTATUS __stdcall HidP_GetData(HIDP_REPORT_TYPE ReportType, PHIDP_DATA DataList, PULONG DataLength, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength);
NTSTATUS __stdcall HidP_GetExtendedAttributes(HIDP_REPORT_TYPE ReportType, USHORT DataIndex, PHIDP_PREPARSED_DATA PreparsedData, PHIDP_EXTENDED_ATTRIBUTES Attributes, PULONG LengthAttributes);
NTSTATUS __stdcall HidP_GetLinkCollectionNodes(PHIDP_LINK_COLLECTION_NODE LinkCollectionNodes, PULONG LinkCollectionNodesLength, PHIDP_PREPARSED_DATA PreparsedData);
NTSTATUS __stdcall HidP_GetScaledUsageValue(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, USHORT LinkCollection, USAGE Usage, PLONG UsageValue, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength);
NTSTATUS __stdcall HidP_GetSpecificButtonCaps(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, USHORT LinkCollection, USAGE Usage, PHIDP_BUTTON_CAPS ButtonCaps, PUSHORT ButtonCapsLength, PHIDP_PREPARSED_DATA PreparsedData);
NTSTATUS __stdcall HidP_GetSpecificValueCaps(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, USHORT LinkCollection, USAGE Usage, PHIDP_VALUE_CAPS ValueCaps, PUSHORT ValueCapsLength, PHIDP_PREPARSED_DATA PreparsedData);
NTSTATUS __stdcall HidP_GetUsageValue(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, USHORT LinkCollection, USAGE Usage, PULONG UsageValue, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength);
NTSTATUS __stdcall HidP_GetUsageValueArray(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, USHORT LinkCollection, USAGE Usage, PCHAR UsageValue, USHORT UsageValueByteLength, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength);
NTSTATUS __stdcall HidP_GetUsages(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, USHORT LinkCollection, PUSAGE UsageList, PULONG UsageLength, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength);
NTSTATUS __stdcall HidP_GetUsagesEx(HIDP_REPORT_TYPE ReportType, USHORT LinkCollection, PUSAGE_AND_PAGE ButtonList, ULONG *UsageLength, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength);
NTSTATUS __stdcall HidP_GetValueCaps(HIDP_REPORT_TYPE ReportType, PHIDP_VALUE_CAPS ValueCaps, PUSHORT ValueCapsLength, PHIDP_PREPARSED_DATA PreparsedData);
NTSTATUS __stdcall HidP_InitializeReportForID(HIDP_REPORT_TYPE ReportType, UCHAR ReportID, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength);
NTSTATUS __stdcall HidP_SetData(HIDP_REPORT_TYPE ReportType, PHIDP_DATA DataList, PULONG DataLength, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength);
NTSTATUS __stdcall HidP_SetScaledUsageValue(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, USHORT LinkCollection, USAGE Usage, LONG UsageValue, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength);
NTSTATUS __stdcall HidP_SetUsageValue(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, USHORT LinkCollection, USAGE Usage, ULONG UsageValue, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength);
NTSTATUS __stdcall HidP_SetUsageValueArray(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, USHORT LinkCollection, USAGE Usage, PCHAR UsageValue, USHORT UsageValueByteLength, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength);
NTSTATUS __stdcall HidP_SetUsages(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, USHORT LinkCollection, PUSAGE UsageList, PULONG UsageLength, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength);
NTSTATUS __stdcall HidP_SysPowerCaps(PHIDP_PREPARSED_DATA Ppd, PULONG OutputBuffer);
NTSTATUS __stdcall HidP_SysPowerEvent(PCHAR HidPacket, USHORT HidPacketLength, PHIDP_PREPARSED_DATA Ppd, PULONG OutputBuffer);
NTSTATUS __stdcall HidP_TranslateUsageAndPagesToI8042ScanCodes(PUSAGE_AND_PAGE ChangedUsageList, ULONG UsageListLength, HIDP_KEYBOARD_DIRECTION KeyAction, PHIDP_KEYBOARD_MODIFIER_STATE ModifierState, PHIDP_INSERT_SCANCODES InsertCodesProcedure, PVOID InsertCodesContext);
NTSTATUS __stdcall HidP_TranslateUsagesToI8042ScanCodes(PUSAGE ChangedUsageList, ULONG UsageListLength, HIDP_KEYBOARD_DIRECTION KeyAction, PHIDP_KEYBOARD_MODIFIER_STATE ModifierState, PHIDP_INSERT_SCANCODES InsertCodesProcedure, PVOID InsertCodesContext);
NTSTATUS __stdcall HidP_UnsetUsages(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, USHORT LinkCollection, PUSAGE UsageList, PULONG UsageLength, PHIDP_PREPARSED_DATA PreparsedData, PCHAR Report, ULONG ReportLength);
NTSTATUS __stdcall HidP_UsageAndPageListDifference(PUSAGE_AND_PAGE PreviousUsageList, PUSAGE_AND_PAGE CurrentUsageList, PUSAGE_AND_PAGE BreakUsageList, PUSAGE_AND_PAGE MakeUsageList, ULONG UsageListLength);
NTSTATUS __stdcall HidP_UsageListDifference(PUSAGE PreviousUsageList, PUSAGE CurrentUsageList, PUSAGE BreakUsageList, PUSAGE MakeUsageList, ULONG UsageListLength);
NTSTATUS __stdcall HidRegisterMinidriver(PHID_MINIDRIVER_REGISTRATION MinidriverRegistration);
NTSTATUS __stdcall HvlRegisterWheaErrorNotification(PHVL_WHEA_ERROR_NOTIFICATION Callback);
NTSTATUS __stdcall HvlUnregisterWheaErrorNotification(PHVL_WHEA_ERROR_NOTIFICATION Callback);
NTSTATUS __stdcall HwNProcessAddDevicePostDeviceCreate(WDFDRIVER Driver, WDFDEVICE Device, LPGUID DeviceGuid);
NTSTATUS __stdcall HwNProcessAddDevicePreDeviceCreate(WDFDRIVER Driver, PWDFDEVICE_INIT DeviceInit, PWDF_OBJECT_ATTRIBUTES FdoAttributes);
NTSTATUS __stdcall HwNRegisterClient(WDFDRIVER Driver, PHWN_CLIENT_REGISTRATION_PACKET RegistrationPacket, PUNICODE_STRING RegistryPath);
NTSTATUS __stdcall HwNUnregisterClient(WDFDRIVER Driver);
NTSTATUS __stdcall IPsecDospGetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, PSID *sidOwner, PSID *sidGroup, PACL *dacl, PACL *sacl, PSECURITY_DESCRIPTOR *securityDescriptor);
NTSTATUS __stdcall IPsecDospGetStatistics0(HANDLE engineHandle, IPSEC_DOSP_STATISTICS0 *idpStatistics);
NTSTATUS __stdcall IPsecDospSetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, const SID *sidOwner, const SID *sidGroup, const ACL *dacl, const ACL *sacl);
NTSTATUS __stdcall IPsecDospStateCreateEnumHandle0(HANDLE engineHandle, const IPSEC_DOSP_STATE_ENUM_TEMPLATE0 *enumTemplate, HANDLE *enumHandle);
NTSTATUS __stdcall IPsecDospStateDestroyEnumHandle0(HANDLE engineHandle, HANDLE enumHandle);
NTSTATUS __stdcall IPsecDospStateEnum0(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, IPSEC_DOSP_STATE0 ***entries, UINT32 *numEntries);
NTSTATUS __stdcall IPsecGetStatistics0(HANDLE engineHandle, IPSEC_STATISTICS0 *ipsecStatistics);
NTSTATUS __stdcall IPsecGetStatistics1(HANDLE engineHandle, IPSEC_STATISTICS1 *ipsecStatistics);
NTSTATUS __stdcall IPsecSaContextAddInbound0(HANDLE engineHandle, UINT64 id, const IPSEC_SA_BUNDLE0 *inboundBundle);
NTSTATUS __stdcall IPsecSaContextAddInbound1(HANDLE engineHandle, UINT64 id, const IPSEC_SA_BUNDLE1 *inboundBundle);
NTSTATUS __stdcall IPsecSaContextAddOutbound0(HANDLE engineHandle, UINT64 id, const IPSEC_SA_BUNDLE0 *outboundBundle);
NTSTATUS __stdcall IPsecSaContextAddOutbound1(HANDLE engineHandle, UINT64 id, const IPSEC_SA_BUNDLE1 *outboundBundle);
NTSTATUS __stdcall IPsecSaContextCreate0(HANDLE engineHandle, const IPSEC_TRAFFIC0 *outboundTraffic, UINT64 *inboundFilterId, UINT64 *id);
NTSTATUS __stdcall IPsecSaContextCreate1(HANDLE engineHandle, const IPSEC_TRAFFIC1 *outboundTraffic, const IPSEC_VIRTUAL_IF_TUNNEL_INFO0 *virtualIfTunnelInfo, UINT64 *inboundFilterId, UINT64 *id);
NTSTATUS __stdcall IPsecSaContextCreateEnumHandle0(HANDLE engineHandle, const IPSEC_SA_CONTEXT_ENUM_TEMPLATE0 *enumTemplate, HANDLE *enumHandle);
NTSTATUS __stdcall IPsecSaContextDeleteById0(HANDLE engineHandle, UINT64 id);
NTSTATUS __stdcall IPsecSaContextDestroyEnumHandle0(HANDLE engineHandle, HANDLE enumHandle);
NTSTATUS __stdcall IPsecSaContextEnum0(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, IPSEC_SA_CONTEXT0 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall IPsecSaContextEnum1(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, IPSEC_SA_CONTEXT1 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall IPsecSaContextExpire0(HANDLE engineHandle, UINT64 id);
NTSTATUS __stdcall IPsecSaContextGetById0(HANDLE engineHandle, UINT64 id, IPSEC_SA_CONTEXT0 **saContext);
NTSTATUS __stdcall IPsecSaContextGetById1(HANDLE engineHandle, UINT64 id, IPSEC_SA_CONTEXT1 **saContext);
NTSTATUS __stdcall IPsecSaContextGetSpi0(HANDLE engineHandle, UINT64 id, const IPSEC_GETSPI0 *getSpi, IPSEC_SA_SPI *inboundSpi);
NTSTATUS __stdcall IPsecSaContextGetSpi1(HANDLE engineHandle, UINT64 id, const IPSEC_GETSPI1 *getSpi, IPSEC_SA_SPI *inboundSpi);
NTSTATUS __stdcall IPsecSaContextSetSpi0(HANDLE engineHandle, UINT64 id, const IPSEC_GETSPI1 *getSpi, IPSEC_SA_SPI inboundSpi);
NTSTATUS __stdcall IPsecSaContextUpdate0(HANDLE engineHandle, UINT64 flags, const IPSEC_SA_CONTEXT1 *newValues);
NTSTATUS __stdcall IPsecSaCreateEnumHandle0(HANDLE engineHandle, const IPSEC_SA_ENUM_TEMPLATE0 *enumTemplate, HANDLE *enumHandle);
NTSTATUS __stdcall IPsecSaDbGetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, PSID *sidOwner, PSID *sidGroup, PACL *dacl, PACL *sacl, PSECURITY_DESCRIPTOR *securityDescriptor);
NTSTATUS __stdcall IPsecSaDbSetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, const SID *sidOwner, const SID *sidGroup, const ACL *dacl, const ACL *sacl);
NTSTATUS __stdcall IPsecSaDestroyEnumHandle0(HANDLE engineHandle, HANDLE enumHandle);
NTSTATUS __stdcall IPsecSaEnum0(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, IPSEC_SA_DETAILS0 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall IPsecSaEnum1(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, IPSEC_SA_DETAILS1 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall IkeextGetStatistics0(HANDLE engineHandle, IKEEXT_STATISTICS0 *ikeextStatistics);
NTSTATUS __stdcall IkeextGetStatistics1(HANDLE engineHandle, IKEEXT_STATISTICS1 *ikeextStatistics);
NTSTATUS __stdcall IkeextSaCreateEnumHandle0(HANDLE engineHandle, const IKEEXT_SA_ENUM_TEMPLATE0 *enumTemplate, HANDLE *enumHandle);
NTSTATUS __stdcall IkeextSaDbGetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, PSID *sidOwner, PSID *sidGroup, PACL *dacl, PACL *sacl, PSECURITY_DESCRIPTOR *securityDescriptor);
NTSTATUS __stdcall IkeextSaDbSetSecurityInfo0(HANDLE engineHandle, SECURITY_INFORMATION securityInfo, const SID *sidOwner, const SID *sidGroup, const ACL *dacl, const ACL *sacl);
NTSTATUS __stdcall IkeextSaDeleteById0(HANDLE engineHandle, UINT64 id);
NTSTATUS __stdcall IkeextSaDestroyEnumHandle0(HANDLE engineHandle, HANDLE enumHandle);
NTSTATUS __stdcall IkeextSaEnum0(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, IKEEXT_SA_DETAILS0 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall IkeextSaEnum1(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, IKEEXT_SA_DETAILS1 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall IkeextSaEnum2(HANDLE engineHandle, HANDLE enumHandle, UINT32 numEntriesRequested, IKEEXT_SA_DETAILS2 ***entries, UINT32 *numEntriesReturned);
NTSTATUS __stdcall IkeextSaGetById0(HANDLE engineHandle, UINT64 id, IKEEXT_SA_DETAILS0 **sa);
NTSTATUS __stdcall IkeextSaGetById1(HANDLE engineHandle, UINT64 id, GUID *saLookupContext, IKEEXT_SA_DETAILS1 **sa);
NTSTATUS __stdcall IkeextSaGetById2(HANDLE engineHandle, UINT64 id, GUID *saLookupContext, IKEEXT_SA_DETAILS2 **sa);
NTSTATUS __stdcall IoAcquireRemoveLockEx(PIO_REMOVE_LOCK RemoveLock, PVOID Tag, PCSTR File, ULONG Line, ULONG RemlockSize);
NTSTATUS __stdcall IoAllocateAdapterChannel(PDMA_ADAPTER DmaAdapter, PDEVICE_OBJECT DeviceObject, ULONG NumberOfMapRegisters, PDRIVER_CONTROL ExecutionRoutine, PVOID Context);
NTSTATUS __stdcall IoAllocateDriverObjectExtension(PDRIVER_OBJECT DriverObject, PVOID ClientIdentificationAddress, ULONG DriverObjectExtensionSize, PVOID *DriverObjectExtension);
NTSTATUS __stdcall IoAllocateSfioStreamIdentifier(PFILE_OBJECT FileObject, ULONG Length, PVOID Signature, PVOID *StreamIdentifier);
NTSTATUS __stdcall IoApplyPriorityInfoThread(PIO_PRIORITY_INFO InputPriorityInfo, PIO_PRIORITY_INFO OutputPriorityInfo, PETHREAD Thread);
NTSTATUS __stdcall IoAssignResources(PUNICODE_STRING RegistryPath, PUNICODE_STRING DriverClassName, PDRIVER_OBJECT DriverObject, PDEVICE_OBJECT DeviceObject, PIO_RESOURCE_REQUIREMENTS_LIST RequestedResources, PCM_RESOURCE_LIST *AllocatedResources);
NTSTATUS __stdcall IoAttachDevice(PDEVICE_OBJECT SourceDevice, PUNICODE_STRING TargetDevice, PDEVICE_OBJECT *AttachedDevice);
NTSTATUS __stdcall IoAttachDeviceByPointer(PDEVICE_OBJECT SourceDevice, PDEVICE_OBJECT TargetDevice);
NTSTATUS __stdcall IoAttachDeviceToDeviceStackSafe(PDEVICE_OBJECT SourceDevice, PDEVICE_OBJECT TargetDevice, PDEVICE_OBJECT *AttachedToDeviceObject);
NTSTATUS __stdcall IoCheckDesiredAccess(PACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess);
NTSTATUS __stdcall IoCheckEaBufferValidity(PFILE_FULL_EA_INFORMATION EaBuffer, ULONG EaLength, PULONG ErrorOffset);
NTSTATUS __stdcall IoCheckFunctionAccess(ACCESS_MASK GrantedAccess, UCHAR MajorFunction, UCHAR MinorFunction, ULONG IoControlCode, PVOID Arg1, PVOID Arg2);
NTSTATUS __stdcall IoCheckLinkShareAccess(ACCESS_MASK DesiredAccess, ULONG DesiredShareAccess, PFILE_OBJECT FileObject, PSHARE_ACCESS ShareAccess, PLINK_SHARE_ACCESS LinkShareAccess, ULONG IoShareAccessFlags);
NTSTATUS __stdcall IoCheckQuerySetFileInformation(FILE_INFORMATION_CLASS FileInformationClass, ULONG Length, BOOLEAN SetOperation);
NTSTATUS __stdcall IoCheckQuerySetVolumeInformation(FS_INFORMATION_CLASS FsInformationClass, ULONG Length, BOOLEAN SetOperation);
NTSTATUS __stdcall IoCheckQuotaBufferValidity(PFILE_QUOTA_INFORMATION QuotaBuffer, ULONG QuotaLength, PULONG ErrorOffset);
NTSTATUS __stdcall IoCheckShareAccess(ACCESS_MASK DesiredAccess, ULONG DesiredShareAccess, PFILE_OBJECT FileObject, PSHARE_ACCESS ShareAccess, BOOLEAN Update);
NTSTATUS __stdcall IoCheckShareAccessEx(ACCESS_MASK DesiredAccess, ULONG DesiredShareAccess, PFILE_OBJECT FileObject, PSHARE_ACCESS ShareAccess, BOOLEAN Update, PBOOLEAN WritePermission);
NTSTATUS __stdcall IoClearFsTrackOffsetState(PIRP Irp);
NTSTATUS __stdcall IoConnectInterrupt(PKINTERRUPT *InterruptObject, PKSERVICE_ROUTINE ServiceRoutine, PVOID ServiceContext, PKSPIN_LOCK SpinLock, ULONG Vector, KIRQL Irql, KIRQL SynchronizeIrql, KINTERRUPT_MODE InterruptMode, BOOLEAN ShareVector, KAFFINITY ProcessorEnableMask, BOOLEAN FloatingSave);
NTSTATUS __stdcall IoConnectInterruptEx(PIO_CONNECT_INTERRUPT_PARAMETERS Parameters);
NTSTATUS __stdcall IoCreateDevice(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PDEVICE_OBJECT *DeviceObject);
NTSTATUS __stdcall IoCreateDisk(PDEVICE_OBJECT DeviceObject, struct _CREATE_DISK *Disk);
NTSTATUS __stdcall IoCreateFile(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG Disposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength, CREATE_FILE_TYPE CreateFileType, PVOID InternalParameters, ULONG Options);
NTSTATUS __stdcall IoCreateFileEx(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG Disposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength, CREATE_FILE_TYPE CreateFileType, PVOID InternalParameters, ULONG Options, PIO_DRIVER_CREATE_CONTEXT DriverContext);
NTSTATUS __stdcall IoCreateFileSpecifyDeviceObjectHint(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG Disposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength, CREATE_FILE_TYPE CreateFileType, PVOID InternalParameters, ULONG Options, PVOID DeviceObject);
NTSTATUS __stdcall IoCreateStreamFileObjectEx2(PIO_CREATE_STREAM_FILE_OPTIONS CreateOptions, PFILE_OBJECT FileObject, PDEVICE_OBJECT DeviceObject, PFILE_OBJECT *StreamFileObject, PHANDLE FileHandle);
NTSTATUS __stdcall IoCreateSymbolicLink(PUNICODE_STRING SymbolicLinkName, PUNICODE_STRING DeviceName);
NTSTATUS __stdcall IoCreateSystemThread(PVOID IoObject, PHANDLE ThreadHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PKSTART_ROUTINE StartRoutine, PVOID StartContext);
NTSTATUS __stdcall IoCreateUnprotectedSymbolicLink(PUNICODE_STRING SymbolicLinkName, PUNICODE_STRING DeviceName);
NTSTATUS __stdcall IoCsqInitialize(PIO_CSQ Csq, PIO_CSQ_INSERT_IRP CsqInsertIrp, PIO_CSQ_REMOVE_IRP CsqRemoveIrp, PIO_CSQ_PEEK_NEXT_IRP CsqPeekNextIrp, PIO_CSQ_ACQUIRE_LOCK CsqAcquireLock, PIO_CSQ_RELEASE_LOCK CsqReleaseLock, PIO_CSQ_COMPLETE_CANCELED_IRP CsqCompleteCanceledIrp);
NTSTATUS __stdcall IoCsqInitializeEx(PIO_CSQ Csq, PIO_CSQ_INSERT_IRP_EX CsqInsertIrp, PIO_CSQ_REMOVE_IRP CsqRemoveIrp, PIO_CSQ_PEEK_NEXT_IRP CsqPeekNextIrp, PIO_CSQ_ACQUIRE_LOCK CsqAcquireLock, PIO_CSQ_RELEASE_LOCK CsqReleaseLock, PIO_CSQ_COMPLETE_CANCELED_IRP CsqCompleteCanceledIrp);
NTSTATUS __stdcall IoCsqInsertIrpEx(PIO_CSQ Csq, PIRP Irp, PIO_CSQ_IRP_CONTEXT Context, PVOID InsertContext);
NTSTATUS __stdcall IoDecrementKeepAliveCount(PFILE_OBJECT FileObject, PEPROCESS Process);
NTSTATUS __stdcall IoDeleteSymbolicLink(PUNICODE_STRING SymbolicLinkName);
NTSTATUS __stdcall IoEnumerateDeviceObjectList(PDRIVER_OBJECT DriverObject, PDEVICE_OBJECT *DeviceObjectList, ULONG DeviceObjectListSize, PULONG ActualNumberDeviceObjects);
NTSTATUS __stdcall IoEnumerateRegisteredFiltersList(PDRIVER_OBJECT *DriverObjectList, ULONG DriverObjectListSize, PULONG ActualNumberDriverObjects);
NTSTATUS __stdcall IoFreeSfioStreamIdentifier(PFILE_OBJECT FileObject, PVOID Signature);
NTSTATUS __stdcall IoGetActivityIdIrp(PIRP Irp, LPGUID Guid);
NTSTATUS __stdcall IoGetAffinityInterrupt(PKINTERRUPT InterruptObject, PGROUP_AFFINITY GroupAffinity);
NTSTATUS __stdcall IoGetBootDiskInformation(PBOOTDISK_INFORMATION BootDiskInformation, ULONG Size);
NTSTATUS __stdcall IoGetBootDiskInformationLite(PBOOTDISK_INFORMATION_LITE *BootDiskInformation);
NTSTATUS __stdcall IoGetContainerInformation(IO_CONTAINER_INFORMATION_CLASS InformationClass, PVOID ContainerObject, PVOID Buffer, ULONG BufferLength);
NTSTATUS __stdcall IoGetDeviceDirectory(PDEVICE_OBJECT PhysicalDeviceObject, DEVICE_DIRECTORY_TYPE DirectoryType, ULONG Flags, PVOID Reserved, PHANDLE DeviceDirectoryHandle);
NTSTATUS __stdcall IoGetDeviceInterfaceAlias(PUNICODE_STRING SymbolicLinkName, const GUID *AliasInterfaceClassGuid, PUNICODE_STRING AliasSymbolicLinkName);
NTSTATUS __stdcall IoGetDeviceInterfacePropertyData(PUNICODE_STRING SymbolicLinkName, const DEVPROPKEY *PropertyKey, LCID Lcid, ULONG Flags, ULONG Size, PVOID Data, PULONG RequiredSize, PDEVPROPTYPE Type);
NTSTATUS __stdcall IoGetDeviceInterfaces(const GUID *InterfaceClassGuid, PDEVICE_OBJECT PhysicalDeviceObject, ULONG Flags, PZZWSTR *SymbolicLinkList);
NTSTATUS __stdcall IoGetDeviceNumaNode(PDEVICE_OBJECT Pdo, PUSHORT NodeNumber);
NTSTATUS __stdcall IoGetDeviceObjectPointer(PUNICODE_STRING ObjectName, ACCESS_MASK DesiredAccess, PFILE_OBJECT *FileObject, PDEVICE_OBJECT *DeviceObject);
NTSTATUS __stdcall IoGetDeviceProperty(PDEVICE_OBJECT DeviceObject, DEVICE_REGISTRY_PROPERTY DeviceProperty, ULONG BufferLength, PVOID PropertyBuffer, PULONG ResultLength);
NTSTATUS __stdcall IoGetDevicePropertyData(PDEVICE_OBJECT Pdo, const DEVPROPKEY *PropertyKey, LCID Lcid, ULONG Flags, ULONG Size, PVOID Data, PULONG RequiredSize, PDEVPROPTYPE Type);
NTSTATUS __stdcall IoGetDiskDeviceObject(PDEVICE_OBJECT FileSystemDeviceObject, PDEVICE_OBJECT *DiskDeviceObject);
NTSTATUS __stdcall IoGetDriverDirectory(PDRIVER_OBJECT DriverObject, DRIVER_DIRECTORY_TYPE DirectoryType, ULONG Flags, PHANDLE DriverDirectoryHandle);
NTSTATUS __stdcall IoGetFsTrackOffsetState(PIRP Irp, PIO_IRP_EXT_TRACK_OFFSET_HEADER *RetFsTrackOffsetBlob, LONGLONG *RetTrackedOffset);
NTSTATUS __stdcall IoGetFsZeroingOffset(PIRP Irp, PULONG ZeroingOffset);
NTSTATUS __stdcall IoGetIoAttributionHandle(PIRP Irp, PVOID *IoAttributionHandle);
NTSTATUS __stdcall IoGetIommuInterface(ULONG Version, PDMA_IOMMU_INTERFACE InterfaceOut);
NTSTATUS __stdcall IoGetIrpExtraCreateParameter(PIRP Irp, struct _ECP_LIST **ExtraCreateParameter);
NTSTATUS __stdcall IoGetRequestorSessionId(PIRP Irp, PULONG pSessionId);
NTSTATUS __stdcall IoIncrementKeepAliveCount(PFILE_OBJECT FileObject, PEPROCESS Process);
NTSTATUS __stdcall IoInitializeTimer(PDEVICE_OBJECT DeviceObject, PIO_TIMER_ROUTINE TimerRoutine, PVOID Context);
NTSTATUS __stdcall IoOpenDeviceInterfaceRegistryKey(PUNICODE_STRING SymbolicLinkName, ACCESS_MASK DesiredAccess, PHANDLE DeviceInterfaceRegKey);
NTSTATUS __stdcall IoOpenDeviceRegistryKey(PDEVICE_OBJECT DeviceObject, ULONG DevInstKeyType, ACCESS_MASK DesiredAccess, PHANDLE DeviceRegKey);
NTSTATUS __stdcall IoOpenDriverRegistryKey(PDRIVER_OBJECT DriverObject, DRIVER_REGKEY_TYPE RegKeyType, ACCESS_MASK DesiredAccess, ULONG Flags, PHANDLE DriverRegKey);
NTSTATUS __stdcall IoPageRead(PFILE_OBJECT FileObject, PMDL MemoryDescriptorList, PLARGE_INTEGER StartingOffset, PKEVENT Event, PIO_STATUS_BLOCK IoStatusBlock);
NTSTATUS __stdcall IoPropagateActivityIdToThread(PIRP Irp, LPGUID PropagatedId, LPCGUID *OriginalId);
NTSTATUS __stdcall IoQueryDeviceDescription(PINTERFACE_TYPE BusType, PULONG BusNumber, PCONFIGURATION_TYPE ControllerType, PULONG ControllerNumber, PCONFIGURATION_TYPE PeripheralType, PULONG PeripheralNumber, PIO_QUERY_DEVICE_ROUTINE CalloutRoutine, PVOID Context);
NTSTATUS __stdcall IoQueryFileDosDeviceName(PFILE_OBJECT FileObject, POBJECT_NAME_INFORMATION *ObjectNameInformation);
NTSTATUS __stdcall IoQueryFileInformation(PFILE_OBJECT FileObject, FILE_INFORMATION_CLASS FileInformationClass, ULONG Length, PVOID FileInformation, PULONG ReturnedLength);
NTSTATUS __stdcall IoQueryFullDriverPath(PDRIVER_OBJECT DriverObject, PUNICODE_STRING FullPath);
NTSTATUS __stdcall IoQueryInformationByName(POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, ULONG Options, PIO_DRIVER_CREATE_CONTEXT DriverContext);
NTSTATUS __stdcall IoQueryVolumeInformation(PFILE_OBJECT FileObject, FS_INFORMATION_CLASS FsInformationClass, ULONG Length, PVOID FsInformation, PULONG ReturnedLength);
NTSTATUS __stdcall IoReadDiskSignature(PDEVICE_OBJECT DeviceObject, ULONG BytesPerSector, PDISK_SIGNATURE Signature);
NTSTATUS __stdcall IoReadPartitionTable(PDEVICE_OBJECT DeviceObject, ULONG SectorSize, BOOLEAN ReturnRecognizedPartitions, struct _DRIVE_LAYOUT_INFORMATION **PartitionBuffer);
NTSTATUS __stdcall IoReadPartitionTableEx(PDEVICE_OBJECT DeviceObject, struct _DRIVE_LAYOUT_INFORMATION_EX **DriveLayout);
NTSTATUS __stdcall IoRecordIoAttribution(PVOID OpaqueHandle, IO_ATTRIBUTION_INFORMATION *AttributionInformation);
NTSTATUS __stdcall IoRegisterContainerNotification(IO_CONTAINER_NOTIFICATION_CLASS NotificationClass, PIO_CONTAINER_NOTIFICATION_FUNCTION CallbackFunction, PVOID NotificationInformation, ULONG NotificationInformationLength, PVOID CallbackRegistration);
NTSTATUS __stdcall IoRegisterDeviceInterface(PDEVICE_OBJECT PhysicalDeviceObject, const GUID *InterfaceClassGuid, PUNICODE_STRING ReferenceString, PUNICODE_STRING SymbolicLinkName);
NTSTATUS __stdcall IoRegisterFsRegistrationChange(PDRIVER_OBJECT DriverObject, PDRIVER_FS_NOTIFICATION DriverNotificationRoutine);
NTSTATUS __stdcall IoRegisterFsRegistrationChangeMountAware(PDRIVER_OBJECT DriverObject, PDRIVER_FS_NOTIFICATION DriverNotificationRoutine, BOOLEAN SynchronizeWithMounts);
NTSTATUS __stdcall IoRegisterLastChanceShutdownNotification(PDEVICE_OBJECT DeviceObject);
NTSTATUS __stdcall IoRegisterPlugPlayNotification(IO_NOTIFICATION_EVENT_CATEGORY EventCategory, ULONG EventCategoryFlags, PVOID EventCategoryData, PDRIVER_OBJECT DriverObject, PDRIVER_NOTIFICATION_CALLBACK_ROUTINE CallbackRoutine, PVOID Context, PVOID *NotificationEntry);
NTSTATUS __stdcall IoRegisterShutdownNotification(PDEVICE_OBJECT DeviceObject);
NTSTATUS __stdcall IoReplaceFileObjectName(PFILE_OBJECT FileObject, PWSTR NewFileName, USHORT FileNameLength);
NTSTATUS __stdcall IoReplacePartitionUnit(PDEVICE_OBJECT TargetPdo, PDEVICE_OBJECT SparePdo, ULONG Flags);
NTSTATUS __stdcall IoReportDetectedDevice(PDRIVER_OBJECT DriverObject, INTERFACE_TYPE LegacyBusType, ULONG BusNumber, ULONG SlotNumber, PCM_RESOURCE_LIST ResourceList, PIO_RESOURCE_REQUIREMENTS_LIST ResourceRequirements, BOOLEAN ResourceAssigned, PDEVICE_OBJECT *DeviceObject);
NTSTATUS __stdcall IoReportResourceForDetection(PDRIVER_OBJECT DriverObject, PCM_RESOURCE_LIST DriverList, ULONG DriverListSize, PDEVICE_OBJECT DeviceObject, PCM_RESOURCE_LIST DeviceList, ULONG DeviceListSize, PBOOLEAN ConflictDetected);
NTSTATUS __stdcall IoReportResourceUsage(PUNICODE_STRING DriverClassName, PDRIVER_OBJECT DriverObject, PCM_RESOURCE_LIST DriverList, ULONG DriverListSize, PDEVICE_OBJECT DeviceObject, PCM_RESOURCE_LIST DeviceList, ULONG DeviceListSize, BOOLEAN OverrideConflict, PBOOLEAN ConflictDetected);
NTSTATUS __stdcall IoReportRootDevice(PDRIVER_OBJECT DriverObject);
NTSTATUS __stdcall IoReportTargetDeviceChange(PDEVICE_OBJECT PhysicalDeviceObject, PVOID NotificationStructure);
NTSTATUS __stdcall IoReportTargetDeviceChangeAsynchronous(PDEVICE_OBJECT PhysicalDeviceObject, PVOID NotificationStructure, PDEVICE_CHANGE_COMPLETE_CALLBACK Callback, PVOID Context);
NTSTATUS __stdcall IoRequestDeviceEjectEx(PDEVICE_OBJECT PhysicalDeviceObject, PIO_DEVICE_EJECT_CALLBACK Callback, PVOID Context, PDRIVER_OBJECT DriverObject);
NTSTATUS __stdcall IoRequestDeviceRemovalForReset(PDEVICE_OBJECT PhysicalDeviceObject, ULONG Flags);
NTSTATUS __stdcall IoRetrievePriorityInfo(PIRP Irp, PFILE_OBJECT FileObject, PETHREAD Thread, PIO_PRIORITY_INFO PriorityInfo);
NTSTATUS __stdcall IoSetActivityIdIrp(PIRP Irp, LPCGUID Guid);
NTSTATUS __stdcall IoSetCompletionRoutineEx(PDEVICE_OBJECT DeviceObject, PIRP Irp, PIO_COMPLETION_ROUTINE CompletionRoutine, PVOID Context, BOOLEAN InvokeOnSuccess, BOOLEAN InvokeOnError, BOOLEAN InvokeOnCancel);
NTSTATUS __stdcall IoSetDeviceInterfacePropertyData(PUNICODE_STRING SymbolicLinkName, const DEVPROPKEY *PropertyKey, LCID Lcid, ULONG Flags, DEVPROPTYPE Type, ULONG Size, PVOID Data);
NTSTATUS __stdcall IoSetDeviceInterfaceState(PUNICODE_STRING SymbolicLinkName, BOOLEAN Enable);
NTSTATUS __stdcall IoSetDevicePropertyData(PDEVICE_OBJECT Pdo, const DEVPROPKEY *PropertyKey, LCID Lcid, ULONG Flags, DEVPROPTYPE Type, ULONG Size, PVOID Data);
NTSTATUS __stdcall IoSetFileObjectIgnoreSharing(PFILE_OBJECT FileObject);
NTSTATUS __stdcall IoSetFileOrigin(PFILE_OBJECT FileObject, BOOLEAN Remote);
NTSTATUS __stdcall IoSetFsTrackOffsetState(PIRP Irp, PIO_IRP_EXT_TRACK_OFFSET_HEADER FsTrackOffsetBlob, LONGLONG TrackedOffset);
NTSTATUS __stdcall IoSetFsZeroingOffset(PIRP Irp, ULONG ZeroingOffset);
NTSTATUS __stdcall IoSetFsZeroingOffsetRequired(PIRP Irp);
NTSTATUS __stdcall IoSetInformation(PFILE_OBJECT FileObject, FILE_INFORMATION_CLASS FileInformationClass, ULONG Length, PVOID FileInformation);
NTSTATUS __stdcall IoSetIoAttributionIrp(PIRP Irp, PVOID AttributionSource, ULONG Flags);
NTSTATUS __stdcall IoSetIoPriorityHint(PIRP Irp, IO_PRIORITY_HINT PriorityHint);
NTSTATUS __stdcall IoSetIrpExtraCreateParameter(PIRP Irp, struct _ECP_LIST *ExtraCreateParameter);
NTSTATUS __stdcall IoSetPartitionInformation(PDEVICE_OBJECT DeviceObject, ULONG SectorSize, ULONG PartitionNumber, ULONG PartitionType);
NTSTATUS __stdcall IoSetPartitionInformationEx(PDEVICE_OBJECT DeviceObject, ULONG PartitionNumber, struct _SET_PARTITION_INFORMATION_EX *PartitionInfo);
NTSTATUS __stdcall IoSetSystemPartition(PUNICODE_STRING VolumeNameString);
NTSTATUS __stdcall IoSynchronousCallDriver(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall IoSynchronousPageWrite(PFILE_OBJECT FileObject, PMDL MemoryDescriptorList, PLARGE_INTEGER StartingOffset, PKEVENT Event, PIO_STATUS_BLOCK IoStatusBlock);
NTSTATUS __stdcall IoUnregisterPlugPlayNotification(PVOID NotificationEntry);
NTSTATUS __stdcall IoUnregisterPlugPlayNotificationEx(PVOID NotificationEntry);
NTSTATUS __stdcall IoValidateDeviceIoControlAccess(PIRP Irp, ULONG RequiredAccess);
NTSTATUS __stdcall IoVerifyPartitionTable(PDEVICE_OBJECT DeviceObject, BOOLEAN FixErrors);
NTSTATUS __stdcall IoVerifyVolume(PDEVICE_OBJECT DeviceObject, BOOLEAN AllowRawMount);
NTSTATUS __stdcall IoVolumeDeviceNameToGuid(PUNICODE_STRING VolumeDeviceName, GUID *Guid);
NTSTATUS __stdcall IoVolumeDeviceNameToGuidPath(PUNICODE_STRING VolumeDeviceName, PUNICODE_STRING GuidPath);
NTSTATUS __stdcall IoVolumeDeviceToDosName(PVOID VolumeDeviceObject, PUNICODE_STRING DosName);
NTSTATUS __stdcall IoVolumeDeviceToGuid(PVOID VolumeDeviceObject, GUID *Guid);
NTSTATUS __stdcall IoVolumeDeviceToGuidPath(PVOID VolumeDeviceObject, PUNICODE_STRING GuidPath);
NTSTATUS __stdcall IoWMIAllocateInstanceIds(LPCGUID Guid, ULONG InstanceCount, ULONG *FirstInstanceId);
NTSTATUS __stdcall IoWMIDeviceObjectToInstanceName(PVOID DataBlockObject, PDEVICE_OBJECT DeviceObject, PUNICODE_STRING InstanceName);
NTSTATUS __stdcall IoWMIExecuteMethod(PVOID DataBlockObject, PUNICODE_STRING InstanceName, ULONG MethodId, ULONG InBufferSize, PULONG OutBufferSize, PUCHAR InOutBuffer);
NTSTATUS __stdcall IoWMIHandleToInstanceName(PVOID DataBlockObject, HANDLE FileHandle, PUNICODE_STRING InstanceName);
NTSTATUS __stdcall IoWMIOpenBlock(LPCGUID Guid, ULONG DesiredAccess, PVOID *DataBlockObject);
NTSTATUS __stdcall IoWMIQueryAllData(PVOID DataBlockObject, PULONG InOutBufferSize, PVOID OutBuffer);
NTSTATUS __stdcall IoWMIQueryAllDataMultiple(PVOID *DataBlockObjectList, ULONG ObjectCount, PULONG InOutBufferSize, PVOID OutBuffer);
NTSTATUS __stdcall IoWMIQuerySingleInstance(PVOID DataBlockObject, PUNICODE_STRING InstanceName, PULONG InOutBufferSize, PVOID OutBuffer);
NTSTATUS __stdcall IoWMIQuerySingleInstanceMultiple(PVOID *DataBlockObjectList, PUNICODE_STRING InstanceNames, ULONG ObjectCount, PULONG InOutBufferSize, PVOID OutBuffer);
NTSTATUS __stdcall IoWMIRegistrationControl(PDEVICE_OBJECT DeviceObject, ULONG Action);
NTSTATUS __stdcall IoWMISetNotificationCallback(PVOID Object, WMI_NOTIFICATION_CALLBACK Callback, PVOID Context);
NTSTATUS __stdcall IoWMISetSingleInstance(PVOID DataBlockObject, PUNICODE_STRING InstanceName, ULONG Version, ULONG ValueBufferSize, PVOID ValueBuffer);
NTSTATUS __stdcall IoWMISetSingleItem(PVOID DataBlockObject, PUNICODE_STRING InstanceName, ULONG DataItemId, ULONG Version, ULONG ValueBufferSize, PVOID ValueBuffer);
NTSTATUS __stdcall IoWMISuggestInstanceName(PDEVICE_OBJECT PhysicalDeviceObject, PUNICODE_STRING SymbolicLinkName, BOOLEAN CombineNames, PUNICODE_STRING SuggestedInstanceName);
NTSTATUS __stdcall IoWMIWriteEvent(PVOID WnodeEventItem);
NTSTATUS __stdcall IoWritePartitionTable(PDEVICE_OBJECT DeviceObject, ULONG SectorSize, ULONG SectorsPerTrack, ULONG NumberOfHeads, struct _DRIVE_LAYOUT_INFORMATION *PartitionBuffer);
NTSTATUS __stdcall IoWritePartitionTableEx(PDEVICE_OBJECT DeviceObject, struct _DRIVE_LAYOUT_INFORMATION_EX *DriveLayout);
NTSTATUS __stdcall IofCallDriver(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall KdChangeOption(KD_OPTION Option, ULONG InBufferBytes, PVOID InBuffer, ULONG OutBufferBytes, PVOID OutBuffer, PULONG OutBufferNeeded);
NTSTATUS __stdcall KeAddTriageDumpDataBlock(PKTRIAGE_DUMP_DATA_ARRAY KtriageDumpDataArray, ULONG MaxDataSize, PVOID Address, SIZE_T Size);
NTSTATUS __stdcall KeConvertAuxiliaryCounterToPerformanceCounter(ULONG64 AuxiliaryCounterValue, PULONG64 PerformanceCounterValue, PULONG64 ConversionError);
NTSTATUS __stdcall KeConvertPerformanceCounterToAuxiliaryCounter(ULONG64 PerformanceCounterValue, PULONG64 AuxiliaryCounterValue, PULONG64 ConversionError);
NTSTATUS __stdcall KeDelayExecutionThread(KPROCESSOR_MODE WaitMode, BOOLEAN Alertable, PLARGE_INTEGER Interval);
NTSTATUS __stdcall KeDeregisterBoundCallback(PVOID Handle);
NTSTATUS __stdcall KeDeregisterNmiCallback(PVOID Handle);
NTSTATUS __stdcall KeExpandKernelStackAndCallout(PEXPAND_STACK_CALLOUT Callout, PVOID Parameter, SIZE_T Size);
NTSTATUS __stdcall KeExpandKernelStackAndCalloutEx(PEXPAND_STACK_CALLOUT Callout, PVOID Parameter, SIZE_T Size, BOOLEAN Wait, PVOID Context);
NTSTATUS __stdcall KeGetProcessorNumberFromIndex(ULONG ProcIndex, PPROCESSOR_NUMBER ProcNumber);
NTSTATUS __stdcall KeInitializeCrashDumpHeader(ULONG DumpType, ULONG Flags, PVOID Buffer, ULONG BufferSize, PULONG BufferNeeded);
NTSTATUS __stdcall KeInitializeTriageDumpDataArray(PKTRIAGE_DUMP_DATA_ARRAY KtriageDumpDataArray, ULONG Size);
NTSTATUS __stdcall KeQueryAuxiliaryCounterFrequency(PULONG64 AuxiliaryCounterFrequency);
NTSTATUS __stdcall KeQueryDpcWatchdogInformation(PKDPC_WATCHDOG_INFORMATION WatchdogInformation);
NTSTATUS __stdcall KeQueryHardwareCounterConfiguration(PHARDWARE_COUNTER CounterArray, ULONG MaximumCount, PULONG Count);
NTSTATUS __stdcall KeQueryLogicalProcessorRelationship(PPROCESSOR_NUMBER ProcessorNumber, LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType, PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Information, PULONG Length);
NTSTATUS __stdcall KeRestoreFloatingPointState(PKFLOATING_SAVE FloatSave);
NTSTATUS __stdcall KeSaveExtendedProcessorState(ULONG64 Mask, PXSTATE_SAVE XStateSave);
NTSTATUS __stdcall KeSaveFloatingPointState(PKFLOATING_SAVE FloatSave);
NTSTATUS __stdcall KeSetHardwareCounterConfiguration(PHARDWARE_COUNTER CounterArray, ULONG Count);
NTSTATUS __stdcall KeSetTargetProcessorDpcEx(PKDPC Dpc, PPROCESSOR_NUMBER ProcNumber);
NTSTATUS __stdcall KeWaitForMultipleObjects(ULONG Count, PVOID Object[], WAIT_TYPE WaitType, KWAIT_REASON WaitReason, KPROCESSOR_MODE WaitMode, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PKWAIT_BLOCK WaitBlockArray);
NTSTATUS __stdcall KeWaitForSingleObject(PVOID Object, KWAIT_REASON WaitReason, KPROCESSOR_MODE WaitMode, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
NTSTATUS __stdcall KoCreateInstance(const IID *const ClassId, IUnknown *UnkOuter, ULONG ClsContext, const IID *const InterfaceId, PVOID *Interface);
NTSTATUS __stdcall KoDeviceInitialize(PDEVICE_OBJECT DeviceObject);
NTSTATUS __stdcall KoDriverInitialize(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPathName, KoCreateObjectHandler CreateObjectHandler);
NTSTATUS __stdcall KsAcquireCachedMdl(PIRP Irp, const GUID *const Guid, PFNKSCANCELPINNEDMDL CancelRoutine, PVOID CancelContext, PMDL *MdlAddr, PVOID *ReleaseContext);
NTSTATUS __stdcall KsAcquireResetValue(PIRP Irp, KSRESET *ResetValue);
NTSTATUS __stdcall KsAddDevice(PDRIVER_OBJECT DriverObject, PDEVICE_OBJECT PhysicalDeviceObject);
NTSTATUS __stdcall KsAddItemToObjectBag(KSOBJECT_BAG ObjectBag, PVOID Item, PFNKSFREE Free);
NTSTATUS __stdcall KsAddObjectCreateItemToDeviceHeader(KSDEVICE_HEADER Header, PDRIVER_DISPATCH Create, PVOID Context, PWSTR ObjectClass, PSECURITY_DESCRIPTOR SecurityDescriptor);
NTSTATUS __stdcall KsAddObjectCreateItemToObjectHeader(KSOBJECT_HEADER Header, PDRIVER_DISPATCH Create, PVOID Context, PWSTR ObjectClass, PSECURITY_DESCRIPTOR SecurityDescriptor);
NTSTATUS __stdcall KsAllocateDefaultClock(PKSDEFAULTCLOCK *DefaultClock);
NTSTATUS __stdcall KsAllocateDefaultClockEx(PKSDEFAULTCLOCK *DefaultClock, PVOID Context, PFNKSSETTIMER SetTimer, PFNKSCANCELTIMER CancelTimer, PFNKSCORRELATEDTIME CorrelatedTime, const KSRESOLUTION *Resolution, ULONG Flags);
NTSTATUS __stdcall KsAllocateDeviceHeader(KSDEVICE_HEADER *Header, ULONG ItemsCount, PKSOBJECT_CREATE_ITEM ItemsList);
NTSTATUS __stdcall KsAllocateExtraData(PIRP Irp, ULONG ExtraSize, PVOID *ExtraBuffer);
NTSTATUS __stdcall KsAllocateObjectBag(PKSDEVICE Device, KSOBJECT_BAG *ObjectBag);
NTSTATUS __stdcall KsAllocateObjectCreateItem(KSDEVICE_HEADER Header, PKSOBJECT_CREATE_ITEM CreateItem, BOOLEAN AllocateEntry, PFNKSITEMFREECALLBACK ItemFreeCallback);
NTSTATUS __stdcall KsAllocateObjectHeader(KSOBJECT_HEADER *Header, ULONG ItemsCount, PKSOBJECT_CREATE_ITEM ItemsList, PIRP Irp, const KSDISPATCH_TABLE *Table);
NTSTATUS __stdcall KsCacheMedium(PUNICODE_STRING SymbolicLink, PKSPIN_MEDIUM Medium, ULONG PinDirection);
NTSTATUS __stdcall KsCopyObjectBagItems(KSOBJECT_BAG ObjectBagDestination, KSOBJECT_BAG ObjectBagSource);
NTSTATUS __stdcall KsCreateAllocator(HANDLE ConnectionHandle, PKSALLOCATOR_FRAMING AllocatorFraming, PHANDLE AllocatorHandle);
NTSTATUS __stdcall KsCreateBusEnumObject(PWSTR BusIdentifier, PDEVICE_OBJECT BusDeviceObject, PDEVICE_OBJECT PhysicalDeviceObject, PDEVICE_OBJECT PnpDeviceObject, const GUID *const InterfaceGuid, PWSTR ServiceRelativePath);
NTSTATUS __stdcall KsCreateClock(HANDLE ConnectionHandle, PKSCLOCK_CREATE ClockCreate, PHANDLE ClockHandle);
NTSTATUS __stdcall KsCreateDefaultAllocator(PIRP Irp);
NTSTATUS __stdcall KsCreateDefaultAllocatorEx(PIRP Irp, PVOID InitializeContext, PFNKSDEFAULTALLOCATE DefaultAllocate, PFNKSDEFAULTFREE DefaultFree, PFNKSINITIALIZEALLOCATOR InitializeAllocator, PFNKSDELETEALLOCATOR DeleteAllocator);
NTSTATUS __stdcall KsCreateDefaultClock(PIRP Irp, PKSDEFAULTCLOCK DefaultClock);
NTSTATUS __stdcall KsCreateDefaultSecurity(PSECURITY_DESCRIPTOR ParentSecurity, PSECURITY_DESCRIPTOR *DefaultSecurity);
NTSTATUS __stdcall KsCreateDevice(PDRIVER_OBJECT DriverObject, PDEVICE_OBJECT PhysicalDeviceObject, const KSDEVICE_DESCRIPTOR *Descriptor, ULONG ExtensionSize, PKSDEVICE *Device);
NTSTATUS __stdcall KsCreateFilterFactory(PDEVICE_OBJECT DeviceObject, const KSFILTER_DESCRIPTOR *Descriptor, PWSTR RefString, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG CreateItemFlags, PFNKSFILTERFACTORYPOWER SleepCallback, PFNKSFILTERFACTORYPOWER WakeCallback, PKSFILTERFACTORY *FilterFactory);
NTSTATUS __stdcall KsCreatePin(HANDLE FilterHandle, PKSPIN_CONNECT Connect, ACCESS_MASK DesiredAccess, PHANDLE ConnectionHandle);
NTSTATUS __stdcall KsCreateTopologyNode(HANDLE ParentHandle, PKSNODE_CREATE NodeCreate, ACCESS_MASK DesiredAccess, PHANDLE NodeHandle);
NTSTATUS __stdcall KsDefaultAddEventHandler(PIRP Irp, PKSEVENTDATA EventData, PKSEVENT_ENTRY EventEntry);
NTSTATUS __stdcall KsDefaultDeviceIoCompletion(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall KsDeviceRegisterThermalDispatch(PKSDEVICE KsDevice, PKSDEVICE_THERMAL_DISPATCH KsDeviceThermalDispatch);
NTSTATUS __stdcall KsDisableEvent(PIRP Irp, PLIST_ENTRY EventsList, KSEVENTS_LOCKTYPE EventsFlags, PVOID EventsLock);
NTSTATUS __stdcall KsDispatchInvalidDeviceRequest(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall KsDispatchIrp(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall KsDispatchQuerySecurity(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall KsDispatchSetSecurity(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall KsDispatchSpecificMethod(PIRP Irp, PFNKSHANDLER Handler);
NTSTATUS __stdcall KsDispatchSpecificProperty(PIRP Irp, PFNKSHANDLER Handler);
NTSTATUS __stdcall KsEdit(KSOBJECT_BAG ObjectBag, PVOID *PointerToPointerToItem, ULONG NewSize, ULONG OldSize, ULONG Tag);
NTSTATUS __stdcall KsEnableEvent(PIRP Irp, ULONG EventSetsCount, const KSEVENT_SET *EventSet, PLIST_ENTRY EventsList, KSEVENTS_LOCKTYPE EventsFlags, PVOID EventsLock);
NTSTATUS __stdcall KsEnableEventWithAllocator(PIRP Irp, ULONG EventSetsCount, const KSEVENT_SET *EventSet, PLIST_ENTRY EventsList, KSEVENTS_LOCKTYPE EventsFlags, PVOID EventsLock, PFNKSALLOCATOR Allocator, ULONG EventItemSize);
NTSTATUS __stdcall KsFilterAddTopologyConnections(PKSFILTER Filter, ULONG NewConnectionsCount, const KSTOPOLOGY_CONNECTION *const NewTopologyConnections);
NTSTATUS __stdcall KsFilterCreateNode(PKSFILTER Filter, const KSNODE_DESCRIPTOR *const NodeDescriptor, PULONG NodeID);
NTSTATUS __stdcall KsFilterCreatePinFactory(PKSFILTER Filter, const KSPIN_DESCRIPTOR_EX *const PinDescriptor, PULONG PinID);
NTSTATUS __stdcall KsFilterFactoryAddCreateItem(PKSFILTERFACTORY FilterFactory, PWSTR RefString, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG CreateItemFlags);
NTSTATUS __stdcall KsFilterFactorySetDeviceClassesState(PKSFILTERFACTORY FilterFactory, BOOLEAN NewState);
NTSTATUS __stdcall KsFilterFactoryUpdateCacheData(PKSFILTERFACTORY FilterFactory, const KSFILTER_DESCRIPTOR *FilterDescriptor);
NTSTATUS __stdcall KsForwardAndCatchIrp(PDEVICE_OBJECT DeviceObject, PIRP Irp, PFILE_OBJECT FileObject, KSSTACK_USE StackUse);
NTSTATUS __stdcall KsForwardIrp(PIRP Irp, PFILE_OBJECT FileObject, BOOLEAN ReuseStackLocation);
NTSTATUS __stdcall KsFreeObjectCreateItem(KSDEVICE_HEADER Header, PUNICODE_STRING CreateItem);
NTSTATUS __stdcall KsFreeObjectCreateItemsByContext(KSDEVICE_HEADER Header, PVOID Context);
NTSTATUS __stdcall KsGenerateDataEvent(PKSEVENT_ENTRY EventEntry, ULONG DataSize, PVOID Data);
NTSTATUS __stdcall KsGenerateEvent(PKSEVENT_ENTRY EventEntry);
NTSTATUS __stdcall KsGenerateThermalEvent(PVOID Object, KSDEVICE_THERMAL_STATE Value);
NTSTATUS __stdcall KsGetBusEnumIdentifier(PIRP Irp);
NTSTATUS __stdcall KsGetBusEnumParentFDOFromChildPDO(PDEVICE_OBJECT DeviceObject, PDEVICE_OBJECT *FunctionalDeviceObject);
NTSTATUS __stdcall KsGetBusEnumPnpDeviceObject(PDEVICE_OBJECT DeviceObject, PDEVICE_OBJECT *PnpDeviceObject);
NTSTATUS __stdcall KsGetImageNameAndResourceId(HANDLE RegKey, PUNICODE_STRING ImageName, PULONG_PTR ResourceId, PULONG ValueType);
NTSTATUS __stdcall KsHandleSizedListQuery(PIRP Irp, ULONG DataItemsCount, ULONG DataItemSize, const void *DataItems);
NTSTATUS __stdcall KsInitializeDevice(PDEVICE_OBJECT FunctionalDeviceObject, PDEVICE_OBJECT PhysicalDeviceObject, PDEVICE_OBJECT NextDeviceObject, const KSDEVICE_DESCRIPTOR *Descriptor);
NTSTATUS __stdcall KsInitializeDeviceProfile(PKSFILTERFACTORY FilterFactory);
NTSTATUS __stdcall KsInitializeDriver(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPathName, const KSDEVICE_DESCRIPTOR *Descriptor);
NTSTATUS __stdcall KsInstallBusEnumInterface(PIRP Irp);
NTSTATUS __stdcall KsIsBusEnumChildDevice(PDEVICE_OBJECT DeviceObject, PBOOLEAN ChildDevice);
NTSTATUS __stdcall KsLoadResource(PVOID ImageBase, POOL_TYPE PoolType, ULONG_PTR ResourceName, ULONG ResourceType, PVOID *Resource, PULONG ResourceSize);
NTSTATUS __stdcall KsMapModuleName(PDEVICE_OBJECT PhysicalDeviceObject, PUNICODE_STRING ModuleName, PUNICODE_STRING ImageName, PULONG_PTR ResourceId, PULONG ValueType);
NTSTATUS __stdcall KsMergeAutomationTables(PKSAUTOMATION_TABLE *AutomationTableAB, PKSAUTOMATION_TABLE AutomationTableA, PKSAUTOMATION_TABLE AutomationTableB, KSOBJECT_BAG Bag);
NTSTATUS __stdcall KsMethodHandler(PIRP Irp, ULONG MethodSetsCount, const KSMETHOD_SET *MethodSet);
NTSTATUS __stdcall KsMethodHandlerWithAllocator(PIRP Irp, ULONG MethodSetsCount, const KSMETHOD_SET *MethodSet, PFNKSALLOCATOR Allocator, ULONG MethodItemSize);
NTSTATUS __stdcall KsMoveIrpsOnCancelableQueue(PLIST_ENTRY SourceList, PKSPIN_LOCK SourceLock, PLIST_ENTRY DestinationList, PKSPIN_LOCK DestinationLock, KSLIST_ENTRY_LOCATION ListLocation, PFNKSIRPLISTCALLBACK ListCallback, PVOID Context);
NTSTATUS __stdcall KsPersistDeviceProfile(PKSFILTERFACTORY FilterFactory);
NTSTATUS __stdcall KsPinDataIntersection(PIRP Irp, PKSP_PIN Pin, PVOID Data, ULONG DescriptorsCount, const KSPIN_DESCRIPTOR *Descriptor, PFNKSINTERSECTHANDLER IntersectHandler);
NTSTATUS __stdcall KsPinDataIntersectionEx(PIRP Irp, PKSP_PIN Pin, PVOID Data, ULONG DescriptorsCount, const KSPIN_DESCRIPTOR *Descriptor, ULONG DescriptorSize, PFNKSINTERSECTHANDLEREX IntersectHandler, PVOID HandlerContext);
NTSTATUS __stdcall KsPinGetAvailableByteCount(PKSPIN Pin, PLONG InputDataBytes, PLONG OutputBufferBytes);
NTSTATUS __stdcall KsPinGetConnectedFilterInterface(PKSPIN Pin, const GUID *InterfaceId, PVOID *Interface);
NTSTATUS __stdcall KsPinGetConnectedPinInterface(PKSPIN Pin, const GUID *InterfaceId, PVOID *Interface);
NTSTATUS __stdcall KsPinGetReferenceClockInterface(PKSPIN Pin, PIKSREFERENCECLOCK *Interface);
NTSTATUS __stdcall KsPinHandshake(PKSPIN Pin, PKSHANDSHAKE In, PKSHANDSHAKE Out);
NTSTATUS __stdcall KsPinPropertyHandler(PIRP Irp, PKSPROPERTY Property, PVOID Data, ULONG DescriptorsCount, const KSPIN_DESCRIPTOR *Descriptor);
NTSTATUS __stdcall KsPinSubmitFrame(PKSPIN Pin, PVOID Data, ULONG Size, PKSSTREAM_HEADER StreamHeader, PVOID Context);
NTSTATUS __stdcall KsPinSubmitFrameMdl(PKSPIN Pin, PMDL Mdl, PKSSTREAM_HEADER StreamHeader, PVOID Context);
NTSTATUS __stdcall KsProbeStreamIrp(PIRP Irp, ULONG ProbeFlags, ULONG HeaderSize);
NTSTATUS __stdcall KsPropertyHandler(PIRP Irp, ULONG PropertySetsCount, const KSPROPERTY_SET *PropertySet);
NTSTATUS __stdcall KsPropertyHandlerWithAllocator(PIRP Irp, ULONG PropertySetsCount, const KSPROPERTY_SET *PropertySet, PFNKSALLOCATOR Allocator, ULONG PropertyItemSize);
NTSTATUS __stdcall KsPublishDeviceProfile(PKSFILTERFACTORY FilterFactory, PKSDEVICE_PROFILE_INFO Profile);
NTSTATUS __stdcall KsQueryInformationFile(PFILE_OBJECT FileObject, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
NTSTATUS __stdcall KsQuerySoftwareBusInterface(PDEVICE_OBJECT PnpDeviceObject, PBUS_INTERFACE_SWENUM BusInterface);
NTSTATUS __stdcall KsQueueWorkItem(PKSWORKER Worker, PWORK_QUEUE_ITEM WorkItem);
NTSTATUS __stdcall KsReadFile(PFILE_OBJECT FileObject, PKEVENT Event, PVOID PortContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG Key, KPROCESSOR_MODE RequestorMode);
NTSTATUS __stdcall KsReferenceBusObject(KSDEVICE_HEADER Header);
NTSTATUS __stdcall KsReferenceSoftwareBusObject(KSDEVICE_HEADER Header);
NTSTATUS __stdcall KsRegisterCountedWorker(WORK_QUEUE_TYPE WorkQueueType, PWORK_QUEUE_ITEM CountedWorkItem, PKSWORKER *Worker);
NTSTATUS __stdcall KsRegisterFilterWithNoKSPins(PDEVICE_OBJECT DeviceObject, const GUID *InterfaceClassGUID, ULONG PinCount, BOOL *PinDirection, KSPIN_MEDIUM *MediumList, GUID *CategoryList);
NTSTATUS __stdcall KsRegisterWorker(WORK_QUEUE_TYPE WorkQueueType, PKSWORKER *Worker);
NTSTATUS __stdcall KsReleaseCachedMdl(const GUID *const Guid, PMDL MdlAddr, HANDLE ReleaseContext);
NTSTATUS __stdcall KsRemoveBusEnumInterface(PIRP Irp);
NTSTATUS __stdcall KsServiceBusEnumCreateRequest(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall KsServiceBusEnumPnpRequest(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall KsSetInformationFile(PFILE_OBJECT FileObject, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
NTSTATUS __stdcall KsSetMajorFunctionHandler(PDRIVER_OBJECT DriverObject, ULONG MajorFunction);
NTSTATUS __stdcall KsStreamIo(PFILE_OBJECT FileObject, PKEVENT Event, PVOID PortContext, PIO_COMPLETION_ROUTINE CompletionRoutine, PVOID CompletionContext, KSCOMPLETION_INVOCATION CompletionInvocationFlags, PIO_STATUS_BLOCK IoStatusBlock, PVOID StreamHeaders, ULONG Length, ULONG Flags, KPROCESSOR_MODE RequestorMode);
NTSTATUS __stdcall KsStreamPointerAdvance(PKSSTREAM_POINTER StreamPointer);
NTSTATUS __stdcall KsStreamPointerAdvanceOffsets(PKSSTREAM_POINTER StreamPointer, ULONG InUsed, ULONG OutUsed, BOOLEAN Eject);
NTSTATUS __stdcall KsStreamPointerClone(PKSSTREAM_POINTER StreamPointer, PFNKSSTREAMPOINTER CancelCallback, ULONG ContextSize, PKSSTREAM_POINTER *CloneStreamPointer);
NTSTATUS __stdcall KsStreamPointerLock(PKSSTREAM_POINTER StreamPointer);
NTSTATUS __stdcall KsStreamPointerSetStatusCode(PKSSTREAM_POINTER StreamPointer, NTSTATUS Status);
NTSTATUS __stdcall KsSynchronousIoControlDevice(PFILE_OBJECT FileObject, KPROCESSOR_MODE RequestorMode, ULONG IoControl, PVOID InBuffer, ULONG InSize, PVOID OutBuffer, ULONG OutSize, PULONG BytesReturned);
NTSTATUS __stdcall KsTopologyPropertyHandler(PIRP Irp, PKSPROPERTY Property, PVOID Data, const KSTOPOLOGY *Topology);
NTSTATUS __stdcall KsUnserializeObjectPropertiesFromRegistry(PFILE_OBJECT FileObject, HANDLE ParentKey, PUNICODE_STRING RegistryPath);
NTSTATUS __stdcall KsValidateAllocatorCreateRequest(PIRP Irp, PKSALLOCATOR_FRAMING *AllocatorFraming);
NTSTATUS __stdcall KsValidateAllocatorFramingEx(PKSALLOCATOR_FRAMING_EX Framing, ULONG BufferSize, const KSALLOCATOR_FRAMING_EX *PinFraming);
NTSTATUS __stdcall KsValidateClockCreateRequest(PIRP Irp, PKSCLOCK_CREATE *ClockCreate);
NTSTATUS __stdcall KsValidateConnectRequest(PIRP Irp, ULONG DescriptorsCount, const KSPIN_DESCRIPTOR *Descriptor, PKSPIN_CONNECT *Connect);
NTSTATUS __stdcall KsValidateTopologyNodeCreateRequest(PIRP Irp, PKSTOPOLOGY Topology, PKSNODE_CREATE *NodeCreate);
NTSTATUS __stdcall KsWriteFile(PFILE_OBJECT FileObject, PKEVENT Event, PVOID PortContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG Key, KPROCESSOR_MODE RequestorMode);
NTSTATUS __stdcall KsiDefaultClockAddMarkEvent(PIRP Irp, PKSEVENT_TIME_INTERVAL EventTime, PKSEVENT_ENTRY EventEntry);
NTSTATUS __stdcall KsiPropertyDefaultClockGetCorrelatedPhysicalTime(PIRP Irp, PKSPROPERTY Property, PKSCORRELATED_TIME Time);
NTSTATUS __stdcall KsiPropertyDefaultClockGetCorrelatedTime(PIRP Irp, PKSPROPERTY Property, PKSCORRELATED_TIME Time);
NTSTATUS __stdcall KsiPropertyDefaultClockGetFunctionTable(PIRP Irp, PKSPROPERTY Property, PKSCLOCK_FUNCTIONTABLE FunctionTable);
NTSTATUS __stdcall KsiPropertyDefaultClockGetPhysicalTime(PIRP Irp, PKSPROPERTY Property, PLONGLONG Time);
NTSTATUS __stdcall KsiPropertyDefaultClockGetResolution(PIRP Irp, PKSPROPERTY Property, PKSRESOLUTION Resolution);
NTSTATUS __stdcall KsiPropertyDefaultClockGetState(PIRP Irp, PKSPROPERTY Property, PKSSTATE State);
NTSTATUS __stdcall KsiPropertyDefaultClockGetTime(PIRP Irp, PKSPROPERTY Property, PLONGLONG Time);
NTSTATUS __stdcall LkmdTelInsertTriageDataBlock(HANDLE TelemetryHandle, PVOID TriageData, ULONG TriageDataSize);
NTSTATUS __stdcall LkmdTelSetSecondaryData(HANDLE TelemetryHandle, LPCGUID SecondaryDataGuid, ULONG SecondaryDataSize, PVOID SecondaryDataBuffer);
NTSTATUS __stdcall LkmdTelSubmitReport(HANDLE TelemetryHandle);
NTSTATUS __stdcall LsaFreeReturnBuffer(PVOID Buffer);
NTSTATUS __stdcall LsaLogonUser(HANDLE LsaHandle, PLSA_STRING OriginName, SECURITY_LOGON_TYPE LogonType, ULONG AuthenticationPackage, PVOID AuthenticationInformation, ULONG AuthenticationInformationLength, PTOKEN_GROUPS LocalGroups, PTOKEN_SOURCE SourceContext, PVOID *ProfileBuffer, PULONG ProfileBufferLength, PLUID LogonId, PHANDLE Token, PQUOTA_LIMITS Quotas, PNTSTATUS SubStatus);
NTSTATUS __stdcall LsaRegisterLogonProcess(PLSA_STRING LogonProcessName, PHANDLE LsaHandle, PLSA_OPERATIONAL_MODE SecurityMode);
NTSTATUS __stdcall MapSecurityError(SECURITY_STATUS SecStatus);
NTSTATUS __stdcall MbbAdapterInitialize(NETADAPTER Adapter);
NTSTATUS __stdcall MbbDeviceInitConfig(PWDFDEVICE_INIT DeviceInit);
NTSTATUS __stdcall MbbDeviceInitialize(WDFDEVICE Device, PMBB_DEVICE_CONFIG Config);
NTSTATUS __stdcall MmAddPhysicalMemory(PPHYSICAL_ADDRESS StartAddress, PLARGE_INTEGER NumberOfBytes);
NTSTATUS __stdcall MmAddVerifierSpecialThunks(ULONG_PTR EntryRoutine, PVOID ThunkBuffer, ULONG ThunkBufferSize);
NTSTATUS __stdcall MmAddVerifierThunks(PVOID ThunkBuffer, ULONG ThunkBufferSize);
NTSTATUS __stdcall MmAdvanceMdl(PMDL Mdl, ULONG NumberOfBytes);
NTSTATUS __stdcall MmAllocateMdlForIoSpace(PMM_PHYSICAL_ADDRESS_LIST PhysicalAddressList, SIZE_T NumberOfEntries, PMDL *NewMdl);
NTSTATUS __stdcall MmCopyMemory(PVOID TargetAddress, MM_COPY_ADDRESS SourceAddress, SIZE_T NumberOfBytes, ULONG Flags, PSIZE_T NumberOfBytesTransferred);
NTSTATUS __stdcall MmGetCacheAttribute(PHYSICAL_ADDRESS PhysicalAddress, MEMORY_CACHING_TYPE *CacheType);
NTSTATUS __stdcall MmIsVerifierEnabled(PULONG VerifierFlags);
NTSTATUS __stdcall MmMapMdl(PMDL MemoryDescriptorList, ULONG Protection, PMM_MDL_ROUTINE DriverRoutine, PVOID DriverContext);
NTSTATUS __stdcall MmMapUserAddressesToPage(PVOID BaseAddress, SIZE_T NumberOfBytes, PVOID PageAddress);
NTSTATUS __stdcall MmMapViewInSessionSpace(PVOID Section, PVOID *MappedBase, PSIZE_T ViewSize);
NTSTATUS __stdcall MmMapViewInSessionSpaceEx(PVOID Section, PVOID *MappedBase, PSIZE_T ViewSize, PLARGE_INTEGER SectionOffset, ULONG_PTR Flags);
NTSTATUS __stdcall MmMapViewInSystemSpace(PVOID Section, PVOID *MappedBase, PSIZE_T ViewSize);
NTSTATUS __stdcall MmMapViewInSystemSpaceEx(PVOID Section, PVOID *MappedBase, PSIZE_T ViewSize, PLARGE_INTEGER SectionOffset, ULONG_PTR Flags);
NTSTATUS __stdcall MmPrefetchPages(ULONG NumberOfLists, PREAD_LIST *ReadLists);
NTSTATUS __stdcall MmProtectMdlSystemAddress(PMDL MemoryDescriptorList, ULONG NewProtect);
NTSTATUS __stdcall MmRemovePhysicalMemory(PPHYSICAL_ADDRESS StartAddress, PLARGE_INTEGER NumberOfBytes);
NTSTATUS __stdcall MmRotatePhysicalView(PVOID VirtualAddress, PSIZE_T NumberOfBytes, PMDL NewMdl, MM_ROTATE_DIRECTION Direction, PMM_ROTATE_COPY_CALLBACK_FUNCTION CopyFunction, PVOID Context);
NTSTATUS __stdcall MmSetGraphicsPtes(PVOID BaseAddress, SIZE_T NumberOfBytes, PPHYSICAL_ADDRESS PageArray, SIZE_T NumberOfBytesPerPage, ULONG PageProtection, ULONG Flags);
NTSTATUS __stdcall MmSetPermanentCacheAttribute(PHYSICAL_ADDRESS StartAddress, LARGE_INTEGER NumberOfBytes, MEMORY_CACHING_TYPE CacheType, ULONG Flags);
NTSTATUS __stdcall MmUnmapViewInSessionSpace(PVOID MappedBase);
NTSTATUS __stdcall MmUnmapViewInSystemSpace(PVOID MappedBase);
NTSTATUS __stdcall NdisProcessorIndexToNumber(ULONG ProcIndex, PPROCESSOR_NUMBER ProcNum);
NTSTATUS __stdcall NetAdapterCreate(PNETADAPTER_INIT AdapterInit, PWDF_OBJECT_ATTRIBUTES AdapterAttributes, NETADAPTER *Adapter);
NTSTATUS __stdcall NetAdapterDeviceInitConfig(PWDFDEVICE_INIT DeviceInit);
NTSTATUS __stdcall NetAdapterOpenConfiguration(NETADAPTER Adapter, PWDF_OBJECT_ATTRIBUTES ConfigurationAttributes, NETCONFIGURATION *Configuration);
NTSTATUS __stdcall NetAdapterStart(NETADAPTER Adapter);
NTSTATUS __stdcall NetConfigurationAssignBinary(NETCONFIGURATION Configuration, PCUNICODE_STRING ValueName, PVOID Buffer, ULONG BufferLength);
NTSTATUS __stdcall NetConfigurationAssignMultiString(NETCONFIGURATION Configuration, PCUNICODE_STRING ValueName, WDFCOLLECTION Collection);
NTSTATUS __stdcall NetConfigurationAssignUlong(NETCONFIGURATION Configuration, PCUNICODE_STRING ValueName, ULONG Value);
NTSTATUS __stdcall NetConfigurationAssignUnicodeString(NETCONFIGURATION Configuration, PCUNICODE_STRING ValueName, PCUNICODE_STRING Value);
NTSTATUS __stdcall NetConfigurationOpenSubConfiguration(NETCONFIGURATION Configuration, PCUNICODE_STRING SubConfigurationName, PWDF_OBJECT_ATTRIBUTES SubConfigurationAttributes, NETCONFIGURATION *SubConfiguration);
NTSTATUS __stdcall NetConfigurationQueryBinary(NETCONFIGURATION Configuration, PCUNICODE_STRING ValueName, POOL_TYPE PoolType, PWDF_OBJECT_ATTRIBUTES MemoryAttributes, WDFMEMORY *Memory);
NTSTATUS __stdcall NetConfigurationQueryLinkLayerAddress(NETCONFIGURATION Configuration, PNET_ADAPTER_LINK_LAYER_ADDRESS LinkLayerAddress);
NTSTATUS __stdcall NetConfigurationQueryMultiString(NETCONFIGURATION Configuration, PCUNICODE_STRING ValueName, PWDF_OBJECT_ATTRIBUTES StringsAttributes, WDFCOLLECTION Collection);
NTSTATUS __stdcall NetConfigurationQueryString(NETCONFIGURATION Configuration, PCUNICODE_STRING ValueName, PWDF_OBJECT_ATTRIBUTES StringAttributes, WDFSTRING *WdfString);
NTSTATUS __stdcall NetConfigurationQueryUlong(NETCONFIGURATION Configuration, NET_CONFIGURATION_QUERY_ULONG_FLAGS Flags, PCUNICODE_STRING ValueName, PULONG Value);
NTSTATUS __stdcall NetDeviceOpenConfiguration(WDFDEVICE Device, PWDF_OBJECT_ATTRIBUTES ConfigurationAttributes, NETCONFIGURATION *Configuration);
NTSTATUS __stdcall NetDmaRegisterProvider(PVOID ProviderContext, PVOID *pNetDmaProviderHandle, PNET_DMA_PROVIDER_CHARACTERISTICS ProviderCharacteristics);
NTSTATUS __stdcall NetRequestQueueCreate(PNET_REQUEST_QUEUE_CONFIG NetRequestQueueConfig, PWDF_OBJECT_ATTRIBUTES QueueAttributes, NETREQUESTQUEUE *Queue);
NTSTATUS __stdcall NetRequestRetrieveInputOutputBuffer(NETREQUEST Request, UINT MininumInputLengthRequired, UINT MininumOutputLengthRequired, PVOID *InputOutputBuffer, PUINT InputBufferLength, PUINT OutputBufferLength);
NTSTATUS __stdcall NetRxQueueCreate(PNETRXQUEUE_INIT NetRxQueueInit, PWDF_OBJECT_ATTRIBUTES RxQueueAttributes, PNET_PACKET_QUEUE_CONFIG Configuration, NETPACKETQUEUE *RxQueue);
NTSTATUS __stdcall NetRxQueueInitAddPacketContextAttributes(PNETRXQUEUE_INIT NetRxQueueInit, PNET_PACKET_CONTEXT_ATTRIBUTES PacketContextAttributes);
NTSTATUS __stdcall NetTxQueueCreate(PNETTXQUEUE_INIT NetTxQueueInit, PWDF_OBJECT_ATTRIBUTES TxQueueAttributes, PNET_PACKET_QUEUE_CONFIG Configuration, NETPACKETQUEUE *TxQueue);
NTSTATUS __stdcall NetTxQueueInitAddPacketContextAttributes(PNETTXQUEUE_INIT NetTxQueueInit, PNET_PACKET_CONTEXT_ATTRIBUTES PacketContextAttributes);
NTSTATUS __stdcall NmrClientAttachProvider(HANDLE NmrBindingHandle, PVOID ClientBindingContext, const void *ClientDispatch, PVOID *ProviderBindingContext, const void **ProviderDispatch);
NTSTATUS __stdcall NmrDeregisterClient(HANDLE NmrClientHandle);
NTSTATUS __stdcall NmrDeregisterProvider(HANDLE NmrProviderHandle);
NTSTATUS __stdcall NmrRegisterClient(PNPI_CLIENT_CHARACTERISTICS ClientCharacteristics, PVOID ClientContext, PHANDLE NmrClientHandle);
NTSTATUS __stdcall NmrRegisterProvider(PNPI_PROVIDER_CHARACTERISTICS ProviderCharacteristics, PVOID ProviderContext, PHANDLE NmrProviderHandle);
NTSTATUS __stdcall NmrWaitForClientDeregisterComplete(HANDLE NmrClientHandle);
NTSTATUS __stdcall NmrWaitForProviderDeregisterComplete(HANDLE NmrProviderHandle);
NTSTATUS __stdcall NotifyIpInterfaceChange(ADDRESS_FAMILY Family, PIPINTERFACE_CHANGE_CALLBACK Callback, PVOID CallerContext, BOOLEAN InitialNotification, HANDLE *NotificationHandle);
NTSTATUS __stdcall NotifyRouteChange2(ADDRESS_FAMILY AddressFamily, PIPFORWARD_CHANGE_CALLBACK Callback, PVOID CallerContext, BOOLEAN InitialNotification, HANDLE *NotificationHandle);
NTSTATUS __stdcall NotifyStableUnicastIpAddressTable(ADDRESS_FAMILY Family, PMIB_UNICASTIPADDRESS_TABLE *Table, PSTABLE_UNICAST_IPADDRESS_TABLE_CALLBACK CallerCallback, PVOID CallerContext, HANDLE *NotificationHandle);
NTSTATUS __stdcall NotifyTeredoPortChange(PTEREDO_PORT_CHANGE_CALLBACK Callback, PVOID CallerContext, BOOLEAN InitialNotification, HANDLE *NotificationHandle);
NTSTATUS __stdcall NotifyUnicastIpAddressChange(ADDRESS_FAMILY Family, PUNICAST_IPADDRESS_CHANGE_CALLBACK Callback, PVOID CallerContext, BOOLEAN InitialNotification, HANDLE *NotificationHandle);
NTSTATUS __stdcall NpdBrokerAcquireWithTimeout(HANDLE hBroker, LONG lTimeoutMS);
NTSTATUS __stdcall NpdBrokerInitialize(ULONG ulClientID, PHANDLE phBroker);
NTSTATUS __stdcall NpdBrokerUninitialize(HANDLE hBroker);
NTSTATUS __stdcall NtAccessCheckAndAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
NTSTATUS __stdcall NtAccessCheckByTypeAndAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
NTSTATUS __stdcall NtAccessCheckByTypeResultListAndAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
NTSTATUS __stdcall NtAccessCheckByTypeResultListAndAuditAlarmByHandle(PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
NTSTATUS __stdcall NtAdjustGroupsToken(HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);
NTSTATUS __stdcall NtAdjustPrivilegesToken(HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);
NTSTATUS __stdcall NtAllocateVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);
NTSTATUS __stdcall NtClose(HANDLE Handle);
NTSTATUS __stdcall NtCloseObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);
NTSTATUS __stdcall NtCommitComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall NtCommitEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall NtCommitTransaction(HANDLE TransactionHandle, BOOLEAN Wait);
NTSTATUS __stdcall NtCreateEnlistment(PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);
NTSTATUS __stdcall NtCreateFile(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);
NTSTATUS __stdcall NtCreateResourceManager(PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID RmGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);
NTSTATUS __stdcall NtCreateSection(PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);
NTSTATUS __stdcall NtCreateSectionEx(PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle, PMEM_EXTENDED_PARAMETER ExtendedParameters, ULONG ExtendedParameterCount);
NTSTATUS __stdcall NtCreateTransaction(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description);
NTSTATUS __stdcall NtCreateTransactionManager(PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength);
NTSTATUS __stdcall NtDeleteObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);
NTSTATUS __stdcall NtDeviceIoControlFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
NTSTATUS __stdcall NtDuplicateToken(HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);
NTSTATUS __stdcall NtEnumerateTransactionObject(HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength);
NTSTATUS __stdcall NtFilterToken(HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);
NTSTATUS __stdcall NtFlushBuffersFileEx(HANDLE FileHandle, ULONG Flags, PVOID Parameters, ULONG ParametersSize, PIO_STATUS_BLOCK IoStatusBlock);
NTSTATUS __stdcall NtFreeVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);
NTSTATUS __stdcall NtFsControlFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG FsControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
NTSTATUS __stdcall NtGetNotificationResourceManager(HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG_PTR AsynchronousContext);
NTSTATUS __stdcall NtImpersonateAnonymousToken(HANDLE ThreadHandle);
NTSTATUS __stdcall NtLockFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);
NTSTATUS __stdcall NtOpenEnlistment(PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS __stdcall NtOpenFile(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);
NTSTATUS __stdcall NtOpenJobObjectToken(HANDLE JobHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);
NTSTATUS __stdcall NtOpenObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);
NTSTATUS __stdcall NtOpenProcess(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);
NTSTATUS __stdcall NtOpenProcessToken(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);
NTSTATUS __stdcall NtOpenProcessTokenEx(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);
NTSTATUS __stdcall NtOpenRegistryTransaction(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS __stdcall NtOpenResourceManager(PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS __stdcall NtOpenThreadToken(HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);
NTSTATUS __stdcall NtOpenThreadTokenEx(HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);
NTSTATUS __stdcall NtOpenTransaction(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);
NTSTATUS __stdcall NtOpenTransactionManager(PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);
NTSTATUS __stdcall NtPowerInformation(POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
NTSTATUS __stdcall NtPrePrepareComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall NtPrePrepareEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall NtPrepareComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall NtPrepareEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall NtPrivilegeCheck(HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);
NTSTATUS __stdcall NtPrivilegeObjectAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);
NTSTATUS __stdcall NtPrivilegedServiceAuditAlarm(PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);
NTSTATUS __stdcall NtPropagationComplete(HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);
NTSTATUS __stdcall NtPropagationFailed(HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus);
NTSTATUS __stdcall NtQueryDirectoryFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);
NTSTATUS __stdcall NtQueryDirectoryFileEx(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, ULONG QueryFlags, PUNICODE_STRING FileName);
NTSTATUS __stdcall NtQueryInformationEnlistment(HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);
NTSTATUS __stdcall NtQueryInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
NTSTATUS __stdcall NtQueryInformationResourceManager(HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);
NTSTATUS __stdcall NtQueryInformationToken(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);
NTSTATUS __stdcall NtQueryInformationTransaction(HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);
NTSTATUS __stdcall NtQueryInformationTransactionManager(HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);
NTSTATUS __stdcall NtQueryObject(HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);
NTSTATUS __stdcall NtQueryQuotaInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PSID StartSid, BOOLEAN RestartScan);
NTSTATUS __stdcall NtQuerySecurityObject(HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);
NTSTATUS __stdcall NtQueryVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);
NTSTATUS __stdcall NtQueryVolumeInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);
NTSTATUS __stdcall NtReadFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
NTSTATUS __stdcall NtReadOnlyEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall NtRecoverEnlistment(HANDLE EnlistmentHandle, PVOID EnlistmentKey);
NTSTATUS __stdcall NtRecoverResourceManager(HANDLE ResourceManagerHandle);
NTSTATUS __stdcall NtRecoverTransactionManager(HANDLE TransactionManagerHandle);
NTSTATUS __stdcall NtRegisterProtocolAddressInformation(HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);
NTSTATUS __stdcall NtRenameTransactionManager(PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);
NTSTATUS __stdcall NtRollbackComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall NtRollbackEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall NtRollbackRegistryTransaction(HANDLE TransactionHandle, ULONG Flags);
NTSTATUS __stdcall NtRollbackTransaction(HANDLE TransactionHandle, BOOLEAN Wait);
NTSTATUS __stdcall NtRollforwardTransactionManager(HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall NtSetInformationEnlistment(HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);
NTSTATUS __stdcall NtSetInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
NTSTATUS __stdcall NtSetInformationResourceManager(HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);
NTSTATUS __stdcall NtSetInformationThread(HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);
NTSTATUS __stdcall NtSetInformationToken(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);
NTSTATUS __stdcall NtSetInformationTransaction(HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);
NTSTATUS __stdcall NtSetInformationTransactionManager(HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength);
NTSTATUS __stdcall NtSetInformationVirtualMemory(HANDLE ProcessHandle, VIRTUAL_MEMORY_INFORMATION_CLASS VmInformationClass, ULONG_PTR NumberOfEntries, PMEMORY_RANGE_ENTRY VirtualAddresses, PVOID VmInformation, ULONG VmInformationLength);
NTSTATUS __stdcall NtSetQuotaInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);
NTSTATUS __stdcall NtSetSecurityObject(HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);
NTSTATUS __stdcall NtSetVolumeInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);
NTSTATUS __stdcall NtSinglePhaseReject(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall NtUnlockFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);
NTSTATUS __stdcall NtWriteFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
NTSTATUS __stdcall ObCloseHandle(HANDLE Handle, KPROCESSOR_MODE PreviousMode);
NTSTATUS __stdcall ObGetObjectSecurity(PVOID Object, PSECURITY_DESCRIPTOR *SecurityDescriptor, PBOOLEAN MemoryAllocated);
NTSTATUS __stdcall ObInsertObject(PVOID Object, PACCESS_STATE PassedAccessState, ACCESS_MASK DesiredAccess, ULONG ObjectPointerBias, PVOID *NewObject, PHANDLE Handle);
NTSTATUS __stdcall ObOpenObjectByPointer(PVOID Object, ULONG HandleAttributes, PACCESS_STATE PassedAccessState, ACCESS_MASK DesiredAccess, POBJECT_TYPE ObjectType, KPROCESSOR_MODE AccessMode, PHANDLE Handle);
NTSTATUS __stdcall ObOpenObjectByPointerWithTag(PVOID Object, ULONG HandleAttributes, PACCESS_STATE PassedAccessState, ACCESS_MASK DesiredAccess, POBJECT_TYPE ObjectType, KPROCESSOR_MODE AccessMode, ULONG Tag, PHANDLE Handle);
NTSTATUS __stdcall ObQueryNameString(PVOID Object, POBJECT_NAME_INFORMATION ObjectNameInfo, ULONG Length, PULONG ReturnLength);
NTSTATUS __stdcall ObQueryObjectAuditingByHandle(HANDLE Handle, PBOOLEAN GenerateOnClose);
NTSTATUS __stdcall ObReferenceObjectByHandle(HANDLE Handle, ACCESS_MASK DesiredAccess, POBJECT_TYPE ObjectType, KPROCESSOR_MODE AccessMode, PVOID *Object, POBJECT_HANDLE_INFORMATION HandleInformation);
NTSTATUS __stdcall ObReferenceObjectByHandleWithTag(HANDLE Handle, ACCESS_MASK DesiredAccess, POBJECT_TYPE ObjectType, KPROCESSOR_MODE AccessMode, ULONG Tag, PVOID *Object, POBJECT_HANDLE_INFORMATION HandleInformation);
NTSTATUS __stdcall ObReferenceObjectByPointer(PVOID Object, ACCESS_MASK DesiredAccess, POBJECT_TYPE ObjectType, KPROCESSOR_MODE AccessMode);
NTSTATUS __stdcall ObReferenceObjectByPointerWithTag(PVOID Object, ACCESS_MASK DesiredAccess, POBJECT_TYPE ObjectType, KPROCESSOR_MODE AccessMode, ULONG Tag);
NTSTATUS __stdcall ObRegisterCallbacks(POB_CALLBACK_REGISTRATION CallbackRegistration, PVOID *RegistrationHandle);
NTSTATUS __stdcall PcAddAdapterDevice(PDRIVER_OBJECT DriverObject, PDEVICE_OBJECT PhysicalDeviceObject, PCPFNSTARTDEVICE StartDevice, ULONG MaxObjects, ULONG DeviceExtensionSize);
NTSTATUS __stdcall PcAddContentHandlers(ULONG ContentId, PVOID *paHandlers, ULONG NumHandlers);
NTSTATUS __stdcall PcAddStreamResource(PDEVICE_OBJECT PhysicalDeviceObject, PVOID ResourceSet, PPCSTREAMRESOURCE_DESCRIPTOR ResourceDescriptor, PCSTREAMRESOURCE *ResourceHandle);
NTSTATUS __stdcall PcAssignPowerFrameworkSettings(PDEVICE_OBJECT DeviceObject, PPC_POWER_FRAMEWORK_SETTINGS PowerFrameworkSettings);
NTSTATUS __stdcall PcCompleteIrp(PDEVICE_OBJECT pDeviceObject, PIRP pIrp, NTSTATUS ntStatus);
NTSTATUS __stdcall PcCompletePendingPropertyRequest(PPCPROPERTY_REQUEST PropertyRequest, NTSTATUS NtStatus);
NTSTATUS __stdcall PcCreateContentMixed(PULONG paContentId, ULONG cContentId, PULONG pMixedContentId);
NTSTATUS __stdcall PcDestroyContent(ULONG ContentId);
NTSTATUS __stdcall PcDispatchIrp(PDEVICE_OBJECT pDeviceObject, PIRP pIrp);
NTSTATUS __stdcall PcForwardContentToDeviceObject(ULONG ContentId, PVOID Reserved, PCDRMFORWARD DrmForward);
NTSTATUS __stdcall PcForwardContentToFileObject(ULONG ContentId, PFILE_OBJECT FileObject);
NTSTATUS __stdcall PcForwardContentToInterface(ULONG ContentId, PUNKNOWN pUnknown, ULONG NumMethods);
NTSTATUS __stdcall PcForwardIrpSynchronous(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall PcGetContentRights(ULONG ContentId, PDRMRIGHTS DrmRights);
NTSTATUS __stdcall PcGetDeviceProperty(PVOID DeviceObject, DEVICE_REGISTRY_PROPERTY DeviceProperty, ULONG BufferLength, PVOID PropertyBuffer, PULONG ResultLength);
NTSTATUS __stdcall PcGetPhysicalDeviceObject(PDEVICE_OBJECT pDeviceObject, PDEVICE_OBJECT *ppPhysicalObject);
NTSTATUS __stdcall PcInitializeAdapterDriver(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPathName, PDRIVER_ADD_DEVICE AddDevice);
NTSTATUS __stdcall PcNewDmaChannel(PDMACHANNEL *OutDmaChannel, PUNKNOWN OuterUnknown, POOL_TYPE PoolType, PDEVICE_DESCRIPTION DeviceDescription, PDEVICE_OBJECT DeviceObject);
NTSTATUS __stdcall PcNewInterruptSync(PINTERRUPTSYNC *OutInterruptSync, PUNKNOWN OuterUnknown, PRESOURCELIST ResourceList, ULONG ResourceIndex, INTERRUPTSYNCMODE Mode);
NTSTATUS __stdcall PcNewMiniport(PMINIPORT *OutMiniPort, const IID *const ClassID);
NTSTATUS __stdcall PcNewPort(PPORT *OutPort, const IID *const ClassID);
NTSTATUS __stdcall PcNewRegistryKey(PREGISTRYKEY *OutRegistryKey, PUNKNOWN OuterUnknown, ULONG RegistryKeyType, ACCESS_MASK DesiredAccess, PVOID DeviceObject, PVOID SubDevice, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PULONG Disposition);
NTSTATUS __stdcall PcNewResourceList(PRESOURCELIST *OutResourceList, PUNKNOWN OuterUnknown, POOL_TYPE PoolType, PCM_RESOURCE_LIST TranslatedResources, PCM_RESOURCE_LIST UntranslatedResources);
NTSTATUS __stdcall PcNewResourceSublist(PRESOURCELIST *OutResourceList, PUNKNOWN OuterUnknown, POOL_TYPE PoolType, PRESOURCELIST ParentList, ULONG MaximumEntries);
NTSTATUS __stdcall PcNewServiceGroup(PSERVICEGROUP *OutServiceGroup, PUNKNOWN OuterUnknown);
NTSTATUS __stdcall PcRegisterAdapterPnpManagement(PUNKNOWN Unknown, PDEVICE_OBJECT DeviceObject);
NTSTATUS __stdcall PcRegisterAdapterPowerManagement(PUNKNOWN Unknown, PVOID pvContext1);
NTSTATUS __stdcall PcRegisterIoTimeout(PDEVICE_OBJECT pDeviceObject, PIO_TIMER_ROUTINE pTimerRoutine, PVOID pContext);
NTSTATUS __stdcall PcRegisterPhysicalConnection(PDEVICE_OBJECT DeviceObject, PUNKNOWN FromUnknown, ULONG FromPin, PUNKNOWN ToUnknown, ULONG ToPin);
NTSTATUS __stdcall PcRegisterPhysicalConnectionFromExternal(PDEVICE_OBJECT DeviceObject, PUNICODE_STRING FromString, ULONG FromPin, PUNKNOWN ToUnknown, ULONG ToPin);
NTSTATUS __stdcall PcRegisterPhysicalConnectionToExternal(PDEVICE_OBJECT DeviceObject, PUNKNOWN FromUnknown, ULONG FromPin, PUNICODE_STRING ToString, ULONG ToPin);
NTSTATUS __stdcall PcRegisterSubdevice(PDEVICE_OBJECT DeviceObject, PWSTR Name, PUNKNOWN Unknown);
NTSTATUS __stdcall PcRemoveStreamResource(PCSTREAMRESOURCE ResourceHandle);
NTSTATUS __stdcall PcRequestNewPowerState(PDEVICE_OBJECT pDeviceObject, DEVICE_POWER_STATE RequestedNewState);
NTSTATUS __stdcall PcUnregisterAdapterPnpManagement(PDEVICE_OBJECT DeviceObject);
NTSTATUS __stdcall PcUnregisterAdapterPowerManagement(PDEVICE_OBJECT pDeviceObject);
NTSTATUS __stdcall PcUnregisterIoTimeout(PDEVICE_OBJECT pDeviceObject, PIO_TIMER_ROUTINE pTimerRoutine, PVOID pContext);
NTSTATUS __stdcall PcwAddInstance(PPCW_BUFFER Buffer, PCUNICODE_STRING Name, ULONG Id, ULONG Count, PPCW_DATA Data);
NTSTATUS __stdcall PcwCreateInstance(PPCW_INSTANCE *Instance, PPCW_REGISTRATION Registration, PCUNICODE_STRING Name, ULONG Count, PPCW_DATA Data);
NTSTATUS __stdcall PcwRegister(PPCW_REGISTRATION *Registration, PPCW_REGISTRATION_INFORMATION Info);
NTSTATUS __stdcall PoCallDriver(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall PoClearPowerRequest(PVOID PowerRequest, POWER_REQUEST_TYPE Type);
NTSTATUS __stdcall PoCreatePowerRequest(PVOID *PowerRequest, PDEVICE_OBJECT DeviceObject, PCOUNTED_REASON_CONTEXT Context);
NTSTATUS __stdcall PoCreateThermalRequest(PVOID *ThermalRequest, PDEVICE_OBJECT TargetDeviceObject, PDEVICE_OBJECT PolicyDeviceObject, PCOUNTED_REASON_CONTEXT Context, ULONG Flags);
NTSTATUS __stdcall PoFxPowerControl(POHANDLE Handle, LPCGUID PowerControlCode, PVOID InBuffer, SIZE_T InBufferSize, PVOID OutBuffer, SIZE_T OutBufferSize, PSIZE_T BytesReturned);
NTSTATUS __stdcall PoFxPowerOnCrashdumpDevice(POHANDLE Handle, PVOID Context);
NTSTATUS __stdcall PoFxQueryCurrentComponentPerfState(POHANDLE Handle, ULONG Flags, ULONG Component, ULONG SetIndex, PULONGLONG CurrentPerf);
NTSTATUS __stdcall PoFxRegisterComponentPerfStates(POHANDLE Handle, ULONG Component, ULONGLONG Flags, PPO_FX_COMPONENT_PERF_STATE_CALLBACK ComponentPerfStateCallback, PPO_FX_COMPONENT_PERF_INFO InputStateInfo, PPO_FX_COMPONENT_PERF_INFO *OutputStateInfo);
NTSTATUS __stdcall PoFxRegisterCoreDevice(PCUNICODE_STRING Id, PPO_FX_CORE_DEVICE Device, POHANDLE *Handle);
NTSTATUS __stdcall PoFxRegisterCrashdumpDevice(POHANDLE Handle);
NTSTATUS __stdcall PoFxRegisterDevice(PDEVICE_OBJECT Pdo, PPO_FX_DEVICE Device, POHANDLE *Handle);
NTSTATUS __stdcall PoFxRegisterPlugin(PPEP_INFORMATION PepInformation, PPEP_KERNEL_INFORMATION KernelInformation);
NTSTATUS __stdcall PoFxRegisterPluginEx(PPEP_INFORMATION PepInformation, ULONGLONG Flags, PPEP_KERNEL_INFORMATION KernelInformation);
NTSTATUS __stdcall PoFxSetTargetDripsDevicePowerState(POHANDLE Handle, DEVICE_POWER_STATE TargetState);
NTSTATUS __stdcall PoQueueShutdownWorkItem(PWORK_QUEUE_ITEM WorkItem);
NTSTATUS __stdcall PoRegisterPowerSettingCallback(PDEVICE_OBJECT DeviceObject, LPCGUID SettingGuid, PPOWER_SETTING_CALLBACK Callback, PVOID Context, PVOID *Handle);
NTSTATUS __stdcall PoRequestPowerIrp(PDEVICE_OBJECT DeviceObject, UCHAR MinorFunction, POWER_STATE PowerState, PREQUEST_POWER_COMPLETE CompletionFunction, PVOID Context, PIRP *Irp);
NTSTATUS __stdcall PoRequestShutdownEvent(PVOID *Event);
NTSTATUS __stdcall PoRequestShutdownWait(PETHREAD Thread);
NTSTATUS __stdcall PoSetPowerRequest(PVOID PowerRequest, POWER_REQUEST_TYPE Type);
NTSTATUS __stdcall PoSetThermalActiveCooling(PVOID ThermalRequest, BOOLEAN Engaged);
NTSTATUS __stdcall PoSetThermalPassiveCooling(PVOID ThermalRequest, UCHAR Throttle);
NTSTATUS __stdcall PoUnregisterPowerSettingCallback(PVOID Handle);
NTSTATUS __stdcall PsAcquireSiloHardReference(PESILO Silo);
NTSTATUS __stdcall PsAllocSiloContextSlot(ULONG_PTR Reserved, ULONG *ReturnedContextSlot);
NTSTATUS __stdcall PsAssignImpersonationToken(PETHREAD Thread, HANDLE Token);
NTSTATUS __stdcall PsChargeProcessPoolQuota(PEPROCESS Process, POOL_TYPE PoolType, ULONG_PTR Amount);
NTSTATUS __stdcall PsCreateSiloContext(PESILO Silo, ULONG Size, POOL_TYPE PoolType, SILO_CONTEXT_CLEANUP_CALLBACK ContextCleanupCallback, PVOID *ReturnedSiloContext);
NTSTATUS __stdcall PsCreateSystemThread(PHANDLE ThreadHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PKSTART_ROUTINE StartRoutine, PVOID StartContext);
NTSTATUS __stdcall PsFreeSiloContextSlot(ULONG ContextSlot);
NTSTATUS __stdcall PsGetJobServerSilo(PEJOB Job, PESILO *ServerSilo);
NTSTATUS __stdcall PsGetJobSilo(PEJOB Job, PESILO *Silo);
NTSTATUS __stdcall PsGetPermanentSiloContext(PESILO Silo, ULONG ContextSlot, PVOID *ReturnedSiloContext);
NTSTATUS __stdcall PsGetProcessExitStatus(PEPROCESS Process);
NTSTATUS __stdcall PsGetSiloContext(PESILO Silo, ULONG ContextSlot, PVOID *ReturnedSiloContext);
NTSTATUS __stdcall PsGetThreadExitStatus(PETHREAD Thread);
NTSTATUS __stdcall PsImpersonateClient(PETHREAD Thread, PACCESS_TOKEN Token, BOOLEAN CopyOnOpen, BOOLEAN EffectiveOnly, SECURITY_IMPERSONATION_LEVEL ImpersonationLevel);
NTSTATUS __stdcall PsInsertPermanentSiloContext(PESILO Silo, ULONG ContextSlot, PVOID SiloContext);
NTSTATUS __stdcall PsInsertSiloContext(PESILO Silo, ULONG ContextSlot, PVOID SiloContext);
NTSTATUS __stdcall PsLookupProcessByProcessId(HANDLE ProcessId, PEPROCESS *Process);
NTSTATUS __stdcall PsLookupThreadByThreadId(HANDLE ThreadId, PETHREAD *Thread);
NTSTATUS __stdcall PsMakeSiloContextPermanent(PESILO Silo, ULONG ContextSlot);
NTSTATUS __stdcall PsRegisterSiloMonitor(PSILO_MONITOR_REGISTRATION Registration, PSILO_MONITOR *ReturnedMonitor);
NTSTATUS __stdcall PsRemoveCreateThreadNotifyRoutine(PCREATE_THREAD_NOTIFY_ROUTINE NotifyRoutine);
NTSTATUS __stdcall PsRemoveLoadImageNotifyRoutine(PLOAD_IMAGE_NOTIFY_ROUTINE NotifyRoutine);
NTSTATUS __stdcall PsRemoveSiloContext(PESILO Silo, ULONG ContextSlot, PVOID *RemovedSiloContext);
NTSTATUS __stdcall PsReplaceSiloContext(PESILO Silo, ULONG ContextSlot, PVOID NewSiloContext, PVOID *OldSiloContext);
NTSTATUS __stdcall PsSetCreateProcessNotifyRoutine(PCREATE_PROCESS_NOTIFY_ROUTINE NotifyRoutine, BOOLEAN Remove);
NTSTATUS __stdcall PsSetCreateProcessNotifyRoutineEx(PCREATE_PROCESS_NOTIFY_ROUTINE_EX NotifyRoutine, BOOLEAN Remove);
NTSTATUS __stdcall PsSetCreateProcessNotifyRoutineEx2(PSCREATEPROCESSNOTIFYTYPE NotifyType, PVOID NotifyInformation, BOOLEAN Remove);
NTSTATUS __stdcall PsSetCreateThreadNotifyRoutine(PCREATE_THREAD_NOTIFY_ROUTINE NotifyRoutine);
NTSTATUS __stdcall PsSetCreateThreadNotifyRoutineEx(PSCREATETHREADNOTIFYTYPE NotifyType, PVOID NotifyInformation);
NTSTATUS __stdcall PsSetLoadImageNotifyRoutine(PLOAD_IMAGE_NOTIFY_ROUTINE NotifyRoutine);
NTSTATUS __stdcall PsSetLoadImageNotifyRoutineEx(PLOAD_IMAGE_NOTIFY_ROUTINE NotifyRoutine, ULONG_PTR Flags);
NTSTATUS __stdcall PsStartSiloMonitor(PSILO_MONITOR Monitor);
NTSTATUS __stdcall PsTerminateSystemThread(NTSTATUS ExitStatus);
NTSTATUS __stdcall PsWrapApcWow64Thread(PVOID *ApcContext, PVOID *ApcRoutine);
NTSTATUS __stdcall PshedRegisterPlugin(PWHEA_PSHED_PLUGIN_REGISTRATION_PACKET Packet);
NTSTATUS __stdcall PwmParsePinPath(UNICODE_STRING *PinPath, ULONG *PinNumber);
NTSTATUS __stdcall RegisterOpRegionHandler(PDEVICE_OBJECT DeviceObject, ULONG AccessType, ULONG RegionSpace, PACPI_OP_REGION_HANDLER Handler, PVOID Context, ULONG Flags, PVOID *OperationRegionObject);
NTSTATUS __stdcall RegisterResourceDescriptor(ULONG Handle, PCSRT_RESOURCE_GROUP_HEADER ResourceGroup, PCSRT_RESOURCE_DESCRIPTOR_HEADER ResourceDescriptor, PVOID ResourceDescriptorInfo);
NTSTATUS __stdcall ResolveIpNetEntry2(PMIB_IPNET_ROW2 Row, const SOCKADDR_INET *SourceAddress);
NTSTATUS __stdcall RtlAbsoluteToSelfRelativeSD(PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor, PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor, PULONG BufferLength);
NTSTATUS __stdcall RtlAddAccessAllowedAce(PACL Acl, ULONG AceRevision, ACCESS_MASK AccessMask, PSID Sid);
NTSTATUS __stdcall RtlAddAccessAllowedAceEx(PACL Acl, ULONG AceRevision, ULONG AceFlags, ACCESS_MASK AccessMask, PSID Sid);
NTSTATUS __stdcall RtlAddAce(PACL Acl, ULONG AceRevision, ULONG StartingAceIndex, PVOID AceList, ULONG AceListLength);
NTSTATUS __stdcall RtlAllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY IdentifierAuthority, UCHAR SubAuthorityCount, ULONG SubAuthority0, ULONG SubAuthority1, ULONG SubAuthority2, ULONG SubAuthority3, ULONG SubAuthority4, ULONG SubAuthority5, ULONG SubAuthority6, ULONG SubAuthority7, PSID *Sid);
NTSTATUS __stdcall RtlAllocateAndInitializeSidEx(PSID_IDENTIFIER_AUTHORITY IdentifierAuthority, UCHAR SubAuthorityCount, PULONG SubAuthorities, PSID *Sid);
NTSTATUS __stdcall RtlAnsiStringToUnicodeString(PUNICODE_STRING DestinationString, PCANSI_STRING SourceString, BOOLEAN AllocateDestinationString);
NTSTATUS __stdcall RtlAppendStringToString(PSTRING Destination, const STRING *Source);
NTSTATUS __stdcall RtlAppendUnicodeStringToString(PUNICODE_STRING Destination, PCUNICODE_STRING Source);
NTSTATUS __stdcall RtlAppendUnicodeToString(PUNICODE_STRING Destination, PCWSTR Source);
NTSTATUS __stdcall RtlByteToChar(UCHAR bOperand, CHAR *pch);
NTSTATUS __stdcall RtlByteToInt8(UCHAR bOperand, INT8 *pi8Result);
NTSTATUS __stdcall RtlCharToInteger(PCSZ String, ULONG Base, PULONG Value);
NTSTATUS __stdcall RtlCheckRegistryKey(ULONG RelativeTo, PWSTR Path);
NTSTATUS __stdcall RtlCmEncodeMemIoResource(PCM_PARTIAL_RESOURCE_DESCRIPTOR Descriptor, UCHAR Type, ULONGLONG Length, ULONGLONG Start);
NTSTATUS __stdcall RtlCompressBuffer(USHORT CompressionFormatAndEngine, PUCHAR UncompressedBuffer, ULONG UncompressedBufferSize, PUCHAR CompressedBuffer, ULONG CompressedBufferSize, ULONG UncompressedChunkSize, PULONG FinalCompressedSize, PVOID WorkSpace);
NTSTATUS __stdcall RtlCompressChunks(PUCHAR UncompressedBuffer, ULONG UncompressedBufferSize, PUCHAR CompressedBuffer, ULONG CompressedBufferSize, PCOMPRESSED_DATA_INFO CompressedDataInfo, ULONG CompressedDataInfoLength, PVOID WorkSpace);
NTSTATUS __stdcall RtlConvertSidToUnicodeString(PUNICODE_STRING UnicodeString, PSID Sid, BOOLEAN AllocateDestinationString);
NTSTATUS __stdcall RtlCopySid(ULONG DestinationSidLength, PSID DestinationSid, PSID SourceSid);
NTSTATUS __stdcall RtlCreateAcl(PACL Acl, ULONG AclLength, ULONG AclRevision);
NTSTATUS __stdcall RtlCreateRegistryKey(ULONG RelativeTo, PWSTR Path);
NTSTATUS __stdcall RtlCreateSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Revision);
NTSTATUS __stdcall RtlCreateSecurityDescriptorRelative(PISECURITY_DESCRIPTOR_RELATIVE SecurityDescriptor, ULONG Revision);
NTSTATUS __stdcall RtlCreateServiceSid(PUNICODE_STRING ServiceName, PSID ServiceSid, PULONG ServiceSidLength);
NTSTATUS __stdcall RtlCreateSystemVolumeInformationFolder(PCUNICODE_STRING VolumeRootPath);
NTSTATUS __stdcall RtlCreateVirtualAccountSid(PCUNICODE_STRING Name, ULONG BaseSubAuthority, PSID Sid, PULONG SidLength);
NTSTATUS __stdcall RtlCustomCPToUnicodeN(PCPTABLEINFO CustomCP, PWCH UnicodeString, ULONG MaxBytesInUnicodeString, PULONG BytesInUnicodeString, PCH CustomCPString, ULONG BytesInCustomCPString);
NTSTATUS __stdcall RtlDecompressBuffer(USHORT CompressionFormat, PUCHAR UncompressedBuffer, ULONG UncompressedBufferSize, PUCHAR CompressedBuffer, ULONG CompressedBufferSize, PULONG FinalUncompressedSize);
NTSTATUS __stdcall RtlDecompressBufferEx(USHORT CompressionFormat, PUCHAR UncompressedBuffer, ULONG UncompressedBufferSize, PUCHAR CompressedBuffer, ULONG CompressedBufferSize, PULONG FinalUncompressedSize, PVOID WorkSpace);
NTSTATUS __stdcall RtlDecompressBufferEx2(USHORT CompressionFormat, PUCHAR UncompressedBuffer, ULONG UncompressedBufferSize, PUCHAR CompressedBuffer, ULONG CompressedBufferSize, ULONG UncompressedChunkSize, PULONG FinalUncompressedSize, PVOID WorkSpace);
NTSTATUS __stdcall RtlDecompressChunks(PUCHAR UncompressedBuffer, ULONG UncompressedBufferSize, PUCHAR CompressedBuffer, ULONG CompressedBufferSize, PUCHAR CompressedTail, ULONG CompressedTailSize, PCOMPRESSED_DATA_INFO CompressedDataInfo);
NTSTATUS __stdcall RtlDecompressFragment(USHORT CompressionFormat, PUCHAR UncompressedFragment, ULONG UncompressedFragmentSize, PUCHAR CompressedBuffer, ULONG CompressedBufferSize, ULONG FragmentOffset, PULONG FinalUncompressedSize, PVOID WorkSpace);
NTSTATUS __stdcall RtlDecompressFragmentEx(USHORT CompressionFormat, PUCHAR UncompressedFragment, ULONG UncompressedFragmentSize, PUCHAR CompressedBuffer, ULONG CompressedBufferSize, ULONG FragmentOffset, ULONG UncompressedChunkSize, PULONG FinalUncompressedSize, PVOID WorkSpace);
NTSTATUS __stdcall RtlDeleteAce(PACL Acl, ULONG AceIndex);
NTSTATUS __stdcall RtlDeleteRegistryValue(ULONG RelativeTo, PCWSTR Path, PCWSTR ValueName);
NTSTATUS __stdcall RtlDescribeChunk(USHORT CompressionFormat, PUCHAR *CompressedBuffer, PUCHAR EndOfCompressedBufferPlus1, PUCHAR *ChunkBuffer, PULONG ChunkSize);
NTSTATUS __stdcall RtlDowncaseUnicodeString(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
NTSTATUS __stdcall RtlDrainNonVolatileFlush(PVOID NvToken);
NTSTATUS __stdcall RtlDuplicateUnicodeString(ULONG Flags, PCUNICODE_STRING StringIn, PUNICODE_STRING StringOut);
NTSTATUS __stdcall RtlEthernetStringToAddressA(PCSTR S, PCSTR *Terminator, DL_EUI48 *Addr);
NTSTATUS __stdcall RtlEthernetStringToAddressW(PCWSTR S, LPCWSTR *Terminator, DL_EUI48 *Addr);
NTSTATUS __stdcall RtlExtendCorrelationVector(PCORRELATION_VECTOR CorrelationVector);
NTSTATUS __stdcall RtlFindClosestEncodableLength(ULONGLONG SourceLength, PULONGLONG TargetLength);
NTSTATUS __stdcall RtlFlushNonVolatileMemory(PVOID NvToken, PVOID NvBuffer, SIZE_T Size, ULONG Flags);
NTSTATUS __stdcall RtlFlushNonVolatileMemoryRanges(PVOID NvToken, PNV_MEMORY_RANGE NvRanges, SIZE_T NumRanges, ULONG Flags);
NTSTATUS __stdcall RtlFreeNonVolatileToken(PVOID NvToken);
NTSTATUS __stdcall RtlGUIDFromString(PCUNICODE_STRING GuidString, GUID *Guid);
NTSTATUS __stdcall RtlGenerate8dot3Name(PCUNICODE_STRING Name, BOOLEAN AllowExtendedCharacters, PGENERATE_NAME_CONTEXT Context, PUNICODE_STRING Name8dot3);
NTSTATUS __stdcall RtlGenerateClass5Guid(const GUID *const NamespaceGuid, PVOID Buffer, ULONG BufferSize, GUID *Guid);
NTSTATUS __stdcall RtlGetAce(PACL Acl, ULONG AceIndex, PVOID *Ace);
NTSTATUS __stdcall RtlGetCompressionWorkSpaceSize(USHORT CompressionFormatAndEngine, PULONG CompressBufferWorkSpaceSize, PULONG CompressFragmentWorkSpaceSize);
NTSTATUS __stdcall RtlGetDaclSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, PBOOLEAN DaclPresent, PACL *Dacl, PBOOLEAN DaclDefaulted);
NTSTATUS __stdcall RtlGetGroupSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID *Group, PBOOLEAN GroupDefaulted);
NTSTATUS __stdcall RtlGetNonVolatileToken(PVOID NvBuffer, SIZE_T Size, PVOID *NvToken);
NTSTATUS __stdcall RtlGetOwnerSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID *Owner, PBOOLEAN OwnerDefaulted);
NTSTATUS __stdcall RtlGetPersistedStateLocation(PCWSTR SourceID, PCWSTR CustomValue, PCWSTR DefaultPath, STATE_LOCATION_TYPE StateLocationType, PWCHAR TargetPath, ULONG BufferLengthIn, PULONG BufferLengthOut);
NTSTATUS __stdcall RtlGetSaclSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, PBOOLEAN SaclPresent, PACL *Sacl, PBOOLEAN SaclDefaulted);
NTSTATUS __stdcall RtlGetVersion(PRTL_OSVERSIONINFOW lpVersionInformation);
NTSTATUS __stdcall RtlHashUnicodeString(PCUNICODE_STRING String, BOOLEAN CaseInSensitive, ULONG HashAlgorithm, PULONG HashValue);
NTSTATUS __stdcall RtlIdnToAscii(ULONG Flags, PCWSTR SourceString, LONG SourceStringLength, PWSTR DestinationString, PLONG DestinationStringLength);
NTSTATUS __stdcall RtlIdnToNameprepUnicode(ULONG Flags, PCWSTR SourceString, LONG SourceStringLength, PWSTR DestinationString, PLONG DestinationStringLength);
NTSTATUS __stdcall RtlIdnToUnicode(ULONG Flags, PCWSTR SourceString, LONG SourceStringLength, PWSTR DestinationString, PLONG DestinationStringLength);
NTSTATUS __stdcall RtlIncrementCorrelationVector(PCORRELATION_VECTOR CorrelationVector);
NTSTATUS __stdcall RtlInitAnsiStringEx(PANSI_STRING DestinationString, PCSZ SourceString);
NTSTATUS __stdcall RtlInitStringEx(PSTRING DestinationString, PCSZ SourceString);
NTSTATUS __stdcall RtlInitUnicodeStringEx(PUNICODE_STRING DestinationString, PCWSTR SourceString);
NTSTATUS __stdcall RtlInitializeCorrelationVector(PCORRELATION_VECTOR CorrelationVector, int Version, const GUID *Guid);
NTSTATUS __stdcall RtlInitializeSid(PSID Sid, PSID_IDENTIFIER_AUTHORITY IdentifierAuthority, UCHAR SubAuthorityCount);
NTSTATUS __stdcall RtlInt64ToUnicodeString(ULONGLONG Value, ULONG Base, PUNICODE_STRING String);
NTSTATUS __stdcall RtlInt8ToUChar(INT8 i8Operand, UCHAR *pch);
NTSTATUS __stdcall RtlInt8ToUInt(INT8 i8Operand, UINT *puResult);
NTSTATUS __stdcall RtlInt8ToUInt8(INT8 i8Operand, UINT8 *pu8Result);
NTSTATUS __stdcall RtlInt8ToUIntPtr(INT8 i8Operand, UINT_PTR *puResult);
NTSTATUS __stdcall RtlInt8ToULong(INT8 i8Operand, ULONG *pulResult);
NTSTATUS __stdcall RtlInt8ToULongLong(INT8 i8Operand, ULONGLONG *pullResult);
NTSTATUS __stdcall RtlInt8ToULongPtr(INT8 i8Operand, ULONG_PTR *pulResult);
NTSTATUS __stdcall RtlInt8ToUShort(INT8 i8Operand, USHORT *pusResult);
NTSTATUS __stdcall RtlIntPtrToChar(INT_PTR iOperand, CHAR *pch);
NTSTATUS __stdcall RtlIntPtrToInt8(INT_PTR iOperand, INT8 *pi8Result);
NTSTATUS __stdcall RtlIntPtrToLongPtr(INT_PTR iOperand, LONG_PTR *plResult);
NTSTATUS __stdcall RtlIntPtrToShort(INT_PTR iOperand, SHORT *psResult);
NTSTATUS __stdcall RtlIntPtrToUChar(INT_PTR iOperand, UCHAR *pch);
NTSTATUS __stdcall RtlIntPtrToUInt8(INT_PTR iOperand, UINT8 *pui8Result);
NTSTATUS __stdcall RtlIntPtrToUShort(INT_PTR iOperand, USHORT *pusResult);
NTSTATUS __stdcall RtlIntToChar(INT iOperand, CHAR *pch);
NTSTATUS __stdcall RtlIntToInt8(INT iOperand, INT8 *pi8Result);
NTSTATUS __stdcall RtlIntToShort(INT iOperand, SHORT *psResult);
NTSTATUS __stdcall RtlIntToUChar(INT iOperand, UCHAR *pch);
NTSTATUS __stdcall RtlIntToUInt(INT iOperand, UINT *puResult);
NTSTATUS __stdcall RtlIntToUInt8(INT iOperand, UINT8 *pui8Result);
NTSTATUS __stdcall RtlIntToULong(INT iOperand, ULONG *pulResult);
NTSTATUS __stdcall RtlIntToULongLong(INT iOperand, ULONGLONG *pullResult);
NTSTATUS __stdcall RtlIntToUShort(INT iOperand, USHORT *pusResult);
NTSTATUS __stdcall RtlIntegerToUnicodeString(ULONG Value, ULONG Base, PUNICODE_STRING String);
NTSTATUS __stdcall RtlIoEncodeMemIoResource(PIO_RESOURCE_DESCRIPTOR Descriptor, UCHAR Type, ULONGLONG Length, ULONGLONG Alignment, ULONGLONG MinimumAddress, ULONGLONG MaximumAddress);
NTSTATUS __stdcall RtlIpv4AddressToStringExA(const struct in_addr *Address, USHORT Port, PSTR AddressString, PULONG AddressStringLength);
NTSTATUS __stdcall RtlIpv4AddressToStringExW(const struct in_addr *Address, USHORT Port, PWSTR AddressString, PULONG AddressStringLength);
NTSTATUS __stdcall RtlIpv4StringToAddressA(PCSTR S, BOOLEAN Strict, PCSTR *Terminator, struct in_addr *Addr);
NTSTATUS __stdcall RtlIpv4StringToAddressExA(PCSTR AddressString, BOOLEAN Strict, struct in_addr *Address, PUSHORT Port);
NTSTATUS __stdcall RtlIpv4StringToAddressExW(PCWSTR AddressString, BOOLEAN Strict, struct in_addr *Address, PUSHORT Port);
NTSTATUS __stdcall RtlIpv4StringToAddressW(PCWSTR S, BOOLEAN Strict, LPCWSTR *Terminator, struct in_addr *Addr);
NTSTATUS __stdcall RtlIpv6AddressToStringExA(const struct in6_addr *Address, ULONG ScopeId, USHORT Port, PSTR AddressString, PULONG AddressStringLength);
NTSTATUS __stdcall RtlIpv6AddressToStringExW(const struct in6_addr *Address, ULONG ScopeId, USHORT Port, PWSTR AddressString, PULONG AddressStringLength);
NTSTATUS __stdcall RtlIpv6StringToAddressA(PCSTR S, PCSTR *Terminator, struct in6_addr *Addr);
NTSTATUS __stdcall RtlIpv6StringToAddressExA(PCSTR AddressString, struct in6_addr *Address, PULONG ScopeId, PUSHORT Port);
NTSTATUS __stdcall RtlIpv6StringToAddressExW(PCWSTR AddressString, struct in6_addr *Address, PULONG ScopeId, PUSHORT Port);
NTSTATUS __stdcall RtlIpv6StringToAddressW(PCWSTR S, PCWSTR *Terminator, struct in6_addr *Addr);
NTSTATUS __stdcall RtlIsNormalizedString(ULONG NormForm, PCWSTR SourceString, LONG SourceStringLength, PBOOLEAN Normalized);
NTSTATUS __stdcall RtlIsPartialPlaceholderFileHandle(HANDLE FileHandle, PBOOLEAN IsPartialPlaceholder);
NTSTATUS __stdcall RtlIsPartialPlaceholderFileInfo(const void *InfoBuffer, FILE_INFORMATION_CLASS InfoClass, PBOOLEAN IsPartialPlaceholder);
NTSTATUS __stdcall RtlIsUntrustedObject(HANDLE Handle, PVOID Object, PBOOLEAN UntrustedObject);
NTSTATUS __stdcall RtlLongLongToChar(LONGLONG llOperand, CHAR *pch);
NTSTATUS __stdcall RtlLongLongToInt(LONGLONG llOperand, INT *piResult);
NTSTATUS __stdcall RtlLongLongToInt8(LONGLONG llOperand, INT8 *pi8Result);
NTSTATUS __stdcall RtlLongLongToIntPtr(LONGLONG llOperand, INT_PTR *piResult);
NTSTATUS __stdcall RtlLongLongToLong(LONGLONG llOperand, LONG *plResult);
NTSTATUS __stdcall RtlLongLongToLongPtr(LONGLONG llOperand, LONG_PTR *plResult);
NTSTATUS __stdcall RtlLongLongToShort(LONGLONG llOperand, SHORT *psResult);
NTSTATUS __stdcall RtlLongLongToUChar(LONGLONG llOperand, UCHAR *pch);
NTSTATUS __stdcall RtlLongLongToUInt(LONGLONG llOperand, UINT *puResult);
NTSTATUS __stdcall RtlLongLongToUInt8(LONGLONG llOperand, UINT8 *pu8Result);
NTSTATUS __stdcall RtlLongLongToULong(LONGLONG llOperand, ULONG *pulResult);
NTSTATUS __stdcall RtlLongLongToULongLong(LONGLONG llOperand, ULONGLONG *pullResult);
NTSTATUS __stdcall RtlLongLongToUShort(LONGLONG llOperand, USHORT *pusResult);
NTSTATUS __stdcall RtlLongPtrToChar(LONG_PTR lOperand, CHAR *pch);
NTSTATUS __stdcall RtlLongPtrToInt8(LONG_PTR lOperand, INT8 *pi8Result);
NTSTATUS __stdcall RtlLongPtrToIntPtr(LONG_PTR lOperand, INT_PTR *piResult);
NTSTATUS __stdcall RtlLongPtrToShort(LONG_PTR lOperand, SHORT *psResult);
NTSTATUS __stdcall RtlLongPtrToUChar(LONG_PTR lOperand, UCHAR *pch);
NTSTATUS __stdcall RtlLongPtrToUInt8(LONG_PTR lOperand, UINT8 *pui8Result);
NTSTATUS __stdcall RtlLongPtrToUIntPtr(LONG_PTR lOperand, UINT_PTR *puResult);
NTSTATUS __stdcall RtlLongPtrToULongLong(LONG_PTR lOperand, ULONGLONG *pullResult);
NTSTATUS __stdcall RtlLongPtrToULongPtr(LONG_PTR lOperand, ULONG_PTR *pulResult);
NTSTATUS __stdcall RtlLongPtrToUShort(LONG_PTR lOperand, USHORT *pusResult);
NTSTATUS __stdcall RtlLongToChar(LONG lOperand, CHAR *pch);
NTSTATUS __stdcall RtlLongToInt(LONG lOperand, INT *piResult);
NTSTATUS __stdcall RtlLongToInt8(LONG lOperand, INT8 *pi8Result);
NTSTATUS __stdcall RtlLongToIntPtr(LONG lOperand, INT_PTR *piResult);
NTSTATUS __stdcall RtlLongToShort(LONG lOperand, SHORT *psResult);
NTSTATUS __stdcall RtlLongToUChar(LONG lOperand, UCHAR *pch);
NTSTATUS __stdcall RtlLongToUInt(LONG lOperand, UINT *puResult);
NTSTATUS __stdcall RtlLongToUInt8(LONG lOperand, UINT8 *pui8Result);
NTSTATUS __stdcall RtlLongToUIntPtr(LONG lOperand, UINT_PTR *puResult);
NTSTATUS __stdcall RtlLongToULong(LONG lOperand, ULONG *pulResult);
NTSTATUS __stdcall RtlLongToULongLong(LONG lOperand, ULONGLONG *pullResult);
NTSTATUS __stdcall RtlLongToULongPtr(LONG lOperand, ULONG_PTR *pulResult);
NTSTATUS __stdcall RtlLongToUShort(LONG lOperand, USHORT *pusResult);
NTSTATUS __stdcall RtlMultiByteToUnicodeN(PWCH UnicodeString, ULONG MaxBytesInUnicodeString, PULONG BytesInUnicodeString, const CHAR *MultiByteString, ULONG BytesInMultiByteString);
NTSTATUS __stdcall RtlMultiByteToUnicodeSize(PULONG BytesInUnicodeString, const CHAR *MultiByteString, ULONG BytesInMultiByteString);
NTSTATUS __stdcall RtlNormalizeString(ULONG NormForm, PCWSTR SourceString, LONG SourceStringLength, PWSTR DestinationString, PLONG DestinationStringLength);
NTSTATUS __stdcall RtlOemStringToCountedUnicodeString(PUNICODE_STRING DestinationString, PCOEM_STRING SourceString, BOOLEAN AllocateDestinationString);
NTSTATUS __stdcall RtlOemStringToUnicodeString(PUNICODE_STRING DestinationString, PCOEM_STRING SourceString, BOOLEAN AllocateDestinationString);
NTSTATUS __stdcall RtlOemToUnicodeN(PWCH UnicodeString, ULONG MaxBytesInUnicodeString, PULONG BytesInUnicodeString, PCCH OemString, ULONG BytesInOemString);
NTSTATUS __stdcall RtlQueryRegistryValueWithFallback(HANDLE PrimaryHandle, HANDLE FallbackHandle, PUNICODE_STRING ValueName, ULONG ValueLength, PULONG ValueType, PVOID ValueData, PULONG ResultLength);
NTSTATUS __stdcall RtlQueryRegistryValues(ULONG RelativeTo, PCWSTR Path, PRTL_QUERY_REGISTRY_TABLE QueryTable, PVOID Context, PVOID Environment);
NTSTATUS __stdcall RtlRaiseCustomSystemEventTrigger(PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG TriggerConfig);
NTSTATUS __stdcall RtlReplaceSidInSd(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID OldSid, PSID NewSid, ULONG *NumChanges);
NTSTATUS __stdcall RtlReserveChunk(USHORT CompressionFormat, PUCHAR *CompressedBuffer, PUCHAR EndOfCompressedBufferPlus1, PUCHAR *ChunkBuffer, ULONG ChunkSize);
NTSTATUS __stdcall RtlRunOnceBeginInitialize(PRTL_RUN_ONCE RunOnce, ULONG Flags, PVOID *Context);
NTSTATUS __stdcall RtlRunOnceComplete(PRTL_RUN_ONCE RunOnce, ULONG Flags, PVOID Context);
NTSTATUS __stdcall RtlRunOnceExecuteOnce(PRTL_RUN_ONCE RunOnce, PRTL_RUN_ONCE_INIT_FN InitFn, PVOID Parameter, PVOID *Context);
NTSTATUS __stdcall RtlSelfRelativeToAbsoluteSD(PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor, PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor, PULONG AbsoluteSecurityDescriptorSize, PACL Dacl, PULONG DaclSize, PACL Sacl, PULONG SaclSize, PSID Owner, PULONG OwnerSize, PSID PrimaryGroup, PULONG PrimaryGroupSize);
NTSTATUS __stdcall RtlSetDaclSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, BOOLEAN DaclPresent, PACL Dacl, BOOLEAN DaclDefaulted);
NTSTATUS __stdcall RtlSetGroupSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID Group, BOOLEAN GroupDefaulted);
NTSTATUS __stdcall RtlSetOwnerSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID Owner, BOOLEAN OwnerDefaulted);
NTSTATUS __stdcall RtlShortToChar(SHORT sOperand, CHAR *pch);
NTSTATUS __stdcall RtlShortToDWordPtr(SHORT sOperand, DWORD_PTR *pdwResult);
NTSTATUS __stdcall RtlShortToInt8(SHORT sOperand, INT8 *pi8Result);
NTSTATUS __stdcall RtlShortToUChar(SHORT sOperand, UCHAR *pch);
NTSTATUS __stdcall RtlShortToUInt(SHORT sOperand, UINT *puResult);
NTSTATUS __stdcall RtlShortToUInt8(SHORT sOperand, UINT8 *pui8Result);
NTSTATUS __stdcall RtlShortToUIntPtr(SHORT sOperand, UINT_PTR *puResult);
NTSTATUS __stdcall RtlShortToULong(SHORT sOperand, ULONG *pulResult);
NTSTATUS __stdcall RtlShortToULongLong(SHORT sOperand, ULONGLONG *pullResult);
NTSTATUS __stdcall RtlShortToULongPtr(SHORT sOperand, ULONG_PTR *pulResult);
NTSTATUS __stdcall RtlShortToUShort(SHORT sOperand, USHORT *pusResult);
NTSTATUS __stdcall RtlSizeTAdd(size_t Augend, size_t Addend, size_t *pResult);
NTSTATUS __stdcall RtlSizeTSub(size_t Minuend, size_t Subtrahend, size_t *pResult);
NTSTATUS __stdcall RtlStringCbCatA(NTSTRSAFE_PSTR pszDest, size_t cbDest, NTSTRSAFE_PCSTR pszSrc);
NTSTATUS __stdcall RtlStringCbCatExA(NTSTRSAFE_PSTR pszDest, size_t cbDest, NTSTRSAFE_PCSTR pszSrc, NTSTRSAFE_PSTR *ppszDestEnd, size_t *pcbRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCbCatExW(NTSTRSAFE_PWSTR pszDest, size_t cbDest, NTSTRSAFE_PCWSTR pszSrc, NTSTRSAFE_PWSTR *ppszDestEnd, size_t *pcbRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCbCatNA(NTSTRSAFE_PSTR pszDest, size_t cbDest, STRSAFE_PCNZCH pszSrc, size_t cbToAppend);
NTSTATUS __stdcall RtlStringCbCatNExA(NTSTRSAFE_PSTR pszDest, size_t cbDest, STRSAFE_PCNZCH pszSrc, size_t cbToAppend, NTSTRSAFE_PSTR *ppszDestEnd, size_t *pcbRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCbCatNExW(NTSTRSAFE_PWSTR pszDest, size_t cbDest, STRSAFE_PCNZWCH pszSrc, size_t cbToAppend, NTSTRSAFE_PWSTR *ppszDestEnd, size_t *pcbRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCbCatNW(NTSTRSAFE_PWSTR pszDest, size_t cbDest, STRSAFE_PCNZWCH pszSrc, size_t cbToAppend);
NTSTATUS __stdcall RtlStringCbCatW(NTSTRSAFE_PWSTR pszDest, size_t cbDest, NTSTRSAFE_PCWSTR pszSrc);
NTSTATUS __stdcall RtlStringCbCopyA(NTSTRSAFE_PSTR pszDest, size_t cbDest, NTSTRSAFE_PCSTR pszSrc);
NTSTATUS __stdcall RtlStringCbCopyExA(NTSTRSAFE_PSTR pszDest, size_t cbDest, NTSTRSAFE_PCSTR pszSrc, NTSTRSAFE_PSTR *ppszDestEnd, size_t *pcbRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCbCopyExW(NTSTRSAFE_PWSTR pszDest, size_t cbDest, NTSTRSAFE_PCWSTR pszSrc, NTSTRSAFE_PWSTR *ppszDestEnd, size_t *pcbRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCbCopyNA(NTSTRSAFE_PSTR pszDest, size_t cbDest, STRSAFE_PCNZCH pszSrc, size_t cbToCopy);
NTSTATUS __stdcall RtlStringCbCopyNExA(NTSTRSAFE_PSTR pszDest, size_t cbDest, STRSAFE_PCNZCH pszSrc, size_t cbToCopy, NTSTRSAFE_PSTR *ppszDestEnd, size_t *pcbRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCbCopyNExW(NTSTRSAFE_PWSTR pszDest, size_t cbDest, STRSAFE_PCNZWCH pszSrc, size_t cbToCopy, NTSTRSAFE_PWSTR *ppszDestEnd, size_t *pcbRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCbCopyNW(NTSTRSAFE_PWSTR pszDest, size_t cbDest, STRSAFE_PCNZWCH pszSrc, size_t cbToCopy);
NTSTATUS __stdcall RtlStringCbCopyUnicodeString(NTSTRSAFE_PWSTR pszDest, size_t cbDest, PCUNICODE_STRING SourceString);
NTSTATUS __stdcall RtlStringCbCopyUnicodeStringEx(NTSTRSAFE_PWSTR pszDest, size_t cbDest, PCUNICODE_STRING SourceString, NTSTRSAFE_PWSTR *ppszDestEnd, size_t *pcbRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCbCopyW(NTSTRSAFE_PWSTR pszDest, size_t cbDest, NTSTRSAFE_PCWSTR pszSrc);
NTSTATUS __stdcall RtlStringCbLengthA(STRSAFE_PCNZCH psz, size_t cbMax, size_t *pcbLength);
NTSTATUS __stdcall RtlStringCbLengthW(STRSAFE_PCNZWCH psz, size_t cbMax, size_t *pcbLength);
NTSTATUS __stdcall RtlStringCbVPrintfA(NTSTRSAFE_PSTR pszDest, size_t cbDest, NTSTRSAFE_PCSTR pszFormat, va_list argList);
NTSTATUS __stdcall RtlStringCbVPrintfExA(NTSTRSAFE_PSTR pszDest, size_t cbDest, NTSTRSAFE_PSTR *ppszDestEnd, size_t *pcbRemaining, ULONG dwFlags, NTSTRSAFE_PCSTR pszFormat, va_list argList);
NTSTATUS __stdcall RtlStringCbVPrintfExW(NTSTRSAFE_PWSTR pszDest, size_t cbDest, NTSTRSAFE_PWSTR *ppszDestEnd, size_t *pcbRemaining, ULONG dwFlags, NTSTRSAFE_PCWSTR pszFormat, va_list argList);
NTSTATUS __stdcall RtlStringCbVPrintfW(NTSTRSAFE_PWSTR pszDest, size_t cbDest, NTSTRSAFE_PCWSTR pszFormat, va_list argList);
NTSTATUS __stdcall RtlStringCchCatA(NTSTRSAFE_PSTR pszDest, size_t cchDest, NTSTRSAFE_PCSTR pszSrc);
NTSTATUS __stdcall RtlStringCchCatExA(NTSTRSAFE_PSTR pszDest, size_t cchDest, NTSTRSAFE_PCSTR pszSrc, NTSTRSAFE_PSTR *ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCchCatExW(NTSTRSAFE_PWSTR pszDest, size_t cchDest, NTSTRSAFE_PCWSTR pszSrc, NTSTRSAFE_PWSTR *ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCchCatNA(NTSTRSAFE_PSTR pszDest, size_t cchDest, STRSAFE_PCNZCH pszSrc, size_t cchToAppend);
NTSTATUS __stdcall RtlStringCchCatNExA(NTSTRSAFE_PSTR pszDest, size_t cchDest, STRSAFE_PCNZCH pszSrc, size_t cchToAppend, NTSTRSAFE_PSTR *ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCchCatNExW(NTSTRSAFE_PWSTR pszDest, size_t cchDest, STRSAFE_PCNZWCH pszSrc, size_t cchToAppend, NTSTRSAFE_PWSTR *ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCchCatNW(NTSTRSAFE_PWSTR pszDest, size_t cchDest, STRSAFE_PCNZWCH pszSrc, size_t cchToAppend);
NTSTATUS __stdcall RtlStringCchCatW(NTSTRSAFE_PWSTR pszDest, size_t cchDest, NTSTRSAFE_PCWSTR pszSrc);
NTSTATUS __stdcall RtlStringCchCopyA(NTSTRSAFE_PSTR pszDest, size_t cchDest, NTSTRSAFE_PCSTR pszSrc);
NTSTATUS __stdcall RtlStringCchCopyExA(NTSTRSAFE_PSTR pszDest, size_t cchDest, NTSTRSAFE_PCSTR pszSrc, NTSTRSAFE_PSTR *ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCchCopyExW(NTSTRSAFE_PWSTR pszDest, size_t cchDest, NTSTRSAFE_PCWSTR pszSrc, NTSTRSAFE_PWSTR *ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCchCopyNA(NTSTRSAFE_PSTR pszDest, size_t cchDest, STRSAFE_PCNZCH pszSrc, size_t cchToCopy);
NTSTATUS __stdcall RtlStringCchCopyNExA(NTSTRSAFE_PSTR pszDest, size_t cchDest, STRSAFE_PCNZCH pszSrc, size_t cchToCopy, NTSTRSAFE_PSTR *ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCchCopyNExW(NTSTRSAFE_PWSTR pszDest, size_t cchDest, STRSAFE_PCNZWCH pszSrc, size_t cchToCopy, NTSTRSAFE_PWSTR *ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCchCopyNW(NTSTRSAFE_PWSTR pszDest, size_t cchDest, STRSAFE_PCNZWCH pszSrc, size_t cchToCopy);
NTSTATUS __stdcall RtlStringCchCopyUnicodeString(NTSTRSAFE_PWSTR pszDest, size_t cchDest, PCUNICODE_STRING SourceString);
NTSTATUS __stdcall RtlStringCchCopyUnicodeStringEx(NTSTRSAFE_PWSTR pszDest, size_t cchDest, PCUNICODE_STRING SourceString, NTSTRSAFE_PWSTR *ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringCchCopyW(NTSTRSAFE_PWSTR pszDest, size_t cchDest, NTSTRSAFE_PCWSTR pszSrc);
NTSTATUS __stdcall RtlStringCchLengthA(STRSAFE_PCNZCH psz, size_t cchMax, size_t *pcchLength);
NTSTATUS __stdcall RtlStringCchLengthW(STRSAFE_PCNZWCH psz, size_t cchMax, size_t *pcchLength);
NTSTATUS __stdcall RtlStringCchVPrintfA(NTSTRSAFE_PSTR pszDest, size_t cchDest, NTSTRSAFE_PCSTR pszFormat, va_list argList);
NTSTATUS __stdcall RtlStringCchVPrintfExA(NTSTRSAFE_PSTR pszDest, size_t cchDest, NTSTRSAFE_PSTR *ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags, NTSTRSAFE_PCSTR pszFormat, va_list argList);
NTSTATUS __stdcall RtlStringCchVPrintfExW(NTSTRSAFE_PWSTR pszDest, size_t cchDest, NTSTRSAFE_PWSTR *ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags, NTSTRSAFE_PCWSTR pszFormat, va_list argList);
NTSTATUS __stdcall RtlStringCchVPrintfW(NTSTRSAFE_PWSTR pszDest, size_t cchDest, NTSTRSAFE_PCWSTR pszFormat, va_list argList);
NTSTATUS __stdcall RtlStringCopyWideCharArrayWorker(NTSTRSAFE_PWSTR pszDest, size_t cchDest, size_t *pcchNewDestLength, const wchar_t *pszSrc, size_t cchSrcLength);
NTSTATUS __stdcall RtlStringCopyWorkerA(NTSTRSAFE_PSTR pszDest, size_t cchDest, size_t *pcchNewDestLength, STRSAFE_PCNZCH pszSrc, size_t cchToCopy);
NTSTATUS __stdcall RtlStringCopyWorkerW(NTSTRSAFE_PWSTR pszDest, size_t cchDest, size_t *pcchNewDestLength, STRSAFE_PCNZWCH pszSrc, size_t cchToCopy);
NTSTATUS __stdcall RtlStringExHandleFillBehindNullA(NTSTRSAFE_PSTR pszDestEnd, size_t cbRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringExHandleFillBehindNullW(NTSTRSAFE_PWSTR pszDestEnd, size_t cbRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringExHandleOtherFlagsA(NTSTRSAFE_PSTR pszDest, size_t cbDest, size_t cchOriginalDestLength, NTSTRSAFE_PSTR *ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringExHandleOtherFlagsW(NTSTRSAFE_PWSTR pszDest, size_t cbDest, size_t cchOriginalDestLength, NTSTRSAFE_PWSTR *ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlStringExValidateDestA(STRSAFE_PCNZCH pszDest, size_t cchDest, const size_t cchMax, ULONG dwFlags);
NTSTATUS __stdcall RtlStringExValidateDestAndLengthA(NTSTRSAFE_PCSTR pszDest, size_t cchDest, size_t *pcchDestLength, const size_t cchMax, ULONG dwFlags);
NTSTATUS __stdcall RtlStringExValidateDestAndLengthW(NTSTRSAFE_PCWSTR pszDest, size_t cchDest, size_t *pcchDestLength, const size_t cchMax, ULONG dwFlags);
NTSTATUS __stdcall RtlStringExValidateDestW(STRSAFE_PCNZWCH pszDest, size_t cchDest, const size_t cchMax, ULONG dwFlags);
NTSTATUS __stdcall RtlStringExValidateSrcA(STRSAFE_PCNZCH *ppszSrc, size_t *pcchToRead, const size_t cchMax, ULONG dwFlags);
NTSTATUS __stdcall RtlStringExValidateSrcW(STRSAFE_PCNZWCH *ppszSrc, size_t *pcchToRead, const size_t cchMax, ULONG dwFlags);
NTSTATUS __stdcall RtlStringFromGUID(const GUID *const Guid, PUNICODE_STRING GuidString);
NTSTATUS __stdcall RtlStringLengthWorkerA(STRSAFE_PCNZCH psz, size_t cchMax, size_t *pcchLength);
NTSTATUS __stdcall RtlStringLengthWorkerW(STRSAFE_PCNZWCH psz, size_t cchMax, size_t *pcchLength);
NTSTATUS __stdcall RtlStringVPrintfWorkerA(NTSTRSAFE_PSTR pszDest, size_t cchDest, size_t *pcchNewDestLength, NTSTRSAFE_PCSTR pszFormat, va_list argList);
NTSTATUS __stdcall RtlStringVPrintfWorkerW(NTSTRSAFE_PWSTR pszDest, size_t cchDest, size_t *pcchNewDestLength, NTSTRSAFE_PCWSTR pszFormat, va_list argList);
NTSTATUS __stdcall RtlStringValidateDestA(STRSAFE_PCNZCH pszDest, size_t cchDest, const size_t cchMax);
NTSTATUS __stdcall RtlStringValidateDestAndLengthA(NTSTRSAFE_PCSTR pszDest, size_t cchDest, size_t *pcchDestLength, const size_t cchMax);
NTSTATUS __stdcall RtlStringValidateDestAndLengthW(NTSTRSAFE_PCWSTR pszDest, size_t cchDest, size_t *pcchDestLength, const size_t cchMax);
NTSTATUS __stdcall RtlStringValidateDestW(STRSAFE_PCNZWCH pszDest, size_t cchDest, const size_t cchMax);
NTSTATUS __stdcall RtlUInt8Add(UINT8 u8Augend, UINT8 u8Addend, UINT8 *pu8Result);
NTSTATUS __stdcall RtlUInt8Mult(UINT8 u8Multiplicand, UINT8 u8Multiplier, UINT8 *pu8Result);
NTSTATUS __stdcall RtlUInt8Sub(UINT8 u8Minuend, UINT8 u8Subtrahend, UINT8 *pu8Result);
NTSTATUS __stdcall RtlUInt8ToChar(UINT8 u8Operand, CHAR *pch);
NTSTATUS __stdcall RtlUInt8ToInt8(UINT8 u8Operand, INT8 *pi8Result);
NTSTATUS __stdcall RtlUIntAdd(UINT uAugend, UINT uAddend, UINT *puResult);
NTSTATUS __stdcall RtlUIntMult(UINT uMultiplicand, UINT uMultiplier, UINT *puResult);
NTSTATUS __stdcall RtlUIntPtrToChar(UINT_PTR uOperand, CHAR *pch);
NTSTATUS __stdcall RtlUIntPtrToInt(UINT_PTR uOperand, INT *piResult);
NTSTATUS __stdcall RtlUIntPtrToInt16(UINT_PTR uOperand, INT16 *pi16Result);
NTSTATUS __stdcall RtlUIntPtrToInt8(UINT_PTR uOperand, INT8 *pi8Result);
NTSTATUS __stdcall RtlUIntPtrToIntPtr(UINT_PTR uOperand, INT_PTR *piResult);
NTSTATUS __stdcall RtlUIntPtrToLong(UINT_PTR uOperand, LONG *plResult);
NTSTATUS __stdcall RtlUIntPtrToLongPtr(UINT_PTR uOperand, LONG_PTR *plResult);
NTSTATUS __stdcall RtlUIntPtrToShort(UINT_PTR uOperand, SHORT *psResult);
NTSTATUS __stdcall RtlUIntPtrToUChar(UINT_PTR uOperand, UCHAR *pch);
NTSTATUS __stdcall RtlUIntPtrToUInt16(UINT_PTR uOperand, UINT16 *pu16Result);
NTSTATUS __stdcall RtlUIntPtrToUInt8(UINT_PTR uOperand, UINT8 *pu8Result);
NTSTATUS __stdcall RtlUIntPtrToUShort(UINT_PTR uOperand, USHORT *pusResult);
NTSTATUS __stdcall RtlUIntSub(UINT uMinuend, UINT uSubtrahend, UINT *puResult);
NTSTATUS __stdcall RtlUIntToChar(UINT uOperand, CHAR *pch);
NTSTATUS __stdcall RtlUIntToInt(UINT uOperand, INT *piResult);
NTSTATUS __stdcall RtlUIntToInt8(UINT uOperand, INT8 *pi8Result);
NTSTATUS __stdcall RtlUIntToIntPtr(UINT uOperand, INT_PTR *piResult);
NTSTATUS __stdcall RtlUIntToLong(UINT uOperand, LONG *plResult);
NTSTATUS __stdcall RtlUIntToLongPtr(UINT uOperand, LONG_PTR *plResult);
NTSTATUS __stdcall RtlUIntToShort(UINT uOperand, SHORT *psResult);
NTSTATUS __stdcall RtlUIntToUChar(UINT uOperand, UCHAR *pch);
NTSTATUS __stdcall RtlUIntToUInt8(UINT uOperand, UINT8 *pui8Result);
NTSTATUS __stdcall RtlUIntToUShort(UINT uOperand, USHORT *pusResult);
NTSTATUS __stdcall RtlULongAdd(ULONG ulAugend, ULONG ulAddend, ULONG *pulResult);
NTSTATUS __stdcall RtlULongLongAdd(ULONGLONG ullAugend, ULONGLONG ullAddend, ULONGLONG *pullResult);
NTSTATUS __stdcall RtlULongLongMult(ULONGLONG ullMultiplicand, ULONGLONG ullMultiplier, ULONGLONG *pullResult);
NTSTATUS __stdcall RtlULongLongSub(ULONGLONG ullMinuend, ULONGLONG ullSubtrahend, ULONGLONG *pullResult);
NTSTATUS __stdcall RtlULongLongToChar(ULONGLONG ullOperand, CHAR *pch);
NTSTATUS __stdcall RtlULongLongToInt(ULONGLONG ullOperand, INT *piResult);
NTSTATUS __stdcall RtlULongLongToInt8(ULONGLONG ullOperand, INT8 *pi8Result);
NTSTATUS __stdcall RtlULongLongToLong(ULONGLONG ullOperand, LONG *plResult);
NTSTATUS __stdcall RtlULongLongToLongLong(ULONGLONG ullOperand, LONGLONG *pllResult);
NTSTATUS __stdcall RtlULongLongToLongPtr(ULONGLONG ullOperand, LONG_PTR *plResult);
NTSTATUS __stdcall RtlULongLongToShort(ULONGLONG ullOperand, SHORT *psResult);
NTSTATUS __stdcall RtlULongLongToUChar(ULONGLONG ullOperand, UCHAR *pch);
NTSTATUS __stdcall RtlULongLongToUInt(ULONGLONG ullOperand, UINT *puResult);
NTSTATUS __stdcall RtlULongLongToUInt8(ULONGLONG ullOperand, UINT8 *pu8Result);
NTSTATUS __stdcall RtlULongLongToUIntPtr(ULONGLONG ullOperand, UINT_PTR *puResult);
NTSTATUS __stdcall RtlULongLongToULong(ULONGLONG ullOperand, ULONG *pulResult);
NTSTATUS __stdcall RtlULongLongToULongPtr(ULONGLONG ullOperand, ULONG_PTR *pulResult);
NTSTATUS __stdcall RtlULongLongToUShort(ULONGLONG ullOperand, USHORT *pusResult);
NTSTATUS __stdcall RtlULongMult(ULONG ulMultiplicand, ULONG ulMultiplier, ULONG *pulResult);
NTSTATUS __stdcall RtlULongPtrToChar(ULONG_PTR ulOperand, CHAR *pch);
NTSTATUS __stdcall RtlULongPtrToInt(ULONG_PTR ulOperand, INT *piResult);
NTSTATUS __stdcall RtlULongPtrToInt8(ULONG_PTR ulOperand, INT8 *pi8Result);
NTSTATUS __stdcall RtlULongPtrToIntPtr(ULONG_PTR ulOperand, INT_PTR *piResult);
NTSTATUS __stdcall RtlULongPtrToLong(ULONG_PTR ulOperand, LONG *plResult);
NTSTATUS __stdcall RtlULongPtrToLongPtr(ULONG_PTR ulOperand, LONG_PTR *plResult);
NTSTATUS __stdcall RtlULongPtrToShort(ULONG_PTR ulOperand, SHORT *psResult);
NTSTATUS __stdcall RtlULongPtrToUChar(ULONG_PTR ulOperand, UCHAR *pch);
NTSTATUS __stdcall RtlULongPtrToUInt8(ULONG_PTR ulOperand, UINT8 *pui8Result);
NTSTATUS __stdcall RtlULongPtrToUIntPtr(ULONG_PTR ulOperand, UINT_PTR *puResult);
NTSTATUS __stdcall RtlULongPtrToUShort(ULONG_PTR ulOperand, USHORT *pusResult);
NTSTATUS __stdcall RtlULongSub(ULONG ulMinuend, ULONG ulSubtrahend, ULONG *pulResult);
NTSTATUS __stdcall RtlULongToChar(ULONG ulOperand, CHAR *pch);
NTSTATUS __stdcall RtlULongToInt(ULONG ulOperand, INT *piResult);
NTSTATUS __stdcall RtlULongToInt8(ULONG ulOperand, INT8 *pi8Result);
NTSTATUS __stdcall RtlULongToIntPtr(ULONG ulOperand, INT_PTR *piResult);
NTSTATUS __stdcall RtlULongToLong(ULONG ulOperand, LONG *plResult);
NTSTATUS __stdcall RtlULongToLongPtr(ULONG ulOperand, LONG_PTR *plResult);
NTSTATUS __stdcall RtlULongToShort(ULONG ulOperand, SHORT *psResult);
NTSTATUS __stdcall RtlULongToUChar(ULONG ulOperand, UCHAR *pch);
NTSTATUS __stdcall RtlULongToUInt(ULONG ulOperand, UINT *puResult);
NTSTATUS __stdcall RtlULongToUInt8(ULONG ulOperand, UINT8 *pui8Result);
NTSTATUS __stdcall RtlULongToUIntPtr(ULONG ulOperand, UINT_PTR *puiResult);
NTSTATUS __stdcall RtlULongToUShort(ULONG ulOperand, USHORT *pusResult);
NTSTATUS __stdcall RtlUShortAdd(USHORT usAugend, USHORT usAddend, USHORT *pusResult);
NTSTATUS __stdcall RtlUShortMult(USHORT usMultiplicand, USHORT usMultiplier, USHORT *pusResult);
NTSTATUS __stdcall RtlUShortSub(USHORT usMinuend, USHORT usSubtrahend, USHORT *pusResult);
NTSTATUS __stdcall RtlUShortToChar(USHORT usOperand, CHAR *pch);
NTSTATUS __stdcall RtlUShortToInt8(USHORT usOperand, INT8 *pi8Result);
NTSTATUS __stdcall RtlUShortToShort(USHORT usOperand, SHORT *psResult);
NTSTATUS __stdcall RtlUShortToUChar(USHORT usOperand, UCHAR *pch);
NTSTATUS __stdcall RtlUShortToUInt8(USHORT usOperand, UINT8 *pui8Result);
NTSTATUS __stdcall RtlUTF8ToUnicodeN(PWSTR UnicodeStringDestination, ULONG UnicodeStringMaxByteCount, PULONG UnicodeStringActualByteCount, PCCH UTF8StringSource, ULONG UTF8StringByteCount);
NTSTATUS __stdcall RtlUnalignedStringCbLengthW(STRSAFE_PCUNZWCH psz, size_t cbMax, size_t *pcbLength);
NTSTATUS __stdcall RtlUnalignedStringCchLengthW(STRSAFE_PCUNZWCH psz, size_t cchMax, size_t *pcchLength);
NTSTATUS __stdcall RtlUnalignedStringLengthWorkerW(STRSAFE_PCUNZWCH psz, size_t cchMax, size_t *pcchLength);
NTSTATUS __stdcall RtlUnicodeStringCat(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString);
NTSTATUS __stdcall RtlUnicodeStringCatEx(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString, PUNICODE_STRING RemainingString, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringCatString(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszSrc);
NTSTATUS __stdcall RtlUnicodeStringCatStringEx(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszSrc, PUNICODE_STRING RemainingString, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringCbCatN(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString, size_t cbToAppend);
NTSTATUS __stdcall RtlUnicodeStringCbCatNEx(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString, size_t cbToAppend, PUNICODE_STRING RemainingString, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringCbCatStringN(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszSrc, size_t cbToAppend);
NTSTATUS __stdcall RtlUnicodeStringCbCatStringNEx(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszSrc, size_t cbToAppend, PUNICODE_STRING RemainingString, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringCbCopyN(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString, size_t cbToCopy);
NTSTATUS __stdcall RtlUnicodeStringCbCopyNEx(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString, size_t cbToCopy, PUNICODE_STRING RemainingString, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringCbCopyStringN(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszSrc, size_t cbToCopy);
NTSTATUS __stdcall RtlUnicodeStringCbCopyStringNEx(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszSrc, size_t cbToCopy, PUNICODE_STRING RemainingString, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringCchCatN(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString, size_t cchToAppend);
NTSTATUS __stdcall RtlUnicodeStringCchCatNEx(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString, size_t cchToAppend, PUNICODE_STRING RemainingString, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringCchCatStringN(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszSrc, size_t cchToAppend);
NTSTATUS __stdcall RtlUnicodeStringCchCatStringNEx(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszSrc, size_t cchToAppend, PUNICODE_STRING RemainingString, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringCchCopyN(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString, size_t cchToCopy);
NTSTATUS __stdcall RtlUnicodeStringCchCopyNEx(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString, size_t cchToCopy, PUNICODE_STRING RemainingString, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringCchCopyStringN(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszSrc, size_t cchToCopy);
NTSTATUS __stdcall RtlUnicodeStringCchCopyStringNEx(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszSrc, size_t cchToCopy, PUNICODE_STRING RemainingString, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringCopy(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString);
NTSTATUS __stdcall RtlUnicodeStringCopyEx(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString, PUNICODE_STRING RemainingString, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringCopyString(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszSrc);
NTSTATUS __stdcall RtlUnicodeStringCopyStringEx(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszSrc, PUNICODE_STRING RemainingString, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringExHandleFill(wchar_t *pszDestEnd, size_t cchRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringExHandleOtherFlags(wchar_t *pszDest, size_t cchDest, size_t cchOriginalDestLength, size_t *pcchNewDestLength, wchar_t **ppszDestEnd, size_t *pcchRemaining, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringInit(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszSrc);
NTSTATUS __stdcall RtlUnicodeStringInitEx(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszSrc, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringInitWorker(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszSrc, const size_t cchMax, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringToAnsiString(PANSI_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
NTSTATUS __stdcall RtlUnicodeStringToCountedOemString(POEM_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
NTSTATUS __stdcall RtlUnicodeStringToInt64(PCUNICODE_STRING String, ULONG Base, PLONG64 Number, PWSTR *EndPointer);
NTSTATUS __stdcall RtlUnicodeStringToInteger(PCUNICODE_STRING String, ULONG Base, PULONG Value);
NTSTATUS __stdcall RtlUnicodeStringToOemString(POEM_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
NTSTATUS __stdcall RtlUnicodeStringVPrintf(PUNICODE_STRING DestinationString, NTSTRSAFE_PCWSTR pszFormat, va_list argList);
NTSTATUS __stdcall RtlUnicodeStringVPrintfEx(PUNICODE_STRING DestinationString, PUNICODE_STRING RemainingString, ULONG dwFlags, NTSTRSAFE_PCWSTR pszFormat, va_list argList);
NTSTATUS __stdcall RtlUnicodeStringValidate(PCUNICODE_STRING SourceString);
NTSTATUS __stdcall RtlUnicodeStringValidateDestWorker(PCUNICODE_STRING DestinationString, wchar_t **ppszDest, size_t *pcchDest, size_t *pcchDestLength, const size_t cchMax, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringValidateEx(PCUNICODE_STRING SourceString, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringValidateSrcWorker(PCUNICODE_STRING SourceString, wchar_t **ppszSrc, size_t *pcchSrcLength, const size_t cchMax, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeStringValidateWorker(PCUNICODE_STRING SourceString, const size_t cchMax, ULONG dwFlags);
NTSTATUS __stdcall RtlUnicodeToCustomCPN(PCPTABLEINFO CustomCP, PCH CustomCPString, ULONG MaxBytesInCustomCPString, PULONG BytesInCustomCPString, PWCH UnicodeString, ULONG BytesInUnicodeString);
NTSTATUS __stdcall RtlUnicodeToMultiByteN(PCHAR MultiByteString, ULONG MaxBytesInMultiByteString, PULONG BytesInMultiByteString, PCWCH UnicodeString, ULONG BytesInUnicodeString);
NTSTATUS __stdcall RtlUnicodeToMultiByteSize(PULONG BytesInMultiByteString, PCWCH UnicodeString, ULONG BytesInUnicodeString);
NTSTATUS __stdcall RtlUnicodeToOemN(PCHAR OemString, ULONG MaxBytesInOemString, PULONG BytesInOemString, PCWCH UnicodeString, ULONG BytesInUnicodeString);
NTSTATUS __stdcall RtlUnicodeToUTF8N(PCHAR UTF8StringDestination, ULONG UTF8StringMaxByteCount, PULONG UTF8StringActualByteCount, PCWCH UnicodeStringSource, ULONG UnicodeStringByteCount);
NTSTATUS __stdcall RtlUpcaseUnicodeString(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
NTSTATUS __stdcall RtlUpcaseUnicodeStringToCountedOemString(POEM_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
NTSTATUS __stdcall RtlUpcaseUnicodeStringToOemString(POEM_STRING DestinationString, PCUNICODE_STRING SourceString, BOOLEAN AllocateDestinationString);
NTSTATUS __stdcall RtlUpcaseUnicodeToCustomCPN(PCPTABLEINFO CustomCP, PCH CustomCPString, ULONG MaxBytesInCustomCPString, PULONG BytesInCustomCPString, PWCH UnicodeString, ULONG BytesInUnicodeString);
NTSTATUS __stdcall RtlUpcaseUnicodeToMultiByteN(PCHAR MultiByteString, ULONG MaxBytesInMultiByteString, PULONG BytesInMultiByteString, PCWCH UnicodeString, ULONG BytesInUnicodeString);
NTSTATUS __stdcall RtlUpcaseUnicodeToOemN(PCHAR OemString, ULONG MaxBytesInOemString, PULONG BytesInOemString, PCWCH UnicodeString, ULONG BytesInUnicodeString);
NTSTATUS __stdcall RtlValidateCorrelationVector(PCORRELATION_VECTOR Vector);
NTSTATUS __stdcall RtlValidateUnicodeString(ULONG Flags, PCUNICODE_STRING String);
NTSTATUS __stdcall RtlVerifyVersionInfo(PRTL_OSVERSIONINFOEXW VersionInfo, ULONG TypeMask, ULONGLONG ConditionMask);
NTSTATUS __stdcall RtlVolumeDeviceToDosName(PVOID VolumeDeviceObject, PUNICODE_STRING DosName);
NTSTATUS __stdcall RtlWideCharArrayCopyStringWorker(wchar_t *pszDest, size_t cchDest, size_t *pcchNewDestLength, NTSTRSAFE_PCWSTR pszSrc, size_t cchToCopy);
NTSTATUS __stdcall RtlWideCharArrayCopyWorker(wchar_t *pszDest, size_t cchDest, size_t *pcchNewDestLength, const wchar_t *pszSrc, size_t cchSrcLength);
NTSTATUS __stdcall RtlWideCharArrayVPrintfWorker(wchar_t *pszDest, size_t cchDest, size_t *pcchNewDestLength, NTSTRSAFE_PCWSTR pszFormat, va_list argList);
NTSTATUS __stdcall RtlWriteNonVolatileMemory(PVOID NvToken, void *NvDestination, const void *Source, SIZE_T Size, ULONG Flags);
NTSTATUS __stdcall RtlWriteRegistryValue(ULONG RelativeTo, PCWSTR Path, PCWSTR ValueName, ULONG ValueType, PVOID ValueData, ULONG ValueLength);
NTSTATUS __stdcall RtlxQueryRegistryValues(ULONG RelativeTo, PCWSTR Path, PRTL_QUERY_REGISTRY_TABLE QueryTable, PVOID Context, PVOID Environment);
NTSTATUS __stdcall RxAcquireExclusiveFcbResourceInMRx(PMRX_FCB Fcb);
NTSTATUS __stdcall RxAcquireForCcFlush(PFILE_OBJECT FileObject, PDEVICE_OBJECT DeviceObject);
NTSTATUS __stdcall RxAcquireSharedFcbResourceInMRx(PMRX_FCB Fcb);
NTSTATUS __stdcall RxAcquireSharedFcbResourceInMRxEx(PRX_CONTEXT pRxContext, PMRX_FCB Fcb);
NTSTATUS __stdcall RxAssociateContextWithMid(PRX_MID_ATLAS MidAtlas, PVOID Context, PUSHORT NewMid);
NTSTATUS __stdcall RxCancelNotifyChangeDirectoryRequestsForVNetRoot(PV_NET_ROOT VNetRoot, BOOLEAN ForceFilesClosed);
NTSTATUS __stdcall RxCancelTimerRequest(PRDBSS_DEVICE_OBJECT pDeviceObject, PRX_WORKERTHREAD_ROUTINE Routine, PVOID pContext);
NTSTATUS __stdcall RxCeBuildAddress(PRXCE_ADDRESS pAddress, PRXCE_TRANSPORT pTransport, PTRANSPORT_ADDRESS pTransportAddress, PRXCE_ADDRESS_EVENT_HANDLER pHandler, PVOID pEventContext);
NTSTATUS __stdcall RxCeBuildConnection(PRXCE_ADDRESS pLocalAddress, PRXCE_CONNECTION_INFORMATION pConnectionInformation, PRXCE_CONNECTION_EVENT_HANDLER pHandler, PVOID pEventContext, PRXCE_CONNECTION pConnection, PRXCE_VC pVc);
NTSTATUS __stdcall RxCeBuildConnectionOverMultipleTransports(PRDBSS_DEVICE_OBJECT pMiniRedirectorDeviceObject, RXCE_CONNECTION_CREATE_OPTIONS CreateOption, ULONG NumberOfAddresses, PRXCE_ADDRESS *pLocalAddressPointers, PUNICODE_STRING pServerName, PRXCE_CONNECTION_INFORMATION pConnectionInformation, PRXCE_CONNECTION_EVENT_HANDLER pHandler, PVOID pEventContext, PRXCE_CONNECTION_COMPLETION_ROUTINE pCompletionRoutine, PRXCE_CONNECTION_COMPLETION_CONTEXT pCompletionContext);
NTSTATUS __stdcall RxCeBuildTransport(PRXCE_TRANSPORT pRxCeTransport, PUNICODE_STRING pTransportName, ULONG QualityOfService);
NTSTATUS __stdcall RxCeBuildVC(PRXCE_VC pVc, PRXCE_CONNECTION Connection);
NTSTATUS __stdcall RxCeCancelConnectRequest(PRXCE_ADDRESS pLocalAddress, PUNICODE_STRING pServerName, PRXCE_CONNECTION_INFORMATION pConnectionInformation);
NTSTATUS __stdcall RxCeInitiateConnectRequest(PRX_CALLOUT_PARAMETERS_BLOCK ParameterBlock);
NTSTATUS __stdcall RxCeInitiateVCDisconnect(PRXCE_VC pVc);
NTSTATUS __stdcall RxCeQueryAdapterStatus(PRXCE_TRANSPORT pTransport, struct _ADAPTER_STATUS *pAdapterStatus);
NTSTATUS __stdcall RxCeQueryInformation(PRXCE_VC pVc, RXCE_CONNECTION_INFORMATION_CLASS InformationClass, PVOID pInformation, ULONG Length);
NTSTATUS __stdcall RxCeQueryTransportInformation(PRXCE_TRANSPORT pTransport, PRXCE_TRANSPORT_INFORMATION pTransportInformation);
NTSTATUS __stdcall RxCeSend(PRXCE_VC pVc, ULONG SendOptions, PMDL pMdl, ULONG SendLength, PVOID pCompletionContext);
NTSTATUS __stdcall RxCeSendDatagram(PRXCE_ADDRESS hAddress, PRXCE_CONNECTION_INFORMATION pConnectionInformation, ULONG SendOptions, PMDL pMdl, ULONG SendLength, PVOID pCompletionContext);
NTSTATUS __stdcall RxCeTearDownAddress(PRXCE_ADDRESS pAddress);
NTSTATUS __stdcall RxCeTearDownConnection(PRXCE_CONNECTION pConnection);
NTSTATUS __stdcall RxCeTearDownTransport(PRXCE_TRANSPORT pTransport);
NTSTATUS __stdcall RxCeTearDownVC(PRXCE_VC pVc);
NTSTATUS __stdcall RxCepInitializeConnection(PRXCE_CONNECTION Connection, PRXCE_ADDRESS Address, PRXCE_CONNECTION_INFORMATION ConnectionInformation, PRXCE_CONNECTION_EVENT_HANDLER Handler, PVOID EventContext);
NTSTATUS __stdcall RxCepInitializeVC(PRXCE_VC Vc, PRXCE_CONNECTION Connection);
NTSTATUS __stdcall RxChangeBufferingState(PSRV_OPEN SrvOpen, PVOID Context, BOOLEAN ComputeNewState);
NTSTATUS __stdcall RxCheckShareAccessPerSrvOpens(PFCB Fcb, ACCESS_MASK DesiredAccess, ULONG DesiredShareAccess);
NTSTATUS __stdcall RxCloseAssociatedSrvOpen(PRX_CONTEXT RxContext, PFOBX Fobx);
NTSTATUS __stdcall RxCompleteMdl(PRX_CONTEXT RxContext, PIRP Irp);
NTSTATUS __stdcall RxCompleteRequest(PRX_CONTEXT pContext, NTSTATUS Status);
NTSTATUS __stdcall RxConstructNetRoot(PRX_CONTEXT RxContext, PSRV_CALL SrvCall, PNET_ROOT NetRoot, PV_NET_ROOT VirtualNetRoot, PLOCK_HOLDING_STATE LockHoldingState);
NTSTATUS __stdcall RxConstructSrvCall(PRX_CONTEXT RxContext, PIRP Irp, PSRV_CALL SrvCall, PLOCK_HOLDING_STATE LockHoldingState);
NTSTATUS __stdcall RxConstructVirtualNetRoot(PRX_CONTEXT RxContext, PIRP Irp, PUNICODE_STRING CanonicalName, NET_ROOT_TYPE NetRootType, BOOLEAN TreeConnect, PV_NET_ROOT *VirtualNetRootPointer, PLOCK_HOLDING_STATE LockHoldingState, PRX_CONNECTION_ID RxConnectionId);
NTSTATUS __stdcall RxDispatchToWorkerThread(PRDBSS_DEVICE_OBJECT pMRxDeviceObject, WORK_QUEUE_TYPE WorkQueueType, PRX_WORKERTHREAD_ROUTINE Routine, PVOID pContext);
NTSTATUS __stdcall RxDriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath);
NTSTATUS __stdcall RxFcbTableInsertFcb(PRX_FCB_TABLE FcbTable, PFCB Fcb);
NTSTATUS __stdcall RxFcbTableRemoveFcb(PRX_FCB_TABLE FcbTable, PFCB Fcb);
NTSTATUS __stdcall RxFinalizeConnection(PNET_ROOT NetRoot, PV_NET_ROOT VNetRoot, LOGICAL ForceFilesClosed);
NTSTATUS __stdcall RxFindOrConstructVirtualNetRoot(PRX_CONTEXT RxContext, PIRP Irp, PUNICODE_STRING CanonicalName, NET_ROOT_TYPE NetRootType, PUNICODE_STRING RemainingName);
NTSTATUS __stdcall RxFindOrCreateConnections(PRX_CONTEXT RxContext, PIRP Irp, PUNICODE_STRING CanonicalName, NET_ROOT_TYPE NetRootType, BOOLEAN TreeConnect, PUNICODE_STRING LocalNetRootName, PUNICODE_STRING FilePathName, PLOCK_HOLDING_STATE LockState, PRX_CONNECTION_ID RxConnectionId);
NTSTATUS __stdcall RxFlushFcbInSystemCache(PFCB Fcb, BOOLEAN SynchronizeWithLazyWriter);
NTSTATUS __stdcall RxFsdDispatch(PRDBSS_DEVICE_OBJECT RxDeviceObject, PIRP Irp);
NTSTATUS __stdcall RxFsdPostRequest(PRX_CONTEXT RxContext);
NTSTATUS __stdcall RxInitializeBufferingManager(PSRV_CALL SrvCall);
NTSTATUS __stdcall RxInitializeDispatcher();
NTSTATUS __stdcall RxInitializeMRxDispatcher(PRDBSS_DEVICE_OBJECT pMRxDeviceObject);
NTSTATUS __stdcall RxInitializeRxTimer();
NTSTATUS __stdcall RxInitializeSrvCallParameters(PRX_CONTEXT RxContext, PSRV_CALL SrvCall);
NTSTATUS __stdcall RxInitializeVNetRootParameters(PRX_CONTEXT RxContext, LUID *LogonId, PULONG SessionId, PUNICODE_STRING *UserNamePtr, PUNICODE_STRING *UserDomainNamePtr, PUNICODE_STRING *PasswordPtr, PULONG Flags);
NTSTATUS __stdcall RxInitializeWorkQueueDispatcher(PRX_WORK_QUEUE_DISPATCHER Dispatcher);
NTSTATUS __stdcall RxLockOperationCompletion(PVOID Context, PIRP Irp);
NTSTATUS __stdcall RxLowIoCompletion(PRX_CONTEXT RxContext);
NTSTATUS __stdcall RxLowIoCompletionTail(PRX_CONTEXT RxContext);
NTSTATUS __stdcall RxLowIoFsCtlShell(PRX_CONTEXT RxContext, PIRP Irp, PFCB Fcb, PFOBX Fobx);
NTSTATUS __stdcall RxLowIoFsCtlShellCompletion(PRX_CONTEXT RxContext);
NTSTATUS __stdcall RxLowIoLockControlShell(PRX_CONTEXT RxContext, PIRP Irp, PFCB Fcb);
NTSTATUS __stdcall RxLowIoPopulateFsctlInfo(PRX_CONTEXT RxContext, PIRP Irp);
NTSTATUS __stdcall RxLowIoSubmit(PRX_CONTEXT RxContext, PIRP Irp, PFCB Fcb, PLOWIO_COMPLETION_ROUTINE CompletionRoutine);
NTSTATUS __stdcall RxLowIoSubmitRETRY(PRX_CONTEXT RxContext, PIRP Irp);
NTSTATUS __stdcall RxMapAndDissociateMidFromContext(PRX_MID_ATLAS MidAtlas, USHORT Mid, PVOID *ContextPointer);
NTSTATUS __stdcall RxPostOneShotTimerRequest(PRDBSS_DEVICE_OBJECT pDeviceObject, PRX_WORK_ITEM pWorkItem, PRX_WORKERTHREAD_ROUTINE Routine, PVOID pContext, LARGE_INTEGER TimeInterval);
NTSTATUS __stdcall RxPostRecurrentTimerRequest(PRDBSS_DEVICE_OBJECT pDeviceObject, PRX_WORKERTHREAD_ROUTINE Routine, PVOID pContext, LARGE_INTEGER TimeInterval);
NTSTATUS __stdcall RxPostStackOverflowRead(PRX_CONTEXT RxContext, PFCB Fcb);
NTSTATUS __stdcall RxPostToWorkerThread(PRDBSS_DEVICE_OBJECT pMRxDeviceObject, WORK_QUEUE_TYPE WorkQueueType, PRX_WORK_QUEUE_ITEM pWorkQueueItem, PRX_WORKERTHREAD_ROUTINE Routine, PVOID pContext);
NTSTATUS __stdcall RxPrefixClaim(PRX_CONTEXT RxContext);
NTSTATUS __stdcall RxPrepareRequestForHandling(PCHANGE_BUFFERING_STATE_REQUEST Request);
NTSTATUS __stdcall RxPrepareToReparseSymbolicLink(PRX_CONTEXT RxContext, BOOLEAN SymbolicLinkEmbeddedInOldPath, PUNICODE_STRING NewPath, BOOLEAN NewPathIsAbsolute, PBOOLEAN ReparseRequired);
NTSTATUS __stdcall RxProcessException(PRX_CONTEXT RxContext, NTSTATUS ExceptionCode);
NTSTATUS __stdcall RxPurgeFcbInSystemCache(PFCB Fcb, PLARGE_INTEGER FileOffset, ULONG Length, BOOLEAN UninitializeCacheMaps, BOOLEAN FlushFile);
NTSTATUS __stdcall RxPurgeFobxFromCache(PFOBX FobxToBePurged);
NTSTATUS __stdcall RxPurgeRelatedFobxs(PNET_ROOT NetRoot, PRX_CONTEXT RxContext, BOOLEAN AttemptFinalization, PFCB PurgingFcb);
NTSTATUS __stdcall RxReassociateMid(PRX_MID_ATLAS MidAtlas, USHORT Mid, PVOID NewContext);
NTSTATUS __stdcall RxRegisterAsynchronousRequest(PRDBSS_DEVICE_OBJECT RxDeviceObject);
NTSTATUS __stdcall RxRegisterMinirdr(PRDBSS_DEVICE_OBJECT *DeviceObject, PDRIVER_OBJECT DriverObject, PMINIRDR_DISPATCH MrdrDispatch, ULONG Controls, PUNICODE_STRING DeviceName, ULONG DeviceExtensionSize, ULONG DeviceType, ULONG DeviceCharacteristics);
NTSTATUS __stdcall RxReleaseForCcFlush(PFILE_OBJECT FileObject, PDEVICE_OBJECT DeviceObject);
NTSTATUS __stdcall RxSetDomainForMailslotBroadcast(PUNICODE_STRING DomainName);
NTSTATUS __stdcall RxSetMinirdrCancelRoutine(PRX_CONTEXT RxContext, PMRX_CALLDOWN MRxCancelRoutine);
NTSTATUS __stdcall RxSetSrvCallDomainName(PMRX_SRV_CALL SrvCall, PUNICODE_STRING DomainName);
NTSTATUS __stdcall RxShadowFastLowIo(PRX_CONTEXT RxContext, PIRP Irp);
NTSTATUS __stdcall RxShadowLowIo(PRX_CONTEXT RxContext, PIRP Irp, PFCB Fcb);
NTSTATUS __stdcall RxSpinDownMRxDispatcher(PRDBSS_DEVICE_OBJECT pMRxDeviceObject);
NTSTATUS __stdcall RxSpinUpWorkerThread(PRX_WORK_QUEUE WorkQueue, PRX_WORKERTHREAD_ROUTINE Routine, PVOID Parameter);
NTSTATUS __stdcall RxStartMinirdr(PRX_CONTEXT RxContext, PBOOLEAN PostToFsp);
NTSTATUS __stdcall RxStopMinirdr(PRX_CONTEXT RxContext, PBOOLEAN PostToFsp);
NTSTATUS __stdcall RxTearDownBufferingManager(PSRV_CALL SrvCall);
NTSTATUS __stdcall RxTearDownDispatcher();
NTSTATUS __stdcall RxpLookupSrvOpenForRequestLite(PSRV_CALL SrvCall, PCHANGE_BUFFERING_STATE_REQUEST Request);
NTSTATUS __stdcall ScUtil_Cancel(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ScUtil_Cleanup(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ScUtil_CreateClose(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ScUtil_DeviceIOControl(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ScUtil_ForwardAndWait(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ScUtil_Initialize(SCUTIL_HANDLE UtilHandle, PDEVICE_OBJECT PhysicalDeviceObject, PDEVICE_OBJECT LowerDeviceObject, PSMARTCARD_EXTENSION SmartcardExtension, PIO_REMOVE_LOCK RemoveLock, PNP_CALLBACK StartDevice, PNP_CALLBACK StopDevice, PNP_CALLBACK RemoveDevice, PNP_CALLBACK FreeResources, POWER_CALLBACK SetPowerState);
NTSTATUS __stdcall ScUtil_PnP(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ScUtil_Power(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ScUtil_SystemControl(PDEVICE_OBJECT DeviceObject, PIRP Irp);
NTSTATUS __stdcall ScUtil_UnloadDriver(PDRIVER_OBJECT DriverObject);
NTSTATUS __stdcall SdBusOpenInterface(PDEVICE_OBJECT Pdo, PSDBUS_INTERFACE_STANDARD InterfaceStandard, USHORT Size, USHORT Version);
NTSTATUS __stdcall SdBusSubmitRequest(PVOID InterfaceContext, PSDBUS_REQUEST_PACKET Packet);
NTSTATUS __stdcall SdBusSubmitRequestAsync(PVOID InterfaceContext, PSDBUS_REQUEST_PACKET Packet, PIRP Irp, PIO_COMPLETION_ROUTINE CompletionRoutine, PVOID UserContext);
NTSTATUS __stdcall SdPortGetPciConfigSpace(PSD_MINIPORT Miniport, UCHAR Offset, PUCHAR Buffer, ULONG Length);
NTSTATUS __stdcall SdPortInitialize(PVOID Argument1, PVOID Argument2, PSDPORT_INITIALIZATION_DATA InitializationData);
NTSTATUS __stdcall SdPortPoFxPowerControl(PVOID PrivateExtension, LPCGUID PowerControlCode, PVOID InBuffer, SIZE_T InBufferSize, PVOID OutBuffer, SIZE_T OutBufferSize, PSIZE_T BytesReturned);
NTSTATUS __stdcall SdPortSetPciConfigSpace(PSD_MINIPORT Miniport, UCHAR Offset, PUCHAR Buffer, ULONG Length);
NTSTATUS __stdcall SdpAddAttributeToTree(PSDP_TREE_ROOT_NODE Tree, USHORT AttribId, PSDP_NODE AttribValue, ULONG tag);
NTSTATUS __stdcall SdpAppendNodeToContainerNode(PSDP_NODE Parent, PSDP_NODE Node);
NTSTATUS __stdcall SdpFindAttributeInTree(PSDP_TREE_ROOT_NODE Tree, USHORT AttribId, PSDP_NODE *Attribute);
NTSTATUS __stdcall SdpFreeTree(PSDP_TREE_ROOT_NODE Tree);
NTSTATUS __stdcall SeAdjustObjectSecurity(PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR OriginalDescriptor, PSECURITY_DESCRIPTOR ProposedDescriptor, PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext, PSECURITY_DESCRIPTOR *AdjustedDescriptor, PBOOLEAN ApplyAdjustedDescriptor);
NTSTATUS __stdcall SeAppendPrivileges(PACCESS_STATE AccessState, PPRIVILEGE_SET Privileges);
NTSTATUS __stdcall SeAssignSecurity(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR ExplicitDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, BOOLEAN IsDirectoryObject, PSECURITY_SUBJECT_CONTEXT SubjectContext, PGENERIC_MAPPING GenericMapping, POOL_TYPE PoolType);
NTSTATUS __stdcall SeAssignSecurityEx(PSECURITY_DESCRIPTOR ParentDescriptor, PSECURITY_DESCRIPTOR ExplicitDescriptor, PSECURITY_DESCRIPTOR *NewDescriptor, GUID *ObjectType, BOOLEAN IsDirectoryObject, ULONG AutoInheritFlags, PSECURITY_SUBJECT_CONTEXT SubjectContext, PGENERIC_MAPPING GenericMapping, POOL_TYPE PoolType);
NTSTATUS __stdcall SeCreateClientSecurity(PETHREAD ClientThread, PSECURITY_QUALITY_OF_SERVICE ClientSecurityQos, BOOLEAN RemoteSession, PSECURITY_CLIENT_CONTEXT ClientContext);
NTSTATUS __stdcall SeCreateClientSecurityFromSubjectContext(PSECURITY_SUBJECT_CONTEXT SubjectContext, PSECURITY_QUALITY_OF_SERVICE ClientSecurityQos, BOOLEAN ServerIsRemote, PSECURITY_CLIENT_CONTEXT ClientContext);
NTSTATUS __stdcall SeDeassignSecurity(PSECURITY_DESCRIPTOR *SecurityDescriptor);
NTSTATUS __stdcall SeEtwWriteKMCveEvent(PCUNICODE_STRING CveId, PCUNICODE_STRING AdditionalDetails);
NTSTATUS __stdcall SeFilterToken(PACCESS_TOKEN ExistingToken, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PACCESS_TOKEN *FilteredToken);
NTSTATUS __stdcall SeImpersonateClientEx(PSECURITY_CLIENT_CONTEXT ClientContext, PETHREAD ServerThread);
NTSTATUS __stdcall SeLocateProcessImageName(PEPROCESS Process, PUNICODE_STRING *pImageFileName);
NTSTATUS __stdcall SeMarkLogonSessionForTerminationNotification(PLUID LogonId);
NTSTATUS __stdcall SeMarkLogonSessionForTerminationNotificationEx(PLUID LogonId, PESILO pServerSilo);
NTSTATUS __stdcall SeQueryAuthenticationIdToken(PACCESS_TOKEN Token, PLUID AuthenticationId);
NTSTATUS __stdcall SeQueryInformationToken(PACCESS_TOKEN Token, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID *TokenInformation);
NTSTATUS __stdcall SeQuerySecurityDescriptorInfo(PSECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, PULONG Length, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor);
NTSTATUS __stdcall SeQueryServerSiloToken(PACCESS_TOKEN Token, PESILO *pServerSilo);
NTSTATUS __stdcall SeQuerySessionIdToken(PACCESS_TOKEN Token, PULONG SessionId);
NTSTATUS __stdcall SeQuerySessionIdTokenEx(PACCESS_TOKEN Token, PULONG SessionId, PBOOLEAN IsServiceSession);
NTSTATUS __stdcall SeRegisterImageVerificationCallback(SE_IMAGE_TYPE ImageType, SE_IMAGE_VERIFICATION_CALLBACK_TYPE CallbackType, PSE_IMAGE_VERIFICATION_CALLBACK_FUNCTION CallbackFunction, PVOID CallbackContext, SE_IMAGE_VERIFICATION_CALLBACK_TOKEN Token, PVOID *CallbackHandle);
NTSTATUS __stdcall SeRegisterLogonSessionTerminatedRoutine(PSE_LOGON_SESSION_TERMINATED_ROUTINE CallbackRoutine);
NTSTATUS __stdcall SeRegisterLogonSessionTerminatedRoutineEx(PSE_LOGON_SESSION_TERMINATED_ROUTINE_EX CallbackRoutine, PVOID Context);
NTSTATUS __stdcall SeReportSecurityEvent(ULONG Flags, PUNICODE_STRING SourceName, PSID UserSid, PSE_ADT_PARAMETER_ARRAY AuditParameters);
NTSTATUS __stdcall SeReportSecurityEventWithSubCategory(ULONG Flags, PUNICODE_STRING SourceName, PSID UserSid, PSE_ADT_PARAMETER_ARRAY AuditParameters, ULONG AuditSubcategoryId);
NTSTATUS __stdcall SeSetAuditParameter(PSE_ADT_PARAMETER_ARRAY AuditParameters, SE_ADT_PARAMETER_TYPE Type, ULONG Index, PVOID Data);
NTSTATUS __stdcall SeSetSecurityDescriptorInfo(PVOID Object, PSECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, POOL_TYPE PoolType, PGENERIC_MAPPING GenericMapping);
NTSTATUS __stdcall SeSetSecurityDescriptorInfoEx(PVOID Object, PSECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR ModificationDescriptor, PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, ULONG AutoInheritFlags, POOL_TYPE PoolType, PGENERIC_MAPPING GenericMapping);
NTSTATUS __stdcall SeSetSessionIdToken(PACCESS_TOKEN Token, ULONG SessionId);
NTSTATUS __stdcall SeTokenFromAccessInformation(PTOKEN_ACCESS_INFORMATION AccessInformation, PACCESS_TOKEN Token, ULONG Length, PULONG RequiredLength);
NTSTATUS __stdcall SeUnregisterLogonSessionTerminatedRoutine(PSE_LOGON_SESSION_TERMINATED_ROUTINE CallbackRoutine);
NTSTATUS __stdcall SeUnregisterLogonSessionTerminatedRoutineEx(PSE_LOGON_SESSION_TERMINATED_ROUTINE_EX CallbackRoutine, PVOID Context);
NTSTATUS __stdcall SecLookupAccountName(PUNICODE_STRING Name, PULONG SidSize, PSID Sid, PSID_NAME_USE NameUse, PULONG DomainSize, PUNICODE_STRING ReferencedDomain);
NTSTATUS __stdcall SecLookupAccountSid(PSID Sid, PULONG NameSize, PUNICODE_STRING NameBuffer, PULONG DomainSize, PUNICODE_STRING DomainBuffer, PSID_NAME_USE NameUse);
NTSTATUS __stdcall SecLookupWellKnownSid(WELL_KNOWN_SID_TYPE SidType, PSID Sid, ULONG SidBufferSize, PULONG SidSize);
NTSTATUS __stdcall SecMakeSPN(PUNICODE_STRING ServiceClass, PUNICODE_STRING ServiceName, PUNICODE_STRING InstanceName, USHORT InstancePort, PUNICODE_STRING Referrer, PUNICODE_STRING Spn, PULONG Length, BOOLEAN Allocate);
NTSTATUS __stdcall SecMakeSPNEx(PUNICODE_STRING ServiceClass, PUNICODE_STRING ServiceName, PUNICODE_STRING InstanceName, USHORT InstancePort, PUNICODE_STRING Referrer, PUNICODE_STRING TargetInfo, PUNICODE_STRING Spn, PULONG Length, BOOLEAN Allocate);
NTSTATUS __stdcall SecMakeSPNEx2(PUNICODE_STRING ServiceClass, PUNICODE_STRING ServiceName, PUNICODE_STRING InstanceName, USHORT InstancePort, PUNICODE_STRING Referrer, PUNICODE_STRING InTargetInfo, PUNICODE_STRING Spn, PULONG TotalSize, BOOLEAN Allocate, BOOLEAN IsTargetInfoMarshaled);
NTSTATUS __stdcall SerCx2CustomReceiveCreate(WDFDEVICE Device, PSERCX2_CUSTOM_RECEIVE_CONFIG CustomReceiveConfig, PWDF_OBJECT_ATTRIBUTES Attributes, SERCX2CUSTOMRECEIVE *CustomReceive);
NTSTATUS __stdcall SerCx2CustomReceiveTransactionCreate(SERCX2CUSTOMRECEIVE CustomReceive, PSERCX2_CUSTOM_RECEIVE_TRANSACTION_CONFIG CustomReceiveTransactionConfig, PWDF_OBJECT_ATTRIBUTES Attributes, SERCX2CUSTOMRECEIVETRANSACTION *CustomReceiveTransaction);
NTSTATUS __stdcall SerCx2CustomTransmitCreate(WDFDEVICE Device, PSERCX2_CUSTOM_TRANSMIT_CONFIG CustomTransmitConfig, PWDF_OBJECT_ATTRIBUTES Attributes, SERCX2CUSTOMTRANSMIT *CustomTransmit);
NTSTATUS __stdcall SerCx2CustomTransmitTransactionCreate(SERCX2CUSTOMTRANSMIT CustomTransmit, PSERCX2_CUSTOM_TRANSMIT_TRANSACTION_CONFIG CustomTransmitTransactionConfig, PWDF_OBJECT_ATTRIBUTES Attributes, SERCX2CUSTOMTRANSMITTRANSACTION *CustomTransmitTransaction);
NTSTATUS __stdcall SerCx2InitializeDevice(WDFDEVICE Device, PSERCX2_CONFIG Config);
NTSTATUS __stdcall SerCx2InitializeDeviceInit(PWDFDEVICE_INIT DeviceInit);
NTSTATUS __stdcall SerCx2PioReceiveCreate(WDFDEVICE Device, PSERCX2_PIO_RECEIVE_CONFIG PioReceiveConfig, PWDF_OBJECT_ATTRIBUTES Attributes, SERCX2PIORECEIVE *PioReceive);
NTSTATUS __stdcall SerCx2PioTransmitCreate(WDFDEVICE Device, PSERCX2_PIO_TRANSMIT_CONFIG PioTransmitConfig, PWDF_OBJECT_ATTRIBUTES Attributes, SERCX2PIOTRANSMIT *PioTransmit);
NTSTATUS __stdcall SerCx2SystemDmaReceiveCreate(WDFDEVICE Device, PSERCX2_SYSTEM_DMA_RECEIVE_CONFIG SystemDmaReceiveConfig, PWDF_OBJECT_ATTRIBUTES Attributes, SERCX2SYSTEMDMARECEIVE *SystemDmaReceive);
NTSTATUS __stdcall SerCx2SystemDmaTransmitCreate(WDFDEVICE Device, PSERCX2_SYSTEM_DMA_TRANSMIT_CONFIG SystemDmaTransmitConfig, PWDF_OBJECT_ATTRIBUTES Attributes, SERCX2SYSTEMDMATRANSMIT *SystemDmaTransmit);
NTSTATUS __stdcall SetCurrentThreadCompartmentId(NET_IF_COMPARTMENT_ID CompartmentId);
NTSTATUS __stdcall SetCurrentThreadCompartmentScope(NET_IF_COMPARTMENT_SCOPE CompartmentScope);
NTSTATUS __stdcall SetDnsSettings(const DNS_SETTINGS *Settings);
NTSTATUS __stdcall SetInterfaceDnsSettings(GUID Interface, const DNS_INTERFACE_SETTINGS *Settings);
NTSTATUS __stdcall SetIpForwardEntry2(const MIB_IPFORWARD_ROW2 *Route);
NTSTATUS __stdcall SetIpInterfaceEntry(PMIB_IPINTERFACE_ROW Row);
NTSTATUS __stdcall SetIpNetEntry2(PMIB_IPNET_ROW2 Row);
NTSTATUS __stdcall SetJobCompartmentId(HANDLE JobHandle, NET_IF_COMPARTMENT_ID CompartmentId);
NTSTATUS __stdcall SetNetworkInformation(const NET_IF_NETWORK_GUID *NetworkGuid, NET_IF_COMPARTMENT_ID CompartmentId, const WCHAR *NetworkName);
NTSTATUS __stdcall SetSessionCompartmentId(ULONG SessionId, NET_IF_COMPARTMENT_ID CompartmentId);
NTSTATUS __stdcall SetUnicastIpAddressEntry(const MIB_UNICASTIPADDRESS_ROW *Row);
NTSTATUS __stdcall SmartcardAcquireRemoveLock(PSMARTCARD_EXTENSION SmartcardExtension);
NTSTATUS __stdcall SmartcardAcquireRemoveLockWithTag(PSMARTCARD_EXTENSION SmartcardExtension, ULONG Tag);
NTSTATUS __stdcall SmartcardCreateLink(PUNICODE_STRING LinkName, PUNICODE_STRING DeviceName);
NTSTATUS __stdcall SmartcardDeviceControl(PSMARTCARD_EXTENSION SmartcardExtension, PIRP Irp);
NTSTATUS __stdcall SmartcardInitialize(PSMARTCARD_EXTENSION SmartcardExtension);
NTSTATUS __stdcall SmartcardRawReply(PSMARTCARD_EXTENSION SmartcardExtension);
NTSTATUS __stdcall SmartcardRawRequest(PSMARTCARD_EXTENSION SmartcardExtension);
NTSTATUS __stdcall SmartcardT0Reply(PSMARTCARD_EXTENSION SmartcardExtension);
NTSTATUS __stdcall SmartcardT0Request(PSMARTCARD_EXTENSION SmartcardExtension);
NTSTATUS __stdcall SmartcardT1Reply(PSMARTCARD_EXTENSION SmartcardExtension);
NTSTATUS __stdcall SmartcardT1Request(PSMARTCARD_EXTENSION SmartcardExtension);
NTSTATUS __stdcall SmartcardUpdateCardCapabilities(PSMARTCARD_EXTENSION SmartcardExtension);
NTSTATUS __stdcall SpbDeviceInitConfig(WDFDEVICE_INIT *DeviceInit);
NTSTATUS __stdcall SpbDeviceInitialize(WDFDEVICE FxDevice, PSPB_CONTROLLER_CONFIG Config);
NTSTATUS __stdcall SpbRequestCaptureIoOtherTransferList(SPBREQUEST Request);
NTSTATUS __stdcall SspiReinitAsyncContext(SspiAsyncContext *Handle);
NTSTATUS __stdcall StreamClassRegisterAdapter(PVOID Argument1, PVOID Argument2, PHW_INITIALIZATION_DATA HwInitializationData);
NTSTATUS __stdcall StreamClassRegisterFilterWithNoKSPins(PDEVICE_OBJECT DeviceObject, const GUID *InterfaceClassGUID, ULONG PinCount, BOOL *PinDirection, KSPIN_MEDIUM *MediumList, GUID *CategoryList);
NTSTATUS __stdcall TdiBuildNetbiosAddressEa(PUCHAR Buffer, BOOLEAN IsGroupName, PUCHAR NetbiosName);
NTSTATUS __stdcall TdiCopyBufferToMdl(PVOID SourceBuffer, ULONG SourceOffset, ULONG SourceBytesToCopy, PMDL DestinationMdlChain, ULONG DestinationOffset, PULONG BytesCopied);
NTSTATUS __stdcall TdiCopyMdlChainToMdlChain(PMDL SourceMdlChain, ULONG SourceOffset, PMDL DestinationMdlChain, ULONG DestinationOffset, PULONG BytesCopied);
NTSTATUS __stdcall TdiCopyMdlToBuffer(PMDL SourceMdlChain, ULONG SourceOffset, PVOID DestinationBuffer, ULONG DestinationOffset, ULONG DestinationBufferSize, PULONG BytesCopied);
NTSTATUS __stdcall TdiDefaultChainedRcvDatagramHandler(PVOID TdiEventContext, LONG SourceAddressLength, PVOID SourceAddress, LONG OptionsLength, PVOID Options, ULONG ReceiveDatagramFlags, ULONG ReceiveDatagramLength, ULONG StartingOffset, PMDL Tsdu, PVOID TsduDescriptor);
NTSTATUS __stdcall TdiDefaultChainedRcvExpeditedHandler(PVOID TdiEventContext, CONNECTION_CONTEXT ConnectionContext, ULONG ReceiveFlags, ULONG ReceiveLength, ULONG StartingOffset, PMDL Tsdu, PVOID TsduDescriptor);
NTSTATUS __stdcall TdiDefaultChainedReceiveHandler(PVOID TdiEventContext, CONNECTION_CONTEXT ConnectionContext, ULONG ReceiveFlags, ULONG ReceiveLength, ULONG StartingOffset, PMDL Tsdu, PVOID TsduDescriptor);
NTSTATUS __stdcall TdiDefaultConnectHandler(PVOID TdiEventContext, LONG RemoteAddressLength, PVOID RemoteAddress, LONG UserDataLength, PVOID UserData, LONG OptionsLength, PVOID Options, CONNECTION_CONTEXT *ConnectionContext, PIRP *AcceptIrp);
NTSTATUS __stdcall TdiDefaultDisconnectHandler(PVOID TdiEventContext, CONNECTION_CONTEXT ConnectionContext, LONG DisconnectDataLength, PVOID DisconnectData, LONG DisconnectInformationLength, PVOID DisconnectInformation, ULONG DisconnectFlags);
NTSTATUS __stdcall TdiDefaultErrorHandler(PVOID TdiEventContext, NTSTATUS Status);
NTSTATUS __stdcall TdiDefaultRcvDatagramHandler(PVOID TdiEventContext, LONG SourceAddressLength, PVOID SourceAddress, LONG OptionsLength, PVOID Options, ULONG ReceiveDatagramFlags, ULONG BytesIndicated, ULONG BytesAvailable, ULONG *BytesTaken, PVOID Tsdu, PIRP *IoRequestPacket);
NTSTATUS __stdcall TdiDefaultRcvExpeditedHandler(PVOID TdiEventContext, CONNECTION_CONTEXT ConnectionContext, ULONG ReceiveFlags, ULONG BytesIndicated, ULONG BytesAvailable, ULONG *BytesTaken, PVOID Tsdu, PIRP *IoRequestPacket);
NTSTATUS __stdcall TdiDefaultReceiveHandler(PVOID TdiEventContext, CONNECTION_CONTEXT ConnectionContext, ULONG ReceiveFlags, ULONG BytesIndicated, ULONG BytesAvailable, ULONG *BytesTaken, PVOID Tsdu, PIRP *IoRequestPacket);
NTSTATUS __stdcall TdiDefaultSendPossibleHandler(PVOID TdiEventContext, PVOID ConnectionContext, ULONG BytesAvailable);
NTSTATUS __stdcall TdiDeregisterAddressChangeHandler(HANDLE BindingHandle);
NTSTATUS __stdcall TdiDeregisterDeviceObject(HANDLE RegistrationHandle);
NTSTATUS __stdcall TdiDeregisterNetAddress(HANDLE RegistrationHandle);
NTSTATUS __stdcall TdiDeregisterNotificationHandler(HANDLE BindingHandle);
NTSTATUS __stdcall TdiDeregisterPnPHandlers(HANDLE BindingHandle);
NTSTATUS __stdcall TdiDeregisterProvider(HANDLE ProviderHandle);
NTSTATUS __stdcall TdiEnumerateAddresses(HANDLE BindingHandle);
NTSTATUS __stdcall TdiMakeNCPAChanges(TDI_NCPA_BINDING_INFO NcpaBindingInfo);
NTSTATUS __stdcall TdiMapUserRequest(PDEVICE_OBJECT DeviceObject, PIRP Irp, PIO_STACK_LOCATION IrpSp);
NTSTATUS __stdcall TdiOpenNetbiosAddress(PHANDLE FileHandle, PUCHAR Buffer, PVOID DeviceName, PVOID Name);
NTSTATUS __stdcall TdiPnPPowerRequest(PUNICODE_STRING DeviceName, PNET_PNP_EVENT PowerEvent, PTDI_PNP_CONTEXT Context1, PTDI_PNP_CONTEXT Context2, ProviderPnPPowerComplete ProtocolCompletionHandler);
NTSTATUS __stdcall TdiProviderReady(HANDLE ProviderHandle);
NTSTATUS __stdcall TdiRegisterAddressChangeHandler(TDI_ADD_ADDRESS_HANDLER AddHandler, TDI_DEL_ADDRESS_HANDLER DeleteHandler, HANDLE *BindingHandle);
NTSTATUS __stdcall TdiRegisterDeviceObject(PUNICODE_STRING DeviceName, HANDLE *RegistrationHandle);
NTSTATUS __stdcall TdiRegisterNetAddress(PTA_ADDRESS Address, PUNICODE_STRING DeviceName, PTDI_PNP_CONTEXT Context, HANDLE *RegistrationHandle);
NTSTATUS __stdcall TdiRegisterNotificationHandler(TDI_BIND_HANDLER BindHandler, TDI_UNBIND_HANDLER UnbindHandler, HANDLE *BindingHandle);
NTSTATUS __stdcall TdiRegisterPnPHandlers(PTDI_CLIENT_INTERFACE_INFO ClientInterfaceInfo, ULONG InterfaceInfoSize, HANDLE *BindingHandle);
NTSTATUS __stdcall TdiRegisterProvider(PUNICODE_STRING ProviderName, HANDLE *ProviderHandle);
NTSTATUS __stdcall TmCommitComplete(PKENLISTMENT Enlistment, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall TmCommitEnlistment(PKENLISTMENT Enlistment, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall TmCommitTransaction(PKTRANSACTION Transaction, BOOLEAN Wait);
NTSTATUS __stdcall TmCreateEnlistment(PHANDLE EnlistmentHandle, KPROCESSOR_MODE PreviousMode, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PRKRESOURCEMANAGER ResourceManager, PKTRANSACTION Transaction, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);
NTSTATUS __stdcall TmDereferenceEnlistmentKey(PKENLISTMENT Enlistment, PBOOLEAN LastReference);
NTSTATUS __stdcall TmEnableCallbacks(PKRESOURCEMANAGER ResourceManager, PTM_RM_NOTIFICATION CallbackRoutine, PVOID RMKey);
NTSTATUS __stdcall TmInitializeTransactionManager(PRKTM TransactionManager, PCUNICODE_STRING LogFileName, PGUID TmId, ULONG CreateOptions);
NTSTATUS __stdcall TmPrePrepareComplete(PKENLISTMENT Enlistment, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall TmPrePrepareEnlistment(PKENLISTMENT Enlistment, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall TmPrepareComplete(PKENLISTMENT Enlistment, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall TmPrepareEnlistment(PKENLISTMENT Enlistment, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall TmPropagationComplete(PKRESOURCEMANAGER ResourceManager, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);
NTSTATUS __stdcall TmPropagationFailed(PKRESOURCEMANAGER ResourceManager, ULONG RequestCookie, NTSTATUS Status);
NTSTATUS __stdcall TmReadOnlyEnlistment(PKENLISTMENT Enlistment, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall TmRecoverEnlistment(PKENLISTMENT Enlistment, PVOID EnlistmentKey);
NTSTATUS __stdcall TmRecoverResourceManager(PKRESOURCEMANAGER ResourceManager);
NTSTATUS __stdcall TmRecoverTransactionManager(PKTM Tm, PLARGE_INTEGER TargetVirtualClock);
NTSTATUS __stdcall TmReferenceEnlistmentKey(PKENLISTMENT Enlistment, PVOID *Key);
NTSTATUS __stdcall TmRenameTransactionManager(PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);
NTSTATUS __stdcall TmRequestOutcomeEnlistment(PKENLISTMENT Enlistment, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall TmRollbackComplete(PKENLISTMENT Enlistment, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall TmRollbackEnlistment(PKENLISTMENT Enlistment, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall TmRollbackTransaction(PKTRANSACTION Transaction, BOOLEAN Wait);
NTSTATUS __stdcall TmSinglePhaseReject(PKENLISTMENT Enlistment, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall TrSecureDeviceCallOSService(WDFDEVICE Device, LPCGUID OSServiceGuid, PTR_SERVICE_REQUEST CallData, ULONG_PTR *BytesWritten);
NTSTATUS __stdcall TrSecureDeviceCompleteAsyncRequest(PVOID RequestHandle, NTSTATUS Result, ULONG_PTR BytesWritten);
NTSTATUS __stdcall TrSecureDeviceHandoffMasterDeviceControl(PWDFDEVICE_INIT DeviceInit, PTR_SECURE_DEVICE_CALLBACKS Callbacks, WDFDEVICE *MasterDevice);
NTSTATUS __stdcall TrSecureDeviceHandoffServiceDeviceControl(PWDFDEVICE_INIT DeviceInit, LPGUID ServiceGuid, PTR_SECURE_SERVICE_CALLBACKS Callbacks, WDFDEVICE *ServiceDevice);
NTSTATUS __stdcall TrSecureDeviceQueryOSService(WDFDEVICE Device, LPCGUID OSServiceGuid, PTR_SERVICE_INFORMATION Information);
NTSTATUS __stdcall USBCAMD_ControlVendorCommand(PVOID DeviceContext, UCHAR Request, USHORT Value, USHORT Index, PVOID Buffer, PULONG BufferLength, BOOLEAN GetData, PCOMMAND_COMPLETE_FUNCTION CommandComplete, PVOID CommandContext);
NTSTATUS __stdcall USBCAMD_GetRegistryKeyValue(HANDLE Handle, PWCHAR KeyNameString, ULONG KeyNameStringLength, PVOID Data, ULONG DataLength);
NTSTATUS __stdcall USBCAMD_SelectAlternateInterface(PVOID DeviceContext, PUSBD_INTERFACE_INFORMATION RequestInterface);
NTSTATUS __stdcall USBD_CreateHandle(PDEVICE_OBJECT DeviceObject, PDEVICE_OBJECT TargetDeviceObject, ULONG USBDClientContractVersion, ULONG PoolTag, USBD_HANDLE *USBDHandle);
NTSTATUS __stdcall USBD_GetPdoRegistryParameter(PDEVICE_OBJECT PhysicalDeviceObject, PVOID Parameter, ULONG ParameterLength, PWSTR KeyName, ULONG KeyNameLength);
NTSTATUS __stdcall USBD_IsochUrbAllocate(USBD_HANDLE USBDHandle, ULONG NumberOfIsochPacket, PURB *Urb);
NTSTATUS __stdcall USBD_QueryBusTime(PDEVICE_OBJECT RootHubPdo, PULONG CurrentFrame);
NTSTATUS __stdcall USBD_QueryUsbCapability(USBD_HANDLE USBDHandle, const GUID *CapabilityType, ULONG OutputBufferLength, PUCHAR OutputBuffer, PULONG ResultLength);
NTSTATUS __stdcall USBD_SelectConfigUrbAllocateAndBuild(USBD_HANDLE USBDHandle, PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor, PUSBD_INTERFACE_LIST_ENTRY InterfaceList, PURB *Urb);
NTSTATUS __stdcall USBD_SelectInterfaceUrbAllocateAndBuild(USBD_HANDLE USBDHandle, USBD_CONFIGURATION_HANDLE ConfigurationHandle, PUSBD_INTERFACE_LIST_ENTRY InterfaceListEntry, PURB *Urb);
NTSTATUS __stdcall USBD_UrbAllocate(USBD_HANDLE USBDHandle, PURB *Urb);
NTSTATUS __stdcall UcmConnectorChargingStateChanged(UCMCONNECTOR Connector, UCM_CHARGING_STATE ChargingState);
NTSTATUS __stdcall UcmConnectorCreate(WDFDEVICE WdfDevice, PUCM_CONNECTOR_CONFIG Config, PWDF_OBJECT_ATTRIBUTES Attributes, UCMCONNECTOR *Connector);
NTSTATUS __stdcall UcmConnectorPdConnectionStateChanged(UCMCONNECTOR Connector, PUCM_CONNECTOR_PD_CONN_STATE_CHANGED_PARAMS Params);
NTSTATUS __stdcall UcmConnectorPdPartnerSourceCaps(UCMCONNECTOR Connector, UCM_PD_POWER_DATA_OBJECT Pdos[], UCHAR PdoCount);
NTSTATUS __stdcall UcmConnectorPdSourceCaps(UCMCONNECTOR Connector, UCM_PD_POWER_DATA_OBJECT Pdos[], UCHAR PdoCount);
NTSTATUS __stdcall UcmConnectorTypeCAttach(UCMCONNECTOR Connector, PUCM_CONNECTOR_TYPEC_ATTACH_PARAMS Params);
NTSTATUS __stdcall UcmConnectorTypeCCurrentAdChanged(UCMCONNECTOR Connector, UCM_TYPEC_CURRENT CurrentAdvertisement);
NTSTATUS __stdcall UcmConnectorTypeCDetach(UCMCONNECTOR Connector);
NTSTATUS __stdcall UcmInitializeDevice(WDFDEVICE WdfDevice, PUCM_MANAGER_CONFIG Config);
NTSTATUS __stdcall UcmTcpciDeviceInitInitialize(PWDFDEVICE_INIT DeviceInit);
NTSTATUS __stdcall UcmTcpciDeviceInitialize(WDFDEVICE WdfDevice, PUCMTCPCI_DEVICE_CONFIG Config);
NTSTATUS __stdcall UcmTcpciPortControllerCreate(WDFDEVICE WdfDevice, PUCMTCPCI_PORT_CONTROLLER_CONFIG Config, PWDF_OBJECT_ATTRIBUTES Attributes, UCMTCPCIPORTCONTROLLER *PortControllerObject);
NTSTATUS __stdcall UcmTcpciPortControllerStart(UCMTCPCIPORTCONTROLLER PortControllerObject);
NTSTATUS __stdcall UcmUcsiConnectorCollectionAddConnector(UCMUCSI_CONNECTOR_COLLECTION ConnectorCollectionObject, PUCMUCSI_CONNECTOR_INFO ConnectorInfo);
NTSTATUS __stdcall UcmUcsiConnectorCollectionCreate(WDFDEVICE WdfDevice, PWDF_OBJECT_ATTRIBUTES Attributes, UCMUCSI_CONNECTOR_COLLECTION *ConnectorCollection);
NTSTATUS __stdcall UcmUcsiDeviceInitInitialize(PWDFDEVICE_INIT DeviceInit);
NTSTATUS __stdcall UcmUcsiDeviceInitialize(WDFDEVICE WdfDevice, PUCMUCSI_DEVICE_CONFIG Config);
NTSTATUS __stdcall UcmUcsiPpmCreate(WDFDEVICE WdfDevice, PUCMUCSI_PPM_CONFIG Config, PWDF_OBJECT_ATTRIBUTES Attributes, UCMUCSIPPM *PPMObject);
NTSTATUS __stdcall UcmUcsiPpmStart(UCMUCSIPPM PpmObject);
NTSTATUS __stdcall UcxControllerCreate(WDFDEVICE Device, PUCX_CONTROLLER_CONFIG Config, PWDF_OBJECT_ATTRIBUTES Attributes, UCXCONTROLLER *Controller);
NTSTATUS __stdcall UcxControllerSetIdStrings(UCXCONTROLLER Controller, PUNICODE_STRING ManufacturerNameString, PUNICODE_STRING ModelNameString, PUNICODE_STRING ModelNumberString);
NTSTATUS __stdcall UcxEndpointCreate(UCXUSBDEVICE UsbDevice, PUCXENDPOINT_INIT *EndpointInit, PWDF_OBJECT_ATTRIBUTES Attributes, UCXENDPOINT *Endpoint);
NTSTATUS __stdcall UcxInitializeDeviceInit(PWDFDEVICE_INIT DeviceInit);
NTSTATUS __stdcall UcxRootHubCreate(UCXCONTROLLER Controller, PUCX_ROOTHUB_CONFIG Config, PWDF_OBJECT_ATTRIBUTES Attributes, UCXROOTHUB *RootHub);
NTSTATUS __stdcall UcxStaticStreamsCreate(UCXENDPOINT Endpoint, PUCXSSTREAMS_INIT *StaticStreamsInit, PWDF_OBJECT_ATTRIBUTES Attributes, UCXSSTREAMS *StaticStreams);
NTSTATUS __stdcall UcxUsbDeviceCreate(UCXCONTROLLER Controller, PUCXUSBDEVICE_INIT *UsbDeviceInit, PWDF_OBJECT_ATTRIBUTES Attributes, UCXUSBDEVICE *UsbDevice);
NTSTATUS __stdcall UdecxInitializeWdfDeviceInit(PWDFDEVICE_INIT WdfDeviceInit);
NTSTATUS __stdcall UdecxUrbRetrieveBuffer(WDFREQUEST Request, PUCHAR *TransferBuffer, PULONG Length);
NTSTATUS __stdcall UdecxUrbRetrieveControlSetupPacket(WDFREQUEST Request, PWDF_USB_CONTROL_SETUP_PACKET SetupPacket);
NTSTATUS __stdcall UdecxUsbDeviceCreate(PUDECXUSBDEVICE_INIT *UdecxUsbDeviceInit, PWDF_OBJECT_ATTRIBUTES Attributes, UDECXUSBDEVICE *UdecxUsbDevice);
NTSTATUS __stdcall UdecxUsbDeviceInitAddDescriptor(PUDECXUSBDEVICE_INIT UdecxUsbDeviceInit, PUCHAR Descriptor, USHORT DescriptorLength);
NTSTATUS __stdcall UdecxUsbDeviceInitAddDescriptorWithIndex(PUDECXUSBDEVICE_INIT UdecxUsbDeviceInit, PUCHAR Descriptor, USHORT DescriptorLength, UCHAR DescriptorIndex);
NTSTATUS __stdcall UdecxUsbDeviceInitAddStringDescriptor(PUDECXUSBDEVICE_INIT UdecxUsbDeviceInit, PCUNICODE_STRING String, UCHAR DescriptorIndex, USHORT LanguageId);
NTSTATUS __stdcall UdecxUsbDeviceInitAddStringDescriptorRaw(PUDECXUSBDEVICE_INIT UdecxUsbDeviceInit, PUCHAR Descriptor, USHORT DescriptorLength, UCHAR DescriptorIndex, USHORT LanguageId);
NTSTATUS __stdcall UdecxUsbDevicePlugIn(UDECXUSBDEVICE UdecxUsbDevice, PUDECX_USB_DEVICE_PLUG_IN_OPTIONS Options);
NTSTATUS __stdcall UdecxUsbDevicePlugOutAndDelete(UDECXUSBDEVICE UdecxUsbDevice);
NTSTATUS __stdcall UdecxUsbEndpointCreate(PUDECXUSBENDPOINT_INIT *EndpointInit, PWDF_OBJECT_ATTRIBUTES Attributes, UDECXUSBENDPOINT *UdecxUsbEndpoint);
NTSTATUS __stdcall UdecxWdfDeviceAddUsbDeviceEmulation(WDFDEVICE WdfDevice, PUDECX_WDF_DEVICE_CONFIG Config);
NTSTATUS __stdcall UdecxWdfDeviceNeedsReset(WDFDEVICE UdeWdfDevice, UDECX_WDF_DEVICE_RESET_TYPE ResetType);
NTSTATUS __stdcall UfxDeviceCreate(WDFDEVICE WdfDevice, PUFX_DEVICE_CALLBACKS Callbacks, PUFX_DEVICE_CAPABILITIES Capabilities, PWDF_OBJECT_ATTRIBUTES Attributes, UFXDEVICE *UfxDevice);
NTSTATUS __stdcall UfxEndpointCreate(UFXDEVICE UfxDevice, PUFXENDPOINT_INIT EndpointInit, PWDF_OBJECT_ATTRIBUTES Attributes, PWDF_IO_QUEUE_CONFIG TransferQueueConfig, PWDF_OBJECT_ATTRIBUTES TransferQueueAttributes, PWDF_IO_QUEUE_CONFIG CommandQueueConfig, PWDF_OBJECT_ATTRIBUTES CommandQueueAttributes, UFXENDPOINT *UfxEndpoint);
NTSTATUS __stdcall UfxFdoInit(WDFDRIVER WdfDriver, PWDFDEVICE_INIT DeviceInit, PWDF_OBJECT_ATTRIBUTES FdoAttributes);
NTSTATUS __stdcall UrsDeviceInitInitialize(PWDFDEVICE_INIT DeviceInit);
NTSTATUS __stdcall UrsDeviceInitialize(WDFDEVICE Device, PURS_CONFIG Config);
NTSTATUS __stdcall UrsIoResourceListAppendDescriptor(URSIORESLIST IoResourceList, PIO_RESOURCE_DESCRIPTOR Descriptor);
NTSTATUS __stdcall UsbFnKmClassLibActivateBus(KUSBFNCLASSLIBHANDLE ClassHandle);
NTSTATUS __stdcall UsbFnKmClassLibCompletedTransferParamsGetData(PWDF_REQUEST_COMPLETION_PARAMS pParams, WDFMEMORY *pDataMemory);
NTSTATUS __stdcall UsbFnKmClassLibCompletedTransferParamsGetPipeId(PWDF_REQUEST_COMPLETION_PARAMS pParams, PUSBFNPIPEID pPipeId);
NTSTATUS __stdcall UsbFnKmClassLibCompletedTransferRequestGetLength(WDFREQUEST Request, PULONG pTransferLength);
NTSTATUS __stdcall UsbFnKmClassLibCreateControlStatusHandshakeRequest(KUSBFNCLASSLIBHANDLE ClassHandle, PFN_WDF_REQUEST_COMPLETION_ROUTINE CompletionRoutine, WDFREQUEST *pRequest);
NTSTATUS __stdcall UsbFnKmClassLibCreateNotificationRequest(KUSBFNCLASSLIBHANDLE ClassHandle, PFN_WDF_REQUEST_COMPLETION_ROUTINE CompletionRoutine, WDFMEMORY NotificationBuffer, WDFREQUEST *pRequest);
NTSTATUS __stdcall UsbFnKmClassLibCreatePipeStateGetRequest(KUSBFNCLASSLIBHANDLE ClassHandle, USBFNPIPEID PipeId, BOOLEAN *pIsStalled, PFN_WDF_REQUEST_COMPLETION_ROUTINE CompletionRoutine, WDFREQUEST *pRequest);
NTSTATUS __stdcall UsbFnKmClassLibCreatePipeStateSetRequest(KUSBFNCLASSLIBHANDLE ClassHandle, USBFNPIPEID PipeId, BOOLEAN IsStalled, PFN_WDF_REQUEST_COMPLETION_ROUTINE CompletionRoutine, WDFREQUEST *pRequest);
NTSTATUS __stdcall UsbFnKmClassLibCreateTransferInAppendZlpRequest(KUSBFNCLASSLIBHANDLE ClassHandle, USBFNPIPEID PipeId, WDFMEMORY DataMemory, PFN_WDF_REQUEST_COMPLETION_ROUTINE CompletionRoutine, WDFREQUEST *pRequest);
NTSTATUS __stdcall UsbFnKmClassLibCreateTransferInRequest(KUSBFNCLASSLIBHANDLE ClassHandle, USBFNPIPEID PipeId, WDFMEMORY DataMemory, PFN_WDF_REQUEST_COMPLETION_ROUTINE CompletionRoutine, WDFREQUEST *pRequest);
NTSTATUS __stdcall UsbFnKmClassLibCreateTransferOutRequest(KUSBFNCLASSLIBHANDLE ClassHandle, USBFNPIPEID PipeId, WDFMEMORY DataMemory, PFN_WDF_REQUEST_COMPLETION_ROUTINE CompletionRoutine, WDFREQUEST *pRequest);
NTSTATUS __stdcall UsbFnKmClassLibDeactivateBus(KUSBFNCLASSLIBHANDLE ClassHandle);
NTSTATUS __stdcall UsbFnKmClassLibGetClassInformation(KUSBFNCLASSLIBHANDLE ClassHandle, PUSBFN_CLASS_INFORMATION_PACKET pClassInformation);
NTSTATUS __stdcall UsbFnKmClassLibGetClassInformationEx(KUSBFNCLASSLIBHANDLE ClassHandle, PUSBFN_CLASS_INFORMATION_PACKET_EX pClassInformation);
NTSTATUS __stdcall UsbFnKmClassLibGetInterfaceInfo(KUSBFNCLASSLIBHANDLE ClassHandle, UCHAR InterfaceIndex, USBFN_BUS_SPEED Speed, PUSBFN_INTERFACE_INFO UsbfnInterfaceInfo, USHORT Size);
NTSTATUS __stdcall UsbFnKmClassLibGetInterfaceInfoSize(KUSBFNCLASSLIBHANDLE ClassHandle, UCHAR InterfaceIndex, USBFN_BUS_SPEED Speed, PUSHORT Size);
NTSTATUS __stdcall UsbFnKmClassLibPowerManagementInit(KUSBFNCLASSLIBHANDLE ClassHandle, PUSBFNKMCLASSLIB_POWER_MANAGEMENT_PARAMETERS pPowerManagementParameters);
NTSTATUS __stdcall UsbFnKmClassLibRegisterClassDevice(WDFDEVICE Device, KUSBFNCLASSLIBHANDLE *pClassHandle);
NTSTATUS __stdcall UsbFnKmClassLibRegisterString(KUSBFNCLASSLIBHANDLE ClassHandle, PUSBFN_USB_STRING UsbString);
NTSTATUS __stdcall UsbPm_AssignConnectorPowerLevel(USBPM_CLIENT ClientHandle, USBPM_CONNECTOR ConnectorHandle, PUSBPM_ASSIGN_CONNECTOR_POWER_LEVEL_PARAMS Params);
NTSTATUS __stdcall UsbPm_Deregister(USBPM_CLIENT ClientHandle);
NTSTATUS __stdcall UsbPm_Register(PUSBPM_CLIENT_CONFIG ClientConfig, USBPM_CLIENT *ClientHandle);
NTSTATUS __stdcall UsbPm_RetrieveConnectorProperties(USBPM_CLIENT ClientHandle, USBPM_CONNECTOR ConnectorHandle, PUSBPM_CONNECTOR_PROPERTIES ConnectorProperties);
NTSTATUS __stdcall UsbPm_RetrieveConnectorState(USBPM_CLIENT ClientHandle, USBPM_CONNECTOR ConnectorHandle, PUSBPM_CONNECTOR_STATE ConnectorState);
NTSTATUS __stdcall UsbPm_RetrieveHubConnectorHandles(USBPM_CLIENT ClientHandle, USBPM_HUB HubHandle, PUSBPM_HUB_CONNECTOR_HANDLES HubConnectorHandles);
NTSTATUS __stdcall UsbPm_RetrieveHubProperties(USBPM_CLIENT ClientHandle, USBPM_HUB HubHandle, PUSBPM_HUB_PROPERTIES HubProperties);
NTSTATUS __stdcall VslCreateSecureSection(PHANDLE Handle, PEPROCESS TargetProcess, PMDL Mdl, ULONG DevicePageProtection, ULONG Attributes);
NTSTATUS __stdcall VslDeleteSecureSection(HANDLE GlobalHandle);
NTSTATUS __stdcall WDF_WMI_BUFFER_APPEND_STRING(PVOID Buffer, ULONG BufferLength, PCUNICODE_STRING String, PULONG RequiredSize);
NTSTATUS __stdcall WdfChildListAddOrUpdateChildDescriptionAsPresent(WDFCHILDLIST ChildList, PWDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER IdentificationDescription, PWDF_CHILD_ADDRESS_DESCRIPTION_HEADER AddressDescription);
NTSTATUS __stdcall WdfChildListCreate(WDFDEVICE Device, PWDF_CHILD_LIST_CONFIG Config, PWDF_OBJECT_ATTRIBUTES ChildListAttributes, WDFCHILDLIST *ChildList);
NTSTATUS __stdcall WdfChildListRetrieveAddressDescription(WDFCHILDLIST ChildList, PWDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER IdentificationDescription, PWDF_CHILD_ADDRESS_DESCRIPTION_HEADER AddressDescription);
NTSTATUS __stdcall WdfChildListRetrieveNextDevice(WDFCHILDLIST ChildList, PWDF_CHILD_LIST_ITERATOR Iterator, WDFDEVICE *Device, PWDF_CHILD_RETRIEVE_INFO Info);
NTSTATUS __stdcall WdfChildListUpdateChildDescriptionAsMissing(WDFCHILDLIST ChildList, PWDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER IdentificationDescription);
NTSTATUS __stdcall WdfCmResourceListAppendDescriptor(WDFCMRESLIST List, PCM_PARTIAL_RESOURCE_DESCRIPTOR Descriptor);
NTSTATUS __stdcall WdfCmResourceListInsertDescriptor(WDFCMRESLIST List, PCM_PARTIAL_RESOURCE_DESCRIPTOR Descriptor, ULONG Index);
NTSTATUS __stdcall WdfCollectionAdd(WDFCOLLECTION Collection, WDFOBJECT Object);
NTSTATUS __stdcall WdfCollectionCreate(PWDF_OBJECT_ATTRIBUTES CollectionAttributes, WDFCOLLECTION *Collection);
NTSTATUS __stdcall WdfCommonBufferCreate(WDFDMAENABLER DmaEnabler, size_t Length, PWDF_OBJECT_ATTRIBUTES Attributes, WDFCOMMONBUFFER *CommonBuffer);
NTSTATUS __stdcall WdfCommonBufferCreateWithConfig(WDFDMAENABLER DmaEnabler, size_t Length, PWDF_COMMON_BUFFER_CONFIG Config, PWDF_OBJECT_ATTRIBUTES Attributes, WDFCOMMONBUFFER *CommonBuffer);
NTSTATUS __stdcall WdfDeviceAddDependentUsageDeviceObject(WDFDEVICE Device, PDEVICE_OBJECT DependentDevice);
NTSTATUS __stdcall WdfDeviceAddQueryInterface(WDFDEVICE Device, PWDF_QUERY_INTERFACE_CONFIG InterfaceConfig);
NTSTATUS __stdcall WdfDeviceAddRemovalRelationsPhysicalDevice(WDFDEVICE Device, PDEVICE_OBJECT PhysicalDevice);
NTSTATUS __stdcall WdfDeviceAllocAndQueryProperty(WDFDEVICE Device, DEVICE_REGISTRY_PROPERTY DeviceProperty, POOL_TYPE PoolType, PWDF_OBJECT_ATTRIBUTES PropertyMemoryAttributes, WDFMEMORY *PropertyMemory);
NTSTATUS __stdcall WdfDeviceAllocAndQueryPropertyEx(WDFDEVICE Device, PWDF_DEVICE_PROPERTY_DATA DeviceProperty, POOL_TYPE PoolType, PWDF_OBJECT_ATTRIBUTES PropertyMemoryAttributes, WDFMEMORY *PropertyMemory, PDEVPROPTYPE Type);
NTSTATUS __stdcall WdfDeviceAssignMofResourceName(WDFDEVICE Device, PCUNICODE_STRING MofResourceName);
NTSTATUS __stdcall WdfDeviceAssignProperty(WDFDEVICE Device, PWDF_DEVICE_PROPERTY_DATA DeviceProperty, DEVPROPTYPE Type, ULONG Size, PVOID Data);
NTSTATUS __stdcall WdfDeviceAssignS0IdleSettings(WDFDEVICE Device, PWDF_DEVICE_POWER_POLICY_IDLE_SETTINGS Settings);
NTSTATUS __stdcall WdfDeviceAssignSxWakeSettings(WDFDEVICE Device, PWDF_DEVICE_POWER_POLICY_WAKE_SETTINGS Settings);
NTSTATUS __stdcall WdfDeviceConfigureRequestDispatching(WDFDEVICE Device, WDFQUEUE Queue, WDF_REQUEST_TYPE RequestType);
NTSTATUS __stdcall WdfDeviceConfigureWdmIrpDispatchCallback(WDFDEVICE Device, WDFDRIVER Driver, UCHAR MajorFunction, PFN_WDFDEVICE_WDM_IRP_DISPATCH EvtDeviceWdmIrpDisptach, WDFCONTEXT DriverContext);
NTSTATUS __stdcall WdfDeviceCreate(PWDFDEVICE_INIT *DeviceInit, PWDF_OBJECT_ATTRIBUTES DeviceAttributes, WDFDEVICE *Device);
NTSTATUS __stdcall WdfDeviceCreateDeviceInterface(WDFDEVICE Device, const GUID *InterfaceClassGUID, PCUNICODE_STRING ReferenceString);
NTSTATUS __stdcall WdfDeviceCreateSymbolicLink(WDFDEVICE Device, PCUNICODE_STRING SymbolicLinkName);
NTSTATUS __stdcall WdfDeviceEnqueueRequest(WDFDEVICE Device, WDFREQUEST Request);
NTSTATUS __stdcall WdfDeviceIndicateWakeStatus(WDFDEVICE Device, NTSTATUS WaitWakeStatus);
NTSTATUS __stdcall WdfDeviceInitAssignName(PWDFDEVICE_INIT DeviceInit, PCUNICODE_STRING DeviceName);
NTSTATUS __stdcall WdfDeviceInitAssignSDDLString(PWDFDEVICE_INIT DeviceInit, PCUNICODE_STRING SDDLString);
NTSTATUS __stdcall WdfDeviceInitAssignWdmIrpPreprocessCallback(PWDFDEVICE_INIT DeviceInit, PFN_WDFDEVICE_WDM_IRP_PREPROCESS EvtDeviceWdmIrpPreprocess, UCHAR MajorFunction, PUCHAR MinorFunctions, ULONG NumMinorFunctions);
NTSTATUS __stdcall WdfDeviceInitRegisterPnpStateChangeCallback(PWDFDEVICE_INIT DeviceInit, WDF_DEVICE_PNP_STATE PnpState, PFN_WDF_DEVICE_PNP_STATE_CHANGE_NOTIFICATION EvtDevicePnpStateChange, ULONG CallbackTypes);
NTSTATUS __stdcall WdfDeviceInitRegisterPowerPolicyStateChangeCallback(PWDFDEVICE_INIT DeviceInit, WDF_DEVICE_POWER_POLICY_STATE PowerPolicyState, PFN_WDF_DEVICE_POWER_POLICY_STATE_CHANGE_NOTIFICATION EvtDevicePowerPolicyStateChange, ULONG CallbackTypes);
NTSTATUS __stdcall WdfDeviceInitRegisterPowerStateChangeCallback(PWDFDEVICE_INIT DeviceInit, WDF_DEVICE_POWER_STATE PowerState, PFN_WDF_DEVICE_POWER_STATE_CHANGE_NOTIFICATION EvtDevicePowerStateChange, ULONG CallbackTypes);
NTSTATUS __stdcall WdfDeviceMiniportCreate(WDFDRIVER Driver, PWDF_OBJECT_ATTRIBUTES Attributes, PDEVICE_OBJECT DeviceObject, PDEVICE_OBJECT AttachedDeviceObject, PDEVICE_OBJECT Pdo, WDFDEVICE *Device);
NTSTATUS __stdcall WdfDeviceOpenDevicemapKey(WDFDEVICE Device, PCUNICODE_STRING KeyName, ACCESS_MASK DesiredAccess, PWDF_OBJECT_ATTRIBUTES KeyAttributes, WDFKEY *Key);
NTSTATUS __stdcall WdfDeviceOpenRegistryKey(WDFDEVICE Device, ULONG DeviceInstanceKeyType, ACCESS_MASK DesiredAccess, PWDF_OBJECT_ATTRIBUTES KeyAttributes, WDFKEY *Key);
NTSTATUS __stdcall WdfDeviceQueryProperty(WDFDEVICE Device, DEVICE_REGISTRY_PROPERTY DeviceProperty, ULONG BufferLength, PVOID PropertyBuffer, PULONG ResultLength);
NTSTATUS __stdcall WdfDeviceQueryPropertyEx(WDFDEVICE Device, PWDF_DEVICE_PROPERTY_DATA DeviceProperty, ULONG BufferLength, PVOID PropertyBuffer, PULONG RequiredSize, PDEVPROPTYPE Type);
NTSTATUS __stdcall WdfDeviceRetrieveDeviceInterfaceString(WDFDEVICE Device, const GUID *InterfaceClassGUID, PCUNICODE_STRING ReferenceString, WDFSTRING String);
NTSTATUS __stdcall WdfDeviceRetrieveDeviceName(WDFDEVICE Device, WDFSTRING String);
NTSTATUS __stdcall WdfDeviceStopIdleActual(WDFDEVICE Device, BOOLEAN WaitForD0, PVOID Tag, LONG Line, PCHAR File);
NTSTATUS __stdcall WdfDeviceStopIdleNoTrack(WDFDEVICE Device, BOOLEAN WaitForD0);
NTSTATUS __stdcall WdfDeviceWdmAssignPowerFrameworkSettings(WDFDEVICE Device, PWDF_POWER_FRAMEWORK_SETTINGS PowerFrameworkSettings);
NTSTATUS __stdcall WdfDeviceWdmDispatchIrp(WDFDEVICE Device, PIRP Irp, WDFCONTEXT DispatchContext);
NTSTATUS __stdcall WdfDeviceWdmDispatchIrpToIoQueue(WDFDEVICE Device, PIRP Irp, WDFQUEUE Queue, ULONG Flags);
NTSTATUS __stdcall WdfDeviceWdmDispatchPreprocessedIrp(WDFDEVICE Device, PIRP Irp);
NTSTATUS __stdcall WdfDmaEnablerConfigureSystemProfile(WDFDMAENABLER DmaEnabler, PWDF_DMA_SYSTEM_PROFILE_CONFIG ProfileConfig, WDF_DMA_DIRECTION ConfigDirection);
NTSTATUS __stdcall WdfDmaEnablerCreate(WDFDEVICE Device, PWDF_DMA_ENABLER_CONFIG Config, PWDF_OBJECT_ATTRIBUTES Attributes, WDFDMAENABLER *DmaEnablerHandle);
NTSTATUS __stdcall WdfDmaTransactionAllocateResources(WDFDMATRANSACTION DmaTransaction, WDF_DMA_DIRECTION DmaDirection, ULONG RequiredMapRegisters, PFN_WDF_RESERVE_DMA EvtReserveDmaFunction, PVOID EvtReserveDmaContext);
NTSTATUS __stdcall WdfDmaTransactionCreate(WDFDMAENABLER DmaEnabler, PWDF_OBJECT_ATTRIBUTES Attributes, WDFDMATRANSACTION *DmaTransaction);
NTSTATUS __stdcall WdfDmaTransactionExecute(WDFDMATRANSACTION DmaTransaction, WDFCONTEXT Context);
NTSTATUS __stdcall WdfDmaTransactionInitialize(WDFDMATRANSACTION DmaTransaction, PFN_WDF_PROGRAM_DMA EvtProgramDmaFunction, WDF_DMA_DIRECTION DmaDirection, PMDL Mdl, PVOID VirtualAddress, size_t Length);
NTSTATUS __stdcall WdfDmaTransactionInitializeUsingOffset(WDFDMATRANSACTION DmaTransaction, PFN_WDF_PROGRAM_DMA EvtProgramDmaFunction, WDF_DMA_DIRECTION DmaDirection, PMDL Mdl, size_t Offset, size_t Length);
NTSTATUS __stdcall WdfDmaTransactionInitializeUsingRequest(WDFDMATRANSACTION DmaTransaction, WDFREQUEST Request, PFN_WDF_PROGRAM_DMA EvtProgramDmaFunction, WDF_DMA_DIRECTION DmaDirection);
NTSTATUS __stdcall WdfDmaTransactionRelease(WDFDMATRANSACTION DmaTransaction);
NTSTATUS __stdcall WdfDpcCreate(PWDF_DPC_CONFIG Config, PWDF_OBJECT_ATTRIBUTES Attributes, WDFDPC *Dpc);
NTSTATUS __stdcall WdfDriverCreate(PDRIVER_OBJECT DriverObject, PCUNICODE_STRING RegistryPath, PWDF_OBJECT_ATTRIBUTES DriverAttributes, PWDF_DRIVER_CONFIG DriverConfig, WDFDRIVER *Driver);
NTSTATUS __stdcall WdfDriverOpenParametersRegistryKey(WDFDRIVER Driver, ACCESS_MASK DesiredAccess, PWDF_OBJECT_ATTRIBUTES KeyAttributes, WDFKEY *Key);
NTSTATUS __stdcall WdfDriverRegisterTraceInfo(PDRIVER_OBJECT DriverObject, PFN_WDF_TRACE_CALLBACK EvtTraceCallback, PVOID ControlBlock);
NTSTATUS __stdcall WdfDriverRetrieveVersionString(WDFDRIVER Driver, WDFSTRING String);
NTSTATUS __stdcall WdfFdoAddStaticChild(WDFDEVICE Fdo, WDFDEVICE Child);
NTSTATUS __stdcall WdfFdoInitAllocAndQueryProperty(PWDFDEVICE_INIT DeviceInit, DEVICE_REGISTRY_PROPERTY DeviceProperty, POOL_TYPE PoolType, PWDF_OBJECT_ATTRIBUTES PropertyMemoryAttributes, WDFMEMORY *PropertyMemory);
NTSTATUS __stdcall WdfFdoInitAllocAndQueryPropertyEx(PWDFDEVICE_INIT DeviceInit, PWDF_DEVICE_PROPERTY_DATA DeviceProperty, POOL_TYPE PoolType, PWDF_OBJECT_ATTRIBUTES PropertyMemoryAttributes, WDFMEMORY *PropertyMemory, PDEVPROPTYPE Type);
NTSTATUS __stdcall WdfFdoInitOpenRegistryKey(PWDFDEVICE_INIT DeviceInit, ULONG DeviceInstanceKeyType, ACCESS_MASK DesiredAccess, PWDF_OBJECT_ATTRIBUTES KeyAttributes, WDFKEY *Key);
NTSTATUS __stdcall WdfFdoInitQueryProperty(PWDFDEVICE_INIT DeviceInit, DEVICE_REGISTRY_PROPERTY DeviceProperty, ULONG BufferLength, PVOID PropertyBuffer, PULONG ResultLength);
NTSTATUS __stdcall WdfFdoInitQueryPropertyEx(PWDFDEVICE_INIT DeviceInit, PWDF_DEVICE_PROPERTY_DATA DeviceProperty, ULONG BufferLength, PVOID PropertyBuffer, PULONG ResultLength, PDEVPROPTYPE Type);
NTSTATUS __stdcall WdfFdoQueryForInterface(WDFDEVICE Fdo, LPCGUID InterfaceType, PINTERFACE Interface, USHORT Size, USHORT Version, PVOID InterfaceSpecificData);
NTSTATUS __stdcall WdfInterruptCreate(WDFDEVICE Device, PWDF_INTERRUPT_CONFIG Configuration, PWDF_OBJECT_ATTRIBUTES Attributes, WDFINTERRUPT *Interrupt);
NTSTATUS __stdcall WdfIoQueueAssignForwardProgressPolicy(WDFQUEUE Queue, PWDF_IO_QUEUE_FORWARD_PROGRESS_POLICY ForwardProgressPolicy);
NTSTATUS __stdcall WdfIoQueueCreate(WDFDEVICE Device, PWDF_IO_QUEUE_CONFIG Config, PWDF_OBJECT_ATTRIBUTES QueueAttributes, WDFQUEUE *Queue);
NTSTATUS __stdcall WdfIoQueueFindRequest(WDFQUEUE Queue, WDFREQUEST FoundRequest, WDFFILEOBJECT FileObject, PWDF_REQUEST_PARAMETERS Parameters, WDFREQUEST *OutRequest);
NTSTATUS __stdcall WdfIoQueueReadyNotify(WDFQUEUE Queue, PFN_WDF_IO_QUEUE_STATE QueueReady, WDFCONTEXT Context);
NTSTATUS __stdcall WdfIoQueueRetrieveFoundRequest(WDFQUEUE Queue, WDFREQUEST FoundRequest, WDFREQUEST *OutRequest);
NTSTATUS __stdcall WdfIoQueueRetrieveNextRequest(WDFQUEUE Queue, WDFREQUEST *OutRequest);
NTSTATUS __stdcall WdfIoQueueRetrieveRequestByFileObject(WDFQUEUE Queue, WDFFILEOBJECT FileObject, WDFREQUEST *OutRequest);
NTSTATUS __stdcall WdfIoResourceListAppendDescriptor(WDFIORESLIST ResourceList, PIO_RESOURCE_DESCRIPTOR Descriptor);
NTSTATUS __stdcall WdfIoResourceListCreate(WDFIORESREQLIST RequirementsList, PWDF_OBJECT_ATTRIBUTES Attributes, WDFIORESLIST *ResourceList);
NTSTATUS __stdcall WdfIoResourceListInsertDescriptor(WDFIORESLIST ResourceList, PIO_RESOURCE_DESCRIPTOR Descriptor, ULONG Index);
NTSTATUS __stdcall WdfIoResourceRequirementsListAppendIoResList(WDFIORESREQLIST RequirementsList, WDFIORESLIST IoResList);
NTSTATUS __stdcall WdfIoResourceRequirementsListInsertIoResList(WDFIORESREQLIST RequirementsList, WDFIORESLIST IoResList, ULONG Index);
NTSTATUS __stdcall WdfIoTargetAllocAndQueryTargetProperty(WDFIOTARGET IoTarget, DEVICE_REGISTRY_PROPERTY DeviceProperty, POOL_TYPE PoolType, PWDF_OBJECT_ATTRIBUTES PropertyMemoryAttributes, WDFMEMORY *PropertyMemory);
NTSTATUS __stdcall WdfIoTargetCreate(WDFDEVICE Device, PWDF_OBJECT_ATTRIBUTES IoTargetAttributes, WDFIOTARGET *IoTarget);
NTSTATUS __stdcall WdfIoTargetFormatRequestForInternalIoctl(WDFIOTARGET IoTarget, WDFREQUEST Request, ULONG IoctlCode, WDFMEMORY InputBuffer, PWDFMEMORY_OFFSET InputBufferOffset, WDFMEMORY OutputBuffer, PWDFMEMORY_OFFSET OutputBufferOffset);
NTSTATUS __stdcall WdfIoTargetFormatRequestForInternalIoctlOthers(WDFIOTARGET IoTarget, WDFREQUEST Request, ULONG IoctlCode, WDFMEMORY OtherArg1, PWDFMEMORY_OFFSET OtherArg1Offset, WDFMEMORY OtherArg2, PWDFMEMORY_OFFSET OtherArg2Offset, WDFMEMORY OtherArg4, PWDFMEMORY_OFFSET OtherArg4Offset);
NTSTATUS __stdcall WdfIoTargetFormatRequestForIoctl(WDFIOTARGET IoTarget, WDFREQUEST Request, ULONG IoctlCode, WDFMEMORY InputBuffer, PWDFMEMORY_OFFSET InputBufferOffset, WDFMEMORY OutputBuffer, PWDFMEMORY_OFFSET OutputBufferOffset);
NTSTATUS __stdcall WdfIoTargetFormatRequestForRead(WDFIOTARGET IoTarget, WDFREQUEST Request, WDFMEMORY OutputBuffer, PWDFMEMORY_OFFSET OutputBufferOffset, PLONGLONG DeviceOffset);
NTSTATUS __stdcall WdfIoTargetFormatRequestForWrite(WDFIOTARGET IoTarget, WDFREQUEST Request, WDFMEMORY InputBuffer, PWDFMEMORY_OFFSET InputBufferOffset, PLONGLONG DeviceOffset);
NTSTATUS __stdcall WdfIoTargetOpen(WDFIOTARGET IoTarget, PWDF_IO_TARGET_OPEN_PARAMS OpenParams);
NTSTATUS __stdcall WdfIoTargetQueryForInterface(WDFIOTARGET IoTarget, LPCGUID InterfaceType, PINTERFACE Interface, USHORT Size, USHORT Version, PVOID InterfaceSpecificData);
NTSTATUS __stdcall WdfIoTargetQueryTargetProperty(WDFIOTARGET IoTarget, DEVICE_REGISTRY_PROPERTY DeviceProperty, ULONG BufferLength, PVOID PropertyBuffer, PULONG ResultLength);
NTSTATUS __stdcall WdfIoTargetSendInternalIoctlOthersSynchronously(WDFIOTARGET IoTarget, WDFREQUEST Request, ULONG IoctlCode, PWDF_MEMORY_DESCRIPTOR OtherArg1, PWDF_MEMORY_DESCRIPTOR OtherArg2, PWDF_MEMORY_DESCRIPTOR OtherArg4, PWDF_REQUEST_SEND_OPTIONS RequestOptions, PULONG_PTR BytesReturned);
NTSTATUS __stdcall WdfIoTargetSendInternalIoctlSynchronously(WDFIOTARGET IoTarget, WDFREQUEST Request, ULONG IoctlCode, PWDF_MEMORY_DESCRIPTOR InputBuffer, PWDF_MEMORY_DESCRIPTOR OutputBuffer, PWDF_REQUEST_SEND_OPTIONS RequestOptions, PULONG_PTR BytesReturned);
NTSTATUS __stdcall WdfIoTargetSendIoctlSynchronously(WDFIOTARGET IoTarget, WDFREQUEST Request, ULONG IoctlCode, PWDF_MEMORY_DESCRIPTOR InputBuffer, PWDF_MEMORY_DESCRIPTOR OutputBuffer, PWDF_REQUEST_SEND_OPTIONS RequestOptions, PULONG_PTR BytesReturned);
NTSTATUS __stdcall WdfIoTargetSendReadSynchronously(WDFIOTARGET IoTarget, WDFREQUEST Request, PWDF_MEMORY_DESCRIPTOR OutputBuffer, PLONGLONG DeviceOffset, PWDF_REQUEST_SEND_OPTIONS RequestOptions, PULONG_PTR BytesRead);
NTSTATUS __stdcall WdfIoTargetSendWriteSynchronously(WDFIOTARGET IoTarget, WDFREQUEST Request, PWDF_MEMORY_DESCRIPTOR InputBuffer, PLONGLONG DeviceOffset, PWDF_REQUEST_SEND_OPTIONS RequestOptions, PULONG_PTR BytesWritten);
NTSTATUS __stdcall WdfIoTargetStart(WDFIOTARGET IoTarget);
NTSTATUS __stdcall WdfLookasideListCreate(PWDF_OBJECT_ATTRIBUTES LookasideAttributes, size_t BufferSize, POOL_TYPE PoolType, PWDF_OBJECT_ATTRIBUTES MemoryAttributes, ULONG PoolTag, WDFLOOKASIDE *Lookaside);
NTSTATUS __stdcall WdfMemoryAssignBuffer(WDFMEMORY Memory, PVOID Buffer, size_t BufferSize);
NTSTATUS __stdcall WdfMemoryCopyFromBuffer(WDFMEMORY DestinationMemory, size_t DestinationOffset, PVOID Buffer, size_t NumBytesToCopyFrom);
NTSTATUS __stdcall WdfMemoryCopyToBuffer(WDFMEMORY SourceMemory, size_t SourceOffset, PVOID Buffer, size_t NumBytesToCopyTo);
NTSTATUS __stdcall WdfMemoryCreate(PWDF_OBJECT_ATTRIBUTES Attributes, POOL_TYPE PoolType, ULONG PoolTag, size_t BufferSize, WDFMEMORY *Memory, PVOID *Buffer);
NTSTATUS __stdcall WdfMemoryCreateFromLookaside(WDFLOOKASIDE Lookaside, WDFMEMORY *Memory);
NTSTATUS __stdcall WdfMemoryCreatePreallocated(PWDF_OBJECT_ATTRIBUTES Attributes, PVOID Buffer, size_t BufferSize, WDFMEMORY *Memory);
NTSTATUS __stdcall WdfObjectAddCustomType_UDECXUSBDEVICE(WDFOBJECT Handle, ULONG_PTR Data, PFN_WDF_OBJECT_CONTEXT_CLEANUP EvtCleanupCallback, PFN_WDF_OBJECT_CONTEXT_DESTROY EvtDestroyCallback);
NTSTATUS __stdcall WdfObjectAddCustomType_UDECXUSBENDPOINT(WDFOBJECT Handle, ULONG_PTR Data, PFN_WDF_OBJECT_CONTEXT_CLEANUP EvtCleanupCallback, PFN_WDF_OBJECT_CONTEXT_DESTROY EvtDestroyCallback);
NTSTATUS __stdcall WdfObjectAllocateContext(WDFOBJECT Handle, PWDF_OBJECT_ATTRIBUTES ContextAttributes, PVOID *Context);
NTSTATUS __stdcall WdfObjectCreate(PWDF_OBJECT_ATTRIBUTES Attributes, WDFOBJECT *Object);
NTSTATUS __stdcall WdfObjectQuery(WDFOBJECT Object, const GUID *Guid, ULONG QueryBufferLength, PVOID QueryBuffer);
NTSTATUS __stdcall WdfPdoAddEjectionRelationsPhysicalDevice(WDFDEVICE Device, PDEVICE_OBJECT PhysicalDevice);
NTSTATUS __stdcall WdfPdoInitAddCompatibleID(PWDFDEVICE_INIT DeviceInit, PCUNICODE_STRING CompatibleID);
NTSTATUS __stdcall WdfPdoInitAddDeviceText(PWDFDEVICE_INIT DeviceInit, PCUNICODE_STRING DeviceDescription, PCUNICODE_STRING DeviceLocation, LCID LocaleId);
NTSTATUS __stdcall WdfPdoInitAddHardwareID(PWDFDEVICE_INIT DeviceInit, PCUNICODE_STRING HardwareID);
NTSTATUS __stdcall WdfPdoInitAssignContainerID(PWDFDEVICE_INIT DeviceInit, PCUNICODE_STRING ContainerID);
NTSTATUS __stdcall WdfPdoInitAssignDeviceID(PWDFDEVICE_INIT DeviceInit, PCUNICODE_STRING DeviceID);
NTSTATUS __stdcall WdfPdoInitAssignInstanceID(PWDFDEVICE_INIT DeviceInit, PCUNICODE_STRING InstanceID);
NTSTATUS __stdcall WdfPdoInitAssignRawDevice(PWDFDEVICE_INIT DeviceInit, const GUID *DeviceClassGuid);
NTSTATUS __stdcall WdfPdoMarkMissing(WDFDEVICE Device);
NTSTATUS __stdcall WdfPdoRetrieveAddressDescription(WDFDEVICE Device, PWDF_CHILD_ADDRESS_DESCRIPTION_HEADER AddressDescription);
NTSTATUS __stdcall WdfPdoRetrieveIdentificationDescription(WDFDEVICE Device, PWDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER IdentificationDescription);
NTSTATUS __stdcall WdfPdoUpdateAddressDescription(WDFDEVICE Device, PWDF_CHILD_ADDRESS_DESCRIPTION_HEADER AddressDescription);
NTSTATUS __stdcall WdfRegistryAssignMemory(WDFKEY Key, PCUNICODE_STRING ValueName, ULONG ValueType, WDFMEMORY Memory, PWDFMEMORY_OFFSET MemoryOffsets);
NTSTATUS __stdcall WdfRegistryAssignMultiString(WDFKEY Key, PCUNICODE_STRING ValueName, WDFCOLLECTION StringsCollection);
NTSTATUS __stdcall WdfRegistryAssignString(WDFKEY Key, PCUNICODE_STRING ValueName, WDFSTRING String);
NTSTATUS __stdcall WdfRegistryAssignULong(WDFKEY Key, PCUNICODE_STRING ValueName, ULONG Value);
NTSTATUS __stdcall WdfRegistryAssignUnicodeString(WDFKEY Key, PCUNICODE_STRING ValueName, PCUNICODE_STRING Value);
NTSTATUS __stdcall WdfRegistryAssignValue(WDFKEY Key, PCUNICODE_STRING ValueName, ULONG ValueType, ULONG ValueLength, PVOID Value);
NTSTATUS __stdcall WdfRegistryCreateKey(WDFKEY ParentKey, PCUNICODE_STRING KeyName, ACCESS_MASK DesiredAccess, ULONG CreateOptions, PULONG CreateDisposition, PWDF_OBJECT_ATTRIBUTES KeyAttributes, WDFKEY *Key);
NTSTATUS __stdcall WdfRegistryOpenKey(WDFKEY ParentKey, PCUNICODE_STRING KeyName, ACCESS_MASK DesiredAccess, PWDF_OBJECT_ATTRIBUTES KeyAttributes, WDFKEY *Key);
NTSTATUS __stdcall WdfRegistryQueryMemory(WDFKEY Key, PCUNICODE_STRING ValueName, POOL_TYPE PoolType, PWDF_OBJECT_ATTRIBUTES MemoryAttributes, WDFMEMORY *Memory, PULONG ValueType);
NTSTATUS __stdcall WdfRegistryQueryMultiString(WDFKEY Key, PCUNICODE_STRING ValueName, PWDF_OBJECT_ATTRIBUTES StringsAttributes, WDFCOLLECTION Collection);
NTSTATUS __stdcall WdfRegistryQueryString(WDFKEY Key, PCUNICODE_STRING ValueName, WDFSTRING String);
NTSTATUS __stdcall WdfRegistryQueryULong(WDFKEY Key, PCUNICODE_STRING ValueName, PULONG Value);
NTSTATUS __stdcall WdfRegistryQueryUnicodeString(WDFKEY Key, PCUNICODE_STRING ValueName, PUSHORT ValueByteLength, PUNICODE_STRING Value);
NTSTATUS __stdcall WdfRegistryQueryValue(WDFKEY Key, PCUNICODE_STRING ValueName, ULONG ValueLength, PVOID Value, PULONG ValueLengthQueried, PULONG ValueType);
NTSTATUS __stdcall WdfRegistryRemoveKey(WDFKEY Key);
NTSTATUS __stdcall WdfRegistryRemoveValue(WDFKEY Key, PCUNICODE_STRING ValueName);
NTSTATUS __stdcall WdfRequestAllocateTimer(WDFREQUEST Request);
NTSTATUS __stdcall WdfRequestChangeTarget(WDFREQUEST Request, WDFIOTARGET IoTarget);
NTSTATUS __stdcall WdfRequestCreate(PWDF_OBJECT_ATTRIBUTES RequestAttributes, WDFIOTARGET IoTarget, WDFREQUEST *Request);
NTSTATUS __stdcall WdfRequestCreateFromIrp(PWDF_OBJECT_ATTRIBUTES RequestAttributes, PIRP Irp, BOOLEAN RequestFreesIrp, WDFREQUEST *Request);
NTSTATUS __stdcall WdfRequestForwardToIoQueue(WDFREQUEST Request, WDFQUEUE DestinationQueue);
NTSTATUS __stdcall WdfRequestForwardToParentDeviceIoQueue(WDFREQUEST Request, WDFQUEUE ParentDeviceQueue, PWDF_REQUEST_FORWARD_OPTIONS ForwardOptions);
NTSTATUS __stdcall WdfRequestGetStatus(WDFREQUEST Request);
NTSTATUS __stdcall WdfRequestMarkCancelableEx(WDFREQUEST Request, PFN_WDF_REQUEST_CANCEL EvtRequestCancel);
NTSTATUS __stdcall WdfRequestProbeAndLockUserBufferForRead(WDFREQUEST Request, PVOID Buffer, size_t Length, WDFMEMORY *MemoryObject);
NTSTATUS __stdcall WdfRequestProbeAndLockUserBufferForWrite(WDFREQUEST Request, PVOID Buffer, size_t Length, WDFMEMORY *MemoryObject);
NTSTATUS __stdcall WdfRequestRequeue(WDFREQUEST Request);
NTSTATUS __stdcall WdfRequestRetrieveInputBuffer(WDFREQUEST Request, size_t MinimumRequiredLength, PVOID *Buffer, size_t *Length);
NTSTATUS __stdcall WdfRequestRetrieveInputMemory(WDFREQUEST Request, WDFMEMORY *Memory);
NTSTATUS __stdcall WdfRequestRetrieveInputWdmMdl(WDFREQUEST Request, PMDL *Mdl);
NTSTATUS __stdcall WdfRequestRetrieveOutputBuffer(WDFREQUEST Request, size_t MinimumRequiredSize, PVOID *Buffer, size_t *Length);
NTSTATUS __stdcall WdfRequestRetrieveOutputMemory(WDFREQUEST Request, WDFMEMORY *Memory);
NTSTATUS __stdcall WdfRequestRetrieveOutputWdmMdl(WDFREQUEST Request, PMDL *Mdl);
NTSTATUS __stdcall WdfRequestRetrieveUnsafeUserInputBuffer(WDFREQUEST Request, size_t MinimumRequiredLength, PVOID *InputBuffer, size_t *Length);
NTSTATUS __stdcall WdfRequestRetrieveUnsafeUserOutputBuffer(WDFREQUEST Request, size_t MinimumRequiredLength, PVOID *OutputBuffer, size_t *Length);
NTSTATUS __stdcall WdfRequestReuse(WDFREQUEST Request, PWDF_REQUEST_REUSE_PARAMS ReuseParams);
NTSTATUS __stdcall WdfRequestUnmarkCancelable(WDFREQUEST Request);
NTSTATUS __stdcall WdfSpinLockCreate(PWDF_OBJECT_ATTRIBUTES SpinLockAttributes, WDFSPINLOCK *SpinLock);
NTSTATUS __stdcall WdfStringCreate(PCUNICODE_STRING UnicodeString, PWDF_OBJECT_ATTRIBUTES StringAttributes, WDFSTRING *String);
NTSTATUS __stdcall WdfTimerCreate(PWDF_TIMER_CONFIG Config, PWDF_OBJECT_ATTRIBUTES Attributes, WDFTIMER *Timer);
NTSTATUS __stdcall WdfUsbInterfaceSelectSetting(WDFUSBINTERFACE UsbInterface, PWDF_OBJECT_ATTRIBUTES PipesAttributes, PWDF_USB_INTERFACE_SELECT_SETTING_PARAMS Params);
NTSTATUS __stdcall WdfUsbTargetDeviceAllocAndQueryString(WDFUSBDEVICE UsbDevice, PWDF_OBJECT_ATTRIBUTES StringMemoryAttributes, WDFMEMORY *StringMemory, PUSHORT NumCharacters, UCHAR StringIndex, USHORT LangID);
NTSTATUS __stdcall WdfUsbTargetDeviceCreate(WDFDEVICE Device, PWDF_OBJECT_ATTRIBUTES Attributes, WDFUSBDEVICE *UsbDevice);
NTSTATUS __stdcall WdfUsbTargetDeviceCreateIsochUrb(WDFUSBDEVICE UsbDevice, PWDF_OBJECT_ATTRIBUTES Attributes, ULONG NumberOfIsochPackets, WDFMEMORY *UrbMemory, PURB *Urb);
NTSTATUS __stdcall WdfUsbTargetDeviceCreateUrb(WDFUSBDEVICE UsbDevice, PWDF_OBJECT_ATTRIBUTES Attributes, WDFMEMORY *UrbMemory, PURB *Urb);
NTSTATUS __stdcall WdfUsbTargetDeviceCreateWithParameters(WDFDEVICE Device, PWDF_USB_DEVICE_CREATE_CONFIG Config, PWDF_OBJECT_ATTRIBUTES Attributes, WDFUSBDEVICE *UsbDevice);
NTSTATUS __stdcall WdfUsbTargetDeviceCyclePortSynchronously(WDFUSBDEVICE UsbDevice);
NTSTATUS __stdcall WdfUsbTargetDeviceFormatRequestForControlTransfer(WDFUSBDEVICE UsbDevice, WDFREQUEST Request, PWDF_USB_CONTROL_SETUP_PACKET SetupPacket, WDFMEMORY TransferMemory, PWDFMEMORY_OFFSET TransferOffset);
NTSTATUS __stdcall WdfUsbTargetDeviceFormatRequestForCyclePort(WDFUSBDEVICE UsbDevice, WDFREQUEST Request);
NTSTATUS __stdcall WdfUsbTargetDeviceFormatRequestForString(WDFUSBDEVICE UsbDevice, WDFREQUEST Request, WDFMEMORY Memory, PWDFMEMORY_OFFSET Offset, UCHAR StringIndex, USHORT LangID);
NTSTATUS __stdcall WdfUsbTargetDeviceFormatRequestForUrb(WDFUSBDEVICE UsbDevice, WDFREQUEST Request, WDFMEMORY UrbMemory, PWDFMEMORY_OFFSET UrbMemoryOffset);
NTSTATUS __stdcall WdfUsbTargetDeviceIsConnectedSynchronous(WDFUSBDEVICE UsbDevice);
NTSTATUS __stdcall WdfUsbTargetDeviceQueryString(WDFUSBDEVICE UsbDevice, WDFREQUEST Request, PWDF_REQUEST_SEND_OPTIONS RequestOptions, PUSHORT String, PUSHORT NumCharacters, UCHAR StringIndex, USHORT LangID);
NTSTATUS __stdcall WdfUsbTargetDeviceQueryUsbCapability(WDFUSBDEVICE UsbDevice, const GUID *CapabilityType, ULONG CapabilityBufferLength, PVOID CapabilityBuffer, PULONG ResultLength);
NTSTATUS __stdcall WdfUsbTargetDeviceResetPortSynchronously(WDFUSBDEVICE UsbDevice);
NTSTATUS __stdcall WdfUsbTargetDeviceRetrieveConfigDescriptor(WDFUSBDEVICE UsbDevice, PVOID ConfigDescriptor, PUSHORT ConfigDescriptorLength);
NTSTATUS __stdcall WdfUsbTargetDeviceRetrieveCurrentFrameNumber(WDFUSBDEVICE UsbDevice, PULONG CurrentFrameNumber);
NTSTATUS __stdcall WdfUsbTargetDeviceRetrieveInformation(WDFUSBDEVICE UsbDevice, PWDF_USB_DEVICE_INFORMATION Information);
NTSTATUS __stdcall WdfUsbTargetDeviceSelectConfig(WDFUSBDEVICE UsbDevice, PWDF_OBJECT_ATTRIBUTES PipeAttributes, PWDF_USB_DEVICE_SELECT_CONFIG_PARAMS Params);
NTSTATUS __stdcall WdfUsbTargetDeviceSendControlTransferSynchronously(WDFUSBDEVICE UsbDevice, WDFREQUEST Request, PWDF_REQUEST_SEND_OPTIONS RequestOptions, PWDF_USB_CONTROL_SETUP_PACKET SetupPacket, PWDF_MEMORY_DESCRIPTOR MemoryDescriptor, PULONG BytesTransferred);
NTSTATUS __stdcall WdfUsbTargetDeviceSendUrbSynchronously(WDFUSBDEVICE UsbDevice, WDFREQUEST Request, PWDF_REQUEST_SEND_OPTIONS RequestOptions, PURB Urb);
NTSTATUS __stdcall WdfUsbTargetPipeAbortSynchronously(WDFUSBPIPE Pipe, WDFREQUEST Request, PWDF_REQUEST_SEND_OPTIONS RequestOptions);
NTSTATUS __stdcall WdfUsbTargetPipeConfigContinuousReader(WDFUSBPIPE Pipe, PWDF_USB_CONTINUOUS_READER_CONFIG Config);
NTSTATUS __stdcall WdfUsbTargetPipeFormatRequestForAbort(WDFUSBPIPE Pipe, WDFREQUEST Request);
NTSTATUS __stdcall WdfUsbTargetPipeFormatRequestForRead(WDFUSBPIPE Pipe, WDFREQUEST Request, WDFMEMORY ReadMemory, PWDFMEMORY_OFFSET ReadOffset);
NTSTATUS __stdcall WdfUsbTargetPipeFormatRequestForReset(WDFUSBPIPE Pipe, WDFREQUEST Request);
NTSTATUS __stdcall WdfUsbTargetPipeFormatRequestForUrb(WDFUSBPIPE PIPE, WDFREQUEST Request, WDFMEMORY UrbMemory, PWDFMEMORY_OFFSET UrbMemoryOffset);
NTSTATUS __stdcall WdfUsbTargetPipeFormatRequestForWrite(WDFUSBPIPE Pipe, WDFREQUEST Request, WDFMEMORY WriteMemory, PWDFMEMORY_OFFSET WriteOffset);
NTSTATUS __stdcall WdfUsbTargetPipeReadSynchronously(WDFUSBPIPE Pipe, WDFREQUEST Request, PWDF_REQUEST_SEND_OPTIONS RequestOptions, PWDF_MEMORY_DESCRIPTOR MemoryDescriptor, PULONG BytesRead);
NTSTATUS __stdcall WdfUsbTargetPipeResetSynchronously(WDFUSBPIPE Pipe, WDFREQUEST Request, PWDF_REQUEST_SEND_OPTIONS RequestOptions);
NTSTATUS __stdcall WdfUsbTargetPipeSendUrbSynchronously(WDFUSBPIPE Pipe, WDFREQUEST Request, PWDF_REQUEST_SEND_OPTIONS RequestOptions, PURB Urb);
NTSTATUS __stdcall WdfUsbTargetPipeWriteSynchronously(WDFUSBPIPE Pipe, WDFREQUEST Request, PWDF_REQUEST_SEND_OPTIONS RequestOptions, PWDF_MEMORY_DESCRIPTOR MemoryDescriptor, PULONG BytesWritten);
NTSTATUS __stdcall WdfWaitLockAcquire(WDFWAITLOCK Lock, PLONGLONG Timeout);
NTSTATUS __stdcall WdfWaitLockCreate(PWDF_OBJECT_ATTRIBUTES LockAttributes, WDFWAITLOCK *Lock);
NTSTATUS __stdcall WdfWmiInstanceCreate(WDFDEVICE Device, PWDF_WMI_INSTANCE_CONFIG InstanceConfig, PWDF_OBJECT_ATTRIBUTES InstanceAttributes, WDFWMIINSTANCE *Instance);
NTSTATUS __stdcall WdfWmiInstanceFireEvent(WDFWMIINSTANCE WmiInstance, ULONG EventDataSize, PVOID EventData);
NTSTATUS __stdcall WdfWmiInstanceRegister(WDFWMIINSTANCE WmiInstance);
NTSTATUS __stdcall WdfWmiProviderCreate(WDFDEVICE Device, PWDF_WMI_PROVIDER_CONFIG WmiProviderConfig, PWDF_OBJECT_ATTRIBUTES ProviderAttributes, WDFWMIPROVIDER *WmiProvider);
NTSTATUS __stdcall WdfWorkItemCreate(PWDF_WORKITEM_CONFIG Config, PWDF_OBJECT_ATTRIBUTES Attributes, WDFWORKITEM *WorkItem);
NTSTATUS __stdcall WdmlibIoConnectInterruptEx(PIO_CONNECT_INTERRUPT_PARAMETERS Parameters);
NTSTATUS __stdcall WdmlibIoCreateDeviceSecure(PDRIVER_OBJECT DriverObject, ULONG DeviceExtensionSize, PUNICODE_STRING DeviceName, ULONG DeviceType, ULONG DeviceCharacteristics, BOOLEAN Exclusive, PCUNICODE_STRING DefaultSDDLString, LPCGUID DeviceClassGuid, PDEVICE_OBJECT *DeviceObject);
NTSTATUS __stdcall WdmlibIoDisconnectInterruptEx(PIO_DISCONNECT_INTERRUPT_PARAMETERS Parameters);
NTSTATUS __stdcall WdmlibIoGetAffinityInterrupt(PKINTERRUPT InterruptObject, PGROUP_AFFINITY GroupAffinity);
NTSTATUS __stdcall WdmlibIoValidateDeviceIoControlAccess(PIRP Irp, ULONG RequiredAccess);
NTSTATUS __stdcall WdmlibKeGetProcessorNumberFromIndex(ULONG ProcIndex, PPROCESSOR_NUMBER ProcNumber);
NTSTATUS __stdcall WdmlibKeSetTargetProcessorDpcEx(PKDPC Dpc, PPROCESSOR_NUMBER ProcNumber);
NTSTATUS __stdcall WdmlibRtlInitUnicodeStringEx(PUNICODE_STRING DestinationString, PCWSTR SourceString);
NTSTATUS __stdcall WheaFindErrorRecordSection(PWHEA_ERROR_RECORD Record, const GUID *SectionType, PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR *SectionDescriptor, PVOID *SectionData);
NTSTATUS __stdcall WheaFindNextErrorRecordSection(PWHEA_ERROR_RECORD Record, ULONG *Context, PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR *SectionDescriptor, PVOID *SectionData);
NTSTATUS __stdcall WheaRegisterInUsePageOfflineNotification(PFN_IN_USE_PAGE_OFFLINE_NOTIFY Callback, PVOID Context);
NTSTATUS __stdcall WheaUnregisterInUsePageOfflineNotification(PFN_IN_USE_PAGE_OFFLINE_NOTIFY Callback);
NTSTATUS __stdcall WmiCompleteRequest(PDEVICE_OBJECT DeviceObject, PIRP Irp, NTSTATUS Status, ULONG BufferUsed, CCHAR PriorityBoost);
NTSTATUS __stdcall WmiFireEvent(PDEVICE_OBJECT DeviceObject, LPCGUID Guid, ULONG InstanceIndex, ULONG EventDataSize, PVOID EventData);
NTSTATUS __stdcall WmiQueryTraceInformation(TRACE_INFORMATION_CLASS TraceInformationClass, PVOID TraceInformation, ULONG TraceInformationLength, PULONG RequiredLength, PVOID Buffer);
NTSTATUS __stdcall WmiSystemControl(PWMILIB_CONTEXT WmiLibInfo, PDEVICE_OBJECT DeviceObject, PIRP Irp, PSYSCTL_IRP_DISPOSITION IrpDisposition);
NTSTATUS __stdcall WskCaptureProviderNPI(PWSK_REGISTRATION WskRegistration, ULONG WaitTimeout, PWSK_PROVIDER_NPI WskProviderNpi);
NTSTATUS __stdcall WskQueryProviderCharacteristics(PWSK_REGISTRATION WskRegistration, PWSK_PROVIDER_CHARACTERISTICS WskProviderCharacteristics);
NTSTATUS __stdcall WskRegister(PWSK_CLIENT_NPI WskClientNpi, PWSK_REGISTRATION WskRegistration);
NTSTATUS __stdcall ZwAllocateLocallyUniqueId(PLUID Luid);
NTSTATUS __stdcall ZwAllocateVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);
NTSTATUS __stdcall ZwAllocateVirtualMemoryEx(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG AllocationType, ULONG PageProtection, PMEM_EXTENDED_PARAMETER ExtendedParameters, ULONG ExtendedParameterCount);
NTSTATUS __stdcall ZwCancelTimer(HANDLE TimerHandle, PBOOLEAN CurrentState);
NTSTATUS __stdcall ZwClose(HANDLE Handle);
NTSTATUS __stdcall ZwCommitComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall ZwCommitEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall ZwCommitRegistryTransaction(HANDLE TransactionHandle, ULONG Flags);
NTSTATUS __stdcall ZwCommitTransaction(HANDLE TransactionHandle, BOOLEAN Wait);
NTSTATUS __stdcall ZwCreateDirectoryObject(PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS __stdcall ZwCreateEnlistment(PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);
NTSTATUS __stdcall ZwCreateEvent(PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);
NTSTATUS __stdcall ZwCreateFile(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);
NTSTATUS __stdcall ZwCreateKey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);
NTSTATUS __stdcall ZwCreateKeyTransacted(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, HANDLE TransactionHandle, PULONG Disposition);
NTSTATUS __stdcall ZwCreateRegistryTransaction(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions);
NTSTATUS __stdcall ZwCreateResourceManager(PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);
NTSTATUS __stdcall ZwCreateSection(PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);
NTSTATUS __stdcall ZwCreateTimer(PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);
NTSTATUS __stdcall ZwCreateTransaction(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description);
NTSTATUS __stdcall ZwCreateTransactionManager(PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength);
NTSTATUS __stdcall ZwDeleteFile(POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS __stdcall ZwDeleteKey(HANDLE KeyHandle);
NTSTATUS __stdcall ZwDeleteValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName);
NTSTATUS __stdcall ZwDeviceIoControlFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
NTSTATUS __stdcall ZwDisplayString(PUNICODE_STRING String);
NTSTATUS __stdcall ZwDuplicateObject(HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);
NTSTATUS __stdcall ZwDuplicateToken(HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);
NTSTATUS __stdcall ZwEnumerateKey(HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);
NTSTATUS __stdcall ZwEnumerateTransactionObject(HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength);
NTSTATUS __stdcall ZwEnumerateValueKey(HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);
NTSTATUS __stdcall ZwFlushBuffersFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);
NTSTATUS __stdcall ZwFlushBuffersFileEx(HANDLE FileHandle, ULONG FLags, PVOID Parameters, ULONG ParametersSize, PIO_STATUS_BLOCK IoStatusBlock);
NTSTATUS __stdcall ZwFlushKey(HANDLE KeyHandle);
NTSTATUS __stdcall ZwFlushVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);
NTSTATUS __stdcall ZwFreeVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);
NTSTATUS __stdcall ZwFsControlFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG FsControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
NTSTATUS __stdcall ZwGetNotificationResourceManager(HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG_PTR AsynchronousContext);
NTSTATUS __stdcall ZwLoadDriver(PUNICODE_STRING DriverServiceName);
NTSTATUS __stdcall ZwLockFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);
NTSTATUS __stdcall ZwMakeTemporaryObject(HANDLE Handle);
NTSTATUS __stdcall ZwMapViewOfSection(HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, ULONG Win32Protect);
NTSTATUS __stdcall ZwNotifyChangeKey(HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);
NTSTATUS __stdcall ZwOpenDirectoryObject(PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS __stdcall ZwOpenEnlistment(PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE RmHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS __stdcall ZwOpenEvent(PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS __stdcall ZwOpenFile(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);
NTSTATUS __stdcall ZwOpenKey(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS __stdcall ZwOpenKeyEx(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions);
NTSTATUS __stdcall ZwOpenKeyTransacted(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE TransactionHandle);
NTSTATUS __stdcall ZwOpenKeyTransactedEx(PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions, HANDLE TransactionHandle);
NTSTATUS __stdcall ZwOpenProcess(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);
NTSTATUS __stdcall ZwOpenProcessTokenEx(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);
NTSTATUS __stdcall ZwOpenResourceManager(PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS __stdcall ZwOpenSection(PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS __stdcall ZwOpenSymbolicLinkObject(PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS __stdcall ZwOpenThreadTokenEx(HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);
NTSTATUS __stdcall ZwOpenTimer(PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS __stdcall ZwOpenTransaction(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);
NTSTATUS __stdcall ZwOpenTransactionManager(PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);
NTSTATUS __stdcall ZwPowerInformation(POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);
NTSTATUS __stdcall ZwPrePrepareComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall ZwPrePrepareEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall ZwPrepareComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall ZwPrepareEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall ZwQueryDirectoryFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);
NTSTATUS __stdcall ZwQueryDirectoryFileEx(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, ULONG QueryFlags, PUNICODE_STRING FileName);
NTSTATUS __stdcall ZwQueryEaFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);
NTSTATUS __stdcall ZwQueryFullAttributesFile(POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);
NTSTATUS __stdcall ZwQueryInformationByName(POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
NTSTATUS __stdcall ZwQueryInformationEnlistment(HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);
NTSTATUS __stdcall ZwQueryInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
NTSTATUS __stdcall ZwQueryInformationResourceManager(HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);
NTSTATUS __stdcall ZwQueryInformationToken(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);
NTSTATUS __stdcall ZwQueryInformationTransaction(HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);
NTSTATUS __stdcall ZwQueryInformationTransactionManager(HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);
NTSTATUS __stdcall ZwQueryKey(HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);
NTSTATUS __stdcall ZwQueryObject(HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);
NTSTATUS __stdcall ZwQueryQuotaInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PSID StartSid, BOOLEAN RestartScan);
NTSTATUS __stdcall ZwQuerySecurityObject(HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);
NTSTATUS __stdcall ZwQuerySymbolicLinkObject(HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);
NTSTATUS __stdcall ZwQueryValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);
NTSTATUS __stdcall ZwQueryVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);
NTSTATUS __stdcall ZwQueryVolumeInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);
NTSTATUS __stdcall ZwReadFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
NTSTATUS __stdcall ZwReadOnlyEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall ZwRecoverEnlistment(HANDLE EnlistmentHandle, PVOID EnlistmentKey);
NTSTATUS __stdcall ZwRecoverResourceManager(HANDLE ResourceManagerHandle);
NTSTATUS __stdcall ZwRecoverTransactionManager(HANDLE TransactionManagerHandle);
NTSTATUS __stdcall ZwRenameKey(HANDLE KeyHandle, PUNICODE_STRING NewName);
NTSTATUS __stdcall ZwRestoreKey(HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);
NTSTATUS __stdcall ZwRollbackComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall ZwRollbackEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall ZwRollbackTransaction(HANDLE TransactionHandle, BOOLEAN Wait);
NTSTATUS __stdcall ZwRollforwardTransactionManager(HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall ZwSaveKey(HANDLE KeyHandle, HANDLE FileHandle);
NTSTATUS __stdcall ZwSaveKeyEx(HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);
NTSTATUS __stdcall ZwSetEaFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);
NTSTATUS __stdcall ZwSetEvent(HANDLE EventHandle, PLONG PreviousState);
NTSTATUS __stdcall ZwSetInformationEnlistment(HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);
NTSTATUS __stdcall ZwSetInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
NTSTATUS __stdcall ZwSetInformationKey(HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);
NTSTATUS __stdcall ZwSetInformationResourceManager(HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);
NTSTATUS __stdcall ZwSetInformationThread(HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);
NTSTATUS __stdcall ZwSetInformationToken(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);
NTSTATUS __stdcall ZwSetInformationTransaction(HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);
NTSTATUS __stdcall ZwSetInformationTransactionManager(HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength);
NTSTATUS __stdcall ZwSetInformationVirtualMemory(HANDLE ProcessHandle, VIRTUAL_MEMORY_INFORMATION_CLASS VmInformationClass, ULONG_PTR NumberOfEntries, PMEMORY_RANGE_ENTRY VirtualAddresses, PVOID VmInformation, ULONG VmInformationLength);
NTSTATUS __stdcall ZwSetQuotaInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);
NTSTATUS __stdcall ZwSetSecurityObject(HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);
NTSTATUS __stdcall ZwSetTimer(HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN ResumeTimer, LONG Period, PBOOLEAN PreviousState);
NTSTATUS __stdcall ZwSetTimerEx(HANDLE TimerHandle, TIMER_SET_INFORMATION_CLASS TimerSetInformationClass, PVOID TimerSetInformation, ULONG TimerSetInformationLength);
NTSTATUS __stdcall ZwSetValueKey(HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);
NTSTATUS __stdcall ZwSetVolumeInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);
NTSTATUS __stdcall ZwSinglePhaseReject(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS __stdcall ZwTerminateProcess(HANDLE ProcessHandle, NTSTATUS ExitStatus);
NTSTATUS __stdcall ZwUnloadDriver(PUNICODE_STRING DriverServiceName);
NTSTATUS __stdcall ZwUnlockFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);
NTSTATUS __stdcall ZwUnmapViewOfSection(HANDLE ProcessHandle, PVOID BaseAddress);
NTSTATUS __stdcall ZwWaitForSingleObject(HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
NTSTATUS __stdcall ZwWriteFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);
NTSTATUS __stdcall _RxAcquireFcb(PFCB Fcb, PRX_CONTEXT RxContext, ULONG Mode, ULONG LineNumber, PCSTR FileName, ULONG SerialNumber);
NTSTATUS __stdcall _RxSynchronizeBlockingOperations(PRX_CONTEXT RxContext, PFCB Fcb, PLIST_ENTRY BlockingIoQ, BOOLEAN DropFcbLock);
NTSTATUS __stdcall imp_WppRecorderDumpLiveDriverData(PVOID WppCb, PVOID *OutBuffer, PULONG OutBufferLength, LPGUID Guid);
NTSTATUS __stdcall imp_WppRecorderGetTriageInfo(PVOID WppCb, PWPP_TRIAGE_INFO WppTriageInfo);
NTSTATUS __stdcall imp_WppRecorderLinkCounters(PVOID WppCb, WPP_RECORDER_COUNTER CounterOwner);
NTSTATUS __stdcall imp_WppRecorderLogCreate(PVOID WppCb, PRECORDER_LOG_CREATE_PARAMS CreateParams, RECORDER_LOG *RecorderLog);
NTSTATUS __stdcall imp_WppRecorderLogDumpLiveData(PVOID WppCb, RECORDER_LOG RecorderLog, PVOID *OutBuffer, PULONG OutBufferLength, LPGUID Guid);
OS_DEPLOYEMENT_STATE_VALUES __stdcall RtlOsDeploymentState(ULONG Flags);
PACCESS_TOKEN __stdcall PsReferenceImpersonationToken(PETHREAD Thread, PBOOLEAN CopyOnOpen, PBOOLEAN EffectiveOnly, PSECURITY_IMPERSONATION_LEVEL ImpersonationLevel);
PACCESS_TOKEN __stdcall PsReferencePrimaryToken(PEPROCESS Process);
PADAPTER_OBJECT __stdcall HalGetAdapter(PDEVICE_DESCRIPTION DeviceDescription, PULONG NumberOfMapRegisters);
PCDB __stdcall SrbGetCdb(PVOID Srb);
PCDB __stdcall SrbGetScsiData(PSTORAGE_REQUEST_BLOCK SrbEx, PUCHAR CdbLength8, PULONG CdbLength32, PUCHAR ScsiStatus, PVOID *SenseInfoBuffer, PUCHAR SenseInfoBufferLength);
PCHAR __stdcall FltGetIrpName(UCHAR IrpMajorCode);
PCHAR __stdcall if_indextoname(NET_IFINDEX InterfaceIndex, PCHAR InterfaceName);
PCLASS_DRIVER_EXTENSION __stdcall ClassGetDriverExtension(PDRIVER_OBJECT DriverObject);
PCM_PARTIAL_RESOURCE_DESCRIPTOR __stdcall WdfCmResourceListGetDescriptor(WDFCMRESLIST List, ULONG Index);
PCNET_DATAPATH_DESCRIPTOR __stdcall NetRxQueueGetDatapathDescriptor(NETPACKETQUEUE NetRxQueue);
PCNET_DATAPATH_DESCRIPTOR __stdcall NetTxQueueGetDatapathDescriptor(NETPACKETQUEUE NetTxQueue);
PCONFIGURATION_INFORMATION IoGetConfigurationInformation(void);
PCONTROLLER_OBJECT __stdcall IoCreateController(ULONG Size);
PCSRT_RESOURCE_DESCRIPTOR_HEADER __stdcall GetNextResourceDescriptor(ULONG Handle, PCSRT_RESOURCE_GROUP_HEADER ResourceGroup, PCSRT_RESOURCE_DESCRIPTOR_HEADER ResourceDescriptor, USHORT ResourceType, USHORT ResourceSubtype, ULONG ResourceID);
PCWSTR __stdcall RtlGetNtSystemRoot();
PDEVICE_DSM_RANGE __stdcall DeviceDsmDataSetRanges(PDEVICE_DSM_INPUT Input);
PDEVICE_OBJECT __stdcall DsmGetPDO(PVOID MPIOContext, PDEVICE_OBJECT DeviceObject);
PDEVICE_OBJECT __stdcall IoAttachDeviceToDeviceStack(PDEVICE_OBJECT SourceDevice, PDEVICE_OBJECT TargetDevice);
PDEVICE_OBJECT __stdcall IoGetAttachedDevice(PDEVICE_OBJECT DeviceObject);
PDEVICE_OBJECT __stdcall IoGetAttachedDeviceReference(PDEVICE_OBJECT DeviceObject);
PDEVICE_OBJECT __stdcall IoGetBaseFileSystemDeviceObject(PFILE_OBJECT FileObject);
PDEVICE_OBJECT __stdcall IoGetDeviceAttachmentBaseRef(PDEVICE_OBJECT DeviceObject);
PDEVICE_OBJECT __stdcall IoGetDeviceToVerify(PETHREAD Thread);
PDEVICE_OBJECT __stdcall IoGetLowerDeviceObject(PDEVICE_OBJECT DeviceObject);
PDEVICE_OBJECT __stdcall IoGetRelatedDeviceObject(PFILE_OBJECT FileObject);
PDEVICE_OBJECT __stdcall KsPinGetConnectedPinDeviceObject(PKSPIN Pin);
PDEVICE_OBJECT __stdcall KsQueryDevicePnpObject(KSDEVICE_HEADER Header);
PDEVICE_OBJECT __stdcall WdfDeviceWdmGetAttachedDevice(WDFDEVICE Device);
PDEVICE_OBJECT __stdcall WdfDeviceWdmGetDeviceObject(WDFDEVICE Device);
PDEVICE_OBJECT __stdcall WdfDeviceWdmGetPhysicalDevice(WDFDEVICE Device);
PDEVICE_OBJECT __stdcall WdfFdoInitWdmGetPhysicalDevice(PWDFDEVICE_INIT DeviceInit);
PDEVICE_OBJECT __stdcall WdfIoTargetWdmGetTargetDeviceObject(WDFIOTARGET IoTarget);
PDEVICE_OBJECT __stdcall WdfIoTargetWdmGetTargetPhysicalDevice(WDFIOTARGET IoTarget);
PDMA __stdcall VideoPortAssociateEventsWithDmaHandle(PVOID HwDeviceExtension, PVIDEO_REQUEST_PACKET pVrp, PVOID MappedUserEvent, PVOID DisplayDriverEvent);
PDMA __stdcall VideoPortDoDma(PVOID HwDeviceExtension, PDMA pDma, DMA_FLAGS DmaFlags);
PDMA __stdcall VideoPortMapDmaMemory(PVOID HwDeviceExtension, PVIDEO_REQUEST_PACKET pVrp, LARGE_INTEGER BoardAddress, PULONG Length, PULONG InIoSpace, PVOID MappedUserEvent, PVOID DisplayDriverEvent, PVOID *VirtualAddress);
PDMA_ADAPTER __stdcall WdfDmaEnablerWdmGetDmaAdapter(WDFDMAENABLER DmaEnabler, WDF_DMA_DIRECTION DmaDirection);
PDRIVER_CANCEL __stdcall IoSetCancelRoutine(PIRP Irp, PDRIVER_CANCEL CancelRoutine);
PDRIVER_OBJECT __stdcall WdfDriverWdmGetDriverObject(WDFDRIVER Driver);
PDSM_IDS __stdcall DsmGetAssociatedDevice(PVOID MPIOContext, PDEVICE_OBJECT PortFdo, UCHAR DeviceType);
PEPROCESS IoGetCurrentProcess(void);
PEPROCESS RxGetRDBSSProcess(void);
PEPROCESS __stdcall FltGetRequestorProcess(PFLT_CALLBACK_DATA CallbackData);
PEPROCESS __stdcall IoGetInitiatorProcess(PFILE_OBJECT FileObject);
PEPROCESS __stdcall IoGetRequestorProcess(PIRP Irp);
PEPROCESS __stdcall IoThreadToProcess(PETHREAD Thread);
PEPROCESS __stdcall PsGetThreadProcess(PETHREAD Thread);
PERESOURCE FsRtlAllocateResource(void);
PESILO PsGetCurrentServerSilo(void);
PESILO PsGetCurrentSilo(void);
PESILO PsGetHostSilo(void);
PESILO __stdcall IoGetSilo(PFILE_OBJECT FileObject);
PESILO __stdcall PsAttachSiloToCurrentThread(PESILO Silo);
PESILO __stdcall PsGetEffectiveServerSilo(PESILO Silo);
PESILO __stdcall PsGetParentSilo(PEJOB Job);
PESILO __stdcall PsGetThreadServerSilo(PETHREAD Thread);
PETHREAD PsGetCurrentThread(void);
PEVENT_DESCRIPTOR __stdcall EventDescOrKeyword(PEVENT_DESCRIPTOR EventDescriptor, ULONGLONG Keyword);
PEVENT_DESCRIPTOR __stdcall EventDescSetChannel(PEVENT_DESCRIPTOR EventDescriptor, UCHAR Channel);
PEVENT_DESCRIPTOR __stdcall EventDescSetId(PEVENT_DESCRIPTOR EventDescriptor, USHORT Id);
PEVENT_DESCRIPTOR __stdcall EventDescSetKeyword(PEVENT_DESCRIPTOR EventDescriptor, ULONGLONG Keyword);
PEVENT_DESCRIPTOR __stdcall EventDescSetLevel(PEVENT_DESCRIPTOR EventDescriptor, UCHAR Level);
PEVENT_DESCRIPTOR __stdcall EventDescSetOpcode(PEVENT_DESCRIPTOR EventDescriptor, UCHAR Opcode);
PEVENT_DESCRIPTOR __stdcall EventDescSetTask(PEVENT_DESCRIPTOR EventDescriptor, USHORT Task);
PEVENT_DESCRIPTOR __stdcall EventDescSetVersion(PEVENT_DESCRIPTOR EventDescriptor, UCHAR Version);
PEX_RUNDOWN_REF_CACHE_AWARE __stdcall ExAllocateCacheAwareRundownProtection(POOL_TYPE PoolType, ULONG PoolTag);
PEX_TIMER __stdcall ExAllocateTimer(PEXT_CALLBACK Callback, PVOID CallbackContext, ULONG Attributes);
PFCB __stdcall RxCreateNetFcb(PRX_CONTEXT RxContext, PIRP Irp, PV_NET_ROOT VNetRoot, PUNICODE_STRING Name);
PFCB __stdcall RxFcbTableLookupFcb(PRX_FCB_TABLE FcbTable, PUNICODE_STRING Path);
PFILE_LOCK __stdcall FltAllocateFileLock(PFLT_COMPLETE_LOCK_CALLBACK_DATA_ROUTINE CompleteLockCallbackDataRoutine, PUNLOCK_ROUTINE UnlockRoutine);
PFILE_LOCK __stdcall FsRtlAllocateFileLock(PCOMPLETE_LOCK_IRP_ROUTINE CompleteLockIrpRoutine, PUNLOCK_ROUTINE UnlockRoutine);
PFILE_LOCK_INFO __stdcall FsRtlGetNextFileLock(PFILE_LOCK FileLock, BOOLEAN Restart);
PFILE_OBJECT __stdcall CcGetFileObjectFromBcb(PVOID Bcb);
PFILE_OBJECT __stdcall CcGetFileObjectFromSectionPtrs(PSECTION_OBJECT_POINTERS SectionObjectPointer);
PFILE_OBJECT __stdcall CcGetFileObjectFromSectionPtrsRef(PSECTION_OBJECT_POINTERS SectionObjectPointer);
PFILE_OBJECT __stdcall IoCreateStreamFileObject(PFILE_OBJECT FileObject, PDEVICE_OBJECT DeviceObject);
PFILE_OBJECT __stdcall IoCreateStreamFileObjectEx(PFILE_OBJECT FileObject, PDEVICE_OBJECT DeviceObject, PHANDLE FileHandle);
PFILE_OBJECT __stdcall IoCreateStreamFileObjectLite(PFILE_OBJECT FileObject, PDEVICE_OBJECT DeviceObject);
PFILE_OBJECT __stdcall KsPinGetConnectedPinFileObject(PKSPIN Pin);
PFILE_OBJECT __stdcall WdfFileObjectWdmGetFileObject(WDFFILEOBJECT FileObject);
PFILE_OBJECT __stdcall WdfIoTargetWdmGetTargetFileObject(WDFIOTARGET IoTarget);
PFILE_OBJECT_EXTENSION __stdcall ClassGetFsContext(PCOMMON_DEVICE_EXTENSION CommonExtension, PFILE_OBJECT FileObject);
PFLT_CALLBACK_DATA __stdcall FltCbdqRemoveIo(PFLT_CALLBACK_DATA_QUEUE Cbdq, PFLT_CALLBACK_DATA_QUEUE_IO_CONTEXT Context);
PFLT_CALLBACK_DATA __stdcall FltCbdqRemoveNextIo(PFLT_CALLBACK_DATA_QUEUE Cbdq, PVOID PeekContext);
PFLT_DEFERRED_IO_WORKITEM __stdcall FltAllocateDeferredIoWorkItem();
PFLT_GENERIC_WORKITEM __stdcall FltAllocateGenericWorkItem();
PFN_NUMBER __stdcall FsRtlIsExtentDangling(PFN_NUMBER StartPage, PFN_NUMBER NumberOfPages, ULONG Flags);
PFSRTL_PER_FILEOBJECT_CONTEXT __stdcall FsRtlLookupPerFileObjectContext(PFILE_OBJECT FileObject, PVOID OwnerId, PVOID InstanceId);
PFSRTL_PER_FILEOBJECT_CONTEXT __stdcall FsRtlRemovePerFileObjectContext(PFILE_OBJECT FileObject, PVOID OwnerId, PVOID InstanceId);
PFSRTL_PER_FILE_CONTEXT __stdcall FsRtlLookupPerFileContext(PVOID *PerFileContextPointer, PVOID OwnerId, PVOID InstanceId);
PFSRTL_PER_FILE_CONTEXT __stdcall FsRtlRemovePerFileContext(PVOID *PerFileContextPointer, PVOID OwnerId, PVOID InstanceId);
PFSRTL_PER_STREAM_CONTEXT __stdcall FsRtlLookupPerStreamContextInternal(PFSRTL_ADVANCED_FCB_HEADER StreamContext, PVOID OwnerId, PVOID InstanceId);
PFSRTL_PER_STREAM_CONTEXT __stdcall FsRtlRemovePerStreamContext(PFSRTL_ADVANCED_FCB_HEADER StreamContext, PVOID OwnerId, PVOID InstanceId);
PFULL_PTR_XLAT_TABLES __stdcall NdrFullPointerXlatInit(unsigned int NumberOfPointers, XLAT_SIDE XlatSide);
PGENERIC_MAPPING IoGetFileObjectGenericMapping(void);
PHYSICAL_ADDRESS __stdcall IoMapTransfer(PDMA_ADAPTER DmaAdapter, PMDL Mdl, PVOID MapRegisterBase, PVOID CurrentVa, PULONG Length, BOOLEAN WriteToDevice);
PHYSICAL_ADDRESS __stdcall MmGetPhysicalAddress(PVOID BaseAddress);
PIDE_REQUEST_BLOCK __stdcall AtaPortBuildRequestSenseIrb(PVOID ChannelExtension, PIDE_REQUEST_BLOCK Irb);
PIDE_SCATTER_GATHER_LIST __stdcall AtaPortGetScatterGatherList(PVOID ChannelExtension, PIDE_REQUEST_BLOCK Irb);
PIMAGE_EXPORT_DIRECTORY __stdcall AuxKlibGetImageExportDirectory(PVOID ImageBase);
PIO_FOEXT_SILO_PARAMETERS __stdcall IoGetSiloParameters(PFILE_OBJECT FileObject);
PIO_RESOURCE_DESCRIPTOR __stdcall WdfIoResourceListGetDescriptor(WDFIORESLIST ResourceList, ULONG Index);
PIO_STACK_LOCATION __stdcall IoGetCurrentIrpStackLocation(PIRP Irp);
PIO_STACK_LOCATION __stdcall IoGetNextIrpStackLocation(PIRP Irp);
PIO_WORKITEM __stdcall IoAllocateWorkItem(PDEVICE_OBJECT DeviceObject);
PIRP IoGetTopLevelIrp(void);
PIRP RxGetTopIrpIfRdbssIrp(void);
PIRP __stdcall IoAllocateIrp(CCHAR StackSize, BOOLEAN ChargeQuota);
PIRP __stdcall IoAllocateIrpEx(PDEVICE_OBJECT DeviceObject, CCHAR StackSize, BOOLEAN ChargeQuota);
PIRP __stdcall IoBuildAsynchronousFsdRequest(ULONG MajorFunction, PDEVICE_OBJECT DeviceObject, PVOID Buffer, ULONG Length, PLARGE_INTEGER StartingOffset, PIO_STATUS_BLOCK IoStatusBlock);
PIRP __stdcall IoBuildDeviceIoControlRequest(ULONG IoControlCode, PDEVICE_OBJECT DeviceObject, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, BOOLEAN InternalDeviceIoControl, PKEVENT Event, PIO_STATUS_BLOCK IoStatusBlock);
PIRP __stdcall IoBuildSynchronousFsdRequest(ULONG MajorFunction, PDEVICE_OBJECT DeviceObject, PVOID Buffer, ULONG Length, PLARGE_INTEGER StartingOffset, PKEVENT Event, PIO_STATUS_BLOCK IoStatusBlock);
PIRP __stdcall IoCsqRemoveIrp(PIO_CSQ Csq, PIO_CSQ_IRP_CONTEXT Context);
PIRP __stdcall IoCsqRemoveNextIrp(PIO_CSQ Csq, PVOID PeekContext);
PIRP __stdcall IoMakeAssociatedIrp(PIRP Irp, CCHAR StackSize);
PIRP __stdcall IoMakeAssociatedIrpEx(PIRP Irp, PDEVICE_OBJECT DeviceObject, CCHAR StackSize);
PIRP __stdcall KsRemoveIrpFromCancelableQueue(PLIST_ENTRY QueueHead, PKSPIN_LOCK SpinLock, KSLIST_ENTRY_LOCATION ListLocation, KSIRP_REMOVAL_OPERATION RemovalOperation);
PIRP __stdcall KsStreamPointerGetIrp(PKSSTREAM_POINTER StreamPointer, PBOOLEAN FirstFrameInIrp, PBOOLEAN LastFrameInIrp);
PIRP __stdcall RxCeAllocateIrpWithMDL(CCHAR StackSize, BOOLEAN ChargeQuota, PMDL Buffer);
PIRP __stdcall WdfRequestWdmGetIrp(WDFREQUEST Request);
PKDEVICE_QUEUE_ENTRY __stdcall KeRemoveByKeyDeviceQueue(PKDEVICE_QUEUE DeviceQueue, ULONG SortKey);
PKDEVICE_QUEUE_ENTRY __stdcall KeRemoveByKeyDeviceQueueIfBusy(PKDEVICE_QUEUE DeviceQueue, ULONG SortKey);
PKDEVICE_QUEUE_ENTRY __stdcall KeRemoveDeviceQueue(PKDEVICE_QUEUE DeviceQueue);
PKDPC __stdcall WdfDpcWdmGetDpc(WDFDPC Dpc);
PKEVENT __stdcall IoCreateNotificationEvent(PUNICODE_STRING EventName, PHANDLE EventHandle);
PKEVENT __stdcall IoCreateSynchronizationEvent(PUNICODE_STRING EventName, PHANDLE EventHandle);
PKINTERRUPT __stdcall WdfInterruptWdmGetInterrupt(WDFINTERRUPT Interrupt);
PKPCR KeGetPcr(void);
PKSDEVICE __stdcall KsFilterFactoryGetDevice(PKSFILTERFACTORY FilterFactory);
PKSDEVICE __stdcall KsFilterFactoryGetParentDevice(PKSFILTERFACTORY FilterFactory);
PKSDEVICE __stdcall KsFilterGetDevice(PKSFILTER Filter);
PKSDEVICE __stdcall KsGetDevice(PVOID Object);
PKSDEVICE __stdcall KsGetDeviceForDeviceObject(PDEVICE_OBJECT FunctionalDeviceObject);
PKSDEVICE __stdcall KsPinGetDevice(PKSPIN Pin);
PKSEVENT_ENTRY __stdcall StreamClassGetNextEvent(PVOID HwInstanceExtension_OR_HwDeviceExtension, PHW_STREAM_OBJECT HwStreamObject, GUID *EventGuid, ULONG EventItem, PKSEVENT_ENTRY CurrentEvent);
PKSFILTER __stdcall KsFilterFactoryGetFirstChildFilter(PKSFILTERFACTORY FilterFactory);
PKSFILTER __stdcall KsFilterGetNextSiblingFilter(PKSFILTER Filter);
PKSFILTER __stdcall KsGetFilterFromFileObject(PFILE_OBJECT FileObject);
PKSFILTER __stdcall KsGetFilterFromIrp(PIRP Irp);
PKSFILTER __stdcall KsPinGetParentFilter(PKSPIN Pin);
PKSFILTERFACTORY __stdcall KsDeviceGetFirstChildFilterFactory(PKSDEVICE Device);
PKSFILTERFACTORY __stdcall KsFilterFactoryGetNextSiblingFilterFactory(PKSFILTERFACTORY FilterFactory);
PKSFILTERFACTORY __stdcall KsFilterGetParentFilterFactory(PKSFILTER Filter);
PKSGATE __stdcall KsFilterGetAndGate(PKSFILTER Filter);
PKSGATE __stdcall KsPinGetAndGate(PKSPIN Pin);
PKSOBJECT_CREATE_ITEM __stdcall KsQueryObjectCreateItem(KSOBJECT_HEADER Header);
PKSPIN __stdcall KsFilterGetFirstChildPin(PKSFILTER Filter, ULONG PinId);
PKSPIN __stdcall KsGetPinFromFileObject(PFILE_OBJECT FileObject);
PKSPIN __stdcall KsGetPinFromIrp(PIRP Irp);
PKSPIN __stdcall KsPinGetNextSiblingPin(PKSPIN Pin);
PKSSTREAM_POINTER __stdcall KsPinGetFirstCloneStreamPointer(PKSPIN Pin);
PKSSTREAM_POINTER __stdcall KsPinGetLeadingEdgeStreamPointer(PKSPIN Pin, KSSTREAM_POINTER_STATE State);
PKSSTREAM_POINTER __stdcall KsPinGetTrailingEdgeStreamPointer(PKSPIN Pin, KSSTREAM_POINTER_STATE State);
PKSSTREAM_POINTER __stdcall KsStreamPointerGetNextClone(PKSSTREAM_POINTER StreamPointer);
PKTHREAD KeGetCurrentThread(void);
PLIST_ENTRY __stdcall ExInterlockedInsertHeadList(PLIST_ENTRY ListHead, PLIST_ENTRY ListEntry, PKSPIN_LOCK Lock);
PLIST_ENTRY __stdcall ExInterlockedInsertTailList(PLIST_ENTRY ListHead, PLIST_ENTRY ListEntry, PKSPIN_LOCK Lock);
PLIST_ENTRY __stdcall ExInterlockedRemoveHeadList(PLIST_ENTRY ListHead, PKSPIN_LOCK Lock);
PLIST_ENTRY __stdcall KeRemoveQueue(PRKQUEUE Queue, KPROCESSOR_MODE WaitMode, PLARGE_INTEGER Timeout);
PLIST_ENTRY __stdcall KeRundownQueue(PRKQUEUE Queue);
PLIST_ENTRY __stdcall RemoveHeadList(PLIST_ENTRY ListHead);
PLIST_ENTRY __stdcall RemoveTailList(PLIST_ENTRY ListHead);
PMDL __stdcall FltGetSwappedBufferMdlAddress(PFLT_CALLBACK_DATA CallbackData);
PMDL __stdcall IoAllocateMdl(PVOID VirtualAddress, ULONG Length, BOOLEAN SecondaryBuffer, BOOLEAN ChargeQuota, PIRP Irp);
PMDL __stdcall KsStreamPointerGetMdl(PKSSTREAM_POINTER StreamPointer);
PMDL __stdcall MmAllocateNodePagesForMdlEx(PHYSICAL_ADDRESS LowAddress, PHYSICAL_ADDRESS HighAddress, PHYSICAL_ADDRESS SkipBytes, SIZE_T TotalBytes, MEMORY_CACHING_TYPE CacheType, ULONG IdealNode, ULONG Flags);
PMDL __stdcall MmAllocatePagesForMdl(PHYSICAL_ADDRESS LowAddress, PHYSICAL_ADDRESS HighAddress, PHYSICAL_ADDRESS SkipBytes, SIZE_T TotalBytes);
PMDL __stdcall MmAllocatePagesForMdlEx(PHYSICAL_ADDRESS LowAddress, PHYSICAL_ADDRESS HighAddress, PHYSICAL_ADDRESS SkipBytes, SIZE_T TotalBytes, MEMORY_CACHING_TYPE CacheType, ULONG Flags);
PMDL __stdcall MmAllocatePartitionNodePagesForMdlEx(PHYSICAL_ADDRESS LowAddress, PHYSICAL_ADDRESS HighAddress, PHYSICAL_ADDRESS SkipBytes, SIZE_T TotalBytes, MEMORY_CACHING_TYPE CacheType, ULONG IdealNode, ULONG Flags, PVOID PartitionObject);
PMDL __stdcall MmCreateMdl(PMDL MemoryDescriptorList, PVOID Base, SIZE_T Length);
PMDL __stdcall NdisAllocateMdl(NDIS_HANDLE NdisHandle, PVOID VirtualAddress, UINT Length);
PMRX_FOBX __stdcall RxCreateNetFobx(PRX_CONTEXT RxContext, PMRX_SRV_OPEN MrxSrvOpen);
PNAME_CACHE __stdcall RxNameCacheCreateEntry(PNAME_CACHE_CONTROL NameCacheCtl, PUNICODE_STRING Name, BOOLEAN CaseInsensitive);
PNAME_CACHE __stdcall RxNameCacheFetchEntry(PNAME_CACHE_CONTROL NameCacheCtl, PUNICODE_STRING Name);
PNDIS_GENERIC_OBJECT __stdcall NdisAllocateGenericObject(PDRIVER_OBJECT DriverObject, ULONG Tag, USHORT Size);
PNDIS_OID_REQUEST __stdcall NetRequestWdmGetNdisOidRequest(NETREQUEST Request);
PNDIS_PACKET_STACK __stdcall NdisIMGetCurrentPacketStack(PNDIS_PACKET Packet, BOOLEAN *StacksRemaining);
PNDIS_PM_PROTOCOL_OFFLOAD __stdcall NetPowerSettingsGetProtocolOffload(NETPOWERSETTINGS NetPowerSettings, ULONG Index);
PNDIS_PM_WOL_PATTERN __stdcall NetPowerSettingsGetWakePattern(NETPOWERSETTINGS NetPowerSettings, ULONG Index);
PNDIS_RW_LOCK_EX __stdcall NdisAllocateRWLock(NDIS_HANDLE NdisHandle);
PNETADAPTER_INIT __stdcall NetAdapterInitAllocate(WDFDEVICE Device);
PNETADAPTER_INIT __stdcall NetDefaultAdapterInitAllocate(WDFDEVICE Device);
PNET_BUFFER __stdcall NdisAllocateNetBuffer(NDIS_HANDLE PoolHandle, PMDL MdlChain, ULONG DataOffset, SIZE_T DataLength);
PNET_BUFFER __stdcall NdisAllocateNetBufferMdlAndData(NDIS_HANDLE PoolHandle);
PNET_BUFFER_LIST __stdcall NdisAllocateCloneNetBufferList(PNET_BUFFER_LIST OriginalNetBufferList, NDIS_HANDLE NetBufferListPoolHandle, NDIS_HANDLE NetBufferPoolHandle, ULONG AllocateCloneFlags);
PNET_BUFFER_LIST __stdcall NdisAllocateFragmentNetBufferList(PNET_BUFFER_LIST OriginalNetBufferList, NDIS_HANDLE NetBufferListPool, NDIS_HANDLE NetBufferPool, ULONG StartOffset, ULONG MaximumLength, ULONG DataOffsetDelta, ULONG DataBackFill, ULONG AllocateFragmentFlags);
PNET_BUFFER_LIST __stdcall NdisAllocateNetBufferAndNetBufferList(NDIS_HANDLE PoolHandle, USHORT ContextSize, USHORT ContextBackFill, PMDL MdlChain, ULONG DataOffset, SIZE_T DataLength);
PNET_BUFFER_LIST __stdcall NdisAllocateNetBufferList(NDIS_HANDLE PoolHandle, USHORT ContextSize, USHORT ContextBackFill);
PNET_BUFFER_LIST __stdcall NdisAllocateReassembledNetBufferList(PNET_BUFFER_LIST FragmentNetBufferList, NDIS_HANDLE NetBufferAndNetBufferListPoolHandle, ULONG StartOffset, ULONG DataOffsetDelta, ULONG DataBackFill, ULONG AllocateReassembleFlags);
PNET_PACKET_CONTEXT_TOKEN __stdcall NetRxQueueGetPacketContextToken(NETPACKETQUEUE NetRxQueue, PCNET_CONTEXT_TYPE_INFO ContextTypeInfo);
PNET_PACKET_CONTEXT_TOKEN __stdcall NetTxQueueGetPacketContextToken(NETPACKETQUEUE NetTxQueue, PCNET_CONTEXT_TYPE_INFO ContextTypeInfo);
PNET_ROOT __stdcall RxCreateNetRoot(PSRV_CALL SrvCall, PUNICODE_STRING Name, ULONG NetRootFlags, PRX_CONNECTION_ID RxConnectionId);
POPLOCK_KEY_CONTEXT __stdcall IoGetOplockKeyContextEx(PFILE_OBJECT FileObject);
POPLOCK_KEY_ECP_CONTEXT __stdcall IoGetOplockKeyContext(PFILE_OBJECT FileObject);
POWER_ACTION __stdcall WdfDeviceGetSystemPowerAction(WDFDEVICE Device);
POWER_STATE __stdcall PoSetPowerState(PDEVICE_OBJECT DeviceObject, POWER_STATE_TYPE Type, POWER_STATE State);
PPHYSICAL_MEMORY_RANGE MmGetPhysicalMemoryRanges(void);
PPHYSICAL_MEMORY_RANGE __stdcall MmGetPhysicalMemoryRangesEx(PVOID PartitionObject);
PPREFIX_TABLE_ENTRY __stdcall PfxFindPrefix(PPREFIX_TABLE PrefixTable, PSTRING FullName);
PRDBSS_DEVICE_OBJECT RxGetTopDeviceObjectIfRdbssIrp(void);
PROCESSOR_NUMBER NdisCurrentGroupAndProcessor(void);
PRTL_DYNAMIC_HASH_TABLE_ENTRY __stdcall RtlEnumerateEntryHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable, PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator);
PRTL_DYNAMIC_HASH_TABLE_ENTRY __stdcall RtlGetNextEntryHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable, PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context);
PRTL_DYNAMIC_HASH_TABLE_ENTRY __stdcall RtlLookupEntryHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable, ULONG_PTR Signature, PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context);
PRTL_DYNAMIC_HASH_TABLE_ENTRY __stdcall RtlStronglyEnumerateEntryHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable, PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator);
PRTL_DYNAMIC_HASH_TABLE_ENTRY __stdcall RtlWeaklyEnumerateEntryHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable, PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator);
PRTL_SPLAY_LINKS __stdcall RtlDelete(PRTL_SPLAY_LINKS Links);
PRTL_SPLAY_LINKS __stdcall RtlRealPredecessor(PRTL_SPLAY_LINKS Links);
PRTL_SPLAY_LINKS __stdcall RtlRealSuccessor(PRTL_SPLAY_LINKS Links);
PRTL_SPLAY_LINKS __stdcall RtlSplay(PRTL_SPLAY_LINKS Links);
PRTL_SPLAY_LINKS __stdcall RtlSubtreePredecessor(PRTL_SPLAY_LINKS Links);
PRTL_SPLAY_LINKS __stdcall RtlSubtreeSuccessor(PRTL_SPLAY_LINKS Links);
PRX_CONTEXT __stdcall RxCreateRxContext(PIRP Irp, PRDBSS_DEVICE_OBJECT RxDeviceObject, ULONG InitialContextFlags);
PRX_CONTEXT __stdcall RxRemoveFirstContextFromSerializationQueue(PLIST_ENTRY SerializationQueue);
PRX_LOG_ENTRY_HEADER RxGetNextLogEntry(void);
PRX_MID_ATLAS __stdcall RxCreateMidAtlas(USHORT MaximumNumberOfEntries, USHORT InitialAllocation);
PRX_PREFIX_ENTRY __stdcall RxPrefixTableInsertName(PRX_PREFIX_TABLE ThisTable, PRX_PREFIX_ENTRY ThisEntry, PVOID Container, PULONG ContainerRefCount, USHORT CaseInsensitiveLength, PRX_CONNECTION_ID ConnectionId);
PRX_PREFIX_ENTRY __stdcall RxTableLookupName_ExactLengthMatch(PRX_PREFIX_TABLE ThisTable, PUNICODE_STRING Name, ULONG HashValue, PRX_CONNECTION_ID RxConnectionId);
PSCSI_REQUEST_BLOCK __stdcall ScsiPortGetSrb(PVOID DeviceExtension, UCHAR PathId, UCHAR TargetId, UCHAR Lun, LONG QueueTag);
PSDP_NODE __stdcall SdpCreateNodeAlternative(ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeBoolean(SDP_BOOLEAN bVal, ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeInt128(PSDP_LARGE_INTEGER_16 uil16Val, ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeInt16(SHORT sVal, ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeInt32(LONG lVal, ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeInt64(LONGLONG llVal, ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeInt8(CHAR cVal, ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeNil(ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeSequence(ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeString(PCHAR string, ULONG stringLength, ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeUInt128(PSDP_ULARGE_INTEGER_16 puli16Val, ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeUInt16(USHORT usVal, ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeUInt32(ULONG ulVal, ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeUInt64(ULONGLONG ullVal, ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeUInt8(UCHAR ucVal, ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeUUID128(const GUID *uuid, ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeUUID16(USHORT uuidVal2, ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeUUID32(ULONG uuidVal4, ULONG tag);
PSDP_NODE __stdcall SdpCreateNodeUrl(PCHAR url, ULONG urlLength, ULONG tag);
PSDP_TREE_ROOT_NODE __stdcall SdpCreateNodeTree(ULONG tag);
PSID_IDENTIFIER_AUTHORITY __stdcall RtlIdentifierAuthoritySid(PSID Sid);
PSINGLE_LIST_ENTRY __stdcall ExInterlockedPopEntryList(PSINGLE_LIST_ENTRY ListHead, PKSPIN_LOCK Lock);
PSINGLE_LIST_ENTRY __stdcall ExInterlockedPushEntryList(PSINGLE_LIST_ENTRY ListHead, PSINGLE_LIST_ENTRY ListEntry, PKSPIN_LOCK Lock);
PSINGLE_LIST_ENTRY __stdcall PopEntryList(PSINGLE_LIST_ENTRY ListHead);
PSLIST_ENTRY __stdcall ExpInterlockedFlushSList(PSLIST_HEADER ListHead);
PSLIST_ENTRY __stdcall ExpInterlockedPopEntrySList(PSLIST_HEADER ListHead);
PSLIST_ENTRY __stdcall ExpInterlockedPushEntrySList(PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry);
PSLIST_ENTRY __stdcall FirstEntrySList(PSLIST_HEADER SListHead);
PSLIST_ENTRY __stdcall InterlockedPushListSList(PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, ULONG Count);
PSRBEX_DATA __stdcall SrbGetPrimarySrbExData(PSTORAGE_REQUEST_BLOCK Srb);
PSRBEX_DATA __stdcall SrbGetSrbExDataByIndex(PSTORAGE_REQUEST_BLOCK Srb, ULONG SrbExDataIndex);
PSRBEX_DATA __stdcall SrbGetSrbExDataByType(PSTORAGE_REQUEST_BLOCK Srb, SRBEXDATATYPE Type);
PSRV_CALL __stdcall RxCreateSrvCall(PRX_CONTEXT RxContext, PUNICODE_STRING Name, PUNICODE_STRING InnerNamePrefix, PRX_CONNECTION_ID RxConnectionId);
PSRV_OPEN __stdcall RxCreateSrvOpen(PV_NET_ROOT VNetRoot, PFCB Fcb);
PSTORAGE_ERRORLOG_PACKET __stdcall StorTraceErrorAllocRecord(PVOID DeviceExtension, STORAGE_TRACE_CONTEXT TraceContext, ULONG Size);
PSTOR_ADDRESS __stdcall SrbGetAddress(PSTORAGE_REQUEST_BLOCK Srb);
PSTR __stdcall RtlEthernetAddressToStringA(const DL_EUI48 *Addr, PSTR S);
PSTR __stdcall RtlIpv4AddressToStringA(const struct in_addr *Addr, PSTR S);
PSTR __stdcall RtlIpv6AddressToStringA(const struct in6_addr *Addr, PSTR S);
PSecurityFunctionTableW __stdcall InitSecurityInterfaceW();
PTXN_PARAMETER_BLOCK __stdcall IoGetTransactionParameterBlock(PFILE_OBJECT FileObject);
PUCHAR __stdcall INETADDR_ADDRESS(const SOCKADDR *a);
PUCHAR __stdcall RtlSubAuthorityCountSid(PSID Sid);
PUDECXUSBDEVICE_INIT __stdcall UdecxUsbDeviceInitAllocate(WDFDEVICE UdecxWdfDevice);
PUDECXUSBENDPOINT_INIT __stdcall UdecxUsbSimpleEndpointInitAllocate(UDECXUSBDEVICE UdecxUsbDevice);
PULONG __stdcall PoRegisterDeviceForIdleDetection(PDEVICE_OBJECT DeviceObject, ULONG ConservationIdleTime, ULONG PerformanceIdleTime, DEVICE_POWER_STATE State);
PULONG __stdcall RtlSubAuthoritySid(PSID Sid, ULONG SubAuthority);
PUNICODE_PREFIX_TABLE_ENTRY __stdcall RtlFindUnicodePrefix(PUNICODE_PREFIX_TABLE PrefixTable, PCUNICODE_STRING FullName, ULONG CaseInsensitiveIndex);
PUNICODE_PREFIX_TABLE_ENTRY __stdcall RtlNextUnicodePrefix(PUNICODE_PREFIX_TABLE PrefixTable, BOOLEAN Restart);
PUNICODE_STRING PsGetCurrentServerSiloName(void);
PUNICODE_STRING __stdcall GET_ALREADY_PREFIXED_NAME(PMRX_SRV_OPEN SrvOpen, PMRX_FCB Fcb);
PUNICODE_STRING __stdcall KsFilterFactoryGetSymbolicLink(PKSFILTERFACTORY FilterFactory);
PUNICODE_STRING __stdcall WdfFileObjectGetFileName(WDFFILEOBJECT FileObject);
PUNKNOWN __stdcall KsDeviceGetOuterUnknown(PKSDEVICE Device);
PUNKNOWN __stdcall KsDeviceRegisterAggregatedClientUnknown(PKSDEVICE Device, PUNKNOWN ClientUnknown);
PUNKNOWN __stdcall KsFilterFactoryGetOuterUnknown(PKSFILTERFACTORY FilterFactory);
PUNKNOWN __stdcall KsFilterFactoryRegisterAggregatedClientUnknown(PKSFILTERFACTORY FilterFactory, PUNKNOWN ClientUnknown);
PUNKNOWN __stdcall KsFilterGetOuterUnknown(PKSFILTER Filter);
PUNKNOWN __stdcall KsFilterRegisterAggregatedClientUnknown(PKSFILTER Filter, PUNKNOWN ClientUnknown);
PUNKNOWN __stdcall KsGetOuterUnknown(PVOID Object);
PUNKNOWN __stdcall KsPinGetOuterUnknown(PKSPIN Pin);
PUNKNOWN __stdcall KsPinRegisterAggregatedClientUnknown(PKSPIN Pin, PUNKNOWN ClientUnknown);
PUNKNOWN __stdcall KsRegisterAggregatedClientUnknown(PVOID Object, PUNKNOWN ClientUnknown);
PURB __stdcall USBD_CreateConfigurationRequest(PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor, PUSHORT Siz);
PURB __stdcall USBD_CreateConfigurationRequestEx(PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor, PUSBD_INTERFACE_LIST_ENTRY InterfaceList);
PUSB_COMMON_DESCRIPTOR __stdcall USBD_ParseDescriptors(PVOID DescriptorBuffer, ULONG TotalLength, PVOID StartPosition, LONG DescriptorType);
PUSB_INTERFACE_DESCRIPTOR __stdcall USBD_ParseConfigurationDescriptor(PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor, UCHAR InterfaceNumber, UCHAR AlternateSetting);
PUSB_INTERFACE_DESCRIPTOR __stdcall USBD_ParseConfigurationDescriptorEx(PUSB_CONFIGURATION_DESCRIPTOR ConfigurationDescriptor, PVOID StartPosition, LONG InterfaceNumber, LONG AlternateSetting, LONG InterfaceClass, LONG InterfaceSubClass, LONG InterfaceProtocol);
PUWSTR __cdecl uaw_wcschr(PCUWSTR String, WCHAR Character);
PUWSTR __cdecl uaw_wcscpy(PUWSTR Destination, PCUWSTR Source);
PUWSTR __cdecl uaw_wcsrchr(PCUWSTR String, WCHAR Character);
PVIDEO_DEBUG_REPORT __stdcall VideoPortDbgReportCreate(PVOID HwDeviceExtension, ULONG ulCode, ULONG_PTR ulpArg1, ULONG_PTR ulpArg2, ULONG_PTR ulpArg3, ULONG_PTR ulpArg4);
PVOID IoGetInitialStack(void);
PVOID PsGetCurrentThreadTeb(void);
PVOID ReturnAddress(void);
PVOID __stdcall AtaPortGetDeviceBase(PVOID ChannelExtension, IDE_PHYSICAL_ADDRESS IoAddress, ULONG NumberOfBytes);
PVOID __stdcall AtaPortGetUnCachedExtension(PVOID ChannelExtension, ULONG UncachedExtensionSize, ULONG IrbExtensionSize);
PVOID __stdcall AtaPortRegistryAllocateBuffer(PVOID ChannelExtension, ULONG BufferSize);
PVOID __stdcall CcRemapBcb(PVOID Bcb);
PVOID __stdcall ChangerClassAllocatePool(POOL_TYPE PoolType, ULONG NumberOfBytes);
PVOID __stdcall ClassFindModePage(PCHAR ModeSenseBuffer, ULONG Length, UCHAR PageMode, BOOLEAN Use6Byte);
PVOID __stdcall CmGetBoundTransaction(PLARGE_INTEGER Cookie, PVOID Object);
PVOID __stdcall DeviceDsmOutputBlock(PDEVICE_DSM_OUTPUT Output);
PVOID __stdcall DeviceDsmParameterBlock(PDEVICE_DSM_INPUT Input);
PVOID __stdcall DlAllocateCommonBuffer(PVOID DeviceHandle, PVP_DMA_ADAPTER DlpDmaAdapter, ULONG DesiredLength, PPHYSICAL_ADDRESS LogicalAddress, BOOLEAN CacheEnabled, PVOID Reserved);
PVOID __stdcall DlAllocatePool(PVOID DeviceHandle, VP_POOL_TYPE PoolType, SIZE_T NumberOfBytes, ULONG Tag);
PVOID __stdcall DlGetAssociatedDeviceExtension(PVOID DeviceObject);
PVOID __stdcall DlGetDeviceBase(PVOID DeviceHandle, LARGE_INTEGER IoAddress, ULONG NumberOfUchars, UCHAR InIoSpace);
PVOID __stdcall DlGetRomImage(PVOID DeviceHandle, PVOID Unused1, ULONG Unused2, ULONG Length);
PVOID __stdcall DlLockBuffer(PVOID DeviceHandle, PVOID BaseAddress, ULONG Length, VP_LOCK_OPERATION Operation);
PVOID __stdcall DsmGetContextFromSrb(PSCSI_REQUEST_BLOCK Srb);
PVOID __stdcall ExAllocateFromLookasideListEx(PLOOKASIDE_LIST_EX Lookaside);
PVOID __stdcall ExAllocateFromNPagedLookasideList(PNPAGED_LOOKASIDE_LIST Lookaside);
PVOID __stdcall ExAllocateFromPagedLookasideList(PPAGED_LOOKASIDE_LIST Lookaside);
PVOID __stdcall ExAllocatePool(POOL_TYPE PoolType, SIZE_T NumberOfBytes);
PVOID __stdcall ExAllocatePoolWithQuota(POOL_TYPE PoolType, SIZE_T NumberOfBytes);
PVOID __stdcall ExAllocatePoolWithQuotaTag(POOL_TYPE PoolType, SIZE_T NumberOfBytes, ULONG Tag);
PVOID __stdcall ExAllocatePoolWithTag(POOL_TYPE PoolType, SIZE_T NumberOfBytes, ULONG Tag);
PVOID __stdcall ExAllocatePoolWithTagPriority(POOL_TYPE PoolType, SIZE_T NumberOfBytes, ULONG Tag, EX_POOL_PRIORITY Priority);
PVOID __stdcall ExEnterCriticalRegionAndAcquireResourceExclusive(PERESOURCE Resource);
PVOID __stdcall ExEnterCriticalRegionAndAcquireResourceShared(PERESOURCE Resource);
PVOID __stdcall ExEnterCriticalRegionAndAcquireSharedWaitForExclusive(PERESOURCE Resource);
PVOID __stdcall ExRegisterCallback(PCALLBACK_OBJECT CallbackObject, PCALLBACK_FUNCTION CallbackFunction, PVOID CallbackContext);
PVOID __stdcall FltAllocatePoolAlignedWithTag(PFLT_INSTANCE Instance, POOL_TYPE PoolType, SIZE_T NumberOfBytes, ULONG Tag);
PVOID __stdcall FltGetIoAttributionHandleFromCallbackData(PFLT_CALLBACK_DATA Data);
PVOID __stdcall FltGetNewSystemBufferAddress(PFLT_CALLBACK_DATA CallbackData);
PVOID __stdcall FltGetRoutineAddress(PCSTR FltMgrRoutineName);
PVOID __stdcall FltRetrieveFileInfoOnCreateCompletion(PFLT_FILTER Filter, PFLT_CALLBACK_DATA Data, ULONG InfoClass, PULONG Size);
PVOID __stdcall GetAcpiTable(ULONG Handle, ULONG Signature, PCSTR OemId, PCSTR OemTableId);
PVOID __stdcall HalAllocateCommonBuffer(PDMA_ADAPTER DmaAdapter, ULONG Length, PPHYSICAL_ADDRESS LogicalAddress, BOOLEAN CacheEnabled);
PVOID __stdcall HalAllocateCrashDumpRegisters(PADAPTER_OBJECT AdapterObject, PULONG NumberOfMapRegisters);
PVOID __stdcall HalMapIoSpace(LARGE_INTEGER PhysicalAddress, SIZE_T NumberOfBytes, MEMORY_CACHING_TYPE CacheType);
PVOID __stdcall InterlockedCompareExchangePointer(volatile PVOID *Destination, PVOID Exchange, PVOID Comperand);
PVOID __stdcall InterlockedExchangePointer(volatile PVOID *Target, PVOID Value);
PVOID __stdcall IoAllocateErrorLogEntry(PVOID IoObject, UCHAR EntrySize);
PVOID __stdcall IoGetDriverObjectExtension(PDRIVER_OBJECT DriverObject, PVOID ClientIdentificationAddress);
PVOID __stdcall IoGetSfioStreamIdentifier(PFILE_OBJECT FileObject, PVOID Signature);
PVOID __stdcall IoRegisterBootDriverCallback(PBOOT_DRIVER_CALLBACK_FUNCTION CallbackFunction, PVOID CallbackContext);
PVOID __stdcall KeRegisterBoundCallback(PBOUND_CALLBACK CallbackRoutine);
PVOID __stdcall KeRegisterNmiCallback(PNMI_CALLBACK CallbackRoutine, PVOID Context);
PVOID __stdcall KeRegisterProcessorChangeCallback(PPROCESSOR_CALLBACK_FUNCTION CallbackFunction, PVOID CallbackContext, ULONG Flags);
PVOID __stdcall KsGetFirstChild(PVOID Object);
PVOID __stdcall KsGetNextSibling(PVOID Object);
PVOID __stdcall KsGetObjectFromFileObject(PFILE_OBJECT FileObject);
PVOID __stdcall KsGetParent(PVOID Object);
PVOID __stdcall MbbRequestGetBuffer(MBBREQUEST Request, size_t *BufferSize);
PVOID __stdcall MmAllocateContiguousMemory(SIZE_T NumberOfBytes, PHYSICAL_ADDRESS HighestAcceptableAddress);
PVOID __stdcall MmAllocateContiguousMemorySpecifyCache(SIZE_T NumberOfBytes, PHYSICAL_ADDRESS LowestAcceptableAddress, PHYSICAL_ADDRESS HighestAcceptableAddress, PHYSICAL_ADDRESS BoundaryAddressMultiple, MEMORY_CACHING_TYPE CacheType);
PVOID __stdcall MmAllocateContiguousMemorySpecifyCacheNode(SIZE_T NumberOfBytes, PHYSICAL_ADDRESS LowestAcceptableAddress, PHYSICAL_ADDRESS HighestAcceptableAddress, PHYSICAL_ADDRESS BoundaryAddressMultiple, MEMORY_CACHING_TYPE CacheType, NODE_REQUIREMENT PreferredNode);
PVOID __stdcall MmAllocateContiguousNodeMemory(SIZE_T NumberOfBytes, PHYSICAL_ADDRESS LowestAcceptableAddress, PHYSICAL_ADDRESS HighestAcceptableAddress, PHYSICAL_ADDRESS BoundaryAddressMultiple, ULONG Protect, NODE_REQUIREMENT PreferredNode);
PVOID __stdcall MmAllocateMappingAddress(SIZE_T NumberOfBytes, ULONG PoolTag);
PVOID __stdcall MmAllocateNonCachedMemory(SIZE_T NumberOfBytes);
PVOID __stdcall MmGetSystemAddressForMdlSafe(PMDL Mdl, ULONG Priority);
PVOID __stdcall MmGetSystemRoutineAddress(PUNICODE_STRING SystemRoutineName);
PVOID __stdcall MmGetVirtualForPhysical(PHYSICAL_ADDRESS PhysicalAddress);
PVOID __stdcall MmLockPagableDataSection(PVOID AddressWithinSection);
PVOID __stdcall MmMapIoSpace(PHYSICAL_ADDRESS PhysicalAddress, SIZE_T NumberOfBytes, MEMORY_CACHING_TYPE CacheType);
PVOID __stdcall MmMapIoSpaceEx(PHYSICAL_ADDRESS PhysicalAddress, SIZE_T NumberOfBytes, ULONG Protect);
PVOID __stdcall MmMapLockedPages(PMDL MemoryDescriptorList, KPROCESSOR_MODE AccessMode);
PVOID __stdcall MmMapLockedPagesSpecifyCache(PMDL MemoryDescriptorList, KPROCESSOR_MODE AccessMode, MEMORY_CACHING_TYPE CacheType, PVOID RequestedAddress, ULONG BugCheckOnFailure, ULONG Priority);
PVOID __stdcall MmMapLockedPagesWithReservedMapping(PVOID MappingAddress, ULONG PoolTag, PMDL MemoryDescriptorList, MEMORY_CACHING_TYPE CacheType);
PVOID __stdcall MmMapVideoDisplay(PHYSICAL_ADDRESS PhysicalAddress, SIZE_T NumberOfBytes, MEMORY_CACHING_TYPE CacheType);
PVOID __stdcall MmPageEntireDriver(PVOID AddressWithinSection);
PVOID __stdcall NdisAllocateMemoryWithTagPriority(NDIS_HANDLE NdisHandle, UINT Length, ULONG Tag, EX_POOL_PRIORITY Priority);
PVOID __stdcall NdisGetDataBuffer(PNET_BUFFER NetBuffer, ULONG BytesNeeded, PVOID Storage, UINT AlignMultiple, UINT AlignOffset);
PVOID __stdcall NdisGetDeviceReservedExtension(PDEVICE_OBJECT DeviceObject);
PVOID __stdcall NdisGetRoutineAddress(PNDIS_STRING NdisRoutineName);
PVOID __stdcall NetPacketGetContextFromToken(PCNET_DATAPATH_DESCRIPTOR Descriptor, NET_PACKET *NetPacket, PNET_PACKET_CONTEXT_TOKEN Token);
PVOID __stdcall NetPacketGetExtension(const NET_PACKET *packet, size_t offset);
PVOID __stdcall NetPacketGetTypedContext(PCNET_DATAPATH_DESCRIPTOR Descriptor, NET_PACKET *NetPacket, PCNET_CONTEXT_TYPE_INFO TypeInfo);
PVOID __stdcall PoRegisterSystemState(PVOID StateHandle, EXECUTION_STATE Flags);
PVOID __stdcall PsGetThreadProperty(PETHREAD Thread, ULONG_PTR Key, ULONG Flags);
PVOID __stdcall PshedAllocateMemory(ULONG Size);
PVOID __stdcall ReadPointerAcquire(const volatile PVOID *Source);
PVOID __stdcall ReadPointerNoFence(const volatile PVOID *Source);
PVOID __stdcall ReadPointerRaw(const volatile PVOID *Source);
PVOID __stdcall RtlAllocateHeap(PVOID HeapHandle, ULONG Flags, SIZE_T Size);
PVOID __stdcall RtlCreateHeap(ULONG Flags, PVOID HeapBase, SIZE_T ReserveSize, SIZE_T CommitSize, PVOID Lock, PRTL_HEAP_PARAMETERS Parameters);
PVOID __stdcall RtlDestroyHeap(PVOID HeapHandle);
PVOID __stdcall RtlEnumerateGenericTable(PRTL_GENERIC_TABLE Table, BOOLEAN Restart);
PVOID __stdcall RtlEnumerateGenericTableAvl(PRTL_AVL_TABLE Table, BOOLEAN Restart);
PVOID __stdcall RtlEnumerateGenericTableLikeADirectory(PRTL_AVL_TABLE Table, PRTL_AVL_MATCH_FUNCTION MatchFunction, PVOID MatchData, ULONG NextFlag, PVOID *RestartKey, PULONG DeleteCount, PVOID Buffer);
PVOID __stdcall RtlEnumerateGenericTableWithoutSplaying(PRTL_GENERIC_TABLE Table, PVOID *RestartKey);
PVOID __stdcall RtlEnumerateGenericTableWithoutSplayingAvl(PRTL_AVL_TABLE Table, PVOID *RestartKey);
PVOID __stdcall RtlFreeSid(PSID Sid);
PVOID __stdcall RtlGetElementGenericTable(PRTL_GENERIC_TABLE Table, ULONG I);
PVOID __stdcall RtlGetElementGenericTableAvl(PRTL_AVL_TABLE Table, ULONG I);
PVOID __stdcall RtlInsertElementGenericTable(PRTL_GENERIC_TABLE Table, PVOID Buffer, CLONG BufferSize, PBOOLEAN NewElement);
PVOID __stdcall RtlInsertElementGenericTableAvl(PRTL_AVL_TABLE Table, PVOID Buffer, CLONG BufferSize, PBOOLEAN NewElement);
PVOID __stdcall RtlInsertElementGenericTableFull(PRTL_GENERIC_TABLE Table, PVOID Buffer, CLONG BufferSize, PBOOLEAN NewElement, PVOID NodeOrParent, TABLE_SEARCH_RESULT SearchResult);
PVOID __stdcall RtlInsertElementGenericTableFullAvl(PRTL_AVL_TABLE Table, PVOID Buffer, CLONG BufferSize, PBOOLEAN NewElement, PVOID NodeOrParent, TABLE_SEARCH_RESULT SearchResult);
PVOID __stdcall RtlLookupElementGenericTable(PRTL_GENERIC_TABLE Table, PVOID Buffer);
PVOID __stdcall RtlLookupElementGenericTableAvl(PRTL_AVL_TABLE Table, PVOID Buffer);
PVOID __stdcall RtlLookupElementGenericTableFull(PRTL_GENERIC_TABLE Table, PVOID Buffer, PVOID *NodeOrParent, TABLE_SEARCH_RESULT *SearchResult);
PVOID __stdcall RtlLookupElementGenericTableFullAvl(PRTL_AVL_TABLE Table, PVOID Buffer, PVOID *NodeOrParent, TABLE_SEARCH_RESULT *SearchResult);
PVOID __stdcall RtlLookupFirstMatchingElementGenericTableAvl(PRTL_AVL_TABLE Table, PVOID Buffer, PVOID *RestartKey);
PVOID __stdcall RtlSecureZeroMemory(PVOID ptr, SIZE_T cnt);
PVOID __stdcall RxAllocateFcbObject(PRDBSS_DEVICE_OBJECT RxDeviceObject, NODE_TYPE_CODE NodeType, POOL_TYPE PoolType, ULONG NameSize, PVOID AlreadyAllocatedObject);
PVOID __stdcall RxAllocateObject(NODE_TYPE_CODE NodeType, PMINIRDR_DISPATCH MRxDispatch, ULONG NameLength);
PVOID __stdcall RxLowIoGetBufferAddress(PRX_CONTEXT RxContext);
PVOID __stdcall RxMapMidToContext(PRX_MID_ATLAS MidAtlas, USHORT Mid);
PVOID __stdcall RxMapSystemBuffer(PRX_CONTEXT RxContext, PIRP Irp);
PVOID __stdcall RxMapUserBuffer(PRX_CONTEXT RxContext, PIRP Irp);
PVOID __stdcall RxPrefixTableLookupName(PRX_PREFIX_TABLE ThisTable, PUNICODE_STRING CanonicalName, PUNICODE_STRING RemainingName, PRX_CONNECTION_ID ConnectionId);
PVOID __stdcall RxTableLookupName(PRX_PREFIX_TABLE ThisTable, PUNICODE_STRING Name, PUNICODE_STRING RemainingName, PRX_CONNECTION_ID RxConnectionId);
PVOID __stdcall ScsiPortGetDeviceBase(PVOID HwDeviceExtension, INTERFACE_TYPE BusType, ULONG SystemIoBusNumber, SCSI_PHYSICAL_ADDRESS IoAddress, ULONG NumberOfBytes, BOOLEAN InIoSpace);
PVOID __stdcall ScsiPortGetLogicalUnit(PVOID HwDeviceExtension, UCHAR PathId, UCHAR TargetId, UCHAR Lun);
PVOID __stdcall ScsiPortGetUncachedExtension(PVOID HwDeviceExtension, PPORT_CONFIGURATION_INFORMATION ConfigInfo, ULONG NumberOfBytes);
PVOID __stdcall ScsiPortGetVirtualAddress(PVOID HwDeviceExtension, SCSI_PHYSICAL_ADDRESS PhysicalAddress);
PVOID __stdcall ScsiPortWmiSetData(PSCSIWMI_REQUEST_CONTEXT RequestContext, ULONG InstanceIndex, ULONG DataLength, PULONG BufferAvail, PULONG SizeNeeded);
PVOID __stdcall SrbGetDataBuffer(PVOID Srb);
PVOID __stdcall SrbGetMiniportContext(PVOID Srb);
PVOID __stdcall SrbGetNextSrb(PVOID Srb);
PVOID __stdcall SrbGetOriginalRequest(PVOID Srb);
PVOID __stdcall SrbGetPortContext(PVOID Srb);
PVOID __stdcall SrbGetSenseInfoBuffer(PVOID Srb);
PVOID __stdcall StorTraceDiagAllocEvent(PVOID DeviceExtension, STORAGE_TRACE_CONTEXT TraceContext, ULONG DataSize, BOOLEAN Allocate);
PVOID __stdcall StreamClassGetDmaBuffer(PVOID HwDeviceExtension);
PVOID __stdcall USBCAMD_AdapterReceivePacket(PHW_STREAM_REQUEST_BLOCK Srb, PUSBCAMD_DEVICE_DATA DeviceData, PDEVICE_OBJECT *DeviceObject, BOOLEAN NeedsCompletion);
PVOID __stdcall VideoPortAllocateCommonBuffer(PVOID HwDeviceExtension, PVP_DMA_ADAPTER VpDmaAdapter, ULONG DesiredLength, PPHYSICAL_ADDRESS LogicalAddress, BOOLEAN CacheEnabled, PVOID Reserved);
PVOID __stdcall VideoPortAllocateContiguousMemory(PVOID HwDeviceExtension, ULONG NumberOfBytes, LARGE_INTEGER HighestAcceptableAddress);
PVOID __stdcall VideoPortAllocatePool(PVOID HwDeviceExtension, VP_POOL_TYPE PoolType, SIZE_T NumberOfBytes, ULONG Tag);
PVOID __stdcall VideoPortGetAssociatedDeviceExtension(PVOID DeviceObject);
PVOID __stdcall VideoPortGetCommonBuffer(PVOID HwDeviceExtension, ULONG DesiredLength, ULONG Alignment, PPHYSICAL_ADDRESS LogicalAddress, PULONG pActualLength, BOOLEAN CacheEnabled);
PVOID __stdcall VideoPortGetDeviceBase(PVOID HwDeviceExtension, LARGE_INTEGER IoAddress, ULONG NumberOfUchars, UCHAR InIoSpace);
PVOID __stdcall VideoPortGetDmaContext(PVOID HwDeviceExtension, PDMA pDma);
PVOID __stdcall VideoPortGetMdl(PVOID HwDeviceExtension, PDMA pDma);
PVOID __stdcall VideoPortGetRomImage(PVOID HwDeviceExtension, PVOID Unused1, ULONG Unused2, ULONG Length);
PVOID __stdcall VideoPortLockBuffer(PVOID HwDeviceExtension, PVOID BaseAddress, ULONG Length, VP_LOCK_OPERATION Operation);
PVOID __stdcall WdfCommonBufferGetAlignedVirtualAddress(WDFCOMMONBUFFER CommonBuffer);
PVOID __stdcall WdfDmaTransactionWdmGetTransferContext(WDFDMATRANSACTION DmaTransaction);
PVOID __stdcall WdfGetTriageInfo();
PVOID __stdcall WdfMemoryGetBuffer(WDFMEMORY Memory, size_t *BufferSize);
PVOID __stdcall WdfObjectGetTypedContextWorker(WDFOBJECT Handle, PCWDF_OBJECT_CONTEXT_TYPE_INFO TypeInfo);
PVPB __stdcall ClassGetVpb(PDEVICE_OBJECT DeviceObject);
PVP_DMA_ADAPTER __stdcall DlGetDmaAdapter(PVOID DeviceHandle, PVP_DEVICE_DESCRIPTION DlpDeviceDescription);
PVP_DMA_ADAPTER __stdcall VideoPortGetDmaAdapter(PVOID HwDeviceExtension, PVP_DEVICE_DESCRIPTION VpDeviceDescription);
PV_NET_ROOT __stdcall RxCreateVNetRoot(PRX_CONTEXT RxContext, PNET_ROOT NetRoot, PUNICODE_STRING CanonicalName, PUNICODE_STRING LocalNetRootName, PUNICODE_STRING FilePath, PRX_CONNECTION_ID RxConnectionId);
PWCHAR __stdcall ScsiPortWmiGetInstanceName(PSCSIWMI_REQUEST_CONTEXT RequestContext);
PWCHAR __stdcall ScsiPortWmiSetInstanceName(PSCSIWMI_REQUEST_CONTEXT RequestContext, ULONG InstanceIndex, ULONG InstanceNameLength, PULONG BufferAvail, PULONG SizeNeeded);
PWDFDEVICE_INIT __stdcall WdfControlDeviceInitAllocate(WDFDRIVER Driver, const UNICODE_STRING *SDDLString);
PWDFDEVICE_INIT __stdcall WdfPdoInitAllocate(WDFDEVICE ParentDevice);
PWHEA_ERROR_PACKET __stdcall WheaGetErrPacketFromErrRecord(PWHEA_ERROR_RECORD Record);
PWSTR __stdcall RtlEthernetAddressToStringW(const DL_EUI48 *Addr, PWSTR S);
PWSTR __stdcall RtlIpv4AddressToStringW(const struct in_addr *Addr, PWSTR S);
PWSTR __stdcall RtlIpv6AddressToStringW(const struct in6_addr *Addr, PWSTR S);
PWSTR __stdcall WdfDriverGetRegistryPath(WDFDRIVER Driver);
RECORDER_LOG __stdcall imp_WppRecorderLogGetDefault(PVOID WppCb);
RPC_ADDRESS_CHANGE_FN *__stdcall I_RpcServerInqAddressChangeFn();
RPC_BINDING_HANDLE __stdcall I_RpcGetCurrentCallHandle();
RPC_BINDING_HANDLE __stdcall NDRCContextBinding(NDR_CCONTEXT CContext);
RPC_SS_THREAD_HANDLE __stdcall RpcSmGetThreadHandle(RPC_STATUS *pStatus);
RPC_SS_THREAD_HANDLE __stdcall RpcSsGetThreadHandle();
RPC_STATUS __stdcall DceErrorInqTextA(RPC_STATUS RpcStatus, RPC_CSTR ErrorText);
RPC_STATUS __stdcall DceErrorInqTextW(RPC_STATUS RpcStatus, RPC_WSTR ErrorText);
RPC_STATUS __stdcall I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned int ExceptionCode);
RPC_STATUS __stdcall I_RpcAsyncSetHandle(PRPC_MESSAGE Message, PRPC_ASYNC_STATE pAsync);
RPC_STATUS __stdcall I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding);
RPC_STATUS __stdcall I_RpcBindingCreateNP(RPC_WSTR ServerName, RPC_WSTR ServiceName, RPC_WSTR NetworkOptions, RPC_BINDING_HANDLE *Binding);
RPC_STATUS __stdcall I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding, void **AsyncHandle);
RPC_STATUS __stdcall I_RpcBindingInqClientTokenAttributes(RPC_BINDING_HANDLE Binding, LUID *TokenId, LUID *AuthenticationId, LUID *ModifiedId);
RPC_STATUS __stdcall I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding, void **ConnId, int *pfFirstCall);
RPC_STATUS __stdcall I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding, RPC_CSTR *DynamicEndpoint);
RPC_STATUS __stdcall I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding, RPC_WSTR *DynamicEndpoint);
RPC_STATUS __stdcall I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding, unsigned int *Pid);
RPC_STATUS __stdcall I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE Binding, unsigned int *MarshalledTargetInfoSize, RPC_CSTR *MarshalledTargetInfo);
RPC_STATUS __stdcall I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding, void **SecurityContextHandle);
RPC_STATUS __stdcall I_RpcBindingInqSecurityContextKeyInfo(RPC_BINDING_HANDLE Binding, void *KeyInfo);
RPC_STATUS __stdcall I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding, unsigned int *Type);
RPC_STATUS __stdcall I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding, unsigned __int8 *WireId);
RPC_STATUS __stdcall I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle, unsigned int *ClientLocalFlag);
RPC_STATUS __stdcall I_RpcBindingIsServerLocal(RPC_BINDING_HANDLE Binding, unsigned int *ServerLocalFlag);
RPC_STATUS __stdcall I_RpcBindingSetAsync(RPC_BINDING_HANDLE Binding, RPC_BLOCKING_FN BlockingFn, unsigned int ServerTid);
RPC_STATUS __stdcall I_RpcBindingSetPrivateOption(RPC_BINDING_HANDLE hBinding, unsigned int option, ULONG_PTR optionValue);
RPC_STATUS __stdcall I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding, unsigned __int16 **StringBinding);
RPC_STATUS __stdcall I_RpcConnectionInqSockBuffSize(unsigned int *RecvBuffSize, unsigned int *SendBuffSize);
RPC_STATUS __stdcall I_RpcConnectionSetSockBuffSize(unsigned int RecvBuffSize, unsigned int SendBuffSize);
RPC_STATUS __stdcall I_RpcFreeBuffer(RPC_MESSAGE *Message);
RPC_STATUS __stdcall I_RpcFreePipeBuffer(RPC_MESSAGE *Message);
RPC_STATUS __stdcall I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle, void **AssociationContext);
RPC_STATUS __stdcall I_RpcGetBuffer(RPC_MESSAGE *Message);
RPC_STATUS __stdcall I_RpcGetBufferWithObject(RPC_MESSAGE *Message, UUID *ObjectUuid);
RPC_STATUS __stdcall I_RpcGetDefaultSD(void **ppSecurityDescriptor);
RPC_STATUS __stdcall I_RpcGetExtendedError();
RPC_STATUS __stdcall I_RpcGetSystemHandle(unsigned __int8 *pMemory, unsigned __int8 Type, unsigned int AccessMask, unsigned int HandleIndex, void *CallObj);
RPC_STATUS __stdcall I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle, RPC_TRANSFER_SYNTAX *TransferSyntaxes, unsigned int TransferSyntaxSize, unsigned int *TransferSyntaxCount);
RPC_STATUS __stdcall I_RpcLaunchDatagramReceiveThread(void *pAddress);
RPC_STATUS __stdcall I_RpcMgmtEnableDedicatedThreadPool();
RPC_STATUS __stdcall I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle, PRPC_RUNDOWN RundownRoutine, void *Context);
RPC_STATUS __stdcall I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message);
RPC_STATUS __stdcall I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding, unsigned int EntryNameSyntax, RPC_CSTR EntryName);
RPC_STATUS __stdcall I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding, unsigned int EntryNameSyntax, RPC_WSTR EntryName);
RPC_STATUS __stdcall I_RpcNsInterfaceExported(unsigned int EntryNameSyntax, unsigned __int16 *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation);
RPC_STATUS __stdcall I_RpcNsInterfaceUnexported(unsigned int EntryNameSyntax, unsigned __int16 *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation);
RPC_STATUS __stdcall I_RpcOpenClientProcess(RPC_BINDING_HANDLE Binding, unsigned int DesiredAccess, void **ClientProcess);
RPC_STATUS __stdcall I_RpcProxyNewConnection(unsigned int ConnectionType, unsigned __int16 *ServerAddress, unsigned __int16 *ServerPort, unsigned __int16 *MinConnTimeout, void *ConnectionParameter, RDR_CALLOUT_STATE *CallOutState, I_RpcProxyCallbackInterface *ProxyCallbackInterface);
RPC_STATUS __stdcall I_RpcReallocPipeBuffer(PRPC_MESSAGE Message, unsigned int NewSize);
RPC_STATUS __stdcall I_RpcReceive(PRPC_MESSAGE Message, unsigned int Size);
RPC_STATUS __stdcall I_RpcReplyToClientWithStatus(void *ConnectionParameter, RPC_STATUS RpcStatus);
RPC_STATUS __stdcall I_RpcSend(PRPC_MESSAGE Message);
RPC_STATUS __stdcall I_RpcSendReceive(RPC_MESSAGE *Message);
RPC_STATUS __stdcall I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context);
RPC_STATUS __stdcall I_RpcServerGetAssociationID(RPC_BINDING_HANDLE Binding, unsigned int *AssociationID);
RPC_STATUS __stdcall I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned int *BufferSize, unsigned int *AddressFormat);
RPC_STATUS __stdcall I_RpcServerInqRemoteConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned int *BufferSize, unsigned int *AddressFormat);
RPC_STATUS __stdcall I_RpcServerInqTransportType(unsigned int *Type);
RPC_STATUS __stdcall I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *pForwardFunction);
RPC_STATUS __stdcall I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *pAddressChangeFn);
RPC_STATUS __stdcall I_RpcServerStartListening(void *hWnd);
RPC_STATUS __stdcall I_RpcServerStartService(RPC_WSTR Protseq, RPC_WSTR Endpoint, RPC_IF_HANDLE IfSpec);
RPC_STATUS __stdcall I_RpcServerStopListening();
RPC_STATUS __stdcall I_RpcServerSubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, void *hEvent);
RPC_STATUS __stdcall I_RpcServerUnregisterEndpointA(RPC_CSTR Protseq, RPC_CSTR Endpoint);
RPC_STATUS __stdcall I_RpcServerUnregisterEndpointW(RPC_WSTR Protseq, RPC_WSTR Endpoint);
RPC_STATUS __stdcall I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy);
RPC_STATUS __stdcall I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy);
RPC_STATUS __stdcall I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, void *Policy);
RPC_STATUS __stdcall I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, void *Policy);
RPC_STATUS __stdcall I_RpcSetSystemHandle(void *Handle, unsigned __int8 Type, unsigned int AccessMask, void *CallObj, unsigned int *HandleIndex);
RPC_STATUS __stdcall I_RpcSetThreadParams(int fClientFree, void *Context, void *hWndClient);
RPC_STATUS __stdcall I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle);
RPC_STATUS __stdcall I_RpcSystemHandleTypeSpecificWork(void *Handle, unsigned __int8 ActualType, unsigned __int8 IdlType, LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION MarshalDirection);
RPC_STATUS __stdcall I_RpcTurnOnEEInfoPropagation();
RPC_STATUS __stdcall I_UuidCreate(UUID *Uuid);
RPC_STATUS __stdcall NdrClientGetSupportedSyntaxes(RPC_CLIENT_INTERFACE *pInf, unsigned int *pCount, MIDL_SYNTAX_INFO **pArr);
RPC_STATUS __stdcall NdrCreateServerInterfaceFromStub(struct IRpcStubBuffer *pStub, RPC_SERVER_INTERFACE *pServerIf);
RPC_STATUS __stdcall NdrGetUserMarshalInfo(unsigned int *pFlags, unsigned int InformationLevel, NDR_USER_MARSHAL_INFO *pMarshalInfo);
RPC_STATUS __stdcall NdrMapCommAndFaultStatus(PMIDL_STUB_MESSAGE pStubMsg, unsigned int *pCommStatus, unsigned int *pFaultStatus, RPC_STATUS Status);
RPC_STATUS __stdcall NdrServerGetSupportedSyntaxes(RPC_SERVER_INTERFACE *pInf, unsigned int *pCount, MIDL_SYNTAX_INFO **pArr, unsigned int *pPreferSyntaxIndex);
RPC_STATUS __stdcall RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned int ExceptionCode);
RPC_STATUS __stdcall RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync, BOOL fAbort);
RPC_STATUS __stdcall RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync, void *Reply);
RPC_STATUS __stdcall RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync);
RPC_STATUS __stdcall RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync, unsigned int Size);
RPC_STATUS __stdcall RpcBindingBind(PRPC_ASYNC_STATE pAsync, RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec);
RPC_STATUS __stdcall RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding);
RPC_STATUS __stdcall RpcBindingCreateW(RPC_BINDING_HANDLE_TEMPLATE_V1_W *Template, RPC_BINDING_HANDLE_SECURITY_V1_W *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding);
RPC_STATUS __stdcall RpcBindingFree(RPC_BINDING_HANDLE *Binding);
RPC_STATUS __stdcall RpcBindingGetTrainingContextHandle(RPC_BINDING_HANDLE Binding, void **ContextHandle);
RPC_STATUS __stdcall RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned int *AuthnLevel, unsigned int *AuthnSvc, unsigned int *AuthzSvc);
RPC_STATUS __stdcall RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned int *AuthnLevel, unsigned int *AuthnSvc, unsigned int *AuthzSvc, unsigned int Flags);
RPC_STATUS __stdcall RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned int *AuthnLevel, unsigned int *AuthnSvc, unsigned int *AuthzSvc, unsigned int Flags);
RPC_STATUS __stdcall RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned int *AuthnLevel, unsigned int *AuthnSvc, unsigned int *AuthzSvc);
RPC_STATUS __stdcall RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned int *AuthnLevel, unsigned int *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned int *AuthzSvc);
RPC_STATUS __stdcall RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned int *AuthnLevel, unsigned int *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned int *AuthzSvc, unsigned int RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS);
RPC_STATUS __stdcall RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned int *AuthnLevel, unsigned int *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned int *AuthzSvc, unsigned int RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS);
RPC_STATUS __stdcall RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned int *AuthnLevel, unsigned int *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned int *AuthzSvc);
RPC_STATUS __stdcall RpcBindingInqObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid);
RPC_STATUS __stdcall RpcBindingInqOption(RPC_BINDING_HANDLE hBinding, unsigned int option, ULONG_PTR *pOptionValue);
RPC_STATUS __stdcall RpcBindingReset(RPC_BINDING_HANDLE Binding);
RPC_STATUS __stdcall RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE *ServerBinding);
RPC_STATUS __stdcall RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned int AuthnLevel, unsigned int AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned int AuthzSvc);
RPC_STATUS __stdcall RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned int AuthnLevel, unsigned int AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned int AuthzSvc, RPC_SECURITY_QOS *SecurityQos);
RPC_STATUS __stdcall RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned int AuthnLevel, unsigned int AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned int AuthzSvc, RPC_SECURITY_QOS *SecurityQOS);
RPC_STATUS __stdcall RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned int AuthnLevel, unsigned int AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned int AuthzSvc);
RPC_STATUS __stdcall RpcBindingSetObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid);
RPC_STATUS __stdcall RpcBindingSetOption(RPC_BINDING_HANDLE hBinding, unsigned int option, ULONG_PTR optionValue);
RPC_STATUS __stdcall RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding);
RPC_STATUS __stdcall RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding);
RPC_STATUS __stdcall RpcBindingUnbind(RPC_BINDING_HANDLE Binding);
RPC_STATUS __stdcall RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector);
RPC_STATUS __stdcall RpcCancelThread(void *Thread);
RPC_STATUS __stdcall RpcCancelThreadEx(void *Thread, int Timeout);
RPC_STATUS __stdcall RpcEpRegisterA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation);
RPC_STATUS __stdcall RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation);
RPC_STATUS __stdcall RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation);
RPC_STATUS __stdcall RpcEpRegisterW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation);
RPC_STATUS __stdcall RpcEpResolveBinding(RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec);
RPC_STATUS __stdcall RpcEpUnregister(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector);
RPC_STATUS __stdcall RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO *ErrorInfo);
RPC_STATUS __stdcall RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle);
RPC_STATUS __stdcall RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE *EnumHandle, BOOL CopyStrings, RPC_EXTENDED_ERROR_INFO *ErrorInfo);
RPC_STATUS __stdcall RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE *EnumHandle, int *Records);
RPC_STATUS __stdcall RpcErrorLoadErrorInfo(PVOID ErrorBlob, size_t BlobSize, RPC_ERROR_ENUM_HANDLE *EnumHandle);
RPC_STATUS __stdcall RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle);
RPC_STATUS __stdcall RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE *EnumHandle, PVOID *ErrorBlob, size_t *BlobSize);
RPC_STATUS __stdcall RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle);
RPC_STATUS __stdcall RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector);
RPC_STATUS __stdcall RpcIfInqId(RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId);
RPC_STATUS __stdcall RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle);
RPC_STATUS __stdcall RpcImpersonateClient2(RPC_BINDING_HANDLE BindingHandle);
RPC_STATUS __stdcall RpcImpersonateClientContainer(RPC_BINDING_HANDLE BindingHandle);
RPC_STATUS __stdcall RpcMgmtEnableIdleCleanup();
RPC_STATUS __stdcall RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding, unsigned int InquiryType, RPC_IF_ID *IfId, unsigned int VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext);
RPC_STATUS __stdcall RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext);
RPC_STATUS __stdcall RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_CSTR *Annotation);
RPC_STATUS __stdcall RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_WSTR *Annotation);
RPC_STATUS __stdcall RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding, RPC_IF_ID *IfId, RPC_BINDING_HANDLE Binding, UUID *ObjectUuid);
RPC_STATUS __stdcall RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding, unsigned int *Timeout);
RPC_STATUS __stdcall RpcMgmtInqDefaultProtectLevel(unsigned int AuthnSvc, unsigned int *AuthnLevel);
RPC_STATUS __stdcall RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR **IfIdVector);
RPC_STATUS __stdcall RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding, unsigned int AuthnSvc, RPC_CSTR *ServerPrincName);
RPC_STATUS __stdcall RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding, unsigned int AuthnSvc, RPC_WSTR *ServerPrincName);
RPC_STATUS __stdcall RpcMgmtInqStats(RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics);
RPC_STATUS __stdcall RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding);
RPC_STATUS __stdcall RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn);
RPC_STATUS __stdcall RpcMgmtSetCancelTimeout(int Timeout);
RPC_STATUS __stdcall RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding, unsigned int Timeout);
RPC_STATUS __stdcall RpcMgmtSetServerStackSize(unsigned int ThreadStackSize);
RPC_STATUS __stdcall RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector);
RPC_STATUS __stdcall RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding);
RPC_STATUS __stdcall RpcMgmtWaitServerListen();
RPC_STATUS __stdcall RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA **ProtseqVector);
RPC_STATUS __stdcall RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW **ProtseqVector);
RPC_STATUS __stdcall RpcNetworkIsProtseqValidA(RPC_CSTR Protseq);
RPC_STATUS __stdcall RpcNetworkIsProtseqValidW(RPC_WSTR Protseq);
RPC_STATUS __stdcall RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding, unsigned int EntryNameSyntax, RPC_CSTR *EntryName);
RPC_STATUS __stdcall RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding, unsigned int EntryNameSyntax, RPC_WSTR *EntryName);
RPC_STATUS __stdcall RpcObjectInqType(UUID *ObjUuid, UUID *TypeUuid);
RPC_STATUS __stdcall RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *InquiryFn);
RPC_STATUS __stdcall RpcObjectSetType(UUID *ObjUuid, UUID *TypeUuid);
RPC_STATUS __stdcall RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector);
RPC_STATUS __stdcall RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector);
RPC_STATUS __stdcall RpcRevertContainerImpersonation();
RPC_STATUS __stdcall RpcRevertToSelf();
RPC_STATUS __stdcall RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle);
RPC_STATUS __stdcall RpcServerCompleteSecurityCallback(RPC_BINDING_HANDLE BindingHandle, RPC_STATUS Status);
RPC_STATUS __stdcall RpcServerInqBindingHandle(RPC_BINDING_HANDLE *Binding);
RPC_STATUS __stdcall RpcServerInqBindings(RPC_BINDING_VECTOR **BindingVector);
RPC_STATUS __stdcall RpcServerInqBindingsEx(void *SecurityDescriptor, RPC_BINDING_VECTOR **BindingVector);
RPC_STATUS __stdcall RpcServerInqDefaultPrincNameA(unsigned int AuthnSvc, RPC_CSTR *PrincName);
RPC_STATUS __stdcall RpcServerInqDefaultPrincNameW(unsigned int AuthnSvc, RPC_WSTR *PrincName);
RPC_STATUS __stdcall RpcServerInqIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void **MgrEpv);
RPC_STATUS __stdcall RpcServerInterfaceGroupActivate(RPC_INTERFACE_GROUP IfGroup);
RPC_STATUS __stdcall RpcServerInterfaceGroupClose(RPC_INTERFACE_GROUP IfGroup);
RPC_STATUS __stdcall RpcServerInterfaceGroupCreateA(RPC_INTERFACE_TEMPLATEA *Interfaces, unsigned int NumIfs, RPC_ENDPOINT_TEMPLATEA *Endpoints, unsigned int NumEndpoints, unsigned int IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN *IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup);
RPC_STATUS __stdcall RpcServerInterfaceGroupCreateW(RPC_INTERFACE_TEMPLATEW *Interfaces, unsigned int NumIfs, RPC_ENDPOINT_TEMPLATEW *Endpoints, unsigned int NumEndpoints, unsigned int IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN *IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup);
RPC_STATUS __stdcall RpcServerInterfaceGroupDeactivate(RPC_INTERFACE_GROUP IfGroup, unsigned int ForceDeactivation);
RPC_STATUS __stdcall RpcServerInterfaceGroupInqBindings(RPC_INTERFACE_GROUP IfGroup, RPC_BINDING_VECTOR **BindingVector);
RPC_STATUS __stdcall RpcServerListen(unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait);
RPC_STATUS __stdcall RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName, unsigned int AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg);
RPC_STATUS __stdcall RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName, unsigned int AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg);
RPC_STATUS __stdcall RpcServerRegisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv);
RPC_STATUS __stdcall RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallbackFn);
RPC_STATUS __stdcall RpcServerRegisterIf3(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallback, void *SecurityDescriptor);
RPC_STATUS __stdcall RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN *IfCallback);
RPC_STATUS __stdcall RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle);
RPC_STATUS __stdcall RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, unsigned int WaitForCallsToComplete);
RPC_STATUS __stdcall RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, int RundownContextHandles);
RPC_STATUS __stdcall RpcServerUseAllProtseqs(unsigned int MaxCalls, void *SecurityDescriptor);
RPC_STATUS __stdcall RpcServerUseAllProtseqsEx(unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy);
RPC_STATUS __stdcall RpcServerUseAllProtseqsIf(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor);
RPC_STATUS __stdcall RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy);
RPC_STATUS __stdcall RpcServerUseProtseqA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor);
RPC_STATUS __stdcall RpcServerUseProtseqEpA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor);
RPC_STATUS __stdcall RpcServerUseProtseqEpExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy);
RPC_STATUS __stdcall RpcServerUseProtseqEpExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy);
RPC_STATUS __stdcall RpcServerUseProtseqEpW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor);
RPC_STATUS __stdcall RpcServerUseProtseqExA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy);
RPC_STATUS __stdcall RpcServerUseProtseqExW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy);
RPC_STATUS __stdcall RpcServerUseProtseqIfA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor);
RPC_STATUS __stdcall RpcServerUseProtseqIfExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy);
RPC_STATUS __stdcall RpcServerUseProtseqIfExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy);
RPC_STATUS __stdcall RpcServerUseProtseqIfW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor);
RPC_STATUS __stdcall RpcServerUseProtseqW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor);
RPC_STATUS __stdcall RpcSmClientFree(void *pNodeToFree);
RPC_STATUS __stdcall RpcSmDestroyClientContext(void **ContextHandle);
RPC_STATUS __stdcall RpcSmDisableAllocate();
RPC_STATUS __stdcall RpcSmEnableAllocate();
RPC_STATUS __stdcall RpcSmFree(void *NodeToFree);
RPC_STATUS __stdcall RpcSmSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree);
RPC_STATUS __stdcall RpcSmSetThreadHandle(RPC_SS_THREAD_HANDLE Id);
RPC_STATUS __stdcall RpcSmSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree, RPC_CLIENT_ALLOC **OldClientAlloc, RPC_CLIENT_FREE **OldClientFree);
RPC_STATUS __stdcall RpcSsGetContextBinding(void *ContextHandle, RPC_BINDING_HANDLE *Binding);
RPC_STATUS __stdcall RpcStringFreeA(RPC_CSTR *String);
RPC_STATUS __stdcall RpcStringFreeW(RPC_WSTR *String);
RPC_STATUS __stdcall RpcTestCancel();
RPC_STATUS __stdcall UuidCreate(UUID *Uuid);
RPC_STATUS __stdcall UuidCreateNil(UUID *NilUuid);
RPC_STATUS __stdcall UuidCreateSequential(UUID *Uuid);
RPC_STATUS __stdcall UuidFromStringA(RPC_CSTR StringUuid, UUID *Uuid);
RPC_STATUS __stdcall UuidFromStringW(RPC_WSTR StringUuid, UUID *Uuid);
RPC_STATUS __stdcall UuidToStringA(const UUID *Uuid, RPC_CSTR *StringUuid);
RPC_STATUS __stdcall UuidToStringW(const UUID *Uuid, RPC_WSTR *StringUuid);
RX_FILE_TYPE __stdcall RxInferFileType(PRX_CONTEXT RxContext);
RX_NC_CHECK_STATUS __stdcall RxNameCacheCheckEntry(PNAME_CACHE NameCache, ULONG MRxContext);
SCOPE_ID __stdcall IN4ADDR_SCOPE_ID(const SOCKADDR_IN *a);
SCOPE_ID __stdcall INETADDR_SCOPE_ID(const SOCKADDR *a);
SCOPE_LEVEL __stdcall IN6_MULTICAST_SCOPE(const UCHAR *Address);
SCOPE_LEVEL __stdcall Ipv4AddressScope(const UCHAR *Address);
SCOPE_LEVEL __stdcall Ipv4MulticastAddressScope(const UCHAR *Address);
SCOPE_LEVEL __stdcall Ipv4UnicastAddressScope(const UCHAR *Address);
SCOPE_LEVEL __stdcall Ipv6AddressScope(const UCHAR *Address);
SCOPE_LEVEL __stdcall Ipv6UnicastAddressScope(const UCHAR *Address);
SCOPE_LEVEL __stdcall ScopeLevel(SCOPE_ID ScopeId);
SCSI_PHYSICAL_ADDRESS __stdcall ScsiPortConvertUlongToPhysicalAddress(ULONG_PTR UlongAddress);
SCSI_PHYSICAL_ADDRESS __stdcall ScsiPortGetPhysicalAddress(PVOID HwDeviceExtension, PSCSI_REQUEST_BLOCK Srb, PVOID VirtualAddress, ULONG *Length);
SECURITY_STATUS __stdcall AcceptSecurityContext(PCredHandle phCredential, PCtxtHandle phContext, PSecBufferDesc pInput, unsigned int fContextReq, unsigned int TargetDataRep, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned int *pfContextAttr, PTimeStamp ptsExpiry);
SECURITY_STATUS __stdcall AcquireCredentialsHandleW(PSECURITY_STRING pPrincipal, PSECURITY_STRING pPackage, unsigned int fCredentialUse, void *pvLogonId, void *pAuthData, SEC_GET_KEY_FN pGetKeyFn, void *pvGetKeyArgument, PCredHandle phCredential, PTimeStamp ptsExpiry);
SECURITY_STATUS __stdcall AddCredentialsA(PCredHandle hCredentials, LPSTR pszPrincipal, LPSTR pszPackage, unsigned int fCredentialUse, void *pAuthData, SEC_GET_KEY_FN pGetKeyFn, void *pvGetKeyArgument, PTimeStamp ptsExpiry);
SECURITY_STATUS __stdcall AddCredentialsW(PCredHandle hCredentials, PSECURITY_STRING pPrincipal, PSECURITY_STRING pPackage, unsigned int fCredentialUse, void *pAuthData, SEC_GET_KEY_FN pGetKeyFn, void *pvGetKeyArgument, PTimeStamp ptsExpiry);
SECURITY_STATUS __stdcall ApplyControlToken(PCtxtHandle phContext, PSecBufferDesc pInput);
SECURITY_STATUS __stdcall CompleteAuthToken(PCtxtHandle phContext, PSecBufferDesc pToken);
SECURITY_STATUS __stdcall DecryptMessage(PCtxtHandle phContext, PSecBufferDesc pMessage, unsigned int MessageSeqNo, unsigned int *pfQOP);
SECURITY_STATUS __stdcall DeleteSecurityContext(PCtxtHandle phContext);
SECURITY_STATUS __stdcall EncryptMessage(PCtxtHandle phContext, unsigned int fQOP, PSecBufferDesc pMessage, unsigned int MessageSeqNo);
SECURITY_STATUS __stdcall EnumerateSecurityPackagesW(unsigned int *pcPackages, PSecPkgInfoW *ppPackageInfo);
SECURITY_STATUS __stdcall ExportSecurityContext(PCtxtHandle phContext, ULONG fFlags, PSecBuffer pPackedContext, void **pToken);
SECURITY_STATUS __stdcall FreeContextBuffer(PVOID pvContextBuffer);
SECURITY_STATUS __stdcall FreeCredentialsHandle(PCredHandle phCredential);
SECURITY_STATUS __stdcall ImpersonateSecurityContext(PCtxtHandle phContext);
SECURITY_STATUS __stdcall ImportSecurityContextW(PSECURITY_STRING pszPackage, PSecBuffer pPackedContext, void *Token, PCtxtHandle phContext);
SECURITY_STATUS __stdcall InitializeSecurityContextW(PCredHandle phCredential, PCtxtHandle phContext, PSECURITY_STRING pTargetName, unsigned int fContextReq, unsigned int Reserved1, unsigned int TargetDataRep, PSecBufferDesc pInput, unsigned int Reserved2, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned int *pfContextAttr, PTimeStamp ptsExpiry);
SECURITY_STATUS __stdcall MakeSignature(PCtxtHandle phContext, unsigned int fQOP, PSecBufferDesc pMessage, unsigned int MessageSeqNo);
SECURITY_STATUS __stdcall QueryContextAttributesExW(PCtxtHandle phContext, unsigned int ulAttribute, void *pBuffer, unsigned int cbBuffer);
SECURITY_STATUS __stdcall QueryContextAttributesW(PCtxtHandle phContext, unsigned int ulAttribute, void *pBuffer);
SECURITY_STATUS __stdcall QueryCredentialsAttributesExW(PCredHandle phCredential, unsigned int ulAttribute, void *pBuffer, unsigned int cbBuffer);
SECURITY_STATUS __stdcall QueryCredentialsAttributesW(PCredHandle phCredential, unsigned int ulAttribute, void *pBuffer);
SECURITY_STATUS __stdcall QuerySecurityContextToken(PCtxtHandle phContext, void **Token);
SECURITY_STATUS __stdcall QuerySecurityPackageInfoW(PSECURITY_STRING pPackageName, PSecPkgInfoW *ppPackageInfo);
SECURITY_STATUS __stdcall RevertSecurityContext(PCtxtHandle phContext);
SECURITY_STATUS __stdcall SetContextAttributesW(PCtxtHandle phContext, unsigned int ulAttribute, void *pBuffer, unsigned int cbBuffer);
SECURITY_STATUS __stdcall SetCredentialsAttributesW(PCredHandle phCredential, unsigned int ulAttribute, void *pBuffer, unsigned int cbBuffer);
SECURITY_STATUS __stdcall SspiAcceptSecurityContextAsync(SspiAsyncContext *AsyncContext, PCredHandle phCredential, PCtxtHandle phContext, PSecBufferDesc pInput, unsigned int fContextReq, unsigned int TargetDataRep, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned int *pfContextAttr, PTimeStamp ptsExpiry);
SECURITY_STATUS __stdcall SspiAcquireCredentialsHandleAsyncA(SspiAsyncContext *AsyncContext, LPSTR pszPrincipal, LPSTR pszPackage, unsigned int fCredentialUse, void *pvLogonId, void *pAuthData, SEC_GET_KEY_FN pGetKeyFn, void *pvGetKeyArgument, PCredHandle phCredential, PTimeStamp ptsExpiry);
SECURITY_STATUS __stdcall SspiAcquireCredentialsHandleAsyncW(SspiAsyncContext *AsyncContext, PSECURITY_STRING pszPrincipal, PSECURITY_STRING pszPackage, unsigned int fCredentialUse, void *pvLogonId, void *pAuthData, SEC_GET_KEY_FN pGetKeyFn, void *pvGetKeyArgument, PCredHandle phCredential, PTimeStamp ptsExpiry);
SECURITY_STATUS __stdcall SspiCompareAuthIdentities(PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity1, PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity2, PBOOLEAN SameSuppliedUser, PBOOLEAN SameSuppliedIdentity);
SECURITY_STATUS __stdcall SspiCopyAuthIdentity(PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData, PSEC_WINNT_AUTH_IDENTITY_OPAQUE *AuthDataCopy);
SECURITY_STATUS __stdcall SspiDeleteSecurityContextAsync(SspiAsyncContext *AsyncContext, PCtxtHandle phContext);
SECURITY_STATUS __stdcall SspiEncodeAuthIdentityAsStrings(PSEC_WINNT_AUTH_IDENTITY_OPAQUE pAuthIdentity, PCWSTR *ppszUserName, PCWSTR *ppszDomainName, PCWSTR *ppszPackedCredentialsString);
SECURITY_STATUS __stdcall SspiEncodeStringsAsAuthIdentity(PCWSTR pszUserName, PCWSTR pszDomainName, PCWSTR pszPackedCredentialsString, PSEC_WINNT_AUTH_IDENTITY_OPAQUE *ppAuthIdentity);
SECURITY_STATUS __stdcall SspiExcludePackage(PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity, PCWSTR pszPackageName, PSEC_WINNT_AUTH_IDENTITY_OPAQUE *ppNewAuthIdentity);
SECURITY_STATUS __stdcall SspiFreeCredentialsHandleAsync(SspiAsyncContext *AsyncContext, PCredHandle phCredential);
SECURITY_STATUS __stdcall SspiGetAsyncCallStatus(SspiAsyncContext *Handle);
SECURITY_STATUS __stdcall SspiGetTargetHostName(PCWSTR pszTargetName, PWSTR *pszHostName);
SECURITY_STATUS __stdcall SspiInitializeSecurityContextAsyncA(SspiAsyncContext *AsyncContext, PCredHandle phCredential, PCtxtHandle phContext, LPSTR pszTargetName, unsigned int fContextReq, unsigned int Reserved1, unsigned int TargetDataRep, PSecBufferDesc pInput, unsigned int Reserved2, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned int *pfContextAttr, PTimeStamp ptsExpiry);
SECURITY_STATUS __stdcall SspiInitializeSecurityContextAsyncW(SspiAsyncContext *AsyncContext, PCredHandle phCredential, PCtxtHandle phContext, PSECURITY_STRING pszTargetName, unsigned int fContextReq, unsigned int Reserved1, unsigned int TargetDataRep, PSecBufferDesc pInput, unsigned int Reserved2, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned int *pfContextAttr, PTimeStamp ptsExpiry);
SECURITY_STATUS __stdcall SspiMarshalAuthIdentity(PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity, unsigned int *AuthIdentityLength, char **AuthIdentityByteArray);
SECURITY_STATUS __stdcall SspiSetAsyncNotifyCallback(SspiAsyncContext *Context, SspiAsyncNotifyCallback Callback, void *CallbackData);
SECURITY_STATUS __stdcall SspiUnmarshalAuthIdentity(unsigned int AuthIdentityLength, char *AuthIdentityByteArray, PSEC_WINNT_AUTH_IDENTITY_OPAQUE *ppAuthIdentity);
SECURITY_STATUS __stdcall SspiValidateAuthIdentity(PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData);
SECURITY_STATUS __stdcall VerifySignature(PCtxtHandle phContext, PSecBufferDesc pMessage, unsigned int MessageSeqNo, unsigned int *pfQOP);
SHORT __stdcall InterlockedCompareExchange16(volatile SHORT *Destination, SHORT ExChange, SHORT Comperand);
SHORT __stdcall InterlockedDecrement16(volatile SHORT *Addend);
SHORT __stdcall InterlockedExchange16(volatile SHORT *Destination, SHORT ExChange);
SHORT __stdcall InterlockedIncrement16(volatile SHORT *Addend);
SHORT __stdcall ReadAcquire16(const volatile SHORT *Source);
SHORT __stdcall ReadNoFence16(const volatile SHORT *Source);
SHORT __stdcall ReadRaw16(const volatile SHORT *Source);
SIZE_T ExSizeOfRundownProtectionCacheAware(void);
SIZE_T __stdcall ExQueryPoolBlockSize(PVOID PoolBlock, PBOOLEAN QuotaCharged);
SIZE_T __stdcall INET_ADDR_LENGTH(ADDRESS_FAMILY af);
SIZE_T __stdcall INET_SOCKADDR_LENGTH(ADDRESS_FAMILY af);
SIZE_T __stdcall MmSizeOfMdl(PVOID Base, SIZE_T Length);
SIZE_T __stdcall NetRxQueueGetPacketExtensionOffset(NETPACKETQUEUE NetRxQueue, const PNET_PACKET_EXTENSION_QUERY ExtensionToGet);
SIZE_T __stdcall NetTxQueueGetPacketExtensionOffset(NETPACKETQUEUE NetTxQueue, const PNET_PACKET_EXTENSION_QUERY ExtensionToGet);
SIZE_T __stdcall RtlCompareMemory(const void *Source1, const void *Source2, SIZE_T Length);
SIZE_T __stdcall RtlCompareMemoryUlong(PVOID Source, SIZE_T Length, ULONG Pattern);
SPBTARGET __stdcall SpbRequestGetTarget(SPBREQUEST SpbRequest);
SPB_TRANSFER_LIST_ENTRY __stdcall SPB_TRANSFER_LIST_ENTRY_INIT_BUFFER_LIST(SPB_TRANSFER_DIRECTION Direction, ULONG DelayInUs, SPB_TRANSFER_BUFFER_LIST_ENTRY BufferList[], ULONG BufferListCe);
SPB_TRANSFER_LIST_ENTRY __stdcall SPB_TRANSFER_LIST_ENTRY_INIT_MDL(SPB_TRANSFER_DIRECTION Direction, ULONG DelayInUs, PMDL Mdl);
SPB_TRANSFER_LIST_ENTRY __stdcall SPB_TRANSFER_LIST_ENTRY_INIT_NON_PAGED(SPB_TRANSFER_DIRECTION Direction, ULONG DelayInUs, PVOID Buffer, ULONG BufferCb);
SPB_TRANSFER_LIST_ENTRY __stdcall SPB_TRANSFER_LIST_ENTRY_INIT_SIMPLE(SPB_TRANSFER_DIRECTION Direction, ULONG DelayInUs, PVOID Buffer, ULONG BufferCb);
STREAM_PHYSICAL_ADDRESS __stdcall StreamClassGetPhysicalAddress(PVOID HwDeviceExtension, PHW_STREAM_REQUEST_BLOCK HwSRB, PVOID VirtualAddress, STREAM_BUFFER_TYPE Type, ULONG *Length);
SspiAsyncContext *__stdcall SspiCreateAsyncContext();
TAPE_PHYS_POSITION __stdcall TapeClassLogicalBlockToPhysicalBlock(UCHAR DensityCode, ULONG LogicalBlockAddress, ULONG BlockLength, BOOLEAN FromBOT);
TBS_RESULT __stdcall Tbsi_Context_Create(PCTBS_CONTEXT_PARAMS pContextParams, PTBS_HCONTEXT phContext);
TBS_RESULT __stdcall Tbsi_Create_Windows_Key(TBS_HANDLE keyHandle);
TBS_RESULT __stdcall Tbsi_GetDeviceInfo(UINT32 Size, PVOID Info);
TBS_RESULT __stdcall Tbsi_Get_OwnerAuth(TBS_HCONTEXT hContext, TBS_OWNERAUTH_TYPE ownerauthType, PBYTE pOutputBuf, PUINT32 pOutputBufLen);
TBS_RESULT __stdcall Tbsi_Get_TCG_Log(TBS_HCONTEXT hContext, PBYTE pOutputBuf, PUINT32 pOutputBufLen);
TBS_RESULT __stdcall Tbsi_Get_TCG_Log_Ex(UINT32 logType, PBYTE pbOutput, PUINT32 pcbOutput);
TBS_RESULT __stdcall Tbsi_Physical_Presence_Command(TBS_HCONTEXT hContext, PCBYTE pabInput, UINT32 cbInput, PBYTE pabOutput, PUINT32 pcbOutput);
TBS_RESULT __stdcall Tbsi_Revoke_Attestation();
TBS_RESULT __stdcall Tbsip_Cancel_Commands(TBS_HCONTEXT hContext);
TBS_RESULT __stdcall Tbsip_Context_Close(TBS_HCONTEXT hContext);
TBS_RESULT __stdcall Tbsip_Submit_Command(TBS_HCONTEXT hContext, TBS_COMMAND_LOCALITY Locality, TBS_COMMAND_PRIORITY Priority, PCBYTE pabCommand, UINT32 cbCommand, PBYTE pabResult, PUINT32 pcbResult);
TLG_STATUS __stdcall TlgWrite(TraceLoggingHProvider hProvider, const void *pEventMetadata, LPCGUID pActivityId, LPCGUID pRelatedActivityId, UINT32 cData, EVENT_DATA_DESCRIPTOR *pData);
TLG_STATUS __stdcall TlgWriteEx(TraceLoggingHProvider hProvider, const void *pEventMetadata, ULONG64 filter, ULONG flags, LPCGUID pActivityId, LPCGUID pRelatedActivityId, UINT32 cData, EVENT_DATA_DESCRIPTOR *pData);
TLG_STATUS __stdcall TraceLoggingRegister(TraceLoggingHProvider hProvider);
TLG_STATUS __stdcall TraceLoggingRegisterEx(TraceLoggingHProvider hProvider, TLG_PENABLECALLBACK pEnableCallback, PVOID pCallbackContext);
TLG_STATUS __stdcall TraceLoggingSetInformation(TraceLoggingHProvider hProvider, EVENT_INFO_CLASS informationClass, PVOID pvInformation, ULONG cbInformation);
TOKEN_TYPE __stdcall SeTokenType(PACCESS_TOKEN Token);
TYPE_OF_OPEN __stdcall RxDecodeFileObject(PFILE_OBJECT FileObject, PFCB *Fcb, PFOBX *Fobx);
UCHAR NdisGeneratePartialCancelId(void);
UCHAR __stdcall AtaPortAllocateQueueTag(PVOID DeviceExtension, UCHAR TargetId, UCHAR Lun);
UCHAR __stdcall AtaPortReadPortUchar(PUCHAR Port);
UCHAR __stdcall AtaPortReadRegisterUchar(PUCHAR Register);
UCHAR __stdcall EventDescGetChannel(PCEVENT_DESCRIPTOR EventDescriptor);
UCHAR __stdcall EventDescGetLevel(PCEVENT_DESCRIPTOR EventDescriptor);
UCHAR __stdcall EventDescGetOpcode(PCEVENT_DESCRIPTOR EventDescriptor);
UCHAR __stdcall EventDescGetVersion(PCEVENT_DESCRIPTOR EventDescriptor);
UCHAR __stdcall GET_FDO_EXTENSON_SENSE_DATA_LENGTH(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension);
UCHAR __stdcall Ip4HeaderLengthInBytes(const IPV4_HEADER *Header);
UCHAR __stdcall KeSetIdealProcessorThread(PKTHREAD Thread, UCHAR Processor);
UCHAR __stdcall NdisGetNetBufferListProtocolId(PNET_BUFFER_LIST NetBufferList);
UCHAR __stdcall READ_PORT_UCHAR(PUCHAR Port);
UCHAR __stdcall READ_REGISTER_UCHAR(volatile UCHAR *Register);
UCHAR __stdcall ReadBooleanAcquire(const volatile BOOLEAN *Source);
UCHAR __stdcall ReadBooleanNoFence(const volatile BOOLEAN *Source);
UCHAR __stdcall ReadUCharAcquire(const volatile UCHAR *Source);
UCHAR __stdcall ReadUCharNoFence(const volatile UCHAR *Source);
UCHAR __stdcall ReadUCharRaw(const volatile UCHAR *Source);
UCHAR __stdcall SOCKADDR_SIZE(ADDRESS_FAMILY af);
UCHAR __stdcall SdPortReadRegisterUchar(PVOID BaseAddress, ULONG Register);
UCHAR __stdcall SrbGetCdbLength(PVOID Srb);
UCHAR __stdcall SrbGetLun(PVOID Srb);
UCHAR __stdcall SrbGetPathId(PVOID Srb);
UCHAR __stdcall SrbGetScsiStatus(PVOID Srb);
UCHAR __stdcall SrbGetSenseInfoBufferLength(PVOID Srb);
UCHAR __stdcall SrbGetSrbStatus(PVOID Srb);
UCHAR __stdcall SrbGetTargetId(PVOID Srb);
UCHAR __stdcall VideoPortGetCurrentIrql();
UCHAR __stdcall VideoPortReadPortUchar(PUCHAR Port);
UCHAR __stdcall VideoPortReadRegisterUchar(PUCHAR Register);
UCHAR __stdcall WdfUsbInterfaceGetConfiguredSettingIndex(WDFUSBINTERFACE Interface);
UCHAR __stdcall WdfUsbInterfaceGetInterfaceNumber(WDFUSBINTERFACE UsbInterface);
UCHAR __stdcall WdfUsbInterfaceGetNumConfiguredPipes(WDFUSBINTERFACE UsbInterface);
UCHAR __stdcall WdfUsbInterfaceGetNumEndpoints(WDFUSBINTERFACE UsbInterface, UCHAR SettingIndex);
UCHAR __stdcall WdfUsbInterfaceGetNumSettings(WDFUSBINTERFACE UsbInterface);
UCHAR __stdcall WdfUsbTargetDeviceGetNumInterfaces(WDFUSBDEVICE UsbDevice);
UCHAR __stdcall _inbyte(USHORT Port);
UCHAR __stdcall _readgsbyte(ULONG Offset);
UCM_PD_POWER_DATA_OBJECT_TYPE __stdcall UCM_PD_POWER_DATA_OBJECT_GET_TYPE(PUCM_PD_POWER_DATA_OBJECT Pdo);
UCXSSTREAMS __stdcall UcxEndpointGetStaticStreamsReferenced(UCXENDPOINT Endpoint, PVOID Tag);
UINT NdisGetVersion(void);
UINT NetDmaGetVersion(void);
UINT __stdcall NdisPacketPoolUsage(NDIS_HANDLE PoolHandle);
UINT __stdcall NdisPacketSize(UINT ProtocolReservedSize);
UINT16 __stdcall Ip4FragmentOffset(const IPV4_HEADER *Header);
UINT16 __stdcall Ip6FragmentOffset(const IPV6_FRAGMENT_HEADER *Header);
UINT32 __stdcall In6ExtractEmbeddedV4AddrFromV6(const IN6_ADDR *Ipv6Address, ULONG PrefixLength, IN_ADDR *Ipv4Address);
UINT32 __stdcall In6IsEmbeddedV4AddrPrefixLengthValid(ULONG PrefixLength);
UINT32 __stdcall In6SetAddrV4Embedded(const IN6_ADDR *Prefix, ULONG PrefixLength, IN_ADDR *Ipv4Address, IN6_ADDR *Ipv6Address);
UINT32 __stdcall Ipv6pGetVersionClassEcnFlow(UINT8 Class, UINT8 EcnField, UINT32 Flow);
UINT32 __stdcall NetRingBufferGetNumberOfElementsInRange(const NET_RING_BUFFER *RingBuffer, UINT32 StartIndex, UINT32 EndIndex);
UINT32 __stdcall NetRingBufferIncrementIndex(const NET_RING_BUFFER *RingBuffer, UINT32 Index);
UINT64 __stdcall FwpsNetBufferListGetTagForContext0();
ULONG ChangerAdditionalExtensionSize(void);
ULONG DbgPrint(PCSTR Format, ...);
ULONG DbgPrintEx(ULONG ComponentId, ULONG Level, PCSTR Format, ...);
ULONG DbgPrintReturnControlC(PCCH Format, ...);
ULONG FsRtlQueryMaximumVirtualDiskNestingLevel(void);
ULONG IoSizeofWorkItem(void);
ULONG KeGetCurrentProcessorIndex(void);
ULONG KeGetCurrentProcessorNumber(void);
ULONG KeGetRecommendedSharedDataAlignment(void);
ULONG KeQueryMaximumProcessorCount(void);
ULONG KeQueryTimeIncrement(void);
ULONG NdisCurrentProcessorIndex(void);
ULONG NdisGetSharedDataAlignment(void);
ULONG ORStart(void);
ULONG SmartcardGetDebugLevel(void);
ULONG StorWmiTraceMessage(ULONG64 Arg1, ULONG Arg2, LPCGUID Arg3, USHORT Arg4, ...);
ULONG WdmlibKeQueryMaximumProcessorCount(void);
ULONG __stdcall AtaPortConvertPhysicalAddressToUlong(IDE_PHYSICAL_ADDRESS Address);
ULONG __stdcall AtaPortGetBusData(PVOID ControllerExtension, PVOID Buffer, ULONG ConfigDataOffset, ULONG BufferLength);
ULONG __stdcall AtaPortInitializeEx(PVOID DriverObject, PVOID RegistryPath, PIDE_CONTROLLER_INTERFACE ControllerInterface);
ULONG __stdcall AtaPortReadPortUlong(PULONG Port);
ULONG __stdcall AtaPortReadRegisterUlong(PULONG Register);
ULONG __stdcall AtaPortSetBusData(PVOID ControllerExtension, PVOID Buffer, ULONG ConfigDataOffset, ULONG BufferLength);
ULONG __stdcall ClassAcquireRemoveLockEx(PDEVICE_OBJECT DeviceObject, PVOID Tag, PCSTR File, ULONG Line);
ULONG __stdcall ClassInitialize(PVOID Argument1, PVOID Argument2, PCLASS_INIT_DATA InitializationData);
ULONG __stdcall ClassInitializeEx(PDRIVER_OBJECT DriverObject, LPGUID Guid, PVOID Data);
ULONG __stdcall ClassModeSense(PDEVICE_OBJECT DeviceObject, PCHAR ModeSenseBuffer, ULONG Length, UCHAR PageMode);
ULONG __stdcall ClassModeSenseEx(PDEVICE_OBJECT Fdo, PCHAR ModeSenseBuffer, ULONG Length, UCHAR PageMode, UCHAR PageControl);
ULONG __stdcall ClassQueryTimeOutRegistryValue(PDEVICE_OBJECT DeviceObject);
ULONG __stdcall ClfsLsnBlockOffset(const CLFS_LSN *plsn);
ULONG __stdcall ClfsLsnRecordSequence(const CLFS_LSN *plsn);
ULONG __stdcall CountOfSetBitsUChar(UCHAR X);
ULONG __stdcall CountOfSetBitsULong(ULONG X);
ULONG __stdcall CountOfSetBitsULong32(ULONG32 X);
ULONG __stdcall CountOfSetBitsULong64(ULONG64 X);
ULONG __stdcall CountOfSetBitsUlongPtr(ULONG_PTR X);
ULONG __stdcall DbgPrompt(PCCH Prompt, PCH Response, ULONG Length);
ULONG __stdcall DeviceDsmGetInputLength(PDEVICE_DSM_DEFINITION Definition, ULONG ParameterBlockLength, ULONG NumberOfDataSetRanges);
ULONG __stdcall DeviceDsmGetNumberOfDataSetRanges(PDEVICE_DSM_DEFINITION Definition, ULONG InputLength, ULONG ParameterBlockLength);
ULONG __stdcall DeviceDsmGetOutputBlockLength(PDEVICE_DSM_DEFINITION Definition, ULONG OutputLength);
ULONG __stdcall DeviceDsmGetOutputLength(PDEVICE_DSM_DEFINITION Definition, ULONG OutputBlockLength);
ULONG __stdcall DeviceDsmNumberOfDataSetRanges(PDEVICE_DSM_INPUT Input);
ULONG __stdcall DlReadDeviceSpace(PVOID DeviceHandle, ULONG DataType, ULONG SlotNumber, PVOID Buffer, ULONG Offset, ULONG Length);
ULONG __stdcall DlSetBusData(PVOID DeviceHandle, ULONG BusDataType, ULONG SlotNumber, PVOID Buffer, ULONG Offset, ULONG Length);
ULONG __stdcall DxApi(ULONG dwFunctionNum, PVOID lpvInBuffer, ULONG cbInBuffer, PVOID lpvOutBuffer, ULONG cbOutBuffer);
ULONG __stdcall DxApiGetVersion();
ULONG __stdcall ExGetExclusiveWaiterCount(PERESOURCE Resource);
ULONG __stdcall ExGetSharedWaiterCount(PERESOURCE Resource);
ULONG __stdcall ExInterlockedAddUlong(PULONG Addend, ULONG Increment, PKSPIN_LOCK Lock);
ULONG __stdcall ExInterlockedExchangeUlong(PULONG Target, ULONG Value);
ULONG __stdcall ExIsResourceAcquiredSharedLite(PERESOURCE Resource);
ULONG __stdcall ExSetTimerResolution(ULONG DesiredTime, BOOLEAN SetResolution);
ULONG __stdcall FltGetRequestorProcessId(PFLT_CALLBACK_DATA CallbackData);
ULONG __stdcall FsRtlNumberOfRunsInBaseMcb(PBASE_MCB Mcb);
ULONG __stdcall FsRtlNumberOfRunsInLargeMcb(PLARGE_MCB Mcb);
ULONG __stdcall FsRtlNumberOfRunsInMcb(PMCB Mcb);
ULONG __stdcall HEAP_MAKE_TAG_FLAGS(ULONG TagBase, ULONG Tag);
ULONG __stdcall HalGetBusDataByOffset(BUS_DATA_TYPE BusDataType, ULONG BusNumber, ULONG SlotNumber, PVOID Buffer, ULONG Offset, ULONG Length);
ULONG __stdcall HalGetDmaAlignment(PDMA_ADAPTER DmaAdapter);
ULONG __stdcall HalReadDmaCounter(PDMA_ADAPTER DmaAdapter);
ULONG __stdcall HalSetBusDataByOffset(BUS_DATA_TYPE BusDataType, ULONG BusNumber, ULONG SlotNumber, PVOID Buffer, ULONG Offset, ULONG Length);
ULONG __stdcall HidP_MaxDataListLength(HIDP_REPORT_TYPE ReportType, PHIDP_PREPARSED_DATA PreparsedData);
ULONG __stdcall HidP_MaxUsageListLength(HIDP_REPORT_TYPE ReportType, USAGE UsagePage, PHIDP_PREPARSED_DATA PreparsedData);
ULONG __stdcall IoGetRequestorProcessId(PIRP Irp);
ULONG __stdcall IoWMIDeviceObjectToProviderId(PDEVICE_OBJECT DeviceObject);
ULONG __stdcall KeGetCurrentProcessorNumberEx(PPROCESSOR_NUMBER ProcNumber);
ULONG __stdcall KeGetProcessorIndexFromNumber(PPROCESSOR_NUMBER ProcNumber);
ULONG __stdcall KeQueryActiveProcessorCount(PKAFFINITY ActiveProcessors);
ULONG __stdcall KeQueryActiveProcessorCountEx(USHORT GroupNumber);
ULONG __stdcall KeQueryMaximumProcessorCountEx(USHORT GroupNumber);
ULONG __stdcall KeQueryRuntimeThread(PKTHREAD Thread, PULONG UserTime);
ULONG __stdcall KeRemoveQueueEx(PKQUEUE Queue, KPROCESSOR_MODE WaitMode, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PLIST_ENTRY *EntryArray, ULONG Count);
ULONG __stdcall KsDecrementCountedWorker(PKSWORKER Worker);
ULONG __stdcall KsDeviceGetBusData(PKSDEVICE Device, ULONG DataType, PVOID Buffer, ULONG Offset, ULONG Length);
ULONG __stdcall KsDeviceSetBusData(PKSDEVICE Device, ULONG DataType, PVOID Buffer, ULONG Offset, ULONG Length);
ULONG __stdcall KsFilterGetChildPinCount(PKSFILTER Filter, ULONG PinId);
ULONG __stdcall KsGetNodeIdFromIrp(PIRP Irp);
ULONG __stdcall KsIncrementCountedWorker(PKSWORKER Worker);
ULONG __stdcall KsRemoveItemFromObjectBag(KSOBJECT_BAG ObjectBag, PVOID Item, BOOLEAN Free);
ULONG __stdcall MbbAdapterGetSessionId(NETADAPTER Adapter);
ULONG __stdcall McGenEventRegister(LPCGUID ProviderId, PETWENABLECALLBACK EnableCallback, PVOID CallbackContext, PREGHANDLE RegHandle);
ULONG __stdcall McGenEventUnregister(PREGHANDLE RegHandle);
ULONG __stdcall McGenEventWrite(PMCGEN_TRACE_CONTEXT Context, PCEVENT_DESCRIPTOR Descriptor, LPCGUID ActivityId, ULONG EventDataCount, EVENT_DATA_DESCRIPTOR *EventData);
ULONG __stdcall McTemplateK0pqqq(PMCGEN_TRACE_CONTEXT Context, PCEVENT_DESCRIPTOR Descriptor, const GUID *Activity, const void *Arg0, const unsigned int Arg1, const unsigned int Arg2, const unsigned int Arg3);
ULONG __stdcall McTemplateK0pzqNR2(PMCGEN_TRACE_CONTEXT Context, PCEVENT_DESCRIPTOR Descriptor, const GUID *Activity, const void *Arg0, PCWSTR Arg1, const unsigned int Arg2, ULONG Arg3_Len_, const void *Arg3);
ULONG __stdcall McTemplateK0qNR0(PMCGEN_TRACE_CONTEXT Context, PCEVENT_DESCRIPTOR Descriptor, const GUID *Activity, const unsigned int Arg0, ULONG Arg1_Len_, const void *Arg1);
ULONG __stdcall McTemplateK0qpqqqqNR5qzr7(PMCGEN_TRACE_CONTEXT Context, PCEVENT_DESCRIPTOR Descriptor, const GUID *Activity, const unsigned int Arg0, const void *Arg1, const unsigned int Arg2, const unsigned int Arg3, const unsigned int Arg4, const unsigned int Arg5, ULONG Arg6_Len_, const void *Arg6, const unsigned int Arg7, const WCHAR *Arg8);
ULONG __stdcall McTemplateK0qq(PMCGEN_TRACE_CONTEXT Context, PCEVENT_DESCRIPTOR Descriptor, const GUID *Activity, const unsigned int Arg0, const unsigned int Arg1);
ULONG __stdcall McTemplateK0qqq(PMCGEN_TRACE_CONTEXT Context, PCEVENT_DESCRIPTOR Descriptor, const GUID *Activity, const unsigned int Arg0, const unsigned int Arg1, const unsigned int Arg2);
ULONG __stdcall McTemplateK0qzqq(PMCGEN_TRACE_CONTEXT Context, PCEVENT_DESCRIPTOR Descriptor, const GUID *Activity, const unsigned int Arg0, PCWSTR Arg1, const unsigned int Arg2, const unsigned int Arg3);
ULONG __stdcall MmDoesFileHaveUserWritableReferences(PSECTION_OBJECT_POINTERS SectionPointer);
ULONG __stdcall NdisGroupActiveProcessorCount(USHORT Group);
ULONG __stdcall NdisGroupMaxProcessorCount(USHORT Group);
ULONG __stdcall NdisMGetBusData(NDIS_HANDLE NdisMiniportHandle, ULONG WhichSpace, ULONG Offset, PVOID Buffer, ULONG Length);
ULONG __stdcall NdisMGetDmaAlignment(NDIS_HANDLE MiniportAdapterHandle);
ULONG __stdcall NdisMGetVirtualFunctionBusData(NDIS_HANDLE NdisMiniportHandle, NDIS_SRIOV_FUNCTION_ID VFId, PVOID Buffer, ULONG Offset, ULONG Length);
ULONG __stdcall NdisMQueueDpc(NDIS_HANDLE NdisInterruptHandle, ULONG MessageId, ULONG TargetProcessors, PVOID MiniportDpcContext);
ULONG __stdcall NdisMReadDmaCounter(NDIS_HANDLE MiniportDmaHandle);
ULONG __stdcall NdisMSetBusData(NDIS_HANDLE NdisMiniportHandle, ULONG WhichSpace, ULONG Offset, PVOID Buffer, ULONG Length);
ULONG __stdcall NdisMSetVirtualFunctionBusData(NDIS_HANDLE NdisMiniportHandle, NDIS_SRIOV_FUNCTION_ID VFId, PVOID Buffer, ULONG Offset, ULONG Length);
ULONG __stdcall NdisProcessorNumberToIndex(PROCESSOR_NUMBER ProcNum);
ULONG __stdcall NdisQueryNetBufferPhysicalCount(PNET_BUFFER NetBuffer);
ULONG __stdcall NdisReadPciSlotInformation(NDIS_HANDLE NdisAdapterHandle, ULONG SlotNumber, ULONG Offset, PVOID Buffer, ULONG Length);
ULONG __stdcall NdisReadPcmciaAttributeMemory(NDIS_HANDLE NdisAdapterHandle, ULONG Offset, PVOID Buffer, ULONG Length);
ULONG __stdcall NdisSystemActiveProcessorCount(PKAFFINITY ActiveProcessors);
ULONG __stdcall NdisWritePciSlotInformation(NDIS_HANDLE NdisAdapterHandle, ULONG SlotNumber, ULONG Offset, PVOID Buffer, ULONG Length);
ULONG __stdcall NdisWritePcmciaAttributeMemory(NDIS_HANDLE NdisAdapterHandle, ULONG Offset, PVOID Buffer, ULONG Length);
ULONG __stdcall NetPowerSettingsGetEnabledMediaSpecificWakeUpEvents(NETPOWERSETTINGS NetPowerSettings);
ULONG __stdcall NetPowerSettingsGetEnabledProtocolOffloadFlags(NETPOWERSETTINGS NetPowerSettings);
ULONG __stdcall NetPowerSettingsGetEnabledWakePatternFlags(NETPOWERSETTINGS NetPowerSettings);
ULONG __stdcall NetPowerSettingsGetEnabledWakeUpFlags(NETPOWERSETTINGS NetPowerSettings);
ULONG __stdcall NetPowerSettingsGetProtocolOffloadCount(NETPOWERSETTINGS NetPowerSettings);
ULONG __stdcall NetPowerSettingsGetProtocolOffloadCountForType(NETPOWERSETTINGS NetPowerSettings, NDIS_PM_PROTOCOL_OFFLOAD_TYPE ProtocolOffloadType);
ULONG __stdcall NetPowerSettingsGetWakePatternCount(NETPOWERSETTINGS NetPowerSettings);
ULONG __stdcall NetPowerSettingsGetWakePatternCountForType(NETPOWERSETTINGS NetPowerSettings, NDIS_PM_WOL_PACKET WakePatternType);
ULONG __stdcall NetRxQueueInitGetQueueId(PNETRXQUEUE_INIT NetRxQueueInit);
ULONG __stdcall NetTxQueueInitGetQueueId(PNETTXQUEUE_INIT NetTxQueueInit);
ULONG __stdcall ORCloseHive(ORHKEY Handle);
ULONG __stdcall ORCloseKey(ORHKEY KeyHandle);
ULONG __stdcall ORCreateHive(PORHKEY HORKey);
ULONG __stdcall ORCreateKey(ORHKEY KeyHandle, PCWSTR lpSubKey, PWSTR lpClass, ULONG dwOptions, PSECURITY_DESCRIPTOR pSecurityDescriptor, PORHKEY phkResult, PDWORD pdwDisposition);
ULONG __stdcall ORDeleteKey(ORHKEY Handle, PCWSTR lpSubKey);
ULONG __stdcall ORDeleteValue(ORHKEY Handle, PCWSTR lpValueName);
ULONG __stdcall OREnumKey(ORHKEY Handle, ULONG dwIndex, PWSTR lpName, PDWORD lpcName, PWSTR lpClass, PDWORD lpcClass, PFILETIME lpftLastWriteTime);
ULONG __stdcall OREnumValue(ORHKEY Handle, ULONG dwIndex, PWSTR lpValueName, PDWORD lpcValueName, PDWORD lpType, PBYTE lpData, PDWORD lpcbData);
ULONG __stdcall ORGetKeySecurity(ORHKEY Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor, PDWORD lpcbSecurityDescriptor);
ULONG __stdcall ORGetValue(ORHKEY Handle, PCWSTR lpSubKey, PCWSTR lpValue, PDWORD pdwType, PVOID pvData, PDWORD pcbData);
ULONG __stdcall ORGetVirtualFlags(ORHKEY Handle, PDWORD pdwFlags);
ULONG __stdcall OROpenHive(PCWSTR FilePath, PORHKEY HORKey);
ULONG __stdcall OROpenHiveByHandle(HANDLE FileHandle, PORHKEY HORKey);
ULONG __stdcall OROpenKey(ORHKEY Handle, PCWSTR lpSubKey, PORHKEY phkResult);
ULONG __stdcall ORQueryInfoKey(ORHKEY Handle, PWSTR lpClass, PDWORD lpcClass, PDWORD lpcSubKeys, PDWORD lpcMaxSubKeyLen, PDWORD lpcMaxClassLen, PDWORD lpcValues, PDWORD lpcMaxValueNameLen, PDWORD lpcMaxValueLen, PDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime);
ULONG __stdcall ORRenameKey(ORHKEY Handle, PCWSTR lpNewName);
ULONG __stdcall ORSaveHive(ORHKEY HORKey, PCWSTR HivePath, ULONG OsMajorVersion, ULONG OsMinorVersion);
ULONG __stdcall ORSetKeySecurity(ORHKEY Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR pSecurityDescriptor);
ULONG __stdcall ORSetValue(ORHKEY Handle, PCWSTR lpValueName, ULONG dwType, const UCHAR *lpData, ULONG cbData);
ULONG __stdcall ORSetVirtualFlags(ORHKEY Handle, ULONG dwFlags);
ULONG __stdcall PsGetServerSiloActiveConsoleId(PESILO Silo);
ULONG __stdcall PsGetServerSiloServiceSessionId(PESILO Silo);
ULONG __stdcall PsGetSiloMonitorContextSlot(PSILO_MONITOR Monitor);
ULONG __stdcall READ_PORT_ULONG(PULONG Port);
ULONG __stdcall READ_REGISTER_ULONG(volatile ULONG *Register);
ULONG __stdcall ReadULongAcquire(const volatile ULONG *Source);
ULONG __stdcall ReadULongNoFence(const volatile ULONG *Source);
ULONG __stdcall ReadULongRaw(const volatile ULONG *Source);
ULONG __stdcall RtlActiveEnumeratorsHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable);
ULONG __stdcall RtlCrc32(const void *Buffer, size_t Size, ULONG InitialCrc);
ULONG __stdcall RtlEmptyBucketsHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable);
ULONG __stdcall RtlEnlargedUnsignedDivide(ULARGE_INTEGER Dividend, ULONG Divisor, PULONG Remainder);
ULONG __stdcall RtlFindClearBits(PRTL_BITMAP BitMapHeader, ULONG NumberToFind, ULONG HintIndex);
ULONG __stdcall RtlFindClearBitsAndSet(PRTL_BITMAP BitMapHeader, ULONG NumberToFind, ULONG HintIndex);
ULONG __stdcall RtlFindClearRuns(PRTL_BITMAP BitMapHeader, PRTL_BITMAP_RUN RunArray, ULONG SizeOfRunArray, BOOLEAN LocateLongestRuns);
ULONG __stdcall RtlFindFirstRunClear(PRTL_BITMAP BitMapHeader, PULONG StartingIndex);
ULONG __stdcall RtlFindLastBackwardRunClear(PRTL_BITMAP BitMapHeader, ULONG FromIndex, PULONG StartingRunIndex);
ULONG __stdcall RtlFindLongestRunClear(PRTL_BITMAP BitMapHeader, PULONG StartingIndex);
ULONG __stdcall RtlFindNextForwardRunClear(PRTL_BITMAP BitMapHeader, ULONG FromIndex, PULONG StartingRunIndex);
ULONG __stdcall RtlFindSetBits(PRTL_BITMAP BitMapHeader, ULONG NumberToFind, ULONG HintIndex);
ULONG __stdcall RtlFindSetBitsAndClear(PRTL_BITMAP BitMapHeader, ULONG NumberToFind, ULONG HintIndex);
ULONG __stdcall RtlGetActiveConsoleId();
ULONG __stdcall RtlGetSuiteMask();
ULONG __stdcall RtlLengthRequiredSid(ULONG SubAuthorityCount);
ULONG __stdcall RtlLengthSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor);
ULONG __stdcall RtlLengthSid(PSID Sid);
ULONG __stdcall RtlNonEmptyBucketsHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable);
ULONG __stdcall RtlNtStatusToDosError(NTSTATUS Status);
ULONG __stdcall RtlNtStatusToDosErrorNoTeb(NTSTATUS Status);
ULONG __stdcall RtlNumberGenericTableElements(PRTL_GENERIC_TABLE Table);
ULONG __stdcall RtlNumberGenericTableElementsAvl(PRTL_AVL_TABLE Table);
ULONG __stdcall RtlNumberOfClearBits(PRTL_BITMAP BitMapHeader);
ULONG __stdcall RtlNumberOfClearBitsInRange(PRTL_BITMAP BitMapHeader, ULONG StartingIndex, ULONG Length);
ULONG __stdcall RtlNumberOfSetBits(PRTL_BITMAP BitMapHeader);
ULONG __stdcall RtlNumberOfSetBitsInRange(PRTL_BITMAP BitMapHeader, ULONG StartingIndex, ULONG Length);
ULONG __stdcall RtlNumberOfSetBitsUlongPtr(ULONG_PTR Target);
ULONG __stdcall RtlQueryValidationRunlevel(PCUNICODE_STRING ComponentName);
ULONG __stdcall RtlRandom(PULONG Seed);
ULONG __stdcall RtlRandomEx(PULONG Seed);
ULONG __stdcall RtlTotalBucketsHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable);
ULONG __stdcall RtlTotalEntriesHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable);
ULONG __stdcall RtlUlongByteSwap(ULONG Source);
ULONG __stdcall RtlWalkFrameChain(PVOID *Callers, ULONG Count, ULONG Flags);
ULONG __stdcall RtlxAnsiStringToUnicodeSize(PCANSI_STRING AnsiString);
ULONG __stdcall RtlxOemStringToUnicodeSize(PCOEM_STRING OemString);
ULONG __stdcall RtlxUnicodeStringToAnsiSize(PCUNICODE_STRING UnicodeString);
ULONG __stdcall RtlxUnicodeStringToOemSize(PCUNICODE_STRING UnicodeString);
ULONG __stdcall RxGetNetworkProviderPriority(PUNICODE_STRING DeviceName);
ULONG __stdcall RxGetSessionId(PIO_STACK_LOCATION IrpSp);
ULONG __stdcall RxTableComputeHashValue(PUNICODE_STRING Name);
ULONG __stdcall RxTableComputePathHashValue(PUNICODE_STRING Name);
ULONG __stdcall ScsiPortConvertPhysicalAddressToUlong(SCSI_PHYSICAL_ADDRESS Address);
ULONG __stdcall ScsiPortGetBusData(PVOID DeviceExtension, ULONG BusDataType, ULONG SystemIoBusNumber, ULONG SlotNumber, PVOID Buffer, ULONG Length);
ULONG __stdcall ScsiPortInitialize(PVOID Argument1, PVOID Argument2, struct _HW_INITIALIZATION_DATA *HwInitializationData, PVOID HwContext);
ULONG __stdcall ScsiPortSetBusDataByOffset(PVOID DeviceExtension, ULONG BusDataType, ULONG SystemIoBusNumber, ULONG SlotNumber, PVOID Buffer, ULONG Offset, ULONG Length);
ULONG __stdcall SdPortReadRegisterUlong(PVOID BaseAddress, ULONG Register);
ULONG __stdcall SeComputeAutoInheritByObjectType(PVOID ObjectType, PSECURITY_DESCRIPTOR SecurityDescriptor, PSECURITY_DESCRIPTOR ParentSecurityDescriptor);
ULONG __stdcall SeObjectCreateSaclAccessBits(PSECURITY_DESCRIPTOR SecurityDescriptor);
ULONG __stdcall SrbGetDataTransferLength(PVOID Srb);
ULONG __stdcall SrbGetDefaultSrbLengthFromFunction(ULONG SrbFunction);
ULONG __stdcall SrbGetQueueTag(PVOID Srb);
ULONG __stdcall SrbGetRequestAttribute(PVOID Srb);
ULONG __stdcall SrbGetSrbFlags(PVOID Srb);
ULONG __stdcall SrbGetSrbFunction(PVOID Srb);
ULONG __stdcall SrbGetSrbLength(PVOID Srb);
ULONG __stdcall SrbGetSystemStatus(PVOID Srb);
ULONG __stdcall SrbGetTimeOutValue(PVOID Srb);
ULONG __stdcall StorInitTracing(PVOID InitInfo);
ULONG __stdcall StorIoWMIRegistrationControl(PVOID Arg1, ULONG Arg2);
ULONG __stdcall StorTraceDiagLogEvent(PVOID DeviceExtension, STORAGE_TRACE_CONTEXT TraceContext, PVOID Event);
ULONG __stdcall StorWmiQueryTraceInformation(ULONG Arg1, PVOID Arg2, ULONG Arg3, PULONG Arg4, PVOID Arg5);
ULONG __stdcall TapeClassCompareMemory(PVOID Source1, PVOID Source2, ULONG Length);
ULONG __stdcall TapeClassInitialize(PVOID Argument1, PVOID Argument2, PTAPE_INIT_DATA_EX TapeInitData);
ULONG __stdcall TapeClassPhysicalBlockToLogicalBlock(UCHAR DensityCode, ULONG PhysicalBlockAddress, ULONG BlockLength, BOOLEAN FromBOT);
ULONG __stdcall TcAddFilter(HANDLE FlowHandle, PTC_GEN_FILTER pGenericFilter, PHANDLE pFilterHandle);
ULONG __stdcall TcAddFlow(HANDLE IfcHandle, HANDLE ClFlowCtx, ULONG Flags, PTC_GEN_FLOW pGenericFlow, PHANDLE pFlowHandle);
ULONG __stdcall TcCloseInterface(HANDLE IfcHandle);
ULONG __stdcall TcDeleteFilter(HANDLE FilterHandle);
ULONG __stdcall TcDeleteFlow(HANDLE FlowHandle);
ULONG __stdcall TcDeregisterClient(HANDLE ClientHandle);
ULONG __stdcall TcEnumerateFlows(HANDLE IfcHandle, PHANDLE pEnumHandle, PULONG pFlowCount, PULONG pBufSize, PENUMERATION_BUFFER Buffer);
ULONG __stdcall TcEnumerateInterfaces(HANDLE ClientHandle, PULONG pBufferSize, PTC_IFC_DESCRIPTOR InterfaceBuffer);
ULONG __stdcall TcGetFlowNameA(HANDLE FlowHandle, ULONG StrSize, LPSTR pFlowName);
ULONG __stdcall TcGetFlowNameW(HANDLE FlowHandle, ULONG StrSize, LPWSTR pFlowName);
ULONG __stdcall TcModifyFlow(HANDLE FlowHandle, PTC_GEN_FLOW pGenericFlow);
ULONG __stdcall TcOpenInterfaceA(LPSTR pInterfaceName, HANDLE ClientHandle, HANDLE ClIfcCtx, PHANDLE pIfcHandle);
ULONG __stdcall TcOpenInterfaceW(LPWSTR pInterfaceName, HANDLE ClientHandle, HANDLE ClIfcCtx, PHANDLE pIfcHandle);
ULONG __stdcall TcQueryFlowA(LPSTR pFlowName, LPGUID pGuidParam, PULONG pBufferSize, PVOID Buffer);
ULONG __stdcall TcQueryFlowW(LPWSTR pFlowName, LPGUID pGuidParam, PULONG pBufferSize, PVOID Buffer);
ULONG __stdcall TcQueryInterface(HANDLE IfcHandle, LPGUID pGuidParam, BOOLEAN NotifyChange, PULONG pBufferSize, PVOID Buffer);
ULONG __stdcall TcRegisterClient(ULONG TciVersion, HANDLE ClRegCtx, PTCI_CLIENT_FUNC_LIST ClientHandlerList, PHANDLE pClientHandle);
ULONG __stdcall TcSetFlowA(LPSTR pFlowName, LPGUID pGuidParam, ULONG BufferSize, PVOID Buffer);
ULONG __stdcall TcSetFlowW(LPWSTR pFlowName, LPGUID pGuidParam, ULONG BufferSize, PVOID Buffer);
ULONG __stdcall TcSetInterface(HANDLE IfcHandle, LPGUID pGuidParam, ULONG BufferSize, PVOID Buffer);
ULONG __stdcall USBCAMD_DriverEntry(PVOID Context1, PVOID Context2, ULONG DeviceContextSize, ULONG FrameCOntextSize, PADAPTER_RECEIVE_PACKET_ROUTINE ReceivePacket);
ULONG __stdcall USBCAMD_InitializeNewInterface(PVOID DeviceContext, PVOID DeviceData, ULONG Version, ULONG CamControlFlag);
ULONG __stdcall USBD_CalculateUsbBandwidth(ULONG MaxPacketSize, UCHAR EndpointType, BOOLEAN LowSpeed);
ULONG __stdcall USBD_GetInterfaceLength(PUSB_INTERFACE_DESCRIPTOR InterfaceDescriptor, PUCHAR BufferEnd);
ULONG __stdcall VideoPortCompareMemory(PVOID Source1, PVOID Source2, SIZE_T Length);
ULONG __stdcall VideoPortGetAssociatedDeviceID(PVOID DeviceObject);
ULONG __stdcall VideoPortGetBusData(PVOID HwDeviceExtension, BUS_DATA_TYPE BusDataType, ULONG SlotNumber, PVOID Buffer, ULONG Offset, ULONG Length);
ULONG __stdcall VideoPortGetBytesUsed(PVOID HwDeviceExtension, PDMA pDma);
ULONG __stdcall VideoPortInitialize(PVOID Argument1, PVOID Argument2, PVIDEO_HW_INITIALIZATION_DATA HwInitializationData, PVOID HwContext);
ULONG __stdcall VideoPortReadPortUlong(PULONG Port);
ULONG __stdcall VideoPortReadRegisterUlong(PULONG Register);
ULONG __stdcall VideoPortSetBusData(PVOID HwDeviceExtension, BUS_DATA_TYPE BusDataType, ULONG SlotNumber, PVOID Buffer, ULONG Offset, ULONG Length);
ULONG __stdcall WdfCmResourceListGetCount(WDFCMRESLIST List);
ULONG __stdcall WdfCollectionGetCount(WDFCOLLECTION Collection);
ULONG __stdcall WdfDevStateNormalize(ULONG State);
ULONG __stdcall WdfDeviceGetAlignmentRequirement(WDFDEVICE Device);
ULONG __stdcall WdfDeviceGetCharacteristics(WDFDEVICE Device);
ULONG __stdcall WdfFileObjectGetFlags(WDFFILEOBJECT FileObject);
ULONG __stdcall WdfIoResourceListGetCount(WDFIORESLIST ResourceList);
ULONG __stdcall WdfIoResourceRequirementsListGetCount(WDFIORESREQLIST RequirementsList);
ULONG __stdcall WdfPostDeviceInstall(LPCWSTR InfPath, LPCWSTR InfSectionName);
ULONG __stdcall WdfPostDeviceRemove(LPCWSTR InfPath, LPCWSTR InfSectionName);
ULONG __stdcall WdfPreDeviceInstall(LPCWSTR InfPath, LPCWSTR InfSectionName);
ULONG __stdcall WdfPreDeviceInstallEx(LPCWSTR InfPath, LPCWSTR InfSectionName, PWDF_COINSTALLER_INSTALL_OPTIONS ClientOptions);
ULONG __stdcall WdfPreDeviceRemove(LPCWSTR InfPath, LPCWSTR InfSectionName);
ULONG __stdcall WdmlibKeGetCurrentProcessorNumberEx(PPROCESSOR_NUMBER ProcNumber);
ULONG __stdcall WdmlibKeGetProcessorIndexFromNumber(PPROCESSOR_NUMBER ProcNumber);
ULONG __stdcall WdmlibKeQueryActiveProcessorCountEx(USHORT GroupNumber);
ULONG __stdcall WdmlibKeQueryMaximumProcessorCountEx(USHORT GroupNumber);
ULONG __stdcall _indword(USHORT Port);
ULONG __stdcall _readgsdword(ULONG Offset);
ULONG __stdcall _segmentlimit(ULONG Selector);
ULONG __stdcall vDbgPrintEx(ULONG ComponentId, ULONG Level, PCCH Format, va_list arglist);
ULONG __stdcall vDbgPrintExWithPrefix(PCCH Prefix, ULONG ComponentId, ULONG Level, PCCH Format, va_list arglist);
ULONG64 __stdcall KeQueryInterruptTimePrecise(PULONG64 QpcTimeStamp);
ULONG64 __stdcall KeQueryTotalCycleTimeThread(PKTHREAD Thread, PULONG64 CycleTimeStamp);
ULONG64 __stdcall KeQueryUnbiasedInterruptTimePrecise(PULONG64 QpcTimeStamp);
ULONG64 __stdcall PsQueryTotalCycleTimeProcess(PEPROCESS Process, PULONG64 CycleTimeStamp);
ULONG64 __stdcall READ_REGISTER_ULONG64(volatile ULONG64 *Register);
ULONG64 __stdcall ReadULong64Acquire(const volatile ULONG64 *Source);
ULONG64 __stdcall ReadULong64NoFence(const volatile ULONG64 *Source);
ULONG64 __stdcall ReadULong64Raw(const volatile ULONG64 *Source);
ULONG64 __stdcall RtlGetEnabledExtendedFeatures(ULONG64 FeatureMask);
ULONG64 __stdcall UnsignedMultiplyExtract128(ULONG64 Multiplier, ULONG64 Multiplicand, UCHAR Shift);
ULONG64 __stdcall _popcnt64(ULONG64 operand);
ULONG64 __stdcall _readgsqword(ULONG Offset);
ULONG64 __stdcall _readpmc(ULONG Counter);
ULONG64 __stdcall _shiftleft128(ULONG64 LowPart, ULONG64 HighPart, UCHAR Shift);
ULONG64 __stdcall _shiftright128(ULONG64 LowPart, ULONG64 HighPart, UCHAR Shift);
ULONG64 __stdcall umul128(ULONG64 Multiplier, ULONG64 Multiplicand, ULONG64 *HighProduct);
ULONG64 _rdtsc(void);
ULONG64 _readcr8(void);
ULONGLONG KeQueryUnbiasedInterruptTime(void);
ULONGLONG MmGetMaximumFileSectionSize(void);
ULONGLONG __stdcall EventDescGetKeyword(PCEVENT_DESCRIPTOR EventDescriptor);
ULONGLONG __stdcall PcGetTimeInterval(ULONGLONG Since);
ULONGLONG __stdcall PsGetProcessStartKey(PEPROCESS Process);
ULONGLONG __stdcall RtlCmDecodeMemIoResource(PCM_PARTIAL_RESOURCE_DESCRIPTOR Descriptor, PULONGLONG Start);
ULONGLONG __stdcall RtlCrc64(const void *Buffer, size_t Size, ULONGLONG InitialCrc);
ULONGLONG __stdcall RtlGetConsoleSessionForegroundProcessId();
ULONGLONG __stdcall RtlIoDecodeMemIoResource(PIO_RESOURCE_DESCRIPTOR Descriptor, PULONGLONG Alignment, PULONGLONG MinimumAddress, PULONGLONG MaximumAddress);
ULONGLONG __stdcall RtlUlonglongByteSwap(ULONGLONG Source);
ULONGLONG __stdcall VerSetConditionMask(ULONGLONG ConditionMask, ULONG TypeMask, UCHAR Condition);
ULONGLONG __stdcall WdfWmiProviderGetTracingHandle(WDFWMIPROVIDER WmiProvider);
ULONGLONG __stdcall _umulh(ULONG64 Multiplier, ULONG64 Multiplicand);
ULONG_PTR IoGetRemainingStackSize(void);
ULONG_PTR __stdcall KeIpiGenericCall(PKIPI_BROADCAST_WORKER BroadcastFunction, ULONG_PTR Context);
ULONG_PTR __stdcall WdfRequestGetInformation(WDFREQUEST Request);
USBC_PD_POWER_DATA_OBJECT_TYPE __stdcall USBC_PD_POWER_DATA_OBJECT_GET_TYPE(PUSBC_PD_POWER_DATA_OBJECT Pdo);
USBD_CONFIGURATION_HANDLE __stdcall WdfUsbTargetDeviceWdmGetConfigurationHandle(WDFUSBDEVICE UsbDevice);
USBD_PIPE_HANDLE __stdcall WdfUsbTargetPipeWdmGetPipeHandle(WDFUSBPIPE UsbPipe);
USBD_STATUS __stdcall USBD_ValidateConfigurationDescriptor(PUSB_CONFIGURATION_DESCRIPTOR ConfigDesc, ULONG BufferLength, USHORT Level, PUCHAR *Offset, ULONG Tag);
USHORT KeGetCurrentNodeNumber(void);
USHORT KeQueryActiveGroupCount(void);
USHORT KeQueryHighestNodeNumber(void);
USHORT KeQueryMaximumGroupCount(void);
USHORT NdisActiveGroupCount(void);
USHORT NdisMaxGroupCount(void);
USHORT ObGetFilterVersion(void);
USHORT WdmlibKeQueryActiveGroupCount(void);
USHORT WdmlibKeQueryMaximumGroupCount(void);
USHORT __stdcall AtaPortReadPortUshort(PUSHORT Port);
USHORT __stdcall AtaPortReadRegisterUshort(PUSHORT Register);
USHORT __stdcall EventDescGetId(PCEVENT_DESCRIPTOR EventDescriptor);
USHORT __stdcall EventDescGetTask(PCEVENT_DESCRIPTOR EventDescriptor);
USHORT __stdcall ExQueryDepthSList(PSLIST_HEADER SListHead);
USHORT __stdcall INETADDR_PORT(const SOCKADDR *a);
USHORT __stdcall IoSizeOfIrpEx(PDEVICE_OBJECT DeviceObject, CCHAR StackSize);
USHORT __stdcall KeQueryNodeMaximumProcessorCount(USHORT NodeNumber);
USHORT __stdcall READ_PORT_USHORT(PUSHORT Port);
USHORT __stdcall READ_REGISTER_USHORT(volatile USHORT *Register);
USHORT __stdcall ReadUShortAcquire(const volatile USHORT *Source);
USHORT __stdcall ReadUShortNoFence(const volatile USHORT *Source);
USHORT __stdcall ReadUShortRaw(const volatile USHORT *Source);
USHORT __stdcall RtlCaptureStackBackTrace(ULONG FramesToSkip, ULONG FramesToCapture, PVOID *BackTrace, PULONG BackTraceHash);
USHORT __stdcall RtlUshortByteSwap(USHORT Source);
USHORT __stdcall SdPortReadRegisterUshort(PVOID BaseAddress, ULONG Register);
USHORT __stdcall VideoPortReadPortUshort(PUSHORT Port);
USHORT __stdcall VideoPortReadRegisterUshort(PUSHORT Register);
USHORT __stdcall _inword(USHORT Port);
USHORT __stdcall _readgsword(ULONG Offset);
VP_STATUS __stdcall DlCreateEvent(PVOID DeviceHandle, ULONG EventFlag, PVOID Unused, PEVENT *ppEvent);
VP_STATUS __stdcall DlDeleteEvent(PVOID DeviceHandle, PEVENT pEvent);
VP_STATUS __stdcall DlDisableInterrupt(PVOID DeviceHandle);
VP_STATUS __stdcall DlEnableInterrupt(PVOID DeviceHandle);
VP_STATUS __stdcall DlEnumerateChildren(PVOID DeviceHandle, PVOID Reserved);
VP_STATUS __stdcall DlGetRegistryParameters(PVOID DeviceHandle, PWSTR ParameterName, UCHAR IsParameterFileName, PMINIPORT_GET_REGISTRY_ROUTINE CallbackRoutine, PVOID Context);
VP_STATUS __stdcall DlGetVersion(PVOID DeviceHandle, PVPOSVERSIONINFO pDlpOsVersionInfo);
VP_STATUS __stdcall DlMapMemory(PVOID DeviceHandle, LARGE_INTEGER TranslatedAddress, PULONG Length, PULONG InIoSpace, PVOID *VirtualAddress);
VP_STATUS __stdcall DlSetRegistryParameters(PVOID DeviceHandle, PWSTR ValueName, PVOID ValueData, ULONG ValueLength);
VP_STATUS __stdcall DlSetTrappedEmulatorPorts(PVOID DeviceHandle, ULONG NumAccessRanges, PVIDEO_ACCESS_RANGE AccessRange);
VP_STATUS __stdcall DlVerifyAccessRanges(PVOID DeviceHandle, ULONG NumAccessRanges, PVIDEO_ACCESS_RANGE AccessRanges);
VP_STATUS __stdcall DlWaitForSingleObject(PVOID DeviceHandle, PVOID pEvent, PLARGE_INTEGER Timeout);
VP_STATUS __stdcall VideoPortAllocateBuffer(PVOID HwDeviceExtension, ULONG Size, PVOID *Buffer);
VP_STATUS __stdcall VideoPortCompleteDma(PVOID HwDeviceExtension, PVP_DMA_ADAPTER VpDmaAdapter, PVP_SCATTER_GATHER_LIST VpScatterGather, BOOLEAN WriteToDevice);
VP_STATUS __stdcall VideoPortCreateEvent(PVOID HwDeviceExtension, ULONG EventFlag, PVOID Unused, PEVENT *ppEvent);
VP_STATUS __stdcall VideoPortCreateSecondaryDisplay(PVOID HwDeviceExtension, PVOID *SecondaryDeviceExtension, ULONG ulFlag);
VP_STATUS __stdcall VideoPortCreateSpinLock(PVOID HwDeviceExtension, PSPIN_LOCK *SpinLock);
VP_STATUS __stdcall VideoPortDeleteEvent(PVOID HwDeviceExtension, PEVENT pEvent);
VP_STATUS __stdcall VideoPortDeleteSpinLock(PVOID HwDeviceExtension, PSPIN_LOCK SpinLock);
VP_STATUS __stdcall VideoPortDisableInterrupt(PVOID HwDeviceExtension);
VP_STATUS __stdcall VideoPortEnableInterrupt(PVOID HwDeviceExtension);
VP_STATUS __stdcall VideoPortEnumerateChildren(PVOID HwDeviceExtension, PVOID Reserved);
VP_STATUS __stdcall VideoPortFlushRegistry(PVOID HwDeviceExtension);
VP_STATUS __stdcall VideoPortGetAccessRanges(PVOID HwDeviceExtension, ULONG NumRequestedResources, PIO_RESOURCE_DESCRIPTOR RequestedResources, ULONG NumAccessRanges, PVIDEO_ACCESS_RANGE AccessRanges, PVOID VendorId, PVOID DeviceId, PULONG Slot);
VP_STATUS __stdcall VideoPortGetDeviceData(PVOID HwDeviceExtension, VIDEO_DEVICE_DATA_TYPE DeviceDataType, PMINIPORT_QUERY_DEVICE_ROUTINE CallbackRoutine, PVOID Context);
VP_STATUS __stdcall VideoPortGetRegistryParameters(PVOID HwDeviceExtension, PWSTR ParameterName, UCHAR IsParameterFileName, PMINIPORT_GET_REGISTRY_ROUTINE GetRegistryRoutine, PVOID Context);
VP_STATUS __stdcall VideoPortGetVersion(PVOID HwDeviceExtension, PVPOSVERSIONINFO pVpOsVersionInfo);
VP_STATUS __stdcall VideoPortGetVgaStatus(PVOID HwDeviceExtension, PULONG VgaStatus);
VP_STATUS __stdcall VideoPortInt10(PVOID HwDeviceExtension, PVIDEO_X86_BIOS_ARGUMENTS BiosArguments);
VP_STATUS __stdcall VideoPortMapBankedMemory(PVOID HwDeviceExtension, LARGE_INTEGER PhysicalAddress, PULONG Length, PULONG InIoSpace, PVOID *VirtualAddress, ULONG BankLength, UCHAR ReadWriteBank, PBANKED_SECTION_ROUTINE BankRoutine, PVOID Context);
VP_STATUS __stdcall VideoPortMapMemory(PVOID HwDeviceExtension, LARGE_INTEGER PhysicalAddress, PULONG Length, PULONG InIoSpace, PVOID *VirtualAddress);
VP_STATUS __stdcall VideoPortQueryServices(PVOID HwDeviceExtension, VIDEO_PORT_SERVICES ServicesType, PINTERFACE Interface);
VP_STATUS __stdcall VideoPortRegisterBugcheckCallback(PVOID HwDeviceExtension, ULONG BugcheckCode, PVIDEO_BUGCHECK_CALLBACK Callback, ULONG BugcheckDataSize);
VP_STATUS __stdcall VideoPortSetRegistryParameters(PVOID HwDeviceExtension, PWSTR ValueName, PVOID ValueData, ULONG ValueLength);
VP_STATUS __stdcall VideoPortSetTrappedEmulatorPorts(PVOID HwDeviceExtension, ULONG NumAccessRanges, PVIDEO_ACCESS_RANGE AccessRange);
VP_STATUS __stdcall VideoPortStartDma(PVOID HwDeviceExtension, PVP_DMA_ADAPTER VpDmaAdapter, PVOID Mdl, ULONG Offset, PULONG pLength, PEXECUTE_DMA ExecuteDmaRoutine, PVOID Context, BOOLEAN WriteToDevice);
VP_STATUS __stdcall VideoPortUnmapMemory(PVOID HwDeviceExtension, PVOID VirtualAddress, HANDLE ProcessHandle);
VP_STATUS __stdcall VideoPortVerifyAccessRanges(PVOID HwDeviceExtension, ULONG NumAccessRanges, PVIDEO_ACCESS_RANGE AccessRanges);
VP_STATUS __stdcall VideoPortWaitForSingleObject(PVOID HwDeviceExtension, PVOID Object, PLARGE_INTEGER Timeout);
WCHAR __stdcall RtlDowncaseUnicodeChar(WCHAR SourceCharacter);
WCHAR __stdcall RtlUpcaseUnicodeChar(WCHAR SourceCharacter);
WDFCHILDLIST __stdcall WdfFdoGetDefaultChildList(WDFDEVICE Fdo);
WDFDEVICE __stdcall SpbRequestGetController(SPBREQUEST SpbRequest);
WDFDEVICE __stdcall WdfChildListGetDevice(WDFCHILDLIST ChildList);
WDFDEVICE __stdcall WdfChildListRetrievePdo(WDFCHILDLIST ChildList, PWDF_CHILD_RETRIEVE_INFO RetrieveInfo);
WDFDEVICE __stdcall WdfDmaTransactionGetDevice(WDFDMATRANSACTION DmaTransaction);
WDFDEVICE __stdcall WdfFdoRetrieveNextStaticChild(WDFDEVICE Fdo, WDFDEVICE PreviousChild, ULONG Flags);
WDFDEVICE __stdcall WdfFileObjectGetDevice(WDFFILEOBJECT FileObject);
WDFDEVICE __stdcall WdfInterruptGetDevice(WDFINTERRUPT Interrupt);
WDFDEVICE __stdcall WdfIoQueueGetDevice(WDFQUEUE Queue);
WDFDEVICE __stdcall WdfIoTargetGetDevice(WDFIOTARGET IoTarget);
WDFDEVICE __stdcall WdfPdoGetParent(WDFDEVICE Device);
WDFDEVICE __stdcall WdfWdmDeviceGetWdfDeviceHandle(PDEVICE_OBJECT DeviceObject);
WDFDEVICE __stdcall WdfWmiInstanceGetDevice(WDFWMIINSTANCE WmiInstance);
WDFDEVICE __stdcall WdfWmiProviderGetDevice(WDFWMIPROVIDER WmiProvider);
WDFDMAENABLER __stdcall SerCx2SystemDmaReceiveGetDmaEnabler(SERCX2SYSTEMDMARECEIVE SystemDmaReceive);
WDFDMAENABLER __stdcall SerCx2SystemDmaTransmitGetDmaEnabler(SERCX2SYSTEMDMATRANSMIT SystemDmaTransmit);
WDFDRIVER WdfGetDriver(void);
WDFDRIVER __stdcall WdfDeviceGetDriver(WDFDEVICE Device);
WDFDRIVER __stdcall WdfWdmDriverGetWdfDriverHandle(PDRIVER_OBJECT DriverObject);
WDFFILEOBJECT __stdcall SpbTargetGetFileObject(SPBTARGET Target);
WDFFILEOBJECT __stdcall WdfDeviceGetFileObject(WDFDEVICE Device, PFILE_OBJECT FileObject);
WDFFILEOBJECT __stdcall WdfRequestGetFileObject(WDFREQUEST Request);
WDFIORESLIST __stdcall WdfIoResourceRequirementsListGetIoResList(WDFIORESREQLIST RequirementsList, ULONG Index);
WDFIOTARGET __stdcall WdfDeviceGetIoTarget(WDFDEVICE Device);
WDFIOTARGET __stdcall WdfUsbTargetDeviceGetIoTarget(WDFUSBDEVICE UsbDevice);
WDFIOTARGET __stdcall WdfUsbTargetPipeGetIoTarget(WDFUSBPIPE Pipe);
WDFOBJECT __stdcall WdfCollectionGetFirstItem(WDFCOLLECTION Collection);
WDFOBJECT __stdcall WdfCollectionGetItem(WDFCOLLECTION Collection, ULONG Index);
WDFOBJECT __stdcall WdfCollectionGetLastItem(WDFCOLLECTION Collection);
WDFOBJECT __stdcall WdfDpcGetParentObject(WDFDPC Dpc);
WDFOBJECT __stdcall WdfObjectContextGetObject(PVOID ContextPointer);
WDFOBJECT __stdcall WdfTimerGetParentObject(WDFTIMER Timer);
WDFOBJECT __stdcall WdfWorkItemGetParentObject(WDFWORKITEM WorkItem);
WDFQUEUE __stdcall UfxEndpointGetCommandQueue(UFXENDPOINT UfxEndpoint);
WDFQUEUE __stdcall UfxEndpointGetTransferQueue(UFXENDPOINT UfxEndpoint);
WDFQUEUE __stdcall WdfDeviceGetDefaultQueue(WDFDEVICE Device);
WDFQUEUE __stdcall WdfRequestGetIoQueue(WDFREQUEST Request);
WDFREQUEST __stdcall WdfDmaTransactionGetRequest(WDFDMATRANSACTION DmaTransaction);
WDFUSBINTERFACE __stdcall WdfUsbTargetDeviceGetInterface(WDFUSBDEVICE UsbDevice, UCHAR InterfaceIndex);
WDFUSBPIPE __stdcall WdfUsbInterfaceGetConfiguredPipe(WDFUSBINTERFACE UsbInterface, UCHAR PipeIndex, PWDF_USB_PIPE_INFORMATION PipeInfo);
WDFWMIPROVIDER __stdcall WdfWmiInstanceGetProvider(WDFWMIINSTANCE WmiInstance);
WDF_DEVICE_PNP_STATE __stdcall WdfDeviceGetDevicePnpState(WDFDEVICE Device);
WDF_DEVICE_POWER_POLICY_STATE __stdcall WdfDeviceGetDevicePowerPolicyState(WDFDEVICE Device);
WDF_DEVICE_POWER_STATE __stdcall WdfDeviceGetDevicePowerState(WDFDEVICE Device);
WDF_IO_QUEUE_STATE __stdcall WdfIoQueueGetState(WDFQUEUE Queue, PULONG QueueRequests, PULONG DriverRequests);
WDF_IO_TARGET_STATE __stdcall WdfIoTargetGetState(WDFIOTARGET IoTarget);
WDF_POINTER_TYPE_USBFNKMCLASSLIB_COMPLETIONROUTINE __stdcall UsbFnKmGetRequestData(WDFOBJECT Handle);
WDF_POINTER_TYPE_WdfCustomType_UDECXUSBDEVICE __stdcall WdfObjectGetCustomType_UDECXUSBDEVICE(WDFOBJECT Handle);
WDF_POINTER_TYPE_WdfCustomType_UDECXUSBENDPOINT __stdcall WdfObjectGetCustomType_UDECXUSBENDPOINT(WDFOBJECT Handle);
WDF_USB_PIPE_TYPE __stdcall WdfUsbTargetPipeGetType(WDFUSBPIPE Pipe);
WPP_RECORDER_COUNTER __stdcall imp_WppRecorderGetCounterHandle(PVOID WppCb);
_RTC_error_fn __cdecl CRT_RTC_INIT(void *Res0, void **Res1, int Res2, int Res3, int Res4);
_RTC_error_fn __cdecl RTC_SetErrorFunc(_RTC_error_fn);
_RTC_error_fnW __cdecl CRT_RTC_INITW(void *Res0, void **Res1, int Res2, int Res3, int Res4);
_RTC_error_fnW __cdecl RTC_SetErrorFuncW(_RTC_error_fnW);
__int16 __fastcall RTC_Check_4_to_2(int Src);
__int16 __fastcall RTC_Check_8_to_2(__int64 Src);
__int16 __stdcall PtrToShort(const void *p);
__int64 __cdecl abs64(__int64);
__int64 __cdecl atoi64(const char *String);
__int64 __cdecl atoi64_l(const char *String, _locale_t Locale);
__int64 __cdecl filelengthi64(int FileHandle);
__int64 __cdecl ftelli64(FILE *File);
__int64 __cdecl ftelli64_nolock(FILE *File);
__int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin);
__int64 __cdecl strtoi64(const char *String, char **EndPtr, int Radix);
__int64 __cdecl strtoi64_l(const char *String, char **EndPtr, int Radix, _locale_t Locale);
__int64 __cdecl telli64(int FileHandle);
__int64 __cdecl wcstoi64(const wchar_t *Str, wchar_t **EndPtr, int Radix);
__int64 __cdecl wcstoi64_l(const wchar_t *Str, wchar_t **EndPtr, int Radix, _locale_t Locale);
__int64 __cdecl wtoi64(const wchar_t *Str);
__int64 __cdecl wtoi64_l(const wchar_t *Str, _locale_t Locale);
__int64 __stdcall InterlockedCompareExchange64_HLEAcquire(volatile __int64 *, __int64, __int64);
__int64 __stdcall InterlockedCompareExchange64_HLERelease(volatile __int64 *, __int64, __int64);
__int64 __stdcall InterlockedExchangeAdd64_HLEAcquire(volatile __int64 *, __int64);
__int64 __stdcall InterlockedExchangeAdd64_HLERelease(volatile __int64 *, __int64);
__int64 __stdcall mm_cvtsd_si64(__m128d);
__int64 __stdcall mm_cvtsi128_si64(__m128i);
__int64 __stdcall mm_cvtss_si64(__m128 A);
__int64 __stdcall mm_cvttsd_si64(__m128d);
__int64 __stdcall mm_cvttss_si64(__m128 A);
__int64 __stdcall mm_extract_epi64(__m128i src, const int ndx);
__int64 __stdcall mm_popcnt_u64(unsigned __int64 v);
__int64 __stdcall sarx_i64(__int64, unsigned int);
__m128 __cdecl mm256_castps256_ps128(__m256 a);
__m128 __cdecl mm256_cvtpd_ps(__m256d m1);
__m128 __cdecl mm256_extractf128_ps(__m256 m1, const int offset);
__m128 __cdecl mm256_i64gather_ps(const float *, __m256i, const int);
__m128 __cdecl mm256_mask_i64gather_ps(__m128, const float *, __m256i, __m128, const int);
__m128 __cdecl mm_broadcast_ss(const float *a);
__m128 __cdecl mm_broadcastss_ps(__m128 scalar_in_xmm);
__m128 __cdecl mm_cmp_ps(__m128 m1, __m128 m2, const int predicate);
__m128 __cdecl mm_cmp_ss(__m128 m1, __m128 m2, const int predicate);
__m128 __cdecl mm_cvtph_ps(__m128i m1);
__m128 __cdecl mm_fmadd_ps(__m128 a, __m128 b, __m128 c);
__m128 __cdecl mm_fmadd_ss(__m128 a, __m128 b, __m128 c);
__m128 __cdecl mm_fmaddsub_ps(__m128 a, __m128 b, __m128 c);
__m128 __cdecl mm_fmsub_ps(__m128 a, __m128 b, __m128 c);
__m128 __cdecl mm_fmsub_ss(__m128 a, __m128 b, __m128 c);
__m128 __cdecl mm_fmsubadd_ps(__m128 a, __m128 b, __m128 c);
__m128 __cdecl mm_fnmadd_ps(__m128 a, __m128 b, __m128 c);
__m128 __cdecl mm_fnmadd_ss(__m128 a, __m128 b, __m128 c);
__m128 __cdecl mm_fnmsub_ps(__m128 a, __m128 b, __m128 c);
__m128 __cdecl mm_fnmsub_ss(__m128 a, __m128 b, __m128 c);
__m128 __cdecl mm_i32gather_ps(const float *, __m128i, const int);
__m128 __cdecl mm_i64gather_ps(const float *, __m128i, const int);
__m128 __cdecl mm_mask_i32gather_ps(__m128, const float *, __m128i, __m128, const int);
__m128 __cdecl mm_mask_i64gather_ps(__m128, const float *, __m128i, __m128, const int);
__m128 __cdecl mm_maskload_ps(const float *a, __m128i mask);
__m128 __cdecl mm_permute_ps(__m128 a, int control);
__m128 __cdecl mm_permutevar_ps(__m128 a, __m128i control);
__m128 __stdcall mm_add_ps(__m128 A, __m128 B);
__m128 __stdcall mm_add_ss(__m128 A, __m128 B);
__m128 __stdcall mm_addsub_ps(__m128 a, __m128 b);
__m128 __stdcall mm_and_ps(__m128 A, __m128 B);
__m128 __stdcall mm_andnot_ps(__m128 A, __m128 B);
__m128 __stdcall mm_blend_ps(__m128 v1, __m128 v2, const int mask);
__m128 __stdcall mm_blendv_ps(__m128 v1, __m128 v2, __m128 v3);
__m128 __stdcall mm_castpd_ps(__m128d);
__m128 __stdcall mm_castsi128_ps(__m128i);
__m128 __stdcall mm_cmpeq_ps(__m128 A, __m128 B);
__m128 __stdcall mm_cmpeq_ss(__m128 A, __m128 B);
__m128 __stdcall mm_cmpge_ps(__m128 A, __m128 B);
__m128 __stdcall mm_cmpge_ss(__m128 A, __m128 B);
__m128 __stdcall mm_cmpgt_ps(__m128 A, __m128 B);
__m128 __stdcall mm_cmpgt_ss(__m128 A, __m128 B);
__m128 __stdcall mm_cmple_ps(__m128 A, __m128 B);
__m128 __stdcall mm_cmple_ss(__m128 A, __m128 B);
__m128 __stdcall mm_cmplt_ps(__m128 A, __m128 B);
__m128 __stdcall mm_cmplt_ss(__m128 A, __m128 B);
__m128 __stdcall mm_cmpneq_ps(__m128 A, __m128 B);
__m128 __stdcall mm_cmpneq_ss(__m128 A, __m128 B);
__m128 __stdcall mm_cmpnge_ps(__m128 A, __m128 B);
__m128 __stdcall mm_cmpnge_ss(__m128 A, __m128 B);
__m128 __stdcall mm_cmpngt_ps(__m128 A, __m128 B);
__m128 __stdcall mm_cmpngt_ss(__m128 A, __m128 B);
__m128 __stdcall mm_cmpnle_ps(__m128 A, __m128 B);
__m128 __stdcall mm_cmpnle_ss(__m128 A, __m128 B);
__m128 __stdcall mm_cmpnlt_ps(__m128 A, __m128 B);
__m128 __stdcall mm_cmpnlt_ss(__m128 A, __m128 B);
__m128 __stdcall mm_cmpord_ps(__m128 A, __m128 B);
__m128 __stdcall mm_cmpord_ss(__m128 A, __m128 B);
__m128 __stdcall mm_cmpunord_ps(__m128 A, __m128 B);
__m128 __stdcall mm_cmpunord_ss(__m128 A, __m128 B);
__m128 __stdcall mm_cvt_pi2ps(__m128, __m64);
__m128 __stdcall mm_cvt_si2ss(__m128, int);
__m128 __stdcall mm_cvtepi32_ps(__m128i A);
__m128 __stdcall mm_cvtpd_ps(__m128d A);
__m128 __stdcall mm_cvtpi16_ps(__m64 a);
__m128 __stdcall mm_cvtpi32x2_ps(__m64 a, __m64 b);
__m128 __stdcall mm_cvtpi8_ps(__m64 a);
__m128 __stdcall mm_cvtpu16_ps(__m64 a);
__m128 __stdcall mm_cvtpu8_ps(__m64 a);
__m128 __stdcall mm_cvtsd_ss(__m128 A, __m128d B);
__m128 __stdcall mm_cvtsi64_ss(__m128 A, __int64 B);
__m128 __stdcall mm_div_ps(__m128 A, __m128 B);
__m128 __stdcall mm_div_ss(__m128 A, __m128 B);
__m128 __stdcall mm_dp_ps(__m128 val1, __m128 val2, const int mask);
__m128 __stdcall mm_frcz_ps(__m128);
__m128 __stdcall mm_frcz_ss(__m128, __m128);
__m128 __stdcall mm_hadd_ps(__m128 a, __m128 b);
__m128 __stdcall mm_hsub_ps(__m128 a, __m128 b);
__m128 __stdcall mm_insert_ps(__m128 dst, __m128 src, const int ndx);
__m128 __stdcall mm_load_ps(const float *A);
__m128 __stdcall mm_load_ps1(const float *A);
__m128 __stdcall mm_load_ss(const float *A);
__m128 __stdcall mm_loadh_pi(__m128, const __m64 *);
__m128 __stdcall mm_loadl_pi(__m128, const __m64 *);
__m128 __stdcall mm_loadr_ps(const float *A);
__m128 __stdcall mm_loadu_ps(const float *A);
__m128 __stdcall mm_macc_ps(__m128, __m128, __m128);
__m128 __stdcall mm_macc_ss(__m128, __m128, __m128);
__m128 __stdcall mm_maddsub_ps(__m128, __m128, __m128);
__m128 __stdcall mm_max_ps(__m128 A, __m128 B);
__m128 __stdcall mm_max_ss(__m128 A, __m128 B);
__m128 __stdcall mm_min_ps(__m128 A, __m128 B);
__m128 __stdcall mm_min_ss(__m128 A, __m128 B);
__m128 __stdcall mm_move_ss(__m128 A, __m128 B);
__m128 __stdcall mm_movehdup_ps(__m128 a);
__m128 __stdcall mm_movehl_ps(__m128, __m128);
__m128 __stdcall mm_moveldup_ps(__m128 a);
__m128 __stdcall mm_movelh_ps(__m128, __m128);
__m128 __stdcall mm_msub_ps(__m128, __m128, __m128);
__m128 __stdcall mm_msub_ss(__m128, __m128, __m128);
__m128 __stdcall mm_msubadd_ps(__m128, __m128, __m128);
__m128 __stdcall mm_mul_ps(__m128 A, __m128 B);
__m128 __stdcall mm_mul_ss(__m128 A, __m128 B);
__m128 __stdcall mm_nmacc_ps(__m128, __m128, __m128);
__m128 __stdcall mm_nmacc_ss(__m128, __m128, __m128);
__m128 __stdcall mm_nmsub_ps(__m128, __m128, __m128);
__m128 __stdcall mm_nmsub_ss(__m128, __m128, __m128);
__m128 __stdcall mm_or_ps(__m128 A, __m128 B);
__m128 __stdcall mm_permute2_ps(__m128, __m128, __m128i, int);
__m128 __stdcall mm_rcp_ps(__m128 A);
__m128 __stdcall mm_rcp_ss(__m128 A);
__m128 __stdcall mm_round_ps(__m128 val, int iRoundMode);
__m128 __stdcall mm_round_ss(__m128 dst, __m128 val, int iRoundMode);
__m128 __stdcall mm_rsqrt_ps(__m128 A);
__m128 __stdcall mm_rsqrt_ss(__m128 A);
__m128 __stdcall mm_set_ps(float A, float B, float C, float D);
__m128 __stdcall mm_set_ps1(float A);
__m128 __stdcall mm_set_ss(float A);
__m128 __stdcall mm_setr_ps(float A, float B, float C, float D);
__m128 __stdcall mm_shuffle_ps(__m128 A, __m128 B, unsigned int Imm8);
__m128 __stdcall mm_sqrt_ps(__m128 A);
__m128 __stdcall mm_sqrt_ss(__m128 A);
__m128 __stdcall mm_sub_ps(__m128 A, __m128 B);
__m128 __stdcall mm_sub_ss(__m128 A, __m128 B);
__m128 __stdcall mm_unpackhi_ps(__m128 A, __m128 B);
__m128 __stdcall mm_unpacklo_ps(__m128 A, __m128 B);
__m128 __stdcall mm_xor_ps(__m128 A, __m128 B);
__m128 mm_setzero_ps(void);
__m128d __cdecl mm256_castpd256_pd128(__m256d a);
__m128d __cdecl mm256_extractf128_pd(__m256d m1, const int offset);
__m128d __cdecl mm_broadcastsd_pd(__m128d scalar_in_xmm);
__m128d __cdecl mm_cmp_pd(__m128d m1, __m128d m2, const int predicate);
__m128d __cdecl mm_cmp_sd(__m128d m1, __m128d m2, const int predicate);
__m128d __cdecl mm_fmadd_pd(__m128d a, __m128d b, __m128d c);
__m128d __cdecl mm_fmadd_sd(__m128d a, __m128d b, __m128d c);
__m128d __cdecl mm_fmaddsub_pd(__m128d a, __m128d b, __m128d c);
__m128d __cdecl mm_fmsub_pd(__m128d a, __m128d b, __m128d c);
__m128d __cdecl mm_fmsub_sd(__m128d a, __m128d b, __m128d c);
__m128d __cdecl mm_fmsubadd_pd(__m128d a, __m128d b, __m128d c);
__m128d __cdecl mm_fnmadd_pd(__m128d a, __m128d b, __m128d c);
__m128d __cdecl mm_fnmadd_sd(__m128d a, __m128d b, __m128d c);
__m128d __cdecl mm_fnmsub_pd(__m128d a, __m128d b, __m128d c);
__m128d __cdecl mm_fnmsub_sd(__m128d a, __m128d b, __m128d c);
__m128d __cdecl mm_i32gather_pd(const double *, __m128i, const int);
__m128d __cdecl mm_i64gather_pd(const double *, __m128i, const int);
__m128d __cdecl mm_mask_i32gather_pd(__m128d, const double *, __m128i, __m128d, const int);
__m128d __cdecl mm_mask_i64gather_pd(__m128d, const double *, __m128i, __m128d, const int);
__m128d __cdecl mm_maskload_pd(const double *a, __m128i mask);
__m128d __cdecl mm_permute_pd(__m128d a, int control);
__m128d __cdecl mm_permutevar_pd(__m128d a, __m128i control);
__m128d __stdcall mm_add_pd(__m128d A, __m128d B);
__m128d __stdcall mm_add_sd(__m128d A, __m128d B);
__m128d __stdcall mm_addsub_pd(__m128d a, __m128d b);
__m128d __stdcall mm_and_pd(__m128d A, __m128d B);
__m128d __stdcall mm_andnot_pd(__m128d A, __m128d B);
__m128d __stdcall mm_blend_pd(__m128d v1, __m128d v2, const int mask);
__m128d __stdcall mm_blendv_pd(__m128d v1, __m128d v2, __m128d v3);
__m128d __stdcall mm_castps_pd(__m128);
__m128d __stdcall mm_castsi128_pd(__m128i);
__m128d __stdcall mm_cmpeq_pd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpeq_sd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpge_pd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpge_sd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpgt_pd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpgt_sd(__m128d A, __m128d B);
__m128d __stdcall mm_cmple_pd(__m128d A, __m128d B);
__m128d __stdcall mm_cmple_sd(__m128d A, __m128d B);
__m128d __stdcall mm_cmplt_pd(__m128d A, __m128d B);
__m128d __stdcall mm_cmplt_sd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpneq_pd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpneq_sd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpnge_pd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpnge_sd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpngt_pd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpngt_sd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpnle_pd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpnle_sd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpnlt_pd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpnlt_sd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpord_pd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpord_sd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpunord_pd(__m128d A, __m128d B);
__m128d __stdcall mm_cmpunord_sd(__m128d A, __m128d B);
__m128d __stdcall mm_cvtepi32_pd(__m128i A);
__m128d __stdcall mm_cvtpi32_pd(__m64 A);
__m128d __stdcall mm_cvtps_pd(__m128 A);
__m128d __stdcall mm_cvtsi32_sd(__m128d A, int B);
__m128d __stdcall mm_cvtsi64_sd(__m128d, __int64);
__m128d __stdcall mm_cvtss_sd(__m128d A, __m128 B);
__m128d __stdcall mm_div_pd(__m128d A, __m128d B);
__m128d __stdcall mm_div_sd(__m128d A, __m128d B);
__m128d __stdcall mm_dp_pd(__m128d val1, __m128d val2, const int mask);
__m128d __stdcall mm_frcz_pd(__m128d);
__m128d __stdcall mm_frcz_sd(__m128d, __m128d);
__m128d __stdcall mm_hadd_pd(__m128d a, __m128d b);
__m128d __stdcall mm_hsub_pd(__m128d a, __m128d b);
__m128d __stdcall mm_load1_pd(const double *Dp);
__m128d __stdcall mm_load_pd(const double *Dp);
__m128d __stdcall mm_load_sd(const double *Dp);
__m128d __stdcall mm_loaddup_pd(const double *dp);
__m128d __stdcall mm_loadh_pd(__m128d A, const double *Dp);
__m128d __stdcall mm_loadl_pd(__m128d A, const double *Dp);
__m128d __stdcall mm_loadr_pd(const double *Dp);
__m128d __stdcall mm_loadu_pd(const double *Dp);
__m128d __stdcall mm_macc_pd(__m128d, __m128d, __m128d);
__m128d __stdcall mm_macc_sd(__m128d, __m128d, __m128d);
__m128d __stdcall mm_maddsub_pd(__m128d, __m128d, __m128d);
__m128d __stdcall mm_max_pd(__m128d A, __m128d B);
__m128d __stdcall mm_max_sd(__m128d A, __m128d B);
__m128d __stdcall mm_min_pd(__m128d A, __m128d B);
__m128d __stdcall mm_min_sd(__m128d A, __m128d B);
__m128d __stdcall mm_move_sd(__m128d A, __m128d B);
__m128d __stdcall mm_movedup_pd(__m128d a);
__m128d __stdcall mm_msub_pd(__m128d, __m128d, __m128d);
__m128d __stdcall mm_msub_sd(__m128d, __m128d, __m128d);
__m128d __stdcall mm_msubadd_pd(__m128d, __m128d, __m128d);
__m128d __stdcall mm_mul_pd(__m128d A, __m128d B);
__m128d __stdcall mm_mul_sd(__m128d A, __m128d B);
__m128d __stdcall mm_nmacc_pd(__m128d, __m128d, __m128d);
__m128d __stdcall mm_nmacc_sd(__m128d, __m128d, __m128d);
__m128d __stdcall mm_nmsub_pd(__m128d, __m128d, __m128d);
__m128d __stdcall mm_nmsub_sd(__m128d, __m128d, __m128d);
__m128d __stdcall mm_or_pd(__m128d A, __m128d B);
__m128d __stdcall mm_permute2_pd(__m128d, __m128d, __m128i, int);
__m128d __stdcall mm_round_pd(__m128d val, int iRoundMode);
__m128d __stdcall mm_round_sd(__m128d dst, __m128d val, int iRoundMode);
__m128d __stdcall mm_set1_pd(double A);
__m128d __stdcall mm_set_pd(double Z, double Y);
__m128d __stdcall mm_set_sd(double W);
__m128d __stdcall mm_setr_pd(double Y, double Z);
__m128d __stdcall mm_shuffle_pd(__m128d A, __m128d B, int I);
__m128d __stdcall mm_sqrt_pd(__m128d A);
__m128d __stdcall mm_sqrt_sd(__m128d A, __m128d B);
__m128d __stdcall mm_sub_pd(__m128d A, __m128d B);
__m128d __stdcall mm_sub_sd(__m128d A, __m128d B);
__m128d __stdcall mm_unpackhi_pd(__m128d A, __m128d B);
__m128d __stdcall mm_unpacklo_pd(__m128d A, __m128d B);
__m128d __stdcall mm_xor_pd(__m128d A, __m128d B);
__m128d mm_setzero_pd(void);
__m128i __cdecl mm256_castsi256_si128(__m256i a);
__m128i __cdecl mm256_cvtpd_epi32(__m256d m1);
__m128i __cdecl mm256_cvtps_ph(__m256 x, const int imm8);
__m128i __cdecl mm256_cvttpd_epi32(__m256d m1);
__m128i __cdecl mm256_extractf128_si256(__m256i m1, const int offset);
__m128i __cdecl mm256_extracti128_si256(__m256i A, int offset);
__m128i __cdecl mm256_i64gather_epi32(const int *, __m256i, const int);
__m128i __cdecl mm256_mask_i64gather_epi32(__m128i, const int *, __m256i, __m128i, const int);
__m128i __cdecl mm_blend_epi32(__m128i A, __m128i B, const int control);
__m128i __cdecl mm_broadcastb_epi8(__m128i scalar_in_xmm);
__m128i __cdecl mm_broadcastd_epi32(__m128i scalar_in_xmm);
__m128i __cdecl mm_broadcastq_epi64(__m128i scalar_in_xmm);
__m128i __cdecl mm_broadcastw_epi16(__m128i scalar_in_xmm);
__m128i __cdecl mm_cvtps_ph(__m128 m1, const int imm);
__m128i __cdecl mm_i32gather_epi32(const int *, __m128i, const int);
__m128i __cdecl mm_i32gather_epi64(const __int64 *, __m128i, const int);
__m128i __cdecl mm_i64gather_epi32(const int *, __m128i, const int);
__m128i __cdecl mm_i64gather_epi64(const __int64 *, __m128i, const int);
__m128i __cdecl mm_mask_i32gather_epi32(__m128i, const int *, __m128i, __m128i, const int);
__m128i __cdecl mm_mask_i32gather_epi64(__m128i, const __int64 *, __m128i, __m128i, const int);
__m128i __cdecl mm_mask_i64gather_epi32(__m128i, const int *, __m128i, __m128i, const int);
__m128i __cdecl mm_mask_i64gather_epi64(__m128i, const __int64 *, __m128i, __m128i, const int);
__m128i __cdecl mm_maskload_epi32(const int *A, __m128i Mask);
__m128i __cdecl mm_maskload_epi64(const __int64 *A, __m128i Mask);
__m128i __cdecl mm_sllv_epi32(__m128i, __m128i);
__m128i __cdecl mm_sllv_epi64(__m128i, __m128i);
__m128i __cdecl mm_srav_epi32(__m128i, __m128i);
__m128i __cdecl mm_srlv_epi32(__m128i, __m128i);
__m128i __cdecl mm_srlv_epi64(__m128i, __m128i);
__m128i __stdcall mm_abs_epi16(__m128i a);
__m128i __stdcall mm_abs_epi32(__m128i a);
__m128i __stdcall mm_abs_epi8(__m128i a);
__m128i __stdcall mm_add_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_add_epi32(__m128i A, __m128i B);
__m128i __stdcall mm_add_epi64(__m128i A, __m128i B);
__m128i __stdcall mm_add_epi8(__m128i A, __m128i B);
__m128i __stdcall mm_adds_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_adds_epi8(__m128i A, __m128i B);
__m128i __stdcall mm_adds_epu16(__m128i A, __m128i B);
__m128i __stdcall mm_adds_epu8(__m128i A, __m128i B);
__m128i __stdcall mm_aesdec_si128(__m128i v, __m128i rkey);
__m128i __stdcall mm_aesdeclast_si128(__m128i v, __m128i rkey);
__m128i __stdcall mm_aesenc_si128(__m128i v, __m128i rkey);
__m128i __stdcall mm_aesenclast_si128(__m128i v, __m128i rkey);
__m128i __stdcall mm_aesimc_si128(__m128i v);
__m128i __stdcall mm_aeskeygenassist_si128(__m128i ckey, const int rcon);
__m128i __stdcall mm_alignr_epi8(__m128i a, __m128i b, int n);
__m128i __stdcall mm_and_si128(__m128i A, __m128i B);
__m128i __stdcall mm_andnot_si128(__m128i A, __m128i B);
__m128i __stdcall mm_avg_epu16(__m128i A, __m128i B);
__m128i __stdcall mm_avg_epu8(__m128i A, __m128i B);
__m128i __stdcall mm_blend_epi16(__m128i v1, __m128i v2, const int mask);
__m128i __stdcall mm_blendv_epi8(__m128i v1, __m128i v2, __m128i mask);
__m128i __stdcall mm_castpd_si128(__m128d);
__m128i __stdcall mm_castps_si128(__m128);
__m128i __stdcall mm_clmulepi64_si128(__m128i v1, __m128i v2, const int imm8);
__m128i __stdcall mm_cmov_si128(__m128i, __m128i, __m128i);
__m128i __stdcall mm_cmpeq_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_cmpeq_epi32(__m128i A, __m128i B);
__m128i __stdcall mm_cmpeq_epi64(__m128i val1, __m128i val2);
__m128i __stdcall mm_cmpeq_epi8(__m128i A, __m128i B);
__m128i __stdcall mm_cmpestrm(__m128i a, int la, __m128i b, int lb, const int mode);
__m128i __stdcall mm_cmpgt_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_cmpgt_epi32(__m128i A, __m128i B);
__m128i __stdcall mm_cmpgt_epi64(__m128i val1, __m128i val2);
__m128i __stdcall mm_cmpgt_epi8(__m128i A, __m128i B);
__m128i __stdcall mm_cmpistrm(__m128i a, __m128i b, const int mode);
__m128i __stdcall mm_cmplt_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_cmplt_epi32(__m128i A, __m128i B);
__m128i __stdcall mm_cmplt_epi8(__m128i A, __m128i B);
__m128i __stdcall mm_com_epi16(__m128i, __m128i, int);
__m128i __stdcall mm_com_epi32(__m128i, __m128i, int);
__m128i __stdcall mm_com_epi64(__m128i, __m128i, int);
__m128i __stdcall mm_com_epi8(__m128i, __m128i, int);
__m128i __stdcall mm_com_epu16(__m128i, __m128i, int);
__m128i __stdcall mm_com_epu32(__m128i, __m128i, int);
__m128i __stdcall mm_com_epu64(__m128i, __m128i, int);
__m128i __stdcall mm_com_epu8(__m128i, __m128i, int);
__m128i __stdcall mm_cvtepi16_epi32(__m128i shortValues);
__m128i __stdcall mm_cvtepi16_epi64(__m128i shortValues);
__m128i __stdcall mm_cvtepi32_epi64(__m128i intValues);
__m128i __stdcall mm_cvtepi8_epi16(__m128i byteValues);
__m128i __stdcall mm_cvtepi8_epi32(__m128i byteValues);
__m128i __stdcall mm_cvtepi8_epi64(__m128i byteValues);
__m128i __stdcall mm_cvtepu16_epi32(__m128i shortValues);
__m128i __stdcall mm_cvtepu16_epi64(__m128i shortValues);
__m128i __stdcall mm_cvtepu32_epi64(__m128i intValues);
__m128i __stdcall mm_cvtepu8_epi16(__m128i byteValues);
__m128i __stdcall mm_cvtepu8_epi32(__m128i byteValues);
__m128i __stdcall mm_cvtepu8_epi64(__m128i shortValues);
__m128i __stdcall mm_cvtpd_epi32(__m128d A);
__m128i __stdcall mm_cvtps_epi32(__m128 A);
__m128i __stdcall mm_cvtsi32_si128(int A);
__m128i __stdcall mm_cvtsi64_si128(__int64);
__m128i __stdcall mm_cvttpd_epi32(__m128d A);
__m128i __stdcall mm_cvttps_epi32(__m128 A);
__m128i __stdcall mm_hadd_epi16(__m128i a, __m128i b);
__m128i __stdcall mm_hadd_epi32(__m128i a, __m128i b);
__m128i __stdcall mm_haddd_epi16(__m128i);
__m128i __stdcall mm_haddd_epi8(__m128i);
__m128i __stdcall mm_haddd_epu16(__m128i);
__m128i __stdcall mm_haddd_epu8(__m128i);
__m128i __stdcall mm_haddq_epi16(__m128i);
__m128i __stdcall mm_haddq_epi32(__m128i);
__m128i __stdcall mm_haddq_epi8(__m128i);
__m128i __stdcall mm_haddq_epu16(__m128i);
__m128i __stdcall mm_haddq_epu32(__m128i);
__m128i __stdcall mm_haddq_epu8(__m128i);
__m128i __stdcall mm_hadds_epi16(__m128i a, __m128i b);
__m128i __stdcall mm_haddw_epi8(__m128i);
__m128i __stdcall mm_haddw_epu8(__m128i);
__m128i __stdcall mm_hsub_epi16(__m128i a, __m128i b);
__m128i __stdcall mm_hsub_epi32(__m128i a, __m128i b);
__m128i __stdcall mm_hsubd_epi16(__m128i);
__m128i __stdcall mm_hsubq_epi32(__m128i);
__m128i __stdcall mm_hsubs_epi16(__m128i a, __m128i b);
__m128i __stdcall mm_hsubw_epi8(__m128i);
__m128i __stdcall mm_insert_epi16(__m128i A, int B, int Imm);
__m128i __stdcall mm_insert_epi32(__m128i dst, int s, const int ndx);
__m128i __stdcall mm_insert_epi64(__m128i dst, __int64 s, const int ndx);
__m128i __stdcall mm_insert_epi8(__m128i dst, int s, const int ndx);
__m128i __stdcall mm_lddqu_si128(const __m128i *p);
__m128i __stdcall mm_load_si128(const __m128i *P);
__m128i __stdcall mm_loadl_epi64(const __m128i *P);
__m128i __stdcall mm_loadu_si128(const __m128i *P);
__m128i __stdcall mm_macc_epi16(__m128i, __m128i, __m128i);
__m128i __stdcall mm_macc_epi32(__m128i, __m128i, __m128i);
__m128i __stdcall mm_maccd_epi16(__m128i, __m128i, __m128i);
__m128i __stdcall mm_macchi_epi32(__m128i, __m128i, __m128i);
__m128i __stdcall mm_macclo_epi32(__m128i, __m128i, __m128i);
__m128i __stdcall mm_maccs_epi16(__m128i, __m128i, __m128i);
__m128i __stdcall mm_maccs_epi32(__m128i, __m128i, __m128i);
__m128i __stdcall mm_maccsd_epi16(__m128i, __m128i, __m128i);
__m128i __stdcall mm_maccshi_epi32(__m128i, __m128i, __m128i);
__m128i __stdcall mm_maccslo_epi32(__m128i, __m128i, __m128i);
__m128i __stdcall mm_madd_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_maddd_epi16(__m128i, __m128i, __m128i);
__m128i __stdcall mm_maddsd_epi16(__m128i, __m128i, __m128i);
__m128i __stdcall mm_maddubs_epi16(__m128i a, __m128i b);
__m128i __stdcall mm_max_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_max_epi32(__m128i val1, __m128i val2);
__m128i __stdcall mm_max_epi8(__m128i val1, __m128i val2);
__m128i __stdcall mm_max_epu16(__m128i val1, __m128i val2);
__m128i __stdcall mm_max_epu32(__m128i val1, __m128i val2);
__m128i __stdcall mm_max_epu8(__m128i A, __m128i B);
__m128i __stdcall mm_min_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_min_epi32(__m128i val1, __m128i val2);
__m128i __stdcall mm_min_epi8(__m128i val1, __m128i val2);
__m128i __stdcall mm_min_epu16(__m128i val1, __m128i val2);
__m128i __stdcall mm_min_epu32(__m128i val1, __m128i val2);
__m128i __stdcall mm_min_epu8(__m128i A, __m128i B);
__m128i __stdcall mm_minpos_epu16(__m128i shortValues);
__m128i __stdcall mm_move_epi64(__m128i Q);
__m128i __stdcall mm_movpi64_epi64(__m64 Q);
__m128i __stdcall mm_mpsadbw_epu8(__m128i s1, __m128i s2, const int msk);
__m128i __stdcall mm_mul_epi32(__m128i a, __m128i b);
__m128i __stdcall mm_mul_epu32(__m128i A, __m128i B);
__m128i __stdcall mm_mulhi_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_mulhi_epu16(__m128i A, __m128i B);
__m128i __stdcall mm_mulhrs_epi16(__m128i a, __m128i b);
__m128i __stdcall mm_mullo_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_mullo_epi32(__m128i a, __m128i b);
__m128i __stdcall mm_or_si128(__m128i A, __m128i B);
__m128i __stdcall mm_packs_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_packs_epi32(__m128i A, __m128i B);
__m128i __stdcall mm_packus_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_packus_epi32(__m128i val1, __m128i val2);
__m128i __stdcall mm_perm_epi8(__m128i, __m128i, __m128i);
__m128i __stdcall mm_rot_epi16(__m128i, __m128i);
__m128i __stdcall mm_rot_epi32(__m128i, __m128i);
__m128i __stdcall mm_rot_epi64(__m128i, __m128i);
__m128i __stdcall mm_rot_epi8(__m128i, __m128i);
__m128i __stdcall mm_roti_epi16(__m128i, int);
__m128i __stdcall mm_roti_epi32(__m128i, int);
__m128i __stdcall mm_roti_epi64(__m128i, int);
__m128i __stdcall mm_roti_epi8(__m128i, int);
__m128i __stdcall mm_sad_epu8(__m128i A, __m128i B);
__m128i __stdcall mm_set1_epi16(__int16 W);
__m128i __stdcall mm_set1_epi32(int I);
__m128i __stdcall mm_set1_epi64(__m64 Q);
__m128i __stdcall mm_set1_epi8(char B);
__m128i __stdcall mm_set_epi16(__int16 W7, __int16 W6, __int16 W5, __int16 W4, __int16 W3, __int16 W2, __int16 W1, __int16 W0);
__m128i __stdcall mm_set_epi32(int I3, int I2, int I1, int I0);
__m128i __stdcall mm_set_epi64(__m64 Q1, __m64 Q0);
__m128i __stdcall mm_set_epi8(char B15, char B14, char B13, char B12, char B11, char B10, char B9, char B8, char B7, char B6, char B5, char B4, char B3, char B2, char B1, char B0);
__m128i __stdcall mm_setl_epi64(__m128i Q);
__m128i __stdcall mm_setr_epi16(__int16 W0, __int16 W1, __int16 W2, __int16 W3, __int16 W4, __int16 W5, __int16 W6, __int16 W7);
__m128i __stdcall mm_setr_epi32(int I0, int I1, int I2, int I3);
__m128i __stdcall mm_setr_epi64(__m64 Q0, __m64 Q1);
__m128i __stdcall mm_setr_epi8(char B15, char B14, char B13, char B12, char B11, char B10, char B9, char B8, char B7, char B6, char B5, char B4, char B3, char B2, char B1, char B0);
__m128i __stdcall mm_sha_epi16(__m128i, __m128i);
__m128i __stdcall mm_sha_epi32(__m128i, __m128i);
__m128i __stdcall mm_sha_epi64(__m128i, __m128i);
__m128i __stdcall mm_sha_epi8(__m128i, __m128i);
__m128i __stdcall mm_shl_epi16(__m128i, __m128i);
__m128i __stdcall mm_shl_epi32(__m128i, __m128i);
__m128i __stdcall mm_shl_epi64(__m128i, __m128i);
__m128i __stdcall mm_shl_epi8(__m128i, __m128i);
__m128i __stdcall mm_shuffle_epi32(__m128i A, int Imm);
__m128i __stdcall mm_shuffle_epi8(__m128i a, __m128i b);
__m128i __stdcall mm_shufflehi_epi16(__m128i A, int Imm);
__m128i __stdcall mm_shufflelo_epi16(__m128i A, int Imm);
__m128i __stdcall mm_sign_epi16(__m128i a, __m128i b);
__m128i __stdcall mm_sign_epi32(__m128i a, __m128i b);
__m128i __stdcall mm_sign_epi8(__m128i a, __m128i b);
__m128i __stdcall mm_sll_epi16(__m128i A, __m128i Count);
__m128i __stdcall mm_sll_epi32(__m128i A, __m128i Count);
__m128i __stdcall mm_sll_epi64(__m128i A, __m128i Count);
__m128i __stdcall mm_slli_epi16(__m128i A, int Count);
__m128i __stdcall mm_slli_epi32(__m128i A, int Count);
__m128i __stdcall mm_slli_epi64(__m128i A, int Count);
__m128i __stdcall mm_slli_si128(__m128i A, int Imm);
__m128i __stdcall mm_sra_epi16(__m128i A, __m128i Count);
__m128i __stdcall mm_sra_epi32(__m128i A, __m128i Count);
__m128i __stdcall mm_srai_epi16(__m128i A, int Count);
__m128i __stdcall mm_srai_epi32(__m128i A, int Count);
__m128i __stdcall mm_srl_epi16(__m128i A, __m128i Count);
__m128i __stdcall mm_srl_epi32(__m128i A, __m128i Count);
__m128i __stdcall mm_srl_epi64(__m128i A, __m128i Count);
__m128i __stdcall mm_srli_epi16(__m128i A, int Count);
__m128i __stdcall mm_srli_epi32(__m128i A, int Count);
__m128i __stdcall mm_srli_epi64(__m128i A, int Count);
__m128i __stdcall mm_srli_si128(__m128i A, int Imm);
__m128i __stdcall mm_stream_load_si128(__m128i *v1);
__m128i __stdcall mm_sub_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_sub_epi32(__m128i A, __m128i B);
__m128i __stdcall mm_sub_epi64(__m128i A, __m128i B);
__m128i __stdcall mm_sub_epi8(__m128i A, __m128i B);
__m128i __stdcall mm_subs_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_subs_epi8(__m128i A, __m128i B);
__m128i __stdcall mm_subs_epu16(__m128i A, __m128i B);
__m128i __stdcall mm_subs_epu8(__m128i A, __m128i B);
__m128i __stdcall mm_unpackhi_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_unpackhi_epi32(__m128i A, __m128i B);
__m128i __stdcall mm_unpackhi_epi64(__m128i A, __m128i B);
__m128i __stdcall mm_unpackhi_epi8(__m128i A, __m128i B);
__m128i __stdcall mm_unpacklo_epi16(__m128i A, __m128i B);
__m128i __stdcall mm_unpacklo_epi32(__m128i A, __m128i B);
__m128i __stdcall mm_unpacklo_epi64(__m128i A, __m128i B);
__m128i __stdcall mm_unpacklo_epi8(__m128i A, __m128i B);
__m128i __stdcall mm_xor_si128(__m128i A, __m128i B);
__m128i mm_setzero_si128(void);
__m256 __cdecl mm256_add_ps(__m256 m1, __m256 m2);
__m256 __cdecl mm256_addsub_ps(__m256 m1, __m256 m2);
__m256 __cdecl mm256_and_ps(__m256 m1, __m256 m2);
__m256 __cdecl mm256_andnot_ps(__m256 m1, __m256 m2);
__m256 __cdecl mm256_blend_ps(__m256 m1, __m256 m2, const int mask);
__m256 __cdecl mm256_blendv_ps(__m256 m1, __m256 m2, __m256 mask);
__m256 __cdecl mm256_broadcast_ps(const __m128 *a);
__m256 __cdecl mm256_broadcast_ss(const float *a);
__m256 __cdecl mm256_broadcastss_ps(__m128 scalar_in_xmm);
__m256 __cdecl mm256_castpd_ps(__m256d a);
__m256 __cdecl mm256_castps128_ps256(__m128 a);
__m256 __cdecl mm256_castsi256_ps(__m256i a);
__m256 __cdecl mm256_cmp_ps(__m256 m1, __m256 m2, const int predicate);
__m256 __cdecl mm256_cvtepi32_ps(__m256i m1);
__m256 __cdecl mm256_cvtph_ps(__m128i x);
__m256 __cdecl mm256_div_ps(__m256 m1, __m256 m2);
__m256 __cdecl mm256_dp_ps(__m256 m1, __m256 m2, const int mask);
__m256 __cdecl mm256_fmadd_ps(__m256 a, __m256 b, __m256 c);
__m256 __cdecl mm256_fmaddsub_ps(__m256 a, __m256 b, __m256 c);
__m256 __cdecl mm256_fmsub_ps(__m256 a, __m256 b, __m256 c);
__m256 __cdecl mm256_fmsubadd_ps(__m256 a, __m256 b, __m256 c);
__m256 __cdecl mm256_fnmadd_ps(__m256 a, __m256 b, __m256 c);
__m256 __cdecl mm256_fnmsub_ps(__m256 a, __m256 b, __m256 c);
__m256 __cdecl mm256_hadd_ps(__m256 m1, __m256 m2);
__m256 __cdecl mm256_hsub_ps(__m256 m1, __m256 m2);
__m256 __cdecl mm256_i32gather_ps(const float *, __m256i, const int);
__m256 __cdecl mm256_insertf128_ps(__m256, __m128 a, int offset);
__m256 __cdecl mm256_load_ps(const float *a);
__m256 __cdecl mm256_loadu_ps(const float *a);
__m256 __cdecl mm256_mask_i32gather_ps(__m256, const float *, __m256i, __m256, const int);
__m256 __cdecl mm256_maskload_ps(const float *a, __m256i mask);
__m256 __cdecl mm256_max_ps(__m256 m1, __m256 m2);
__m256 __cdecl mm256_min_ps(__m256 m1, __m256 m2);
__m256 __cdecl mm256_movehdup_ps(__m256 a);
__m256 __cdecl mm256_moveldup_ps(__m256 a);
__m256 __cdecl mm256_mul_ps(__m256 m1, __m256 m2);
__m256 __cdecl mm256_or_ps(__m256 m1, __m256 m2);
__m256 __cdecl mm256_permute2f128_ps(__m256 m1, __m256 m2, int control);
__m256 __cdecl mm256_permute_ps(__m256 m1, int control);
__m256 __cdecl mm256_permutevar8x32_ps(__m256 A, __m256i Offsets);
__m256 __cdecl mm256_permutevar_ps(__m256 m1, __m256i control);
__m256 __cdecl mm256_rcp_ps(__m256 a);
__m256 __cdecl mm256_round_ps(__m256 a, int iRoundMode);
__m256 __cdecl mm256_rsqrt_ps(__m256 a);
__m256 __cdecl mm256_set1_ps(float);
__m256 __cdecl mm256_set_ps(float, float, float, float, float, float, float, float);
__m256 __cdecl mm256_setr_ps(float, float, float, float, float, float, float, float);
__m256 __cdecl mm256_setzero_ps();
__m256 __cdecl mm256_shuffle_ps(__m256 m1, __m256 m2, const int select);
__m256 __cdecl mm256_sqrt_ps(__m256 a);
__m256 __cdecl mm256_sub_ps(__m256 m1, __m256 m2);
__m256 __cdecl mm256_unpackhi_ps(__m256 m1, __m256 m2);
__m256 __cdecl mm256_unpacklo_ps(__m256 m1, __m256 m2);
__m256 __cdecl mm256_xor_ps(__m256 m1, __m256 m2);
__m256 __stdcall mm256_frcz_ps(__m256);
__m256 __stdcall mm256_macc_ps(__m256, __m256, __m256);
__m256 __stdcall mm256_maddsub_ps(__m256, __m256, __m256);
__m256 __stdcall mm256_msub_ps(__m256, __m256, __m256);
__m256 __stdcall mm256_msubadd_ps(__m256, __m256, __m256);
__m256 __stdcall mm256_nmacc_ps(__m256, __m256, __m256);
__m256 __stdcall mm256_nmsub_ps(__m256, __m256, __m256);
__m256 __stdcall mm256_permute2_ps(__m256, __m256, __m256i, int);
__m256d __cdecl mm256_add_pd(__m256d m1, __m256d m2);
__m256d __cdecl mm256_addsub_pd(__m256d m1, __m256d m2);
__m256d __cdecl mm256_and_pd(__m256d m1, __m256d m2);
__m256d __cdecl mm256_andnot_pd(__m256d m1, __m256d m2);
__m256d __cdecl mm256_blend_pd(__m256d m1, __m256d m2, const int mask);
__m256d __cdecl mm256_blendv_pd(__m256d m1, __m256d m2, __m256d m3);
__m256d __cdecl mm256_broadcast_pd(const __m128d *a);
__m256d __cdecl mm256_broadcast_sd(const double *a);
__m256d __cdecl mm256_broadcastsd_pd(__m128d scalar_in_xmm);
__m256d __cdecl mm256_castpd128_pd256(__m128d a);
__m256d __cdecl mm256_castps_pd(__m256 a);
__m256d __cdecl mm256_castsi256_pd(__m256i a);
__m256d __cdecl mm256_cmp_pd(__m256d m1, __m256d m2, const int predicate);
__m256d __cdecl mm256_cvtepi32_pd(__m128i m1);
__m256d __cdecl mm256_cvtps_pd(__m128 m1);
__m256d __cdecl mm256_div_pd(__m256d m1, __m256d m2);
__m256d __cdecl mm256_fmadd_pd(__m256d a, __m256d b, __m256d c);
__m256d __cdecl mm256_fmaddsub_pd(__m256d a, __m256d b, __m256d c);
__m256d __cdecl mm256_fmsub_pd(__m256d a, __m256d b, __m256d c);
__m256d __cdecl mm256_fmsubadd_pd(__m256d a, __m256d b, __m256d c);
__m256d __cdecl mm256_fnmadd_pd(__m256d a, __m256d b, __m256d c);
__m256d __cdecl mm256_fnmsub_pd(__m256d a, __m256d b, __m256d c);
__m256d __cdecl mm256_hadd_pd(__m256d m1, __m256d m2);
__m256d __cdecl mm256_hsub_pd(__m256d m1, __m256d m2);
__m256d __cdecl mm256_i32gather_pd(const double *, __m128i, const int);
__m256d __cdecl mm256_i64gather_pd(const double *, __m256i, const int);
__m256d __cdecl mm256_insertf128_pd(__m256d, __m128d a, int offset);
__m256d __cdecl mm256_load_pd(const double *a);
__m256d __cdecl mm256_loadu_pd(const double *a);
__m256d __cdecl mm256_mask_i32gather_pd(__m256d, const double *, __m128i, __m256d, const int);
__m256d __cdecl mm256_mask_i64gather_pd(__m256d, const double *, __m256i, __m256d, const int);
__m256d __cdecl mm256_maskload_pd(const double *a, __m256i mask);
__m256d __cdecl mm256_max_pd(__m256d m1, __m256d m2);
__m256d __cdecl mm256_min_pd(__m256d m1, __m256d m2);
__m256d __cdecl mm256_movedup_pd(__m256d a);
__m256d __cdecl mm256_mul_pd(__m256d m1, __m256d m2);
__m256d __cdecl mm256_or_pd(__m256d m1, __m256d m2);
__m256d __cdecl mm256_permute2f128_pd(__m256d m1, __m256d m2, int control);
__m256d __cdecl mm256_permute4x64_pd(__m256d A, const int control);
__m256d __cdecl mm256_permute_pd(__m256d m1, int control);
__m256d __cdecl mm256_permutevar_pd(__m256d m1, __m256i control);
__m256d __cdecl mm256_round_pd(__m256d a, int iRoundMode);
__m256d __cdecl mm256_set1_pd(double);
__m256d __cdecl mm256_set_pd(double, double, double, double);
__m256d __cdecl mm256_setr_pd(double, double, double, double);
__m256d __cdecl mm256_setzero_pd();
__m256d __cdecl mm256_shuffle_pd(__m256d m1, __m256d m2, const int select);
__m256d __cdecl mm256_sqrt_pd(__m256d a);
__m256d __cdecl mm256_sub_pd(__m256d m1, __m256d m2);
__m256d __cdecl mm256_unpackhi_pd(__m256d m1, __m256d m2);
__m256d __cdecl mm256_unpacklo_pd(__m256d m1, __m256d m2);
__m256d __cdecl mm256_xor_pd(__m256d m1, __m256d m2);
__m256d __stdcall mm256_frcz_pd(__m256d);
__m256d __stdcall mm256_macc_pd(__m256d, __m256d, __m256d);
__m256d __stdcall mm256_maddsub_pd(__m256d, __m256d, __m256d);
__m256d __stdcall mm256_msub_pd(__m256d, __m256d, __m256d);
__m256d __stdcall mm256_msubadd_pd(__m256d, __m256d, __m256d);
__m256d __stdcall mm256_nmacc_pd(__m256d, __m256d, __m256d);
__m256d __stdcall mm256_nmsub_pd(__m256d, __m256d, __m256d);
__m256d __stdcall mm256_permute2_pd(__m256d, __m256d, __m256i, int);
__m256i __cdecl mm256_abs_epi16(__m256i);
__m256i __cdecl mm256_abs_epi32(__m256i);
__m256i __cdecl mm256_abs_epi8(__m256i);
__m256i __cdecl mm256_add_epi16(__m256i, __m256i);
__m256i __cdecl mm256_add_epi32(__m256i, __m256i);
__m256i __cdecl mm256_add_epi64(__m256i, __m256i);
__m256i __cdecl mm256_add_epi8(__m256i, __m256i);
__m256i __cdecl mm256_adds_epi16(__m256i, __m256i);
__m256i __cdecl mm256_adds_epi8(__m256i, __m256i);
__m256i __cdecl mm256_adds_epu16(__m256i, __m256i);
__m256i __cdecl mm256_adds_epu8(__m256i, __m256i);
__m256i __cdecl mm256_alignr_epi8(__m256i, __m256i, const int);
__m256i __cdecl mm256_and_si256(__m256i, __m256i);
__m256i __cdecl mm256_andnot_si256(__m256i, __m256i);
__m256i __cdecl mm256_avg_epu16(__m256i, __m256i);
__m256i __cdecl mm256_avg_epu8(__m256i, __m256i);
__m256i __cdecl mm256_blend_epi16(__m256i, __m256i, const int);
__m256i __cdecl mm256_blend_epi32(__m256i A, __m256i B, const int control);
__m256i __cdecl mm256_blendv_epi8(__m256i, __m256i, __m256i);
__m256i __cdecl mm256_broadcastb_epi8(__m128i scalar_in_xmm);
__m256i __cdecl mm256_broadcastd_epi32(__m128i scalar_in_xmm);
__m256i __cdecl mm256_broadcastq_epi64(__m128i scalar_in_xmm);
__m256i __cdecl mm256_broadcastsi128_si256(__m128i si128_in_xmm);
__m256i __cdecl mm256_broadcastw_epi16(__m128i scalar_in_xmm);
__m256i __cdecl mm256_castpd_si256(__m256d a);
__m256i __cdecl mm256_castps_si256(__m256 a);
__m256i __cdecl mm256_castsi128_si256(__m128i a);
__m256i __cdecl mm256_cmpeq_epi16(__m256i, __m256i);
__m256i __cdecl mm256_cmpeq_epi32(__m256i, __m256i);
__m256i __cdecl mm256_cmpeq_epi64(__m256i, __m256i);
__m256i __cdecl mm256_cmpeq_epi8(__m256i, __m256i);
__m256i __cdecl mm256_cmpgt_epi16(__m256i, __m256i);
__m256i __cdecl mm256_cmpgt_epi32(__m256i, __m256i);
__m256i __cdecl mm256_cmpgt_epi64(__m256i, __m256i);
__m256i __cdecl mm256_cmpgt_epi8(__m256i, __m256i);
__m256i __cdecl mm256_cvtepi16_epi32(__m128i);
__m256i __cdecl mm256_cvtepi16_epi64(__m128i);
__m256i __cdecl mm256_cvtepi32_epi64(__m128i);
__m256i __cdecl mm256_cvtepi8_epi16(__m128i);
__m256i __cdecl mm256_cvtepi8_epi32(__m128i);
__m256i __cdecl mm256_cvtepi8_epi64(__m128i);
__m256i __cdecl mm256_cvtepu16_epi32(__m128i);
__m256i __cdecl mm256_cvtepu16_epi64(__m128i);
__m256i __cdecl mm256_cvtepu32_epi64(__m128i);
__m256i __cdecl mm256_cvtepu8_epi16(__m128i);
__m256i __cdecl mm256_cvtepu8_epi32(__m128i);
__m256i __cdecl mm256_cvtepu8_epi64(__m128i);
__m256i __cdecl mm256_cvtps_epi32(__m256 m1);
__m256i __cdecl mm256_cvttps_epi32(__m256 m1);
__m256i __cdecl mm256_hadd_epi16(__m256i, __m256i);
__m256i __cdecl mm256_hadd_epi32(__m256i, __m256i);
__m256i __cdecl mm256_hadds_epi16(__m256i, __m256i);
__m256i __cdecl mm256_hsub_epi16(__m256i, __m256i);
__m256i __cdecl mm256_hsub_epi32(__m256i, __m256i);
__m256i __cdecl mm256_hsubs_epi16(__m256i, __m256i);
__m256i __cdecl mm256_i32gather_epi32(const int *, __m256i, const int);
__m256i __cdecl mm256_i32gather_epi64(const __int64 *, __m128i, const int);
__m256i __cdecl mm256_i64gather_epi64(const __int64 *, __m256i, const int);
__m256i __cdecl mm256_insertf128_si256(__m256i, __m128i a, int offset);
__m256i __cdecl mm256_inserti128_si256(__m256i A, __m128i B, int offset);
__m256i __cdecl mm256_lddqu_si256(const __m256i *a);
__m256i __cdecl mm256_load_si256(const __m256i *a);
__m256i __cdecl mm256_loadu_si256(const __m256i *a);
__m256i __cdecl mm256_madd_epi16(__m256i, __m256i);
__m256i __cdecl mm256_maddubs_epi16(__m256i, __m256i);
__m256i __cdecl mm256_mask_i32gather_epi32(__m256i, const int *, __m256i, __m256i, const int);
__m256i __cdecl mm256_mask_i32gather_epi64(__m256i, const __int64 *, __m128i, __m256i, const int);
__m256i __cdecl mm256_mask_i64gather_epi64(__m256i, const __int64 *, __m256i, __m256i, const int);
__m256i __cdecl mm256_maskload_epi32(const int *A, __m256i Mask);
__m256i __cdecl mm256_maskload_epi64(const __int64 *A, __m256i Mask);
__m256i __cdecl mm256_max_epi16(__m256i, __m256i);
__m256i __cdecl mm256_max_epi32(__m256i, __m256i);
__m256i __cdecl mm256_max_epi8(__m256i, __m256i);
__m256i __cdecl mm256_max_epu16(__m256i, __m256i);
__m256i __cdecl mm256_max_epu32(__m256i, __m256i);
__m256i __cdecl mm256_max_epu8(__m256i, __m256i);
__m256i __cdecl mm256_min_epi16(__m256i, __m256i);
__m256i __cdecl mm256_min_epi32(__m256i, __m256i);
__m256i __cdecl mm256_min_epi8(__m256i, __m256i);
__m256i __cdecl mm256_min_epu16(__m256i, __m256i);
__m256i __cdecl mm256_min_epu32(__m256i, __m256i);
__m256i __cdecl mm256_min_epu8(__m256i, __m256i);
__m256i __cdecl mm256_mpsadbw_epu8(__m256i, __m256i, const int);
__m256i __cdecl mm256_mul_epi32(__m256i, __m256i);
__m256i __cdecl mm256_mul_epu32(__m256i, __m256i);
__m256i __cdecl mm256_mulhi_epi16(__m256i, __m256i);
__m256i __cdecl mm256_mulhi_epu16(__m256i, __m256i);
__m256i __cdecl mm256_mulhrs_epi16(__m256i, __m256i);
__m256i __cdecl mm256_mullo_epi16(__m256i, __m256i);
__m256i __cdecl mm256_mullo_epi32(__m256i, __m256i);
__m256i __cdecl mm256_or_si256(__m256i, __m256i);
__m256i __cdecl mm256_packs_epi16(__m256i, __m256i);
__m256i __cdecl mm256_packs_epi32(__m256i, __m256i);
__m256i __cdecl mm256_packus_epi16(__m256i, __m256i);
__m256i __cdecl mm256_packus_epi32(__m256i, __m256i);
__m256i __cdecl mm256_permute2f128_si256(__m256i m1, __m256i m2, int control);
__m256i __cdecl mm256_permute2x128_si256(__m256i A, __m256i B, const int control);
__m256i __cdecl mm256_permute4x64_epi64(__m256i A, const int control);
__m256i __cdecl mm256_permutevar8x32_epi32(__m256i A, __m256i Offsets);
__m256i __cdecl mm256_sad_epu8(__m256i, __m256i);
__m256i __cdecl mm256_set1_epi16(__int16);
__m256i __cdecl mm256_set1_epi32(int);
__m256i __cdecl mm256_set1_epi64x(__int64);
__m256i __cdecl mm256_set1_epi8(char);
__m256i __cdecl mm256_set_epi16(__int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16);
__m256i __cdecl mm256_set_epi32(int, int, int, int, int, int, int, int);
__m256i __cdecl mm256_set_epi64x(__int64, __int64, __int64, __int64);
__m256i __cdecl mm256_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m256i __cdecl mm256_setr_epi16(__int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16);
__m256i __cdecl mm256_setr_epi32(int, int, int, int, int, int, int, int);
__m256i __cdecl mm256_setr_epi64x(__int64, __int64, __int64, __int64);
__m256i __cdecl mm256_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m256i __cdecl mm256_setzero_si256();
__m256i __cdecl mm256_shuffle_epi32(__m256i, const int);
__m256i __cdecl mm256_shuffle_epi8(__m256i, __m256i);
__m256i __cdecl mm256_shufflehi_epi16(__m256i, const int);
__m256i __cdecl mm256_shufflelo_epi16(__m256i, const int);
__m256i __cdecl mm256_sign_epi16(__m256i, __m256i);
__m256i __cdecl mm256_sign_epi32(__m256i, __m256i);
__m256i __cdecl mm256_sign_epi8(__m256i, __m256i);
__m256i __cdecl mm256_sll_epi16(__m256i, __m128i);
__m256i __cdecl mm256_sll_epi32(__m256i, __m128i);
__m256i __cdecl mm256_sll_epi64(__m256i, __m128i);
__m256i __cdecl mm256_slli_epi16(__m256i, int);
__m256i __cdecl mm256_slli_epi32(__m256i, int);
__m256i __cdecl mm256_slli_epi64(__m256i, int);
__m256i __cdecl mm256_slli_si256(__m256i, const int);
__m256i __cdecl mm256_sllv_epi32(__m256i, __m256i);
__m256i __cdecl mm256_sllv_epi64(__m256i, __m256i);
__m256i __cdecl mm256_sra_epi16(__m256i, __m128i);
__m256i __cdecl mm256_sra_epi32(__m256i, __m128i);
__m256i __cdecl mm256_srai_epi16(__m256i, int);
__m256i __cdecl mm256_srai_epi32(__m256i, int);
__m256i __cdecl mm256_srav_epi32(__m256i, __m256i);
__m256i __cdecl mm256_srl_epi16(__m256i, __m128i);
__m256i __cdecl mm256_srl_epi32(__m256i, __m128i);
__m256i __cdecl mm256_srl_epi64(__m256i, __m128i);
__m256i __cdecl mm256_srli_epi16(__m256i, int);
__m256i __cdecl mm256_srli_epi32(__m256i, int);
__m256i __cdecl mm256_srli_epi64(__m256i, int);
__m256i __cdecl mm256_srli_si256(__m256i, const int);
__m256i __cdecl mm256_srlv_epi32(__m256i, __m256i);
__m256i __cdecl mm256_srlv_epi64(__m256i, __m256i);
__m256i __cdecl mm256_stream_load_si256(const __m256i *A);
__m256i __cdecl mm256_sub_epi16(__m256i, __m256i);
__m256i __cdecl mm256_sub_epi32(__m256i, __m256i);
__m256i __cdecl mm256_sub_epi64(__m256i, __m256i);
__m256i __cdecl mm256_sub_epi8(__m256i, __m256i);
__m256i __cdecl mm256_subs_epi16(__m256i, __m256i);
__m256i __cdecl mm256_subs_epi8(__m256i, __m256i);
__m256i __cdecl mm256_subs_epu16(__m256i, __m256i);
__m256i __cdecl mm256_subs_epu8(__m256i, __m256i);
__m256i __cdecl mm256_unpackhi_epi16(__m256i, __m256i);
__m256i __cdecl mm256_unpackhi_epi32(__m256i, __m256i);
__m256i __cdecl mm256_unpackhi_epi64(__m256i, __m256i);
__m256i __cdecl mm256_unpackhi_epi8(__m256i, __m256i);
__m256i __cdecl mm256_unpacklo_epi16(__m256i, __m256i);
__m256i __cdecl mm256_unpacklo_epi32(__m256i, __m256i);
__m256i __cdecl mm256_unpacklo_epi64(__m256i, __m256i);
__m256i __cdecl mm256_unpacklo_epi8(__m256i, __m256i);
__m256i __cdecl mm256_xor_si256(__m256i, __m256i);
__m256i __stdcall mm256_cmov_si256(__m256i, __m256i, __m256i);
__m64 __stdcall m_from_float(float);
__m64 __stdcall m_from_int(int I);
__m64 __stdcall m_packssdw(__m64 MM1, __m64 MM2);
__m64 __stdcall m_packsswb(__m64 MM1, __m64 MM2);
__m64 __stdcall m_packuswb(__m64 MM1, __m64 MM2);
__m64 __stdcall m_paddb(__m64 MM1, __m64 MM2);
__m64 __stdcall m_paddd(__m64 MM1, __m64 MM2);
__m64 __stdcall m_paddsb(__m64 MM1, __m64 MM2);
__m64 __stdcall m_paddsw(__m64 MM1, __m64 MM2);
__m64 __stdcall m_paddusb(__m64 MM1, __m64 MM2);
__m64 __stdcall m_paddusw(__m64 MM1, __m64 MM2);
__m64 __stdcall m_paddw(__m64 MM1, __m64 MM2);
__m64 __stdcall m_pand(__m64 MM1, __m64 MM2);
__m64 __stdcall m_pandn(__m64 MM1, __m64 MM2);
__m64 __stdcall m_pavgb(__m64, __m64);
__m64 __stdcall m_pavgusb(__m64, __m64);
__m64 __stdcall m_pavgw(__m64, __m64);
__m64 __stdcall m_pcmpeqb(__m64 MM1, __m64 MM2);
__m64 __stdcall m_pcmpeqd(__m64 MM1, __m64 MM2);
__m64 __stdcall m_pcmpeqw(__m64 MM1, __m64 MM2);
__m64 __stdcall m_pcmpgtb(__m64 MM1, __m64 MM2);
__m64 __stdcall m_pcmpgtd(__m64 MM1, __m64 MM2);
__m64 __stdcall m_pcmpgtw(__m64 MM1, __m64 MM2);
__m64 __stdcall m_pf2id(__m64);
__m64 __stdcall m_pf2iw(__m64);
__m64 __stdcall m_pfacc(__m64, __m64);
__m64 __stdcall m_pfadd(__m64, __m64);
__m64 __stdcall m_pfcmpeq(__m64, __m64);
__m64 __stdcall m_pfcmpge(__m64, __m64);
__m64 __stdcall m_pfcmpgt(__m64, __m64);
__m64 __stdcall m_pfmax(__m64, __m64);
__m64 __stdcall m_pfmin(__m64, __m64);
__m64 __stdcall m_pfmul(__m64, __m64);
__m64 __stdcall m_pfnacc(__m64, __m64);
__m64 __stdcall m_pfpnacc(__m64, __m64);
__m64 __stdcall m_pfrcp(__m64);
__m64 __stdcall m_pfrcpit1(__m64, __m64);
__m64 __stdcall m_pfrcpit2(__m64, __m64);
__m64 __stdcall m_pfrsqit1(__m64, __m64);
__m64 __stdcall m_pfrsqrt(__m64);
__m64 __stdcall m_pfsub(__m64, __m64);
__m64 __stdcall m_pfsubr(__m64, __m64);
__m64 __stdcall m_pi2fd(__m64);
__m64 __stdcall m_pi2fw(__m64);
__m64 __stdcall m_pinsrw(__m64, int, int);
__m64 __stdcall m_pmaddwd(__m64 MM1, __m64 MM2);
__m64 __stdcall m_pmaxsw(__m64, __m64);
__m64 __stdcall m_pmaxub(__m64, __m64);
__m64 __stdcall m_pminsw(__m64, __m64);
__m64 __stdcall m_pminub(__m64, __m64);
__m64 __stdcall m_pmulhrw(__m64, __m64);
__m64 __stdcall m_pmulhuw(__m64, __m64);
__m64 __stdcall m_pmulhw(__m64 MM1, __m64 MM2);
__m64 __stdcall m_pmullw(__m64 MM1, __m64 MM2);
__m64 __stdcall m_por(__m64 MM1, __m64 MM2);
__m64 __stdcall m_psadbw(__m64, __m64);
__m64 __stdcall m_pshufw(__m64, int);
__m64 __stdcall m_pslld(__m64 M, __m64 Count);
__m64 __stdcall m_pslldi(__m64 M, int Count);
__m64 __stdcall m_psllq(__m64 M, __m64 Count);
__m64 __stdcall m_psllqi(__m64 M, int Count);
__m64 __stdcall m_psllw(__m64 M, __m64 Count);
__m64 __stdcall m_psllwi(__m64 M, int Count);
__m64 __stdcall m_psrad(__m64 M, __m64 Count);
__m64 __stdcall m_psradi(__m64 M, int Count);
__m64 __stdcall m_psraw(__m64 M, __m64 Count);
__m64 __stdcall m_psrawi(__m64 M, int Count);
__m64 __stdcall m_psrld(__m64 M, __m64 Count);
__m64 __stdcall m_psrldi(__m64 M, int Count);
__m64 __stdcall m_psrlq(__m64 M, __m64 Count);
__m64 __stdcall m_psrlqi(__m64 M, int Count);
__m64 __stdcall m_psrlw(__m64 M, __m64 Count);
__m64 __stdcall m_psrlwi(__m64 M, int Count);
__m64 __stdcall m_psubb(__m64 MM1, __m64 MM2);
__m64 __stdcall m_psubd(__m64 MM1, __m64 MM2);
__m64 __stdcall m_psubsb(__m64 MM1, __m64 MM2);
__m64 __stdcall m_psubsw(__m64 MM1, __m64 MM2);
__m64 __stdcall m_psubusb(__m64 MM1, __m64 MM2);
__m64 __stdcall m_psubusw(__m64 MM1, __m64 MM2);
__m64 __stdcall m_psubw(__m64 MM1, __m64 MM2);
__m64 __stdcall m_pswapd(__m64);
__m64 __stdcall m_punpckhbw(__m64 MM1, __m64 MM2);
__m64 __stdcall m_punpckhdq(__m64 MM1, __m64 MM2);
__m64 __stdcall m_punpckhwd(__m64 MM1, __m64 MM2);
__m64 __stdcall m_punpcklbw(__m64 MM1, __m64 MM2);
__m64 __stdcall m_punpckldq(__m64 MM1, __m64 MM2);
__m64 __stdcall m_punpcklwd(__m64 MM1, __m64 MM2);
__m64 __stdcall m_pxor(__m64 MM1, __m64 MM2);
__m64 __stdcall mm_abs_pi16(__m64 a);
__m64 __stdcall mm_abs_pi32(__m64 a);
__m64 __stdcall mm_abs_pi8(__m64 a);
__m64 __stdcall mm_add_si64(__m64 A, __m64 B);
__m64 __stdcall mm_alignr_pi8(__m64 a, __m64 b, int n);
__m64 __stdcall mm_cvt_ps2pi(__m128 A);
__m64 __stdcall mm_cvtpd_pi32(__m128d A);
__m64 __stdcall mm_cvtps_pi16(__m128 a);
__m64 __stdcall mm_cvtps_pi8(__m128 a);
__m64 __stdcall mm_cvtt_ps2pi(__m128 A);
__m64 __stdcall mm_cvttpd_pi32(__m128d A);
__m64 __stdcall mm_hadd_pi16(__m64 a, __m64 b);
__m64 __stdcall mm_hadd_pi32(__m64 a, __m64 b);
__m64 __stdcall mm_hadds_pi16(__m64 a, __m64 b);
__m64 __stdcall mm_hsub_pi16(__m64 a, __m64 b);
__m64 __stdcall mm_hsub_pi32(__m64 a, __m64 b);
__m64 __stdcall mm_hsubs_pi16(__m64 a, __m64 b);
__m64 __stdcall mm_maddubs_pi16(__m64 a, __m64 b);
__m64 __stdcall mm_movepi64_pi64(__m128i Q);
__m64 __stdcall mm_mul_su32(__m64 A, __m64 B);
__m64 __stdcall mm_mulhrs_pi16(__m64 a, __m64 b);
__m64 __stdcall mm_set1_pi16(__int16 S);
__m64 __stdcall mm_set1_pi32(int I);
__m64 __stdcall mm_set1_pi8(char B);
__m64 __stdcall mm_set_pi16(__int16 S3, __int16 S2, __int16 S1, __int16 S0);
__m64 __stdcall mm_set_pi32(int I1, int I0);
__m64 __stdcall mm_set_pi8(char B7, char B6, char B5, char B4, char B3, char B2, char B1, char B0);
__m64 __stdcall mm_setr_pi16(__int16 S3, __int16 S2, __int16 S1, __int16 S0);
__m64 __stdcall mm_setr_pi32(int I1, int I0);
__m64 __stdcall mm_setr_pi8(char B7, char B6, char B5, char B4, char B3, char B2, char B1, char B0);
__m64 __stdcall mm_shuffle_pi8(__m64 a, __m64 b);
__m64 __stdcall mm_sign_pi16(__m64 a, __m64 b);
__m64 __stdcall mm_sign_pi32(__m64 a, __m64 b);
__m64 __stdcall mm_sign_pi8(__m64 a, __m64 b);
__m64 __stdcall mm_sub_si64(__m64 A, __m64 B);
__m64 mm_setzero_si64(void);
__time32_t __cdecl mkgmtime32(struct tm *Tm);
__time32_t __cdecl mktime32(struct tm *Tm);
__time32_t __cdecl time32(__time32_t *Time);
__time64_t __cdecl mkgmtime64(struct tm *Tm);
__time64_t __cdecl mktime64(struct tm *Tm);
__time64_t __cdecl time64(__time64_t *Time);
_locale_t __cdecl _create_locale(int Category, const char *Locale);
_locale_t __cdecl _get_current_locale();
_locale_t __cdecl create_locale(int Category, const char *Locale);
_locale_t __cdecl get_current_locale();
_onexit_t __cdecl onexit(_onexit_t Func);
_onexit_t __cdecl onexit(_onexit_t Func);
char **__cdecl _tzname();
char *__cdecl asctime(const struct tm *Tm);
char *__cdecl cgets(char *Buffer);
char *__cdecl cgets(char *Buffer);
char *__cdecl ctime(const time_t *);
char *__cdecl ctime32(const __time32_t *Time);
char *__cdecl ctime64(const __time64_t *Time);
char *__cdecl ecvt(double Val, int NumOfDigits, int *PtDec, int *PtSign);
char *__cdecl ecvt(double Val, int NumOfDigits, int *PtDec, int *PtSign);
char *__cdecl fcvt(double Val, int NumOfDec, int *PtDec, int *PtSign);
char *__cdecl fcvt(double Val, int NumOfDec, int *PtDec, int *PtSign);
char *__cdecl fgets(char *Buf, int MaxCount, FILE *File);
char *__cdecl fullpath(char *FullPath, const char *Path, size_t SizeInBytes);
char *__cdecl gcvt(double Val, int NumOfDigits, char *DstBuf);
char *__cdecl gcvt(double Val, int NumOfDigits, char *DstBuf);
char *__cdecl getcwd(char *DstBuf, int SizeInBytes);
char *__cdecl getcwd(char *DstBuf, int SizeInBytes);
char *__cdecl getdcwd(int Drive, char *DstBuf, int SizeInBytes);
char *__cdecl getdcwd_nolock(int Drive, char *DstBuf, int SizeInBytes);
char *__cdecl getenv(const char *VarName);
char *__cdecl i64toa(__int64 Val, char *DstBuf, int Radix);
char *__cdecl itoa(int Val, char *DstBuf, int Radix);
char *__cdecl itoa(int Value, char *Dest, int Radix);
char *__cdecl ltoa(int Val, char *DstBuf, int Radix);
char *__cdecl ltoa(int Value, char *Dest, int Radix);
char *__cdecl mktemp(char *TemplateName);
char *__cdecl mktemp(char *TemplateName);
char *__cdecl setlocale(int Category, const char *Locale);
char *__cdecl strcat(char *Dest, const char *Source);
char *__cdecl strchr(const char *Str, int Val);
char *__cdecl strcpy(char *Dest, const char *Source);
char *__cdecl strdate(char *Buffer);
char *__cdecl strdec(const char *Cpc1, const char *Cpc2);
char *__cdecl strdup(const char *Src);
char *__cdecl strdup(const char *Src);
char *__cdecl strerror(const char *ErrMsg);
char *__cdecl strerror(int);
char *__cdecl strinc(const char *Pc);
char *__cdecl strlwr(char *Str);
char *__cdecl strlwr(char *String);
char *__cdecl strlwr_l(char *String, _locale_t Locale);
char *__cdecl strncat(char *Dest, const char *Source, size_t Count);
char *__cdecl strncat_l(char *Dst, const char *Source, size_t Count, _locale_t Locale);
char *__cdecl strncpy(char *Dest, const char *Source, size_t Count);
char *__cdecl strncpy_l(char *Dst, const char *Source, size_t Count, _locale_t Locale);
char *__cdecl strninc(const char *Pc, size_t Sz);
char *__cdecl strnset(char *Dest, int Val, size_t Count);
char *__cdecl strnset(char *Str, int Val, size_t MaxCount);
char *__cdecl strnset_l(char *Dst, int Value, size_t MaxCount, _locale_t Locale);
char *__cdecl strpbrk(const char *Str, const char *Control);
char *__cdecl strrchr(const char *Str, int Ch);
char *__cdecl strrev(char *Str);
char *__cdecl strrev(char *Str);
char *__cdecl strset(char *Dest, int Value);
char *__cdecl strset(char *Str, int Val);
char *__cdecl strset_l(char *Dst, int Value, _locale_t Locale);
char *__cdecl strspnp(const char *Cpc1, const char *Cpc2);
char *__cdecl strstr(const char *Str, const char *SubStr);
char *__cdecl strtime(char *Buffer);
char *__cdecl strtok(char *Str, const char *Delim);
char *__cdecl strtok_s(char *Str, const char *Delim, char **Context);
char *__cdecl strupr(char *Str);
char *__cdecl strupr(char *String);
char *__cdecl strupr_l(char *String, _locale_t Locale);
char *__cdecl tempnam(const char *DirName, const char *FilePrefix);
char *__cdecl tempnam(const char *Directory, const char *FilePrefix);
char *__cdecl tmpnam(char *Buffer);
char *__cdecl ui64toa(unsigned __int64 Val, char *DstBuf, int Radix);
char *__cdecl ultoa(unsigned int Val, char *Dstbuf, int Radix);
char *__cdecl ultoa(unsigned int Value, char *Dest, int Radix);
char *__stdcall strtok_l(char *String, const char *Delimiters, _locale_t Locale);
char *__stdcall strtok_s_l(char *String, const char *Delimiters, char **Current_position, _locale_t Locale);
char __fastcall RTC_Check_2_to_1(__int16 Src);
char __fastcall RTC_Check_4_to_1(int Src);
char __fastcall RTC_Check_8_to_1(__int64 Src);
char __stdcall RTL_CONSTANT_STRING_type_check(const void *s);
clock_t __cdecl clock();
const UCHAR *__stdcall IN6_EXTRACT_V4ADDR_FROM_6TO4(const IN6_ADDR *Ipv6Address);
const UCHAR *__stdcall IN6_EXTRACT_V4ADDR_FROM_ISATAP(const IN6_ADDR *Ipv6Address);
const UCHAR *__stdcall IN6_GET_ADDR_V4COMPAT(const IN6_ADDR *Ipv6Address);
const UCHAR *__stdcall IN6_GET_ADDR_V4MAPPED(const IN6_ADDR *Ipv6Address);
const UCHAR *__stdcall INET_ADDR_UNSPECIFIED(ADDRESS_FAMILY af);
const char *__cdecl RTC_GetErrDesc(_RTC_ErrorNumber Errnum);
const unsigned __int16 **__cdecl _p__pctype();
const wctype_t **__cdecl _p__pwctype();
div_t __cdecl div(int Numerator, int Denominator);
double __cdecl acos(double X);
double __cdecl asin(double X);
double __cdecl atan(double X);
double __cdecl atan2(double Y, double X);
double __cdecl atof(const char *String);
double __cdecl atof_l(const char *String, _locale_t Locale);
double __cdecl cabs(struct _complex Complex_value);
double __cdecl cabs(struct _complex X);
double __cdecl ceil(double X);
double __cdecl chgsign(double X);
double __cdecl copysign(double Number, double Sign);
double __cdecl cos(double X);
double __cdecl cosh(double X);
double __cdecl difftime(time_t, time_t);
double __cdecl difftime32(__time32_t Time1, __time32_t Time2);
double __cdecl difftime64(__time64_t Time1, __time64_t Time2);
double __cdecl exp(double X);
double __cdecl fabs(double X);
double __cdecl floor(double X);
double __cdecl fmod(double X, double Y);
double __cdecl frexp(double X, int *Y);
double __cdecl hypot(double X, double Y);
double __cdecl j0(double X);
double __cdecl j0(double X);
double __cdecl j1(double X);
double __cdecl j1(double X);
double __cdecl jn(int X, double Y);
double __cdecl jn(int X, double Y);
double __cdecl ldexp(double X, int Y);
double __cdecl log(double X);
double __cdecl log10(double X);
double __cdecl logb(double X);
double __cdecl modf(double X, double *Y);
double __cdecl nextafter(double X, double Y);
double __cdecl pow(double X, double Y);
double __cdecl scalb(double X, int Y);
double __cdecl sin(double X);
double __cdecl sinh(double X);
double __cdecl sqrt(double X);
double __cdecl strtod(const char *Str, char **EndPtr);
double __cdecl strtod_l(const char *Str, char **EndPtr, _locale_t Locale);
double __cdecl tan(double X);
double __cdecl tanh(double X);
double __cdecl wcstod(const wchar_t *Str, wchar_t **EndPtr);
double __cdecl wcstod_l(const wchar_t *Str, wchar_t **EndPtr, _locale_t Locale);
double __cdecl wtof(const wchar_t *Str);
double __cdecl wtof_l(const wchar_t *Str, _locale_t Locale);
double __cdecl y0(double X);
double __cdecl y0(double X);
double __cdecl y1(double X);
double __cdecl y1(double X);
double __cdecl yn(int X, double Y);
double __cdecl yn(int X, double Y);
double __stdcall mm_cvtsd_f64(__m128d A);
errno_t __cdecl _wcserror_s(wchar_t *Buffer, size_t SizeInWords, const wchar_t *ErrMsg);
errno_t __cdecl access_s(const char *Filename, int AccessMode);
errno_t __cdecl asctime_s(char *Buf, size_t SizeInBytes, const struct tm *Tm);
errno_t __cdecl cgets_s(char *Buffer, size_t Size, size_t *SizeRead);
errno_t __cdecl cgetws_s(wchar_t *Buffer, size_t SizeInWords, size_t *SizeRead);
errno_t __cdecl chsize_s(int FileHandle, __int64 Size);
errno_t __cdecl clearerr_s(FILE *File);
errno_t __cdecl controlfp_s(unsigned int *CurrentState, unsigned int NewValue, unsigned int Mask);
errno_t __cdecl ctime32_s(char *Buf, size_t SizeInBytes, const __time32_t *Time);
errno_t __cdecl ctime64_s(char *Buf, size_t SizeInBytes, const __time64_t *Time);
errno_t __cdecl dupenv_s(char **PBuffer, size_t *PBufferSizeInBytes, const char *VarName);
errno_t __cdecl ecvt_s(char *DstBuf, size_t Size, double Val, int NumOfDights, int *PtDec, int *PtSign);
errno_t __cdecl fcvt_s(char *DstBuf, size_t Size, double Val, int NumOfDec, int *PtDec, int *PtSign);
errno_t __cdecl fopen_s(FILE **File, const char *Filename, const char *Mode);
errno_t __cdecl freopen_s(FILE **File, const char *Filename, const char *Mode, FILE *OldFile);
errno_t __cdecl ftime32_s(struct __timeb32 *Time);
errno_t __cdecl ftime64_s(struct __timeb64 *Time);
errno_t __cdecl gcvt_s(char *DstBuf, size_t Size, double Val, int NumOfDigits);
errno_t __cdecl get_amblksiz(size_t *Value);
errno_t __cdecl get_daylight(int *Daylight);
errno_t __cdecl get_doserrno(unsigned int *Value);
errno_t __cdecl get_dstbias(int *Daylight_savings_bias);
errno_t __cdecl get_environ(char ***Value);
errno_t __cdecl get_errno(int *Value);
errno_t __cdecl get_fileinfo(int *);
errno_t __cdecl get_fmode(int *PMode);
errno_t __cdecl get_osplatform(unsigned int *Value);
errno_t __cdecl get_osver(unsigned int *Value);
errno_t __cdecl get_pgmptr(char **Value);
errno_t __cdecl get_timezone(int *Timezone);
errno_t __cdecl get_tzname(size_t *ReturnValue, char *Buffer, size_t SizeInBytes, int Index);
errno_t __cdecl get_wenviron(wchar_t ***Value);
errno_t __cdecl get_winmajor(unsigned int *Value);
errno_t __cdecl get_winminor(unsigned int *Value);
errno_t __cdecl get_winver(unsigned int *Value);
errno_t __cdecl get_wpgmptr(wchar_t **Value);
errno_t __cdecl getenv_s(size_t *ReturnSize, char *DstBuf, rsize_t DstSize, const char *VarName);
errno_t __cdecl gmtime32_s(struct tm *Tm, const __time32_t *Time);
errno_t __cdecl gmtime64_s(struct tm *Tm, const __time64_t *Time);
errno_t __cdecl i64toa_s(__int64 Val, char *DstBuf, size_t Size, int Radix);
errno_t __cdecl i64tow_s(__int64 Val, wchar_t *DstBuf, size_t SizeInWords, int Radix);
errno_t __cdecl itoa_s(int Value, char *DstBuf, size_t Size, int Radix);
errno_t __cdecl itow_s(int Val, wchar_t *DstBuf, size_t SizeInWords, int Radix);
errno_t __cdecl localtime32_s(struct tm *Tm, const __time32_t *Time);
errno_t __cdecl localtime64_s(struct tm *Tm, const __time64_t *Time);
errno_t __cdecl ltoa_s(int Val, char *DstBuf, size_t Size, int Radix);
errno_t __cdecl ltow_s(int Val, wchar_t *DstBuf, size_t SizeInWords, int Radix);
errno_t __cdecl makepath_s(char *PathResult, size_t SizeInWords, const char *Drive, const char *Dir, const char *Filename, const char *Ext);
errno_t __cdecl mbccpy_s(unsigned __int8 *Dst, size_t SizeInBytes, int *PCopied, const unsigned __int8 *Src);
errno_t __cdecl mbccpy_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, int *PCopied, const unsigned __int8 *Src, _locale_t Locale);
errno_t __cdecl mbscat_s(unsigned __int8 *Dst, size_t SizeInBytes, const unsigned __int8 *Src);
errno_t __cdecl mbscat_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, const unsigned __int8 *Src, _locale_t Locale);
errno_t __cdecl mbscpy_s(unsigned __int8 *Dst, size_t SizeInBytes, const unsigned __int8 *Src);
errno_t __cdecl mbscpy_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, const unsigned __int8 *Src, _locale_t Locale);
errno_t __cdecl mbslwr_s(unsigned __int8 *Str, size_t SizeInBytes);
errno_t __cdecl mbslwr_s_l(unsigned __int8 *Str, size_t SizeInBytes, _locale_t Locale);
errno_t __cdecl mbsnbcat_s(unsigned __int8 *Dst, size_t SizeInBytes, const unsigned __int8 *Src, size_t MaxCount);
errno_t __cdecl mbsnbcat_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, const unsigned __int8 *Src, size_t MaxCount, _locale_t Locale);
errno_t __cdecl mbsnbcpy_s(unsigned __int8 *Dst, size_t SizeInBytes, const unsigned __int8 *Src, size_t MaxCount);
errno_t __cdecl mbsnbcpy_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, const unsigned __int8 *Src, size_t MaxCount, _locale_t Locale);
errno_t __cdecl mbsnbset_s(unsigned __int8 *Dst, size_t SizeInBytes, unsigned int Ch, size_t MaxCount);
errno_t __cdecl mbsnbset_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, unsigned int Ch, size_t MaxCount, _locale_t Locale);
errno_t __cdecl mbsncat_s(unsigned __int8 *Dst, size_t SizeInBytes, const unsigned __int8 *Src, size_t MaxCount);
errno_t __cdecl mbsncat_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, const unsigned __int8 *Src, size_t MaxCount, _locale_t Locale);
errno_t __cdecl mbsncpy_s(unsigned __int8 *Dst, size_t SizeInBytes, const unsigned __int8 *Src, size_t MaxCount);
errno_t __cdecl mbsncpy_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, const unsigned __int8 *Src, size_t MaxCount, _locale_t Locale);
errno_t __cdecl mbsnset_s(unsigned __int8 *Dst, size_t SizeInBytes, unsigned int Val, size_t MaxCount);
errno_t __cdecl mbsnset_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, unsigned int Val, size_t MaxCount, _locale_t Locale);
errno_t __cdecl mbsrtowcs_s(size_t *Retval, wchar_t *Dst, size_t Size, const char **PSrc, size_t N, mbstate_t *State);
errno_t __cdecl mbsset_s(unsigned __int8 *Dst, size_t SizeInBytes, unsigned int Val);
errno_t __cdecl mbsset_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, unsigned int Val, _locale_t Locale);
errno_t __cdecl mbstowcs_s(size_t *PtNumOfCharConverted, wchar_t *DstBuf, size_t SizeInWords, const char *SrcBuf, size_t MaxCount);
errno_t __cdecl mbstowcs_s_l(size_t *PtNumOfCharConverted, wchar_t *DstBuf, size_t SizeInWords, const char *SrcBuf, size_t MaxCount, _locale_t Locale);
errno_t __cdecl mbsupr_s(unsigned __int8 *Str, size_t SizeInBytes);
errno_t __cdecl mbsupr_s_l(unsigned __int8 *Str, size_t SizeInBytes, _locale_t Locale);
errno_t __cdecl memcpy_s(void *, rsize_t DstSize, const void *Src, rsize_t MaxCount);
errno_t __cdecl memmove_s(void *, rsize_t DstSize, const void *Src, rsize_t MaxCount);
errno_t __cdecl mktemp_s(char *TemplateName, size_t Size);
errno_t __cdecl putenv_s(const char *Name, const char *Value);
errno_t __cdecl searchenv_s(const char *Filename, const char *EnvVar, char *ResultPath, size_t SizeInBytes);
errno_t __cdecl set_amblksiz(size_t Value);
errno_t __cdecl set_doserrno(unsigned int Value);
errno_t __cdecl set_errno(int Value);
errno_t __cdecl set_fileinfo(int);
errno_t __cdecl set_fmode(int Mode);
errno_t __cdecl sopen_s(int *FileHandle, const char *Filename, int OpenFlag, int ShareFlag, int PermissionMode);
errno_t __cdecl splitpath_s(const char *FullPath, char *Drive, size_t DriveSize, char *Dir, size_t DirSize, char *Filename, size_t FilenameSize, char *Ext, size_t ExtSize);
errno_t __cdecl strcat_s(char *, rsize_t SizeInBytes, const char *Src);
errno_t __cdecl strcpy_s(char *, rsize_t SizeInBytes, const char *Src);
errno_t __cdecl strdate_s(char *Buf, size_t SizeInBytes);
errno_t __cdecl strerror_s(char *Buf, size_t SizeInBytes, const char *ErrMsg);
errno_t __cdecl strerror_s(char *Buf, size_t SizeInBytes, int ErrNum);
errno_t __cdecl strlwr_s(char *Str, size_t Size);
errno_t __cdecl strlwr_s_l(char *Str, size_t Size, _locale_t Locale);
errno_t __cdecl strncat_s(char *, rsize_t SizeInBytes, const char *Src, rsize_t MaxCount);
errno_t __cdecl strncat_s_l(char *Destination, size_t Destination_size_chars, const char *Source, size_t Count, _locale_t Locale);
errno_t __cdecl strncpy_s(char *, rsize_t SizeInBytes, const char *Src, rsize_t MaxCount);
errno_t __cdecl strncpy_s_l(char *Destination, size_t Destination_size_chars, const char *Source, size_t Count, _locale_t Locale);
errno_t __cdecl strnset_s(char *Str, size_t SizeInBytes, int Val, size_t MaxCount);
errno_t __cdecl strnset_s_l(char *Destination, size_t Destination_size_chars, int Value, size_t Count, _locale_t Locale);
errno_t __cdecl strset_s(char *, size_t DstSize, int Value);
errno_t __cdecl strset_s_l(char *Destination, size_t Destination_size_chars, int Value, _locale_t Locale);
errno_t __cdecl strtime_s(char *Buf, size_t SizeInBytes);
errno_t __cdecl strupr_s(char *Str, size_t Size);
errno_t __cdecl strupr_s_l(char *Str, size_t Size, _locale_t Locale);
errno_t __cdecl tmpfile_s(FILE **File);
errno_t __cdecl tmpnam_s(char *Buf, rsize_t Size);
errno_t __cdecl ui64toa_s(unsigned __int64 Val, char *DstBuf, size_t Size, int Radix);
errno_t __cdecl ui64tow_s(unsigned __int64 Val, wchar_t *DstBuf, size_t SizeInWords, int Radix);
errno_t __cdecl ultoa_s(unsigned int Val, char *DstBuf, size_t Size, int Radix);
errno_t __cdecl ultow_s(unsigned int Val, wchar_t *DstBuf, size_t SizeInWords, int Radix);
errno_t __cdecl umask_s(int NewMode, int *OldMode);
errno_t __cdecl waccess_s(const wchar_t *Filename, int AccessMode);
errno_t __cdecl wasctime_s(wchar_t *Buf, size_t SizeInWords, const struct tm *Tm);
errno_t __cdecl wcrtomb_s(size_t *Retval, char *Dst, size_t SizeInBytes, wchar_t Ch, mbstate_t *State);
errno_t __cdecl wcscat_s(wchar_t *Dst, rsize_t SizeInWords, const wchar_t *Src);
errno_t __cdecl wcscpy_s(wchar_t *Dst, rsize_t SizeInWords, const wchar_t *Src);
errno_t __cdecl wcserror_s(wchar_t *Buf, size_t SizeInWords, int ErrNum);
errno_t __cdecl wcslwr_s(wchar_t *Str, size_t SizeInWords);
errno_t __cdecl wcslwr_s_l(wchar_t *Str, size_t SizeInWords, _locale_t Locale);
errno_t __cdecl wcsncat_s(wchar_t *Dst, rsize_t SizeInWords, const wchar_t *Src, rsize_t MaxCount);
errno_t __cdecl wcsncpy_s(wchar_t *Dst, rsize_t SizeInWords, const wchar_t *Src, rsize_t MaxCount);
errno_t __cdecl wcsnset_s(wchar_t *Dst, size_t SizeInWords, wchar_t Val, size_t MaxCount);
errno_t __cdecl wcsrtombs_s(size_t *Retval, char *Dst, size_t SizeInBytes, const wchar_t **Src, size_t Size, mbstate_t *State);
errno_t __cdecl wcsset_s(wchar_t *Dst, size_t SizeInWords, wchar_t Value);
errno_t __cdecl wcstombs_s(size_t *PtNumOfCharConverted, char *Dst, size_t DstSizeInBytes, const wchar_t *Src, size_t MaxCountInBytes);
errno_t __cdecl wcstombs_s_l(size_t *PtNumOfCharConverted, char *Dst, size_t DstSizeInBytes, const wchar_t *Src, size_t MaxCountInBytes, _locale_t Locale);
errno_t __cdecl wcsupr_s(wchar_t *Str, size_t Size);
errno_t __cdecl wcsupr_s_l(wchar_t *Str, size_t Size, _locale_t Locale);
errno_t __cdecl wctime32_s(wchar_t *Buf, size_t SizeInWords, const __time32_t *Time);
errno_t __cdecl wctime64_s(wchar_t *Buf, size_t SizeInWords, const __time64_t *Time);
errno_t __cdecl wctomb_s(int *SizeConverted, char *MbCh, rsize_t SizeInBytes, wchar_t WCh);
errno_t __cdecl wctomb_s_l(int *SizeConverted, char *MbCh, size_t SizeInBytes, wchar_t WCh, _locale_t Locale);
errno_t __cdecl wdupenv_s(wchar_t **Buffer, size_t *BufferSizeInWords, const wchar_t *VarName);
errno_t __cdecl wfopen_s(FILE **File, const wchar_t *Filename, const wchar_t *Mode);
errno_t __cdecl wfreopen_s(FILE **File, const wchar_t *Filename, const wchar_t *Mode, FILE *OldFile);
errno_t __cdecl wgetenv_s(size_t *ReturnSize, wchar_t *DstBuf, size_t DstSizeInWords, const wchar_t *VarName);
errno_t __cdecl wmakepath_s(wchar_t *PathResult, size_t SIZE, const wchar_t *Drive, const wchar_t *Dir, const wchar_t *Filename, const wchar_t *Ext);
errno_t __cdecl wmemcpy_s(wchar_t *S1, rsize_t N1, const wchar_t *S2, rsize_t N);
errno_t __cdecl wmemmove_s(wchar_t *S1, rsize_t N1, const wchar_t *S2, rsize_t N);
errno_t __cdecl wmktemp_s(wchar_t *TemplateName, size_t SizeInWords);
errno_t __cdecl wputenv_s(const wchar_t *Name, const wchar_t *Value);
errno_t __cdecl wsearchenv_s(const wchar_t *Filename, const wchar_t *EnvVar, wchar_t *ResultPath, size_t SizeInWords);
errno_t __cdecl wsopen_s(int *FileHandle, const wchar_t *Filename, int OpenFlag, int ShareFlag, int PermissionFlag);
errno_t __cdecl wsplitpath_s(const wchar_t *FullPath, wchar_t *Drive, size_t DriveSize, wchar_t *Dir, size_t DirSize, wchar_t *Filename, size_t FilenameSize, wchar_t *Ext, size_t ExtSize);
errno_t __cdecl wstrdate_s(wchar_t *Buf, size_t SizeInWords);
errno_t __cdecl wstrtime_s(wchar_t *Buf, size_t SizeInWords);
errno_t __cdecl wtmpnam_s(wchar_t *DstBuf, size_t SizeInWords);
float __cdecl acosf(float X);
float __cdecl asinf(float X);
float __cdecl atan2f(float Y, float X);
float __cdecl atanf(float X);
float __cdecl ceilf(float X);
float __cdecl chgsignf(float X);
float __cdecl copysignf(float Number, float Sign);
float __cdecl cosf(float X);
float __cdecl coshf(float X);
float __cdecl expf(float X);
float __cdecl floorf(float X);
float __cdecl fmodf(float X, float Y);
float __cdecl hypotf(float X, float Y);
float __cdecl log10f(float X);
float __cdecl logbf(float X);
float __cdecl logf(float X);
float __cdecl modff(float X, float *Y);
float __cdecl nextafterf(float X, float Y);
float __cdecl powf(float X, float Y);
float __cdecl scalbf(float X, int Y);
float __cdecl sinf(float X);
float __cdecl sinhf(float X);
float __cdecl sqrtf(float X);
float __cdecl tanf(float X);
float __cdecl tanhf(float X);
float __stdcall m_to_float(__m64);
float __stdcall mm_cvtss_f32(__m128 A);
int (__cdecl *__cdecl getdllprocaddr(intptr_t Handle, char *ProcedureName, intptr_t Ordinal))();
int *__cdecl _daylight();
int *__cdecl _dstbias();
int *__cdecl _timezone();
int *__cdecl errno();
int __cdecl RTC_NumErrors();
int __cdecl RTC_SetErrorType(_RTC_ErrorNumber Errnum, int ErrType);
int __cdecl __mb_cur_max_func();
int __cdecl __mb_cur_max_l_func(_locale_t);
int __cdecl _isascii(int C);
int __cdecl _iscsym(int C);
int __cdecl _iscsymf(int C);
int __cdecl _iswcsym(wint_t C);
int __cdecl _iswcsymf(wint_t C);
int __cdecl _lock_fhandle(int Filehandle);
int __cdecl _toascii(int C);
int __cdecl _vswprintf_l(wchar_t *Dest, const wchar_t *Format, _locale_t Plocinfo, va_list Args);
int __cdecl abnormal_termination();
int __cdecl abs(int X);
int __cdecl access(const char *Filename, int AccessMode);
int __cdecl access(const char *Filename, int AccessMode);
int __cdecl atexit(void (__cdecl *)());
int __cdecl atodbl(_CRT_DOUBLE *Result, char *Str);
int __cdecl atodbl_l(_CRT_DOUBLE *Result, char *Str, _locale_t Locale);
int __cdecl atoflt(_CRT_FLOAT *Result, char *Str);
int __cdecl atoflt_l(_CRT_FLOAT *Result, char *Str, _locale_t Locale);
int __cdecl atoi(const char *Str);
int __cdecl atoi_l(const char *Str, _locale_t Locale);
int __cdecl atol(const char *Str);
int __cdecl atol_l(const char *Str, _locale_t Locale);
int __cdecl atoldbl(_LDOUBLE *Result, char *Str);
int __cdecl atoldbl_l(_LDOUBLE *Result, char *Str, _locale_t Locale);
int __cdecl chdir(const char *Path);
int __cdecl chdir(const char *Path);
int __cdecl chdrive(int Drive);
int __cdecl chmod(const char *Filename, int AccessMode);
int __cdecl chmod(const char *Filename, int Mode);
int __cdecl chsize(int FileHandle, int Size);
int __cdecl chsize(int FileHandle, int Size);
int __cdecl close(int FileHandle);
int __cdecl close(int FileHandle);
int __cdecl commit(int FileHandle);
int __cdecl configthreadlocale(int Flag);
int __cdecl cputs(const char *Str);
int __cdecl cputs(const char *Str);
int __cdecl cputws(const wchar_t *String);
int __cdecl creat(const char *Filename, int PermissionMode);
int __cdecl creat(const char *Filename, int PermissionMode);
int __cdecl dup(int FileHandle);
int __cdecl dup(int FileHandle);
int __cdecl dup2(int FileHandleSrc, int FileHandleDst);
int __cdecl dup2(int FileHandleSrc, int FileHandleDst);
int __cdecl eof(int FileHandle);
int __cdecl eof(int FileHandle);
int __cdecl fclose(FILE *File);
int __cdecl fclose_nolock(FILE *File);
int __cdecl fcloseall();
int __cdecl fcloseall();
int __cdecl feof(FILE *File);
int __cdecl ferror(FILE *File);
int __cdecl fflush(FILE *File);
int __cdecl fflush_nolock(FILE *File);
int __cdecl fgetc(FILE *File);
int __cdecl fgetchar();
int __cdecl fgetchar();
int __cdecl fgetpos(FILE *File, fpos_t *Pos);
int __cdecl filbuf(FILE *File);
int __cdecl filbuf_s(FILE *);
int __cdecl filelength(int FileHandle);
int __cdecl filelength(int FileHandle);
int __cdecl fileno(FILE *File);
int __cdecl fileno(FILE *File);
int __cdecl findclose(intptr_t FindHandle);
int __cdecl findnext(intptr_t, struct _finddata_t *);
int __cdecl findnext32(intptr_t FindHandle, struct _finddata32_t *FindData);
int __cdecl findnext32i64(intptr_t FindHandle, struct _finddata32i64_t *FindData);
int __cdecl findnext64(intptr_t FindHandle, struct __finddata64_t *FindData);
int __cdecl findnext64i32(intptr_t FindHandle, struct _finddata64i32_t *FindData);
int __cdecl findnexti64(intptr_t, struct _finddatai64_t *);
int __cdecl finite(double X);
int __cdecl finitef(float X);
int __cdecl flsbuf(int Ch, FILE *File);
int __cdecl flsbuf_s(int, FILE *);
int __cdecl flushall();
int __cdecl flushall();
int __cdecl fpclass(double X);
int __cdecl fpclassf(float X);
int __cdecl fpieee_flt(unsigned int ExceptionCode, struct _EXCEPTION_POINTERS *PtExceptionPtr, int (__cdecl *Handler)(_FPIEEE_RECORD *));
int __cdecl fputc(int Ch, FILE *File);
int __cdecl fputchar(int Ch);
int __cdecl fputchar(int Ch);
int __cdecl fputs(const char *Str, FILE *File);
int __cdecl fputws(const wchar_t *Str, FILE *File);
int __cdecl fseek(FILE *File, int Offset, int Origin);
int __cdecl fseek_nolock(FILE *File, int Offset, int Origin);
int __cdecl fseeki64(FILE *File, __int64 Offset, int Origin);
int __cdecl fseeki64_nolock(FILE *File, __int64 Offset, int Origin);
int __cdecl fsetpos(FILE *File, const fpos_t *Pos);
int __cdecl fstat(int FileDes, struct _stat *Stat);
int __cdecl fstat32(int FileDes, struct _stat32 *Stat);
int __cdecl fstat32i64(int FileDes, struct _stat32i64 *Stat);
int __cdecl fstat64(int FileDes, struct _stat64 *Stat);
int __cdecl fstat64i32(int FileDes, struct _stat64i32 *Stat);
int __cdecl fstati64(int FileDes, struct _stati64 *Stat);
int __cdecl ftell(FILE *File);
int __cdecl ftell_nolock(FILE *File);
int __cdecl futime(int FileDes, struct _utimbuf *Time);
int __cdecl futime32(int FileDes, struct __utimbuf32 *Time);
int __cdecl futime64(int FileDes, struct __utimbuf64 *Time);
int __cdecl fwide(FILE *F, int M);
int __cdecl get_printf_count_output();
int __cdecl getc(FILE *File);
int __cdecl getch();
int __cdecl getch();
int __cdecl getch_nolock();
int __cdecl getchar();
int __cdecl getche();
int __cdecl getche();
int __cdecl getche_nolock();
int __cdecl getdrive();
int __cdecl getmaxstdio();
int __cdecl getmbcp();
int __cdecl getpid();
int __cdecl getpid();
int __cdecl getw(FILE *File);
int __cdecl getw(FILE *File);
int __cdecl guard_icall_checks_enforced();
int __cdecl guard_rf_checks_enforced();
int __cdecl heapadd(void *Memory, size_t Size);
int __cdecl heapchk();
int __cdecl heapmin();
int __cdecl heapset(unsigned int Fill);
int __cdecl heapwalk(_HEAPINFO *EntryInfo);
int __cdecl inp(unsigned __int16);
int __cdecl inp(unsigned __int16);
int __cdecl is_wctype(wint_t C, wctype_t Type);
int __cdecl isalnum(int C);
int __cdecl isalnum_l(int C, _locale_t Locale);
int __cdecl isalpha(int C);
int __cdecl isalpha_l(int C, _locale_t Locale);
int __cdecl isatty(int FileHandle);
int __cdecl isatty(int FileHandle);
int __cdecl iscntrl(int C);
int __cdecl iscntrl_l(int C, _locale_t Locale);
int __cdecl isctype(int C, int Type);
int __cdecl isctype_l(int C, int Type, _locale_t Locale);
int __cdecl isdigit(int C);
int __cdecl isdigit_l(int C, _locale_t Locale);
int __cdecl isgraph(int C);
int __cdecl isgraph_l(int C, _locale_t Locale);
int __cdecl isleadbyte(int C);
int __cdecl isleadbyte_l(int C, _locale_t Locale);
int __cdecl islower(int C);
int __cdecl islower_l(int C, _locale_t Locale);
int __cdecl ismbbalnum(unsigned int C);
int __cdecl ismbbalnum_l(unsigned int C, _locale_t Locale);
int __cdecl ismbbalpha(unsigned int C);
int __cdecl ismbbalpha_l(unsigned int C, _locale_t Locale);
int __cdecl ismbbgraph(unsigned int C);
int __cdecl ismbbgraph_l(unsigned int C, _locale_t Locale);
int __cdecl ismbbkalnum(unsigned int C);
int __cdecl ismbbkalnum_l(unsigned int C, _locale_t Locale);
int __cdecl ismbbkana(unsigned int C);
int __cdecl ismbbkana_l(unsigned int C, _locale_t Locale);
int __cdecl ismbbkprint(unsigned int C);
int __cdecl ismbbkprint_l(unsigned int C, _locale_t Locale);
int __cdecl ismbbkpunct(unsigned int C);
int __cdecl ismbbkpunct_l(unsigned int C, _locale_t Locale);
int __cdecl ismbblead(unsigned int C);
int __cdecl ismbblead_l(unsigned int C, _locale_t Locale);
int __cdecl ismbbprint(unsigned int C);
int __cdecl ismbbprint_l(unsigned int C, _locale_t Locale);
int __cdecl ismbbpunct(unsigned int C);
int __cdecl ismbbpunct_l(unsigned int C, _locale_t Locale);
int __cdecl ismbbtrail(unsigned int C);
int __cdecl ismbbtrail_l(unsigned int C, _locale_t Locale);
int __cdecl ismbcalnum(unsigned int Ch);
int __cdecl ismbcalnum_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbcalpha(unsigned int Ch);
int __cdecl ismbcalpha_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbcdigit(unsigned int Ch);
int __cdecl ismbcdigit_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbcgraph(unsigned int Ch);
int __cdecl ismbcgraph_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbchira(unsigned int Ch);
int __cdecl ismbchira_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbckata(unsigned int Ch);
int __cdecl ismbckata_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbcl0(unsigned int Ch);
int __cdecl ismbcl0_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbcl1(unsigned int Ch);
int __cdecl ismbcl1_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbcl2(unsigned int Ch);
int __cdecl ismbcl2_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbclegal(unsigned int Ch);
int __cdecl ismbclegal_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbclower(unsigned int Ch);
int __cdecl ismbclower_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbcprint(unsigned int Ch);
int __cdecl ismbcprint_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbcpunct(unsigned int Ch);
int __cdecl ismbcpunct_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbcspace(unsigned int Ch);
int __cdecl ismbcspace_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbcsymbol(unsigned int Ch);
int __cdecl ismbcsymbol_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbcupper(unsigned int Ch);
int __cdecl ismbcupper_l(unsigned int Ch, _locale_t Locale);
int __cdecl ismbslead(const unsigned __int8 *Str, const unsigned __int8 *Pos);
int __cdecl ismbslead_l(const unsigned __int8 *Str, const unsigned __int8 *Pos, _locale_t Locale);
int __cdecl ismbstrail(const unsigned __int8 *Str, const unsigned __int8 *Pos);
int __cdecl ismbstrail_l(const unsigned __int8 *Str, const unsigned __int8 *Pos, _locale_t Locale);
int __cdecl isnan(double X);
int __cdecl isnanf(float X);
int __cdecl isprint(int C);
int __cdecl isprint_l(int C, _locale_t Locale);
int __cdecl ispunct(int C);
int __cdecl ispunct_l(int C, _locale_t Locale);
int __cdecl isspace(int C);
int __cdecl isspace_l(int C, _locale_t Locale);
int __cdecl isupper(int C);
int __cdecl isupper_l(int C, _locale_t Locale);
int __cdecl iswalnum(wint_t C);
int __cdecl iswalnum_l(wint_t C, _locale_t Locale);
int __cdecl iswalpha(wint_t C);
int __cdecl iswalpha_l(wint_t C, _locale_t Locale);
int __cdecl iswascii(wint_t C);
int __cdecl iswcntrl(wint_t C);
int __cdecl iswcntrl_l(wint_t C, _locale_t Locale);
int __cdecl iswcsym_l(wint_t C, _locale_t Locale);
int __cdecl iswcsymf_l(wint_t C, _locale_t Locale);
int __cdecl iswctype(wint_t C, wctype_t Type);
int __cdecl iswctype_l(wint_t C, wctype_t Type, _locale_t Locale);
int __cdecl iswdigit(wint_t C);
int __cdecl iswdigit_l(wint_t C, _locale_t Locale);
int __cdecl iswgraph(wint_t C);
int __cdecl iswgraph_l(wint_t C, _locale_t Locale);
int __cdecl iswlower(wint_t C);
int __cdecl iswlower_l(wint_t C, _locale_t Locale);
int __cdecl iswprint(wint_t C);
int __cdecl iswprint_l(wint_t C, _locale_t Locale);
int __cdecl iswpunct(wint_t C);
int __cdecl iswpunct_l(wint_t C, _locale_t Locale);
int __cdecl iswspace(wint_t C);
int __cdecl iswspace_l(wint_t C, _locale_t Locale);
int __cdecl iswupper(wint_t C);
int __cdecl iswupper_l(wint_t C, _locale_t Locale);
int __cdecl iswxdigit(wint_t C);
int __cdecl iswxdigit_l(wint_t C, _locale_t Locale);
int __cdecl isxdigit(int C);
int __cdecl isxdigit_l(int C, _locale_t Locale);
int __cdecl kbhit();
int __cdecl kbhit();
int __cdecl labs(int X);
int __cdecl locking(int FileHandle, int LockMode, int NumOfBytes);
int __cdecl locking(int FileHandle, int LockMode, int NumOfBytes);
int __cdecl lseek(int FileHandle, int Offset, int Origin);
int __cdecl lseek(int FileHandle, int Offset, int Origin);
int __cdecl matherr(struct _exception *Except);
int __cdecl mbbtype(unsigned __int8 Ch, int CType);
int __cdecl mbbtype_l(unsigned __int8 Ch, int CType, _locale_t Locale);
int __cdecl mblen(const char *Ch, size_t MaxCount);
int __cdecl mblen_l(const char *Ch, size_t MaxCount, _locale_t Locale);
int __cdecl mbsbtype(const unsigned __int8 *Str, size_t Pos);
int __cdecl mbsbtype_l(const unsigned __int8 *Str, size_t Pos, _locale_t Locale);
int __cdecl mbscmp(const unsigned __int8 *Str1, const unsigned __int8 *Str2);
int __cdecl mbscmp_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, _locale_t Locale);
int __cdecl mbscoll(const unsigned __int8 *Str1, const unsigned __int8 *Str2);
int __cdecl mbscoll_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, _locale_t Locale);
int __cdecl mbsicmp(const unsigned __int8 *Str1, const unsigned __int8 *Str2);
int __cdecl mbsicmp_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, _locale_t Locale);
int __cdecl mbsicoll(const unsigned __int8 *Str1, const unsigned __int8 *Str2);
int __cdecl mbsicoll_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, _locale_t Locale);
int __cdecl mbsinit(const mbstate_t *P);
int __cdecl mbsnbcmp(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl mbsnbcmp_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl mbsnbcoll(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl mbsnbcoll_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl mbsnbicmp(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl mbsnbicmp_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl mbsnbicoll(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl mbsnbicoll_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl mbsncmp(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl mbsncmp_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl mbsncoll(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl mbsncoll_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl mbsnicmp(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl mbsnicmp_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl mbsnicoll(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl mbsnicoll_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl mbtowc(wchar_t *DstCh, const char *SrcCh, size_t SrcSizeInBytes);
int __cdecl mbtowc_l(wchar_t *DstCh, const char *SrcCh, size_t SrcSizeInBytes, _locale_t Locale);
int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size);
int __cdecl memicmp(const void *Buf1, const void *Buf2, size_t Size);
int __cdecl memicmp(const void *Buf1, const void *Buf2, size_t Size);
int __cdecl memicmp_l(const void *Buf1, const void *Buf2, size_t Size, _locale_t Locale);
int __cdecl mkdir(const char *Path);
int __cdecl mkdir(const char *Path);
int __cdecl mm256_movemask_epi8(__m256i);
int __cdecl mm256_movemask_pd(__m256d a);
int __cdecl mm256_movemask_ps(__m256 a);
int __cdecl mm256_testc_pd(__m256d s1, __m256d s2);
int __cdecl mm256_testc_ps(__m256 s1, __m256 s2);
int __cdecl mm256_testc_si256(__m256i s1, __m256i s2);
int __cdecl mm256_testnzc_pd(__m256d s1, __m256d s2);
int __cdecl mm256_testnzc_ps(__m256 s1, __m256 s2);
int __cdecl mm256_testnzc_si256(__m256i s1, __m256i s2);
int __cdecl mm256_testz_pd(__m256d s1, __m256d s2);
int __cdecl mm256_testz_ps(__m256 s1, __m256 s2);
int __cdecl mm256_testz_si256(__m256i s1, __m256i s2);
int __cdecl mm_testc_pd(__m128d s1, __m128d s2);
int __cdecl mm_testc_ps(__m128 s1, __m128 s2);
int __cdecl mm_testnzc_pd(__m128d s1, __m128d s2);
int __cdecl mm_testnzc_ps(__m128 s1, __m128 s2);
int __cdecl mm_testz_pd(__m128d s1, __m128d s2);
int __cdecl mm_testz_ps(__m128 s1, __m128 s2);
int __cdecl open_osfhandle(intptr_t OSFileHandle, int Flags);
int __cdecl outp(unsigned __int16, int);
int __cdecl outp(unsigned __int16, int);
int __cdecl pclose(FILE *File);
int __cdecl pipe(int *PtHandles, unsigned int PipeSize, int TextMode);
int __cdecl putc(int Ch, FILE *File);
int __cdecl putch(int Ch);
int __cdecl putch(int Ch);
int __cdecl putch_nolock(int Ch);
int __cdecl putchar(int Ch);
int __cdecl putenv(const char *EnvString);
int __cdecl putenv(const char *EnvString);
int __cdecl puts(const char *Str);
int __cdecl putw(int Ch, FILE *File);
int __cdecl putw(int Word, FILE *File);
int __cdecl putws(const wchar_t *Str);
int __cdecl raise(int SigNum);
int __cdecl rand();
int __cdecl rdrand16_step(unsigned __int16 *random_val);
int __cdecl rdrand32_step(unsigned int *random_val);
int __cdecl rdrand64_step(unsigned __int64 *random_val);
int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount);
int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount);
int __cdecl remove(const char *Filename);
int __cdecl rename(const char *OldFilename, const char *NewFilename);
int __cdecl resetstkoflw();
int __cdecl resetstkoflw_downlevel();
int __cdecl rmdir(const char *Path);
int __cdecl rmdir(const char *Path);
int __cdecl rmtmp();
int __cdecl rmtmp();
int __cdecl set_error_mode(int Mode);
int __cdecl set_printf_count_output(int Value);
int __cdecl set_sbh_threshold(size_t NewValue);
int __cdecl setjmp(jmp_buf Buf);
int __cdecl setmaxstdio(int Max);
int __cdecl setmbcp(int CodePage);
int __cdecl setmode(int FileHandle, int Mode);
int __cdecl setmode(int FileHandle, int Mode);
int __cdecl setvbuf(FILE *File, char *Buf, int Mode, size_t Size);
int __cdecl stat(const char *Name, struct _stat *Stat);
int __cdecl stat32(const char *Name, struct _stat32 *Stat);
int __cdecl stat32i64(const char *Name, struct _stat32i64 *Stat);
int __cdecl stat64(const char *Name, struct _stat64 *Stat);
int __cdecl stat64i32(const char *Name, struct _stat64i32 *Stat);
int __cdecl stati64(const char *Name, struct _stati64 *Stat);
int __cdecl strcmp(const char *Str1, const char *Str2);
int __cdecl strcmpi(const char *Str1, const char *Str2);
int __cdecl strcmpi(const char *Str1, const char *Str2);
int __cdecl strcoll(const char *Str1, const char *Str2);
int __cdecl strcoll_l(const char *Str1, const char *Str2, _locale_t Locale);
int __cdecl stricmp(const char *Str1, const char *Str2);
int __cdecl stricmp(const char *Str1, const char *Str2);
int __cdecl stricmp_l(const char *Str1, const char *Str2, _locale_t Locale);
int __cdecl stricoll(const char *Str1, const char *Str2);
int __cdecl stricoll_l(const char *Str1, const char *Str2, _locale_t Locale);
int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount);
int __cdecl strncoll(const char *Str1, const char *Str2, size_t MaxCount);
int __cdecl strncoll_l(const char *Str1, const char *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl strnicmp(const char *Str1, const char *Str, size_t MaxCount);
int __cdecl strnicmp(const char *Str1, const char *Str2, size_t MaxCount);
int __cdecl strnicmp_l(const char *Str1, const char *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl strnicoll(const char *Str1, const char *Str2, size_t MaxCount);
int __cdecl strnicoll_l(const char *Str1, const char *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl strtol(const char *Str, char **EndPtr, int Radix);
int __cdecl strtol_l(const char *Str, char **EndPtr, int Radix, _locale_t Locale);
int __cdecl system(const char *Command);
int __cdecl tccmp(const char *cpc1, const char *cpc2);
int __cdecl tell(int FileHandle);
int __cdecl tell(int FileHandle);
int __cdecl tolower(int C);
int __cdecl tolower(int C);
int __cdecl tolower_l(int C, _locale_t Locale);
int __cdecl toupper(int C);
int __cdecl toupper(int C);
int __cdecl toupper_l(int C, _locale_t Locale);
int __cdecl uaw_wcsicmp(PCUWSTR String1, PCUWSTR String2);
int __cdecl umask(int Mode);
int __cdecl umask(int Mode);
int __cdecl ungetc(int Ch, FILE *File);
int __cdecl ungetc_nolock(int Ch, FILE *File);
int __cdecl ungetch(int Ch);
int __cdecl ungetch(int Ch);
int __cdecl ungetch_nolock(int Ch);
int __cdecl unlink(const char *Filename);
int __cdecl unlink(const char *Filename);
int __cdecl unloaddll(intptr_t Handle);
int __cdecl utime(const char *Filename, struct _utimbuf *Time);
int __cdecl utime32(const char *Filename, struct __utimbuf32 *Time);
int __cdecl utime64(const char *Filename, struct __utimbuf64 *Time);
int __cdecl vcprintf(const char *Format, va_list ArgList);
int __cdecl vcprintf_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl vcprintf_p(const char *Format, va_list ArgList);
int __cdecl vcprintf_p_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl vcprintf_s(const char *Format, va_list ArgList);
int __cdecl vcprintf_s_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl vcwprintf(const wchar_t *Format, va_list ArgList);
int __cdecl vcwprintf_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl vcwprintf_p(const wchar_t *Format, va_list ArgList);
int __cdecl vcwprintf_p_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl vcwprintf_s(const wchar_t *Format, va_list ArgList);
int __cdecl vcwprintf_s_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl vfprintf(FILE *File, const char *Format, va_list ArgList);
int __cdecl vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl vfprintf_p(FILE *File, const char *Format, va_list ArgList);
int __cdecl vfprintf_p_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl vfprintf_s(FILE *File, const char *Format, va_list ArgList);
int __cdecl vfprintf_s_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl vfwprintf(FILE *File, const wchar_t *Format, va_list ArgList);
int __cdecl vfwprintf_l(FILE *File, const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl vfwprintf_p(FILE *File, const wchar_t *Format, va_list ArgList);
int __cdecl vfwprintf_p_l(FILE *File, const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl vfwprintf_s(FILE *File, const wchar_t *Format, va_list ArgList);
int __cdecl vfwprintf_s_l(FILE *File, const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl vprintf(const char *Format, va_list ArgList);
int __cdecl vprintf_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl vprintf_p(const char *Format, va_list ArgList);
int __cdecl vprintf_p_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl vprintf_s(const char *Format, va_list ArgList);
int __cdecl vprintf_s_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl vscprintf(const char *Format, va_list ArgList);
int __cdecl vscprintf_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl vscprintf_p(const char *Format, va_list ArgList);
int __cdecl vscprintf_p_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl vscwprintf(const wchar_t *Format, va_list ArgList);
int __cdecl vscwprintf_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl vscwprintf_p(const wchar_t *Format, va_list ArgList);
int __cdecl vscwprintf_p_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl vsnprintf(char *Dest, size_t Count, const char *Format, va_list Args);
int __cdecl vsnprintf(char *DstBuf, size_t MaxCount, const char *Format, va_list ArgList);
int __cdecl vsnprintf_c(char *DstBuf, size_t MaxCount, const char *Format, va_list ArgList);
int __cdecl vsnprintf_c_l(char *DstBuf, size_t MaxCount, const char *, _locale_t Locale, va_list ArgList);
int __cdecl vsnprintf_l(char *DstBuf, size_t MaxCount, const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl vsnprintf_s(char *DstBuf, size_t DstSize, size_t MaxCount, const char *Format, va_list ArgList);
int __cdecl vsnprintf_s(char *DstBuf, size_t SizeInBytes, size_t MaxCount, const char *Format, va_list ArgList);
int __cdecl vsnprintf_s_l(char *DstBuf, size_t DstSize, size_t MaxCount, const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl vsnwprintf(wchar_t *Dest, size_t Count, const wchar_t *Format, va_list Args);
int __cdecl vsnwprintf_l(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl vsnwprintf_s(wchar_t *DstBuf, size_t SizeInWords, size_t MaxCount, const wchar_t *Format, va_list ArgList);
int __cdecl vsnwprintf_s_l(wchar_t *DstBuf, size_t DstSize, size_t MaxCount, const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl vsprintf(char *Dest, const char *Format, va_list Args);
int __cdecl vsprintf_l(char *DstBuf, const char *Format, _locale_t, va_list ArgList);
int __cdecl vsprintf_p(char *Dst, size_t MaxCount, const char *Format, va_list ArgList);
int __cdecl vsprintf_p_l(char *DstBuf, size_t MaxCount, const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl vsprintf_s(char *DstBuf, size_t SizeInBytes, const char *Format, va_list ArgList);
int __cdecl vsprintf_s_l(char *DstBuf, size_t DstSize, const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl vswprintf(wchar_t *, const wchar_t *, va_list);
int __cdecl vswprintf(wchar_t *Dest, const wchar_t *Format, va_list Args);
int __cdecl vswprintf_c(wchar_t *DstBuf, size_t SizeInWords, const wchar_t *Format, va_list ArgList);
int __cdecl vswprintf_c_l(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl vswprintf_p(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, va_list ArgList);
int __cdecl vswprintf_p_l(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl vswprintf_s(wchar_t *Dst, size_t SizeInWords, const wchar_t *Format, va_list ArgList);
int __cdecl vswprintf_s_l(wchar_t *DstBuf, size_t DstSize, const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl vwprintf(const wchar_t *Format, va_list ArgList);
int __cdecl vwprintf_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl vwprintf_p(const wchar_t *Format, va_list ArgList);
int __cdecl vwprintf_p_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl vwprintf_s(const wchar_t *Format, va_list ArgList);
int __cdecl vwprintf_s_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl waccess(const wchar_t *Filename, int AccessMode);
int __cdecl wchdir(const wchar_t *Path);
int __cdecl wchmod(const wchar_t *Filename, int Mode);
int __cdecl wcreat(const wchar_t *Filename, int PermissionMode);
int __cdecl wcscmp(const wchar_t *Str1, const wchar_t *Str2);
int __cdecl wcscoll(const wchar_t *Str1, const wchar_t *Str2);
int __cdecl wcscoll_l(const wchar_t *Str1, const wchar_t *Str2, _locale_t Locale);
int __cdecl wcsicmp(const wchar_t *Str1, const wchar_t *Str2);
int __cdecl wcsicmp(const wchar_t *Str1, const wchar_t *Str2);
int __cdecl wcsicmp_l(const wchar_t *Str1, const wchar_t *Str2, _locale_t Locale);
int __cdecl wcsicoll(const wchar_t *Str1, const wchar_t *Str2);
int __cdecl wcsicoll(const wchar_t *Str1, const wchar_t *Str2);
int __cdecl wcsicoll_l(const wchar_t *Str1, const wchar_t *Str2, _locale_t Locale);
int __cdecl wcsncmp(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount);
int __cdecl wcsncoll(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount);
int __cdecl wcsncoll_l(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl wcsnicmp(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount);
int __cdecl wcsnicmp(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount);
int __cdecl wcsnicmp_l(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl wcsnicoll(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount);
int __cdecl wcsnicoll_l(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl wcstol(const wchar_t *Str, wchar_t **EndPtr, int Radix);
int __cdecl wcstol_l(const wchar_t *Str, wchar_t **EndPtr, int Radix, _locale_t Locale);
int __cdecl wctob(wint_t WCh);
int __cdecl wctomb(char *MbCh, wchar_t WCh);
int __cdecl wctomb_l(char *MbCh, wchar_t WCh, _locale_t Locale);
int __cdecl wfindnext(intptr_t, struct _wfinddata_t *);
int __cdecl wfindnext32(intptr_t FindHandle, struct _wfinddata32_t *FindData);
int __cdecl wfindnext32i64(intptr_t FindHandle, struct _wfinddata32i64_t *FindData);
int __cdecl wfindnext64(intptr_t FindHandle, struct _wfinddata64_t *FindData);
int __cdecl wfindnext64i32(intptr_t FindHandle, struct _wfinddata64i32_t *FindData);
int __cdecl wfindnexti64(intptr_t, struct _wfinddatai64_t *);
int __cdecl wmemcmp(const wchar_t *S1, const wchar_t *S2, size_t N);
int __cdecl wmkdir(const wchar_t *Path);
int __cdecl wopen(const wchar_t *Filename, int OpenFlag, int ModeFlag);
int __cdecl wputenv(const wchar_t *EnvString);
int __cdecl wremove(const wchar_t *Filename);
int __cdecl wrename(const wchar_t *OldFilename, const wchar_t *NewFilename);
int __cdecl write(int FileHandle, const void *Buf, unsigned int MaxCharCount);
int __cdecl write(int Filehandle, const void *Buf, unsigned int MaxCharCount);
int __cdecl wrmdir(const wchar_t *Path);
int __cdecl wsopen(const wchar_t *Filename, int OpenFlag, int ShareFlag, int ModeFlag);
int __cdecl wstat(const wchar_t *Name, struct _stat *Stat);
int __cdecl wstat32(const wchar_t *Name, struct _stat32 *Stat);
int __cdecl wstat32i64(const wchar_t *Name, struct _stat32i64 *Stat);
int __cdecl wstat64(const wchar_t *Name, struct _stat64 *Stat);
int __cdecl wstat64i32(const wchar_t *Name, struct _stat64i32 *Stat);
int __cdecl wstati64(const wchar_t *Name, struct _stati64 *Stat);
int __cdecl wsystem(const wchar_t *Command);
int __cdecl wtoi(const wchar_t *Str);
int __cdecl wtoi_l(const wchar_t *Str, _locale_t Locale);
int __cdecl wtol(const wchar_t *Str);
int __cdecl wtol_l(const wchar_t *Str, _locale_t Locale);
int __cdecl wunlink(const wchar_t *Filename);
int __cdecl wutime(const wchar_t *Filename, struct _utimbuf *Time);
int __cdecl wutime32(const wchar_t *Filename, struct __utimbuf32 *Time);
int __cdecl wutime64(const wchar_t *Filename, struct __utimbuf64 *Time);
int __fastcall RTC_Check_8_to_4(__int64 Src);
int __stdcall HandleToLong(const void *h);
int __stdcall I_RpcExceptionFilter(unsigned int ExceptionCode);
int __stdcall I_RpcMapWin32Status(RPC_STATUS Status);
int __stdcall I_RpcServerDisableExceptionFilter();
int __stdcall InterlockedCompareExchange_HLEAcquire(volatile int *, int, int);
int __stdcall InterlockedCompareExchange_HLERelease(volatile int *, int, int);
int __stdcall InterlockedExchangeAdd_HLEAcquire(volatile int *, int);
int __stdcall InterlockedExchangeAdd_HLERelease(volatile int *, int);
int __stdcall Ndr64AsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned int *pdwStubPhase);
int __stdcall Ndr64DcomAsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned int *pdwStubPhase);
int __stdcall NdrAsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned int *pdwStubPhase);
int __stdcall NdrDcomAsyncStubCall(struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg, unsigned int *pdwStubPhase);
int __stdcall NdrServerUnmarshall(void *pChannel, PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, void *pParamList);
int __stdcall NdrStubCall(void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned int *pdwStubPhase);
int __stdcall NdrStubCall2(void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned int *pdwStubPhase);
int __stdcall NdrStubCall3(void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned int *pdwStubPhase);
int __stdcall PtrToInt(const void *p);
int __stdcall PtrToLong(const void *p);
int __stdcall RpcExceptionFilter(unsigned int ExceptionCode);
int __stdcall UuidEqual(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status);
int __stdcall UuidIsNil(UUID *Uuid, RPC_STATUS *Status);
int __stdcall m_pextrw(__m64, int);
int __stdcall m_pmovmskb(__m64);
int __stdcall m_to_int(__m64 M);
int __stdcall mm_cmpestra(__m128i a, int la, __m128i b, int lb, const int mode);
int __stdcall mm_cmpestrc(__m128i a, int la, __m128i b, int lb, const int mode);
int __stdcall mm_cmpestri(__m128i a, int la, __m128i b, int lb, const int mode);
int __stdcall mm_cmpestro(__m128i a, int la, __m128i b, int lb, const int mode);
int __stdcall mm_cmpestrs(__m128i a, int la, __m128i b, int lb, const int mode);
int __stdcall mm_cmpestrz(__m128i a, int la, __m128i b, int lb, const int mode);
int __stdcall mm_cmpistra(__m128i a, __m128i b, const int mode);
int __stdcall mm_cmpistrc(__m128i a, __m128i b, const int mode);
int __stdcall mm_cmpistri(__m128i a, __m128i b, const int mode);
int __stdcall mm_cmpistro(__m128i a, __m128i b, const int mode);
int __stdcall mm_cmpistrs(__m128i a, __m128i b, const int mode);
int __stdcall mm_cmpistrz(__m128i a, __m128i b, const int mode);
int __stdcall mm_comieq_sd(__m128d A, __m128d B);
int __stdcall mm_comieq_ss(__m128 A, __m128 B);
int __stdcall mm_comige_sd(__m128d A, __m128d B);
int __stdcall mm_comige_ss(__m128 A, __m128 B);
int __stdcall mm_comigt_sd(__m128d A, __m128d B);
int __stdcall mm_comigt_ss(__m128 A, __m128 B);
int __stdcall mm_comile_sd(__m128d A, __m128d B);
int __stdcall mm_comile_ss(__m128 A, __m128 B);
int __stdcall mm_comilt_sd(__m128d A, __m128d B);
int __stdcall mm_comilt_ss(__m128 A, __m128 B);
int __stdcall mm_comineq_sd(__m128d A, __m128d B);
int __stdcall mm_comineq_ss(__m128 A, __m128 B);
int __stdcall mm_cvt_ss2si(__m128 A);
int __stdcall mm_cvtsd_si32(__m128d A);
int __stdcall mm_cvtsi128_si32(__m128i A);
int __stdcall mm_cvtt_ss2si(__m128 A);
int __stdcall mm_cvttsd_si32(__m128d A);
int __stdcall mm_extract_epi16(__m128i A, int Imm);
int __stdcall mm_extract_epi32(__m128i src, const int ndx);
int __stdcall mm_extract_epi8(__m128i src, const int ndx);
int __stdcall mm_extract_ps(__m128 src, const int ndx);
int __stdcall mm_movemask_epi8(__m128i A);
int __stdcall mm_movemask_pd(__m128d A);
int __stdcall mm_movemask_ps(__m128 A);
int __stdcall mm_popcnt_u32(unsigned int v);
int __stdcall mm_testc_si128(__m128i mask, __m128i val);
int __stdcall mm_testnzc_si128(__m128i mask, __m128i s2);
int __stdcall mm_testz_si128(__m128i mask, __m128i val);
int __stdcall mm_ucomieq_sd(__m128d A, __m128d B);
int __stdcall mm_ucomieq_ss(__m128 A, __m128 B);
int __stdcall mm_ucomige_sd(__m128d A, __m128d B);
int __stdcall mm_ucomige_ss(__m128 A, __m128 B);
int __stdcall mm_ucomigt_sd(__m128d A, __m128d B);
int __stdcall mm_ucomigt_ss(__m128 A, __m128 B);
int __stdcall mm_ucomile_sd(__m128d A, __m128d B);
int __stdcall mm_ucomile_ss(__m128 A, __m128 B);
int __stdcall mm_ucomilt_sd(__m128d A, __m128d B);
int __stdcall mm_ucomilt_ss(__m128 A, __m128 B);
int __stdcall mm_ucomineq_sd(__m128d A, __m128d B);
int __stdcall mm_ucomineq_ss(__m128 A, __m128 B);
int __stdcall sarx_i32(int, unsigned int);
int __stdcall uaw_lstrcmpW(PCUWSTR String1, PCUWSTR String2);
int __stdcall uaw_lstrcmpiW(PCUWSTR String1, PCUWSTR String2);
int __stdcall uaw_lstrlenW(LPCUWSTR String);
int _swprintf_l(wchar_t *Dest, const wchar_t *Format, _locale_t Plocinfo, ...);
int cprintf(const char *Format, ...);
int cprintf(const char *Format, ...);
int cprintf_l(const char *Format, _locale_t Locale, ...);
int cprintf_p(const char *Format, ...);
int cprintf_p_l(const char *Format, _locale_t Locale, ...);
int cprintf_s(const char *Format, ...);
int cprintf_s_l(const char *Format, _locale_t Locale, ...);
int cscanf(const char *Format, ...);
int cscanf(const char *Format, ...);
int cscanf_l(const char *Format, _locale_t Locale, ...);
int cscanf_s(const char *Format, ...);
int cscanf_s_l(const char *Format, _locale_t Locale, ...);
int cwprintf(const wchar_t *Format, ...);
int cwprintf_l(const wchar_t *Format, _locale_t Locale, ...);
int cwprintf_p(const wchar_t *Format, ...);
int cwprintf_p_l(const wchar_t *Format, _locale_t Locale, ...);
int cwprintf_s(const wchar_t *Format, ...);
int cwprintf_s_l(const wchar_t *Format, _locale_t Locale, ...);
int cwscanf(const wchar_t *Format, ...);
int cwscanf_l(const wchar_t *Format, _locale_t Locale, ...);
int cwscanf_s(const wchar_t *Format, ...);
int cwscanf_s_l(const wchar_t *Format, _locale_t Locale, ...);
int fprintf(FILE *File, const char *Format, ...);
int fprintf_l(FILE *File, const char *Format, _locale_t Locale, ...);
int fprintf_p(FILE *File, const char *Format, ...);
int fprintf_p_l(FILE *File, const char *Format, _locale_t Locale, ...);
int fprintf_s(FILE *File, const char *Format, ...);
int fprintf_s_l(FILE *File, const char *Format, _locale_t Locale, ...);
int fscanf(FILE *File, const char *Format, ...);
int fscanf_l(FILE *File, const char *Format, _locale_t Locale, ...);
int fscanf_s(FILE *File, const char *Format, ...);
int fscanf_s_l(FILE *File, const char *Format, _locale_t Locale, ...);
int fwprintf(FILE *File, const wchar_t *Format, ...);
int fwprintf_l(FILE *File, const wchar_t *Format, _locale_t Locale, ...);
int fwprintf_p(FILE *File, const wchar_t *Format, ...);
int fwprintf_p_l(FILE *File, const wchar_t *Format, _locale_t Locale, ...);
int fwprintf_s(FILE *File, const wchar_t *Format, ...);
int fwprintf_s_l(FILE *File, const wchar_t *Format, _locale_t Locale, ...);
int fwscanf(FILE *File, const wchar_t *Format, ...);
int fwscanf_l(FILE *File, const wchar_t *Format, _locale_t Locale, ...);
int fwscanf_s(FILE *File, const wchar_t *Format, ...);
int fwscanf_s_l(FILE *File, const wchar_t *Format, _locale_t Locale, ...);
int open(const char *Filename, int OpenFlag, ...);
int open(const char *Filename, int OpenFlag, ...);
int printf(const char *Format, ...);
int printf_l(const char *Format, _locale_t Locale, ...);
int printf_p(const char *Format, ...);
int printf_p_l(const char *Format, _locale_t Locale, ...);
int printf_s(const char *Format, ...);
int printf_s_l(const char *Format, _locale_t Locale, ...);
int scanf(const char *Format, ...);
int scanf_l(const char *Format, _locale_t Locale, ...);
int scanf_s(const char *Format, ...);
int scanf_s_l(const char *Format, _locale_t Locale, ...);
int scprintf(const char *Format, ...);
int scprintf_l(const char *Format, _locale_t Locale, ...);
int scprintf_p(const char *Format, ...);
int scprintf_p_l(const char *Format, _locale_t Locale, ...);
int scwprintf(const wchar_t *Format, ...);
int scwprintf_l(const wchar_t *Format, _locale_t Locale, ...);
int scwprintf_p(const wchar_t *Format, ...);
int scwprintf_p_l(const wchar_t *Format, _locale_t Locale, ...);
int snprintf(char *Dest, size_t Count, const char *Format, ...);
int snprintf_c(char *DstBuf, size_t MaxCount, const char *Format, ...);
int snprintf_c_l(char *DstBuf, size_t MaxCount, const char *Format, _locale_t Locale, ...);
int snprintf_l(char *DstBuf, size_t MaxCount, const char *Format, _locale_t Locale, ...);
int snprintf_s(char *DstBuf, size_t SizeInBytes, size_t MaxCount, const char *Format, ...);
int snprintf_s_l(char *DstBuf, size_t DstSize, size_t MaxCount, const char *Format, _locale_t Locale, ...);
int snscanf(const char *Src, size_t MaxCount, const char *Format, ...);
int snscanf_l(const char *Src, size_t MaxCount, const char *Format, _locale_t Locale, ...);
int snscanf_s(const char *Src, size_t MaxCount, const char *Format, ...);
int snscanf_s_l(const char *Src, size_t MaxCount, const char *Format, _locale_t Locale, ...);
int snwprintf(wchar_t *Dest, size_t Count, const wchar_t *Format, ...);
int snwprintf_l(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, _locale_t Locale, ...);
int snwprintf_s(wchar_t *DstBuf, size_t SizeInWords, size_t MaxCount, const wchar_t *Format, ...);
int snwprintf_s_l(wchar_t *DstBuf, size_t DstSize, size_t MaxCount, const wchar_t *Format, _locale_t Locale, ...);
int snwscanf(const wchar_t *Src, size_t MaxCount, const wchar_t *Format, ...);
int snwscanf_l(const wchar_t *Src, size_t MaxCount, const wchar_t *Format, _locale_t Locale, ...);
int snwscanf_s(const wchar_t *Src, size_t MaxCount, const wchar_t *Format, ...);
int snwscanf_s_l(const wchar_t *Src, size_t MaxCount, const wchar_t *Format, _locale_t Locale, ...);
int sopen(const char *Filename, int OpenFlag, int ShareFlag, ...);
int sopen(const char *Filename, int OpenFlag, int ShareFlag, ...);
int sprintf(char *Dest, const char *Format, ...);
int sprintf_l(char *DstBuf, const char *Format, _locale_t Locale, ...);
int sprintf_p(char *Dst, size_t MaxCount, const char *Format, ...);
int sprintf_p_l(char *DstBuf, size_t MaxCount, const char *Format, _locale_t Locale, ...);
int sprintf_s(char *DstBuf, size_t SizeInBytes, const char *Format, ...);
int sprintf_s_l(char *DstBuf, size_t DstSize, const char *Format, _locale_t Locale, ...);
int sscanf(const char *Src, const char *Format, ...);
int sscanf_l(const char *Src, const char *Format, _locale_t Locale, ...);
int sscanf_s(const char *Src, const char *Format, ...);
int sscanf_s_l(const char *Src, const char *Format, _locale_t Locale, ...);
int swprintf(wchar_t *, const wchar_t *, ...);
int swprintf(wchar_t *Dest, const wchar_t *Format, ...);
int swprintf_c(wchar_t *DstBuf, size_t SizeInWords, const wchar_t *Format, ...);
int swprintf_c_l(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, _locale_t Locale, ...);
int swprintf_p(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, ...);
int swprintf_p_l(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, _locale_t Locale, ...);
int swprintf_s(wchar_t *Dst, size_t SizeInWords, const wchar_t *Format, ...);
int swprintf_s_l(wchar_t *DstBuf, size_t DstSize, const wchar_t *Format, _locale_t Locale, ...);
int swscanf(const wchar_t *Src, const wchar_t *Format, ...);
int swscanf_l(const wchar_t *Src, const wchar_t *Format, _locale_t Locale, ...);
int swscanf_s(const wchar_t *Src, const wchar_t *Format, ...);
int swscanf_s_l(const wchar_t *Src, const wchar_t *Format, _locale_t Locale, ...);
int wprintf(const wchar_t *Format, ...);
int wprintf_l(const wchar_t *Format, _locale_t Locale, ...);
int wprintf_p(const wchar_t *Format, ...);
int wprintf_p_l(const wchar_t *Format, _locale_t Locale, ...);
int wprintf_s(const wchar_t *Format, ...);
int wprintf_s_l(const wchar_t *Format, _locale_t Locale, ...);
int wscanf(const wchar_t *Format, ...);
int wscanf_l(const wchar_t *Format, _locale_t Locale, ...);
int wscanf_s(const wchar_t *Format, ...);
int wscanf_s_l(const wchar_t *Format, _locale_t Locale, ...);
intptr_t __cdecl cwait(int *TermStat, intptr_t ProcHandle, int Action);
intptr_t __cdecl cwait(int *TermStat, intptr_t ProcHandle, int Action);
intptr_t __cdecl execv(const char *Filename, const char *const *ArgList);
intptr_t __cdecl execv(const char *Filename, const char *const *ArgList);
intptr_t __cdecl execve(const char *Filename, const char *const *ArgList, const char *const *Env);
intptr_t __cdecl execve(const char *Filename, const char *const *ArgList, const char *const *Env);
intptr_t __cdecl execvp(const char *Filename, const char *const *ArgList);
intptr_t __cdecl execvp(const char *Filename, const char *const *ArgList);
intptr_t __cdecl execvpe(const char *Filename, const char *const *ArgList, const char *const *Env);
intptr_t __cdecl execvpe(const char *Filename, const char *const *ArgList, const char *const *Env);
intptr_t __cdecl findfirst(const char *, struct _finddata_t *);
intptr_t __cdecl findfirst32(const char *Filename, struct _finddata32_t *FindData);
intptr_t __cdecl findfirst32i64(const char *Filename, struct _finddata32i64_t *FindData);
intptr_t __cdecl findfirst64(const char *Filename, struct __finddata64_t *FindData);
intptr_t __cdecl findfirst64i32(const char *Filename, struct _finddata64i32_t *FindData);
intptr_t __cdecl findfirsti64(const char *, struct _finddatai64_t *);
intptr_t __cdecl get_heap_handle();
intptr_t __cdecl get_osfhandle(int FileHandle);
intptr_t __cdecl loaddll(char *Filename);
intptr_t __cdecl spawnv(int Mode, const char *Filename, const char *const *ArgList);
intptr_t __cdecl spawnv(int, const char *Filename, const char *const *ArgList);
intptr_t __cdecl spawnve(int Mode, const char *Filename, const char *const *ArgList, const char *const *Env);
intptr_t __cdecl spawnve(int, const char *Filename, const char *const *ArgList, const char *const *Env);
intptr_t __cdecl spawnvp(int Mode, const char *Filename, const char *const *ArgList);
intptr_t __cdecl spawnvp(int, const char *Filename, const char *const *ArgList);
intptr_t __cdecl spawnvpe(int Mode, const char *Filename, const char *const *ArgList, const char *const *Env);
intptr_t __cdecl spawnvpe(int, const char *Filename, const char *const *ArgList, const char *const *Env);
intptr_t __cdecl wexecv(const wchar_t *Filename, const wchar_t *const *ArgList);
intptr_t __cdecl wexecve(const wchar_t *Filename, const wchar_t *const *ArgList, const wchar_t *const *Env);
intptr_t __cdecl wexecvp(const wchar_t *Filename, const wchar_t *const *ArgList);
intptr_t __cdecl wexecvpe(const wchar_t *Filename, const wchar_t *const *ArgList, const wchar_t *const *Env);
intptr_t __cdecl wfindfirst(const wchar_t *, struct _wfinddata_t *);
intptr_t __cdecl wfindfirst32(const wchar_t *Filename, struct _wfinddata32_t *FindData);
intptr_t __cdecl wfindfirst32i64(const wchar_t *Filename, struct _wfinddata32i64_t *FindData);
intptr_t __cdecl wfindfirst64(const wchar_t *Filename, struct _wfinddata64_t *FindData);
intptr_t __cdecl wfindfirst64i32(const wchar_t *Filename, struct _wfinddata64i32_t *FindData);
intptr_t __cdecl wfindfirsti64(const wchar_t *, struct _wfinddatai64_t *);
intptr_t __cdecl wspawnv(int Mode, const wchar_t *Filename, const wchar_t *const *ArgList);
intptr_t __cdecl wspawnve(int Mode, const wchar_t *Filename, const wchar_t *const *ArgList, const wchar_t *const *Env);
intptr_t __cdecl wspawnvp(int Mode, const wchar_t *Filename, const wchar_t *const *ArgList);
intptr_t __cdecl wspawnvpe(int Mode, const wchar_t *Filename, const wchar_t *const *ArgList, const wchar_t *const *Env);
intptr_t execl(const char *Filename, const char *ArgList, ...);
intptr_t execl(const char *Filename, const char *ArgList, ...);
intptr_t execle(const char *Filename, const char *ArgList, ...);
intptr_t execle(const char *Filename, const char *ArgList, ...);
intptr_t execlp(const char *Filename, const char *ArgList, ...);
intptr_t execlp(const char *Filename, const char *ArgList, ...);
intptr_t execlpe(const char *Filename, const char *ArgList, ...);
intptr_t execlpe(const char *Filename, const char *ArgList, ...);
intptr_t spawnl(int Mode, const char *Filename, const char *ArgList, ...);
intptr_t spawnl(int, const char *Filename, const char *ArgList, ...);
intptr_t spawnle(int Mode, const char *Filename, const char *ArgList, ...);
intptr_t spawnle(int, const char *Filename, const char *ArgList, ...);
intptr_t spawnlp(int Mode, const char *Filename, const char *ArgList, ...);
intptr_t spawnlp(int, const char *Filename, const char *ArgList, ...);
intptr_t spawnlpe(int Mode, const char *Filename, const char *ArgList, ...);
intptr_t spawnlpe(int, const char *Filename, const char *ArgList, ...);
intptr_t wexecl(const wchar_t *Filename, const wchar_t *ArgList, ...);
intptr_t wexecle(const wchar_t *Filename, const wchar_t *ArgList, ...);
intptr_t wexeclp(const wchar_t *Filename, const wchar_t *ArgList, ...);
intptr_t wexeclpe(const wchar_t *Filename, const wchar_t *ArgList, ...);
intptr_t wspawnl(int Mode, const wchar_t *Filename, const wchar_t *ArgList, ...);
intptr_t wspawnle(int Mode, const wchar_t *Filename, const wchar_t *ArgList, ...);
intptr_t wspawnlp(int Mode, const wchar_t *Filename, const wchar_t *ArgList, ...);
intptr_t wspawnlpe(int Mode, const wchar_t *Filename, const wchar_t *ArgList, ...);
ldiv_t __cdecl ldiv(int Numerator, int Denominator);
signed int __stdcall UuidCompare(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status);
size_t __cdecl aligned_msize(void *Memory, size_t Alignment, size_t Offset);
size_t __cdecl fread(void *DstBuf, size_t ElementSize, size_t Count, FILE *File);
size_t __cdecl fread_nolock(void *DstBuf, size_t ElementSize, size_t Count, FILE *File);
size_t __cdecl fread_nolock_s(void *DstBuf, size_t DstSize, size_t ElementSize, size_t Count, FILE *File);
size_t __cdecl fread_s(void *DstBuf, size_t DstSize, size_t ElementSize, size_t Count, FILE *File);
size_t __cdecl fwrite(const void *Str, size_t Size, size_t Count, FILE *File);
size_t __cdecl fwrite_nolock(const void *DstBuf, size_t Size, size_t Count, FILE *File);
size_t __cdecl get_sbh_threshold();
size_t __cdecl heapused(size_t *Used, size_t *Commit);
size_t __cdecl mbclen(const unsigned __int8 *Str);
size_t __cdecl mbclen_l(const unsigned __int8 *Str, _locale_t Locale);
size_t __cdecl mbrlen(const char *Ch, size_t SizeInBytes, mbstate_t *State);
size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State);
size_t __cdecl mbscspn(const unsigned __int8 *Str, const unsigned __int8 *Control);
size_t __cdecl mbscspn_l(const unsigned __int8 *Str, const unsigned __int8 *Control, _locale_t Locale);
size_t __cdecl mbslen(const unsigned __int8 *Str);
size_t __cdecl mbslen_l(const unsigned __int8 *Str, _locale_t Locale);
size_t __cdecl mbsnbcnt(const unsigned __int8 *Str, size_t MaxCount);
size_t __cdecl mbsnbcnt_l(const unsigned __int8 *Str, size_t MaxCount, _locale_t Locale);
size_t __cdecl mbsnccnt(const unsigned __int8 *Str, size_t MaxCount);
size_t __cdecl mbsnccnt_l(const unsigned __int8 *Str, size_t MaxCount, _locale_t Locale);
size_t __cdecl mbsnlen(const unsigned __int8 *Str, size_t MaxCount);
size_t __cdecl mbsnlen_l(const unsigned __int8 *Str, size_t MaxCount, _locale_t Locale);
size_t __cdecl mbsrtowcs(wchar_t *Dest, const char **PSrc, size_t Count, mbstate_t *State);
size_t __cdecl mbsspn(const unsigned __int8 *Str, const unsigned __int8 *Control);
size_t __cdecl mbsspn_l(const unsigned __int8 *Str, const unsigned __int8 *Control, _locale_t Locale);
size_t __cdecl mbstowcs(wchar_t *Dest, const char *Source, size_t MaxCount);
size_t __cdecl mbstowcs_l(wchar_t *Dest, const char *Source, size_t MaxCount, _locale_t Locale);
size_t __cdecl mbstrlen(const char *Str);
size_t __cdecl mbstrlen_l(const char *Str, _locale_t Locale);
size_t __cdecl mbstrnlen(const char *Str, size_t MaxCount);
size_t __cdecl mbstrnlen_l(const char *Str, size_t MaxCount, _locale_t Locale);
size_t __cdecl msize(void *Memory);
size_t __cdecl strcspn(const char *Str, const char *Control);
size_t __cdecl strftime(char *Buf, size_t SizeInBytes, const char *Format, const struct tm *Tm);
size_t __cdecl strftime_l(char *Buf, size_t Max_size, const char *Format, const struct tm *Tm, _locale_t Locale);
size_t __cdecl strlen(const char *Str);
size_t __cdecl strncnt(const char *String, size_t Cnt);
size_t __cdecl strnlen(const char *Str, size_t MaxCount);
size_t __cdecl strspn(const char *Str, const char *Control);
size_t __cdecl strxfrm(char *Dst, const char *Src, size_t MaxCount);
size_t __cdecl strxfrm_l(char *Dst, const char *Src, size_t MaxCount, _locale_t Locale);
size_t __cdecl tclen(const char *cpc);
size_t __cdecl uaw_wcslen(PCUWSTR String);
size_t __cdecl wcrtomb(char *Dest, wchar_t Source, mbstate_t *State);
size_t __cdecl wcscspn(const wchar_t *Str, const wchar_t *Control);
size_t __cdecl wcsftime(wchar_t *Buf, size_t SizeInWords, const wchar_t *Format, const struct tm *Tm);
size_t __cdecl wcsftime_l(wchar_t *Buf, size_t SizeInWords, const wchar_t *Format, const struct tm *Tm, _locale_t Locale);
size_t __cdecl wcslen(const wchar_t *Str);
size_t __cdecl wcsnlen(const wchar_t *Src, size_t MaxCount);
size_t __cdecl wcsrtombs(char *Dest, const wchar_t **PSource, size_t Count, mbstate_t *State);
size_t __cdecl wcsspn(const wchar_t *Str, const wchar_t *Control);
size_t __cdecl wcstombs(char *Dest, const wchar_t *Source, size_t MaxCount);
size_t __cdecl wcstombs_l(char *Dest, const wchar_t *Source, size_t MaxCount, _locale_t Locale);
size_t __cdecl wcsxfrm(wchar_t *Dst, const wchar_t *Src, size_t MaxCount);
size_t __cdecl wcsxfrm_l(wchar_t *Dst, const wchar_t *Src, size_t MaxCount, _locale_t Locale);
size_t __stdcall WDF_ALIGN_SIZE_DOWN(size_t Length, size_t AlignTo);
size_t __stdcall WDF_ALIGN_SIZE_UP(size_t Length, size_t AlignTo);
size_t __stdcall WdfCommonBufferGetLength(WDFCOMMONBUFFER CommonBuffer);
size_t __stdcall WdfDmaEnablerGetFragmentLength(WDFDMAENABLER DmaEnabler, WDF_DMA_DIRECTION DmaDirection);
size_t __stdcall WdfDmaEnablerGetMaximumLength(WDFDMAENABLER DmaEnabler);
size_t __stdcall WdfDmaEnablerGetMaximumScatterGatherElements(WDFDMAENABLER DmaEnabler);
size_t __stdcall WdfDmaTransactionGetBytesTransferred(WDFDMATRANSACTION DmaTransaction);
size_t __stdcall WdfDmaTransactionGetCurrentDmaTransferLength(WDFDMATRANSACTION DmaTransaction);
struct _DMA_ADAPTER *__stdcall IoGetDmaAdapter(PDEVICE_OBJECT PhysicalDeviceObject, struct _DEVICE_DESCRIPTION *DeviceDescription, PULONG NumberOfMapRegisters);
struct lconv *__cdecl localeconv();
struct tm *__cdecl gmtime(const time_t *);
struct tm *__cdecl gmtime32(const __time32_t *Time);
struct tm *__cdecl gmtime64(const __time64_t *Time);
struct tm *__cdecl localtime(const time_t *);
struct tm *__cdecl localtime32(const __time32_t *Time);
struct tm *__cdecl localtime64(const __time64_t *Time);
time_t __cdecl mkgmtime(struct tm *);
time_t __cdecl mktime(struct tm *);
time_t __cdecl time(time_t *);
unsigned __int16 __cdecl byteswap_ushort(unsigned __int16 Short);
unsigned __int16 __cdecl inpw(unsigned __int16);
unsigned __int16 __cdecl inpw(unsigned __int16);
unsigned __int16 __cdecl outpw(unsigned __int16, unsigned __int16);
unsigned __int16 __cdecl outpw(unsigned __int16, unsigned __int16);
unsigned __int16 __cdecl rotl16(unsigned __int16 Value, unsigned __int8 Shift);
unsigned __int16 __cdecl rotr16(unsigned __int16 Value, unsigned __int8 Shift);
unsigned __int16 __stdcall PtrToUshort(const void *p);
unsigned __int16 __stdcall UuidHash(UUID *Uuid, RPC_STATUS *Status);
unsigned __int32 _getcallerseflags(void);
unsigned __int32 xbegin(void);
unsigned __int64 __cdecl byteswap_uint64(unsigned __int64 Int64);
unsigned __int64 __cdecl readfsbase_u64();
unsigned __int64 __cdecl readgsbase_u64();
unsigned __int64 __cdecl rotl64(unsigned __int64 Value, int Shift);
unsigned __int64 __cdecl rotr64(unsigned __int64 Value, int Shift);
unsigned __int64 __cdecl strtoui64(const char *String, char **EndPtr, int Radix);
unsigned __int64 __cdecl strtoui64_l(const char *String, char **EndPtr, int Radix, _locale_t Locale);
unsigned __int64 __cdecl wcstoui64(const wchar_t *Str, wchar_t **EndPtr, int Radix);
unsigned __int64 __cdecl wcstoui64_l(const wchar_t *Str, wchar_t **EndPtr, int Radix, _locale_t Locale);
unsigned __int64 __cdecl xgetbv(unsigned int ext_ctrl_reg);
unsigned __int64 __stdcall andn_u64(unsigned __int64, unsigned __int64);
unsigned __int64 __stdcall bextr_u64(unsigned __int64 src, unsigned int start, unsigned int len);
unsigned __int64 __stdcall bextri_u64(unsigned __int64, unsigned int);
unsigned __int64 __stdcall blcfill_u64(unsigned __int64);
unsigned __int64 __stdcall blci_u64(unsigned __int64);
unsigned __int64 __stdcall blcic_u64(unsigned __int64);
unsigned __int64 __stdcall blcmsk_u64(unsigned __int64);
unsigned __int64 __stdcall blcs_u64(unsigned __int64);
unsigned __int64 __stdcall blsfill_u64(unsigned __int64);
unsigned __int64 __stdcall blsi_u64(unsigned __int64);
unsigned __int64 __stdcall blsic_u64(unsigned __int64);
unsigned __int64 __stdcall blsmsk_u64(unsigned __int64);
unsigned __int64 __stdcall blsr_u64(unsigned __int64);
unsigned __int64 __stdcall bzhi_u64(unsigned __int64, unsigned int);
unsigned __int64 __stdcall lzcnt_u64(unsigned __int64);
unsigned __int64 __stdcall mm_crc32_u64(unsigned __int64 crc, unsigned __int64 v);
unsigned __int64 __stdcall mulx_u64(unsigned __int64, unsigned __int64, unsigned __int64 *);
unsigned __int64 __stdcall pdep_u64(unsigned __int64, unsigned __int64);
unsigned __int64 __stdcall pext_u64(unsigned __int64, unsigned __int64);
unsigned __int64 __stdcall rorx_u64(unsigned __int64, const unsigned __int8);
unsigned __int64 __stdcall shlx_u64(unsigned __int64, unsigned int);
unsigned __int64 __stdcall shrx_u64(unsigned __int64, unsigned int);
unsigned __int64 __stdcall t1mskc_u64(unsigned __int64);
unsigned __int64 __stdcall tzcnt_u64(unsigned __int64);
unsigned __int64 __stdcall tzmsk_u64(unsigned __int64);
unsigned __int8 *__cdecl mbscat(unsigned __int8 *, const unsigned __int8 *Source);
unsigned __int8 *__cdecl mbscat_l(unsigned __int8 *Dest, const unsigned __int8 *Source, _locale_t Locale);
unsigned __int8 *__cdecl mbschr(const unsigned __int8 *Str, unsigned int Ch);
unsigned __int8 *__cdecl mbschr_l(const unsigned __int8 *Str, unsigned int Ch, _locale_t Locale);
unsigned __int8 *__cdecl mbscpy(unsigned __int8 *Dest, const unsigned __int8 *Source);
unsigned __int8 *__cdecl mbscpy_l(unsigned __int8 *Dest, const unsigned __int8 *Source, _locale_t Locale);
unsigned __int8 *__cdecl mbsdec(const unsigned __int8 *Start, const unsigned __int8 *Pos);
unsigned __int8 *__cdecl mbsdec_l(const unsigned __int8 *Start, const unsigned __int8 *Pos, _locale_t Locale);
unsigned __int8 *__cdecl mbsdup(const unsigned __int8 *Str);
unsigned __int8 *__cdecl mbsinc(const unsigned __int8 *Ptr);
unsigned __int8 *__cdecl mbsinc_l(const unsigned __int8 *Ptr, _locale_t Locale);
unsigned __int8 *__cdecl mbslwr(unsigned __int8 *String);
unsigned __int8 *__cdecl mbslwr_l(unsigned __int8 *String, _locale_t Locale);
unsigned __int8 *__cdecl mbsnbcat(unsigned __int8 *, const unsigned __int8 *, size_t);
unsigned __int8 *__cdecl mbsnbcat_l(unsigned __int8 *Dest, const unsigned __int8 *Source, size_t Count, _locale_t Locale);
unsigned __int8 *__cdecl mbsnbcpy(unsigned __int8 *, const unsigned __int8 *, size_t Count);
unsigned __int8 *__cdecl mbsnbcpy_l(unsigned __int8 *Dest, const unsigned __int8 *Source, size_t Count, _locale_t Locale);
unsigned __int8 *__cdecl mbsnbset(unsigned __int8 *, unsigned int, size_t MaxCount);
unsigned __int8 *__cdecl mbsnbset_l(unsigned __int8 *String, unsigned int Val, size_t MaxCount, _locale_t Locale);
unsigned __int8 *__cdecl mbsncat(unsigned __int8 *, const unsigned __int8 *, size_t);
unsigned __int8 *__cdecl mbsncat_l(unsigned __int8 *Dest, const unsigned __int8 *Source, size_t Count, _locale_t Locale);
unsigned __int8 *__cdecl mbsncpy(unsigned __int8 *, const unsigned __int8 *, size_t Count);
unsigned __int8 *__cdecl mbsncpy_l(unsigned __int8 *Dest, const unsigned __int8 *Source, size_t Count, _locale_t Locale);
unsigned __int8 *__cdecl mbsninc(const unsigned __int8 *Str, size_t Count);
unsigned __int8 *__cdecl mbsninc_l(const unsigned __int8 *Str, size_t Count, _locale_t Locale);
unsigned __int8 *__cdecl mbsnset(unsigned __int8 *Dst, unsigned int Val, size_t MaxCount);
unsigned __int8 *__cdecl mbsnset_l(unsigned __int8 *String, unsigned int Val, size_t MaxCount, _locale_t Locale);
unsigned __int8 *__cdecl mbspbrk(const unsigned __int8 *Str, const unsigned __int8 *Control);
unsigned __int8 *__cdecl mbspbrk_l(const unsigned __int8 *Str, const unsigned __int8 *Control, _locale_t Locale);
unsigned __int8 *__cdecl mbsrchr(const unsigned __int8 *Str, unsigned int Ch);
unsigned __int8 *__cdecl mbsrchr_l(const unsigned __int8 *Str, unsigned int Ch, _locale_t Locale);
unsigned __int8 *__cdecl mbsrev(unsigned __int8 *Str);
unsigned __int8 *__cdecl mbsrev_l(unsigned __int8 *Str, _locale_t Locale);
unsigned __int8 *__cdecl mbsset(unsigned __int8 *Str, unsigned int Val);
unsigned __int8 *__cdecl mbsset_l(unsigned __int8 *String, unsigned int Val, _locale_t Locale);
unsigned __int8 *__cdecl mbsspnp(const unsigned __int8 *Str1, const unsigned __int8 *Str2);
unsigned __int8 *__cdecl mbsspnp_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, _locale_t Locale);
unsigned __int8 *__cdecl mbsstr(const unsigned __int8 *Str, const unsigned __int8 *Substr);
unsigned __int8 *__cdecl mbsstr_l(const unsigned __int8 *Str, const unsigned __int8 *Substr, _locale_t Locale);
unsigned __int8 *__cdecl mbstok(unsigned __int8 *Str, const unsigned __int8 *Delim);
unsigned __int8 *__cdecl mbstok_l(unsigned __int8 *Str, const unsigned __int8 *Delim, _locale_t Locale);
unsigned __int8 *__cdecl mbstok_s(unsigned __int8 *Str, const unsigned __int8 *Delim, unsigned __int8 **Context);
unsigned __int8 *__cdecl mbstok_s_l(unsigned __int8 *Str, const unsigned __int8 *Delim, unsigned __int8 **Context, _locale_t Locale);
unsigned __int8 *__cdecl mbsupr(unsigned __int8 *String);
unsigned __int8 *__cdecl mbsupr_l(unsigned __int8 *String, _locale_t Locale);
unsigned __int8 *__stdcall NdrByteCountPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrByteCountPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrComplexArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrComplexArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrComplexStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrComplexStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrConformantArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrConformantArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrConformantStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrConformantStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrConformantVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrConformantVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrConformantVaryingStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrConformantVaryingStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrCsArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrCsArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrCsTagMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrCsTagUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrFixedArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrFixedArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrGetBuffer(PMIDL_STUB_MESSAGE pStubMsg, unsigned int BufferLength, RPC_BINDING_HANDLE Handle);
unsigned __int8 *__stdcall NdrInterfacePointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrInterfacePointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrNonConformantStringMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrNonConformantStringUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrNonEncapsulatedUnionMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrNonEncapsulatedUnionUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrNsGetBuffer(PMIDL_STUB_MESSAGE pStubMsg, unsigned int BufferLength, RPC_BINDING_HANDLE Handle);
unsigned __int8 *__stdcall NdrNsSendReceive(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pBufferEnd, RPC_BINDING_HANDLE *pAutoHandle);
unsigned __int8 *__stdcall NdrPointerMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrPointerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrRangeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrSendReceive(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pBufferEnd);
unsigned __int8 *__stdcall NdrServerInitialize(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor);
unsigned __int8 *__stdcall NdrServerInitializeNew(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor);
unsigned __int8 *__stdcall NdrServerInitializeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, PRPC_MESSAGE pRpcMsg);
unsigned __int8 *__stdcall NdrSimpleStructMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrSimpleStructUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrUserMarshalMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrUserMarshalSimpleTypeConvert(unsigned int *pFlags, unsigned __int8 *pBuffer, unsigned __int8 FormatChar);
unsigned __int8 *__stdcall NdrUserMarshalUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrVaryingArrayMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrVaryingArrayUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 *__stdcall NdrXmitOrRepAsMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
unsigned __int8 *__stdcall NdrXmitOrRepAsUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 **ppMemory, PFORMAT_STRING pFormat, unsigned __int8 fMustAlloc);
unsigned __int8 __cdecl rotl8(unsigned __int8 Value, unsigned __int8 Shift);
unsigned __int8 __cdecl rotr8(unsigned __int8 Value, unsigned __int8 Shift);
unsigned __int8 __stdcall _lwpins32(unsigned int, unsigned int, unsigned int);
unsigned __int8 __stdcall _lwpins64(unsigned __int64, unsigned int, unsigned int);
unsigned int *__cdecl _doserrno();
unsigned int __cdecl byteswap_ulong(unsigned int Long);
unsigned int __cdecl clearfp();
unsigned int __cdecl control87(unsigned int NewValue, unsigned int Mask);
unsigned int __cdecl controlfp(unsigned int NewValue, unsigned int Mask);
unsigned int __cdecl exception_code();
unsigned int __cdecl get_output_format();
unsigned int __cdecl getdiskfree(unsigned int Drive, struct _diskfree_t *DiskFree);
unsigned int __cdecl getdrives();
unsigned int __cdecl getsystime(struct tm *Tm);
unsigned int __cdecl inpd(unsigned __int16);
unsigned int __cdecl lrotl(unsigned int Val, int Shift);
unsigned int __cdecl lrotr(unsigned int Val, int Shift);
unsigned int __cdecl mbbtombc(unsigned int Ch);
unsigned int __cdecl mbbtombc_l(unsigned int Ch, _locale_t Locale);
unsigned int __cdecl mbcjistojms(unsigned int Ch);
unsigned int __cdecl mbcjistojms_l(unsigned int Ch, _locale_t Locale);
unsigned int __cdecl mbcjmstojis(unsigned int Ch);
unsigned int __cdecl mbcjmstojis_l(unsigned int Ch, _locale_t Locale);
unsigned int __cdecl mbctohira(unsigned int Ch);
unsigned int __cdecl mbctohira_l(unsigned int Ch, _locale_t Locale);
unsigned int __cdecl mbctokata(unsigned int Ch);
unsigned int __cdecl mbctokata_l(unsigned int Ch, _locale_t Locale);
unsigned int __cdecl mbctolower(unsigned int Ch);
unsigned int __cdecl mbctolower_l(unsigned int Ch, _locale_t Locale);
unsigned int __cdecl mbctombb(unsigned int Ch);
unsigned int __cdecl mbctombb_l(unsigned int Ch, _locale_t Locale);
unsigned int __cdecl mbctoupper(unsigned int Ch);
unsigned int __cdecl mbctoupper_l(unsigned int Ch, _locale_t Locale);
unsigned int __cdecl mbsnextc(const unsigned __int8 *Str);
unsigned int __cdecl mbsnextc_l(const unsigned __int8 *Str, _locale_t Locale);
unsigned int __cdecl outpd(unsigned __int16, unsigned int);
unsigned int __cdecl readfsbase_u32();
unsigned int __cdecl readgsbase_u32();
unsigned int __cdecl rotl(unsigned int Value, int Shift);
unsigned int __cdecl rotr(unsigned int Value, int Shift);
unsigned int __cdecl set_abort_behavior(unsigned int Flags, unsigned int Mask);
unsigned int __cdecl set_malloc_crt_max_wait(unsigned int NewValue);
unsigned int __cdecl set_output_format(unsigned int Format);
unsigned int __cdecl setsystime(struct tm *Tm, unsigned int MilliSec);
unsigned int __cdecl statusfp();
unsigned int __cdecl strnextc(const char *Cpc);
unsigned int __cdecl strtoul(const char *Str, char **EndPtr, int Radix);
unsigned int __cdecl strtoul_l(const char *Str, char **EndPtr, int Radix, _locale_t Locale);
unsigned int __cdecl wcstoul(const wchar_t *Str, wchar_t **EndPtr, int Radix);
unsigned int __cdecl wcstoul_l(const wchar_t *Str, wchar_t **EndPtr, int Radix, _locale_t Locale);
unsigned int __stdcall HandleToULong(const void *h);
unsigned int __stdcall I_RpcFreeSystemHandleCollection(void *CallObj, unsigned int FreeFlags);
unsigned int __stdcall I_RpcWindowProc(void *hWnd, unsigned int Message, unsigned int wParam, unsigned int lParam);
unsigned int __stdcall NdrComplexArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrComplexStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrConformantArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrConformantStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrConformantVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrConformantVaryingStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrContextHandleMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrCsArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrCsTagMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrFixedArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrInterfacePointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrNonConformantStringMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrNonEncapsulatedUnionMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrPointerMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrSimpleStructMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrUserMarshalMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrVaryingArrayMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall NdrXmitOrRepAsMemorySize(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
unsigned int __stdcall PtrToUint(const void *p);
unsigned int __stdcall PtrToUlong(const void *p);
unsigned int __stdcall andn_u32(unsigned int, unsigned int);
unsigned int __stdcall bextr_u32(unsigned int src, unsigned int start, unsigned int len);
unsigned int __stdcall bextri_u32(unsigned int, unsigned int);
unsigned int __stdcall blcfill_u32(unsigned int);
unsigned int __stdcall blci_u32(unsigned int);
unsigned int __stdcall blcic_u32(unsigned int);
unsigned int __stdcall blcmsk_u32(unsigned int);
unsigned int __stdcall blcs_u32(unsigned int);
unsigned int __stdcall blsfill_u32(unsigned int);
unsigned int __stdcall blsi_u32(unsigned int);
unsigned int __stdcall blsic_u32(unsigned int);
unsigned int __stdcall blsmsk_u32(unsigned int);
unsigned int __stdcall blsr_u32(unsigned int);
unsigned int __stdcall bzhi_u32(unsigned int, unsigned int);
unsigned int __stdcall lzcnt_u32(unsigned int);
unsigned int __stdcall mm_crc32_u16(unsigned int crc, unsigned __int16 v);
unsigned int __stdcall mm_crc32_u32(unsigned int crc, unsigned int v);
unsigned int __stdcall mm_crc32_u8(unsigned int crc, unsigned __int8 v);
unsigned int __stdcall mulx_u32(unsigned int, unsigned int, unsigned int *);
unsigned int __stdcall pdep_u32(unsigned int, unsigned int);
unsigned int __stdcall pext_u32(unsigned int, unsigned int);
unsigned int __stdcall rorx_u32(unsigned int, const unsigned __int8);
unsigned int __stdcall shlx_u32(unsigned int, unsigned int);
unsigned int __stdcall shrx_u32(unsigned int, unsigned int);
unsigned int __stdcall t1mskc_u32(unsigned int);
unsigned int __stdcall tzcnt_u32(unsigned int);
unsigned int __stdcall tzmsk_u32(unsigned int);
unsigned int mm_getcsr(void);
void (__cdecl *__cdecl signal(int SigNum, void (__cdecl *Func)(int)))(int);
void *__cdecl aligned_malloc(size_t Size, size_t Alignment);
void *__cdecl aligned_offset_malloc(size_t Size, size_t Alignment, size_t Offset);
void *__cdecl aligned_offset_realloc(void *Memory, size_t NewSize, size_t Alignment, size_t Offset);
void *__cdecl aligned_offset_recalloc(void *Memory, size_t Count, size_t Size, size_t Alignment, size_t Offset);
void *__cdecl aligned_realloc(void *Memory, size_t NewSize, size_t Alignment);
void *__cdecl aligned_recalloc(void *Memory, size_t Count, size_t Size, size_t Alignment);
void *__cdecl alloca(size_t Size);
void *__cdecl bsearch(const void *Key, const void *Base, size_t NumOfElements, size_t SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const void *));
void *__cdecl bsearch_s(const void *Key, const void *Base, rsize_t NumOfElements, rsize_t SizeOfElements, int (__cdecl *PtFuncCompare)(void *, const void *, const void *), void *Context);
void *__cdecl calloc(size_t Count, size_t Size);
void *__cdecl exception_info();
void *__cdecl expand(void *Memory, size_t NewSize);
void *__cdecl lfind(const void *Key, const void *Base, unsigned int *NumOfElements, unsigned int SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const void *));
void *__cdecl lfind(const void *Key, const void *Base, unsigned int *NumOfElements, unsigned int SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const void *));
void *__cdecl lfind_s(const void *Key, const void *Base, unsigned int *NumOfElements, size_t SizeOfElements, int (__cdecl *PtFuncCompare)(void *, const void *, const void *), void *Context);
void *__cdecl lsearch(const void *Key, void *Base, unsigned int *NumOfElements, unsigned int SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const void *));
void *__cdecl lsearch(const void *Key, void *Base, unsigned int *NumOfElements, unsigned int SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const void *));
void *__cdecl lsearch_s(const void *Key, void *Base, unsigned int *NumOfElements, size_t SizeOfElements, int (__cdecl *PtFuncCompare)(void *, const void *, const void *), void *Context);
void *__cdecl malloc(size_t Size);
void *__cdecl memccpy(void *, const void *Src, int Val, size_t MaxCount);
void *__cdecl memccpy(void *, const void *Src, int Val, size_t Size);
void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount);
void *__cdecl memcpy(void *, const void *Src, size_t MaxCount);
void *__cdecl memmove(void *, const void *Src, size_t Size);
void *__cdecl memset(void *, int Val, size_t Size);
void *__cdecl realloc(void *Memory, size_t NewSize);
void *__cdecl recalloc(void *Memory, size_t Count, size_t Size);
void *__stdcall Handle32ToHandle(const void *h);
void *__stdcall I_RpcAllocate(unsigned int Size);
void *__stdcall I_RpcDefaultAllocate(handle_t bh, size_t size, void *(__stdcall *RealAlloc)(size_t));
void *__stdcall I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle);
void *__stdcall IntToPtr(const int i);
void *__stdcall InterlockedCompareExchangePointer_HLEAcquire(void *volatile *, void *, void *);
void *__stdcall InterlockedCompareExchangePointer_HLERelease(void *volatile *, void *, void *);
void *__stdcall LongToHandle(const int h);
void *__stdcall LongToPtr(const int l);
void *__stdcall MIDL_user_allocate(size_t size);
void *__stdcall MarkAllocaS(void *Ptr, unsigned int Marker);
void *__stdcall NdrAllocate(PMIDL_STUB_MESSAGE pStubMsg, size_t Len);
void *__stdcall NdrOleAllocate(size_t Size);
void *__stdcall NdrRpcSmClientAllocate(size_t Size);
void *__stdcall NdrRpcSsDefaultAllocate(size_t Size);
void *__stdcall NetRingBufferGetElementAtIndex(NET_RING_BUFFER *RingBuffer, UINT32 Index);
void *__stdcall Ptr32ToPtr(const void *p);
void *__stdcall PtrToPtr32(const void *p);
void *__stdcall RpcSmAllocate(size_t Size, RPC_STATUS *pStatus);
void *__stdcall RpcSsAllocate(size_t Size);
void *__stdcall UIntToPtr(const unsigned int ui);
void *__stdcall ULongToHandle(const unsigned int h);
void *__stdcall ULongToPtr(const unsigned int ul);
void *__stdcall _slwpcb();
void AtaPortDebugPrint(ULONG DebugPrintLevel, PCCHAR DebugMessage, ...);
void AtaPortNotification(IDE_NOTIFICATION_TYPE NotificationType, PVOID ChannelExtension, ...);
void AtaPortTraceNotification(ULONG NotificationType, PVOID HwDeviceExtension, ...);
void ChangerClassDebugPrint(ULONG DebugPrintLevel, PCCHAR DebugMessage, ...);
void ClassDebugPrint(CLASS_DEBUG_LEVEL DebugPrintLevel, PCCHAR DebugMessage, ...);
void ClfsFinalize(void);
void DlDebugPrint(DEBUG_LEVEL DebugPrintLevel, PSTR DebugMessage, ...);
void DsmNotification(PVOID MPIOContext, DSM_NOTIFICATION_TYPE NotificationType, ...);
void ExAdjustLookasideDepth(void);
void FsRtlIncrementCcFastMdlReadWait(void);
void FsRtlIncrementCcFastReadNoWait(void);
void FsRtlIncrementCcFastReadNotPossible(void);
void FsRtlIncrementCcFastReadResourceMiss(void);
void FsRtlIncrementCcFastReadWait(void);
void KeDetachProcess(void);
void KeEnterCriticalRegion(void);
void KeEnterGuardedRegion(void);
void KeFlushQueuedDpcs(void);
void KeFlushWriteBuffer(void);
void KeLeaveCriticalRegion(void);
void KeLeaveGuardedRegion(void);
void KeMemoryBarrier(void);
void KeRevertToUserAffinityThread(void);
void NdisDeregisterTdiCallBack(void);
void NdisWriteErrorLogEntry(NDIS_HANDLE NdisAdapterHandle, ULONG ErrorCode, ULONG NumberOfErrorValues, ...);
void ORShutdown(void);
void PsRevertToSelf(void);
void ReadWriteBarrier(void);
void RxCheckFcbStructuresForAlignment(void);
void RxLog(PCSTR format, ...);
void RxPauseLog(void);
void RxResumeLog(void);
void RxUninitializeLog(void);
void ScsiDebugPrint(ULONG DebugPrintLevel, PCCHAR DebugMessage, ...);
void ScsiPortNotification(SCSI_NOTIFICATION_TYPE NotificationType, PVOID HwDeviceExtension, ...);
void StreamClassDebugPrint(STREAM_DEBUG_LEVEL DebugPrintLevel, PCSTR DebugMessage, ...);
void StreamClassDeviceNotification(STREAM_MINIDRIVER_DEVICE_NOTIFICATION_TYPE NotificationType, PVOID HwDeviceExtension, ...);
void StreamClassStreamNotification(STREAM_MINIDRIVER_STREAM_NOTIFICATION_TYPE NotificationType, PHW_STREAM_OBJECT StreamObject, ...);
void TapeDebugPrint(ULONG DebugPrintLevel, PCCHAR DebugMessage, ...);
void TdiInitialize(void);
void VideoPortDebugPrint(VIDEO_DEBUG_LEVEL DebugPrintLevel, PSTR DebugMessage, ...);
void WdmlibProcgrpInitialize(void);
void __cdecl Atexit(_ATEXIT_CALLBACK);
void __cdecl HBA_CloseAdapter(HBA_HANDLE handle);
void __cdecl HBA_RefreshAdapterConfiguration();
void __cdecl HBA_RefreshInformation(HBA_HANDLE Handle);
void __cdecl HBA_ResetStatistics(HBA_HANDLE Handle, HBA_UINT32 PortIndex);
void __cdecl RTC_InitBase();
void __cdecl RTC_Initialize();
void __cdecl RTC_Shutdown();
void __cdecl RTC_Terminate();
void __cdecl RTC_UninitUse(const char *Varname);
void __cdecl __noreturn _report_gsfailure(uintptr_t StackCookie);
void __cdecl __noreturn abort();
void __cdecl __noreturn exit(int Code);
void __cdecl __noreturn exit(int Code);
void __cdecl __noreturn longjmp(jmp_buf Buf, int Value);
void __cdecl _free_locale(_locale_t Locale);
void __cdecl _security_check_cookie(uintptr_t StackCookie);
void __cdecl _security_init_cookie();
void __cdecl aligned_free(void *Memory);
void __cdecl assert(const char *Message, const char *File, unsigned int Line);
void __cdecl beep(unsigned int Frequency, unsigned int Duration);
void __cdecl c_exit();
void __cdecl cexit();
void __cdecl clearerr(FILE *File);
void __cdecl fpreset();
void __cdecl fpreset();
void __cdecl free(void *Memory);
void __cdecl free_locale(_locale_t Locale);
void __cdecl freea(void *Memory);
void __cdecl ftime(struct _timeb *Time);
void __cdecl ftime32(struct __timeb32 *Time);
void __cdecl ftime64(struct __timeb64 *Time);
void __cdecl fxrstor(const void *mem);
void __cdecl fxrstor64(const void *mem);
void __cdecl fxsave(void *mem);
void __cdecl fxsave64(void *mem);
void __cdecl invpcid(unsigned int type, void *descriptor);
void __cdecl makepath(char *Path, const char *Drive, const char *Dir, const char *Filename, const char *Ext);
void __cdecl mbccpy(unsigned __int8 *Dst, const unsigned __int8 *Src);
void __cdecl mbccpy_l(unsigned __int8 *Dst, const unsigned __int8 *Src, _locale_t Locale);
void __cdecl mm256_maskstore_epi32(int *A, __m256i Mask, __m256i B);
void __cdecl mm256_maskstore_epi64(__int64 *A, __m256i Mask, __m256i B);
void __cdecl mm256_maskstore_pd(double *a, __m256i mask, __m256d b);
void __cdecl mm256_maskstore_ps(float *a, __m256i mask, __m256 b);
void __cdecl mm256_store_pd(double *a, __m256d b);
void __cdecl mm256_store_ps(float *a, __m256 b);
void __cdecl mm256_store_si256(__m256i *a, __m256i b);
void __cdecl mm256_storeu_pd(double *a, __m256d b);
void __cdecl mm256_storeu_ps(float *a, __m256 b);
void __cdecl mm256_storeu_si256(__m256i *a, __m256i b);
void __cdecl mm256_stream_pd(double *p, __m256d a);
void __cdecl mm256_stream_ps(float *p, __m256 a);
void __cdecl mm256_stream_si256(__m256i *p, __m256i a);
void __cdecl mm256_zeroall();
void __cdecl mm256_zeroupper();
void __cdecl mm_maskstore_epi32(int *A, __m128i Mask, __m128i B);
void __cdecl mm_maskstore_epi64(__int64 *A, __m128i Mask, __m128i B);
void __cdecl mm_maskstore_pd(double *a, __m128i mask, __m128d b);
void __cdecl mm_maskstore_ps(float *a, __m128i mask, __m128 b);
void __cdecl perror(const char *ErrMsg);
void __cdecl qsort(void *Base, size_t NumOfElements, size_t SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const void *));
void __cdecl qsort_s(void *Base, rsize_t NumOfElements, rsize_t SizeOfElements, int (__cdecl *PtFuncCompare)(void *, const void *, const void *), void *Context);
void __cdecl rewind(FILE *File);
void __cdecl searchenv(const char *Filename, const char *EnvVar, char *ResultPath);
void __cdecl set_controlfp(unsigned int NewValue, unsigned int Mask);
void __cdecl setbuf(FILE *File, char *Buffer);
void __cdecl seterrormode(int Mode);
void __cdecl sleep(unsigned int Duration);
void __cdecl splitpath(const char *FullPath, char *Drive, char *Dir, char *Filename, char *Ext);
void __cdecl srand(unsigned int Seed);
void __cdecl swab(char *Buf1, char *Buf2, int SizeInBytes);
void __cdecl swab(char *Buf1, char *Buf2, int SizeInBytes);
void __cdecl tccpy(char *pc1, const char *cpc2);
void __cdecl tccpy_l(char *Pc1, const char *Cpc2, _locale_t Locale);
void __cdecl tzset();
void __cdecl tzset();
void __cdecl unlock_fhandle(int Filehandle);
void __cdecl wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line);
void __cdecl wmakepath(wchar_t *ResultPath, const wchar_t *Drive, const wchar_t *Dir, const wchar_t *Filename, const wchar_t *Ext);
void __cdecl wperror(const wchar_t *ErrMsg);
void __cdecl writefsbase_u32(unsigned int);
void __cdecl writefsbase_u64(unsigned __int64);
void __cdecl writegsbase_u32(unsigned int);
void __cdecl writegsbase_u64(unsigned __int64);
void __cdecl wsearchenv(const wchar_t *Filename, const wchar_t *EnvVar, wchar_t *ResultPath);
void __cdecl wsplitpath(const wchar_t *FullPath, wchar_t *Drive, wchar_t *Dir, wchar_t *Filename, wchar_t *Ext);
void __cdecl xrstor(const void *mem, unsigned __int64 restore_mask);
void __cdecl xrstor64(const void *mem, unsigned __int64 restore_mask);
void __cdecl xsave(void *mem, unsigned __int64 save_mask);
void __cdecl xsave64(void *mem, unsigned __int64 save_mask);
void __cdecl xsaveopt(void *mem, unsigned __int64 save_mask);
void __cdecl xsaveopt64(void *mem, unsigned __int64 save_mask);
void __cdecl xsetbv(unsigned int ext_ctrl_reg, unsigned __int64 val);
void __fastcall RTC_AllocaHelper(_RTC_ALLOCA_NODE *PAllocaBase, size_t CbSize, _RTC_ALLOCA_NODE **PAllocaInfoList);
void __fastcall RTC_CheckStackVars(void *Esp, _RTC_framedesc *Fd);
void __fastcall RTC_CheckStackVars2(void *Esp, _RTC_framedesc *Fd, _RTC_ALLOCA_NODE *AllocaList);
void __fastcall guard_check_icall(uintptr_t Target);
void __noreturn ExRaiseAccessViolation(void);
void __noreturn ExRaiseDatatypeMisalignment(void);
void __stdcall AppendTailList(PLIST_ENTRY ListHead, PLIST_ENTRY ListToAppend);
void __stdcall AtaPortBusChangeDetected(PVOID ChannelExtension);
void __stdcall AtaPortCompleteAllActiveRequests(PVOID ChannelExtension, UCHAR Target, UCHAR Lun, UCHAR IrbStatus);
void __stdcall AtaPortCompleteRequest(PVOID ChannelExtension, PIDE_REQUEST_BLOCK Irb);
void __stdcall AtaPortCopyMemory(PVOID WriteBuffer, PVOID ReadBuffer, ULONG Length);
void __stdcall AtaPortDebugBreak(PVOID ChannelExtension);
void __stdcall AtaPortDeviceArrived(PVOID ChannelExtension, UCHAR TargetId);
void __stdcall AtaPortDeviceBusy(PVOID ChannelExtension, UCHAR TargetId, UCHAR Lun, ULONG BusyTimeout);
void __stdcall AtaPortDeviceReady(PVOID ChannelExtension, UCHAR TargetId, UCHAR Lun);
void __stdcall AtaPortDeviceRemoved(PVOID ChannelExtension, UCHAR TargetId);
void __stdcall AtaPortDeviceStateChange(PVOID ChannelExtension, UCHAR TargetId, UCHAR Lun, ULONG BusyTimeout);
void __stdcall AtaPortLogError(PVOID ChannelExtension, PIDE_ERROR_LOG_ENTRY ErrorLogEntry);
void __stdcall AtaPortMoveMemory(PVOID WriteBuffer, PVOID ReadBuffer, ULONG Length);
void __stdcall AtaPortQuerySystemTime(PLARGE_INTEGER CurrentTime);
void __stdcall AtaPortReadPortBufferUchar(PUCHAR Port, PUCHAR Buffer, ULONG Count);
void __stdcall AtaPortReadPortBufferUlong(PULONG Port, PULONG Buffer, ULONG Count);
void __stdcall AtaPortReadPortBufferUshort(PUSHORT Port, PUSHORT Buffer, ULONG Count);
void __stdcall AtaPortReadRegisterBufferUchar(PUCHAR Register, PUCHAR Buffer, ULONG Count);
void __stdcall AtaPortReadRegisterBufferUlong(PULONG Register, PULONG Buffer, ULONG Count);
void __stdcall AtaPortReadRegisterBufferUshort(PUSHORT Register, PUSHORT Buffer, ULONG Count);
void __stdcall AtaPortRegistryFreeBuffer(PVOID ChannelExtension, PVOID Buffer);
void __stdcall AtaPortReleaseQueueTag(PVOID DeviceExtension, UCHAR TargetId, UCHAR Lun, UCHAR QueueTag);
void __stdcall AtaPortReleaseRequestSenseIrb(PVOID ChannelExtension, PIDE_REQUEST_BLOCK Irb);
void __stdcall AtaPortRequestPowerStateChange(PVOID ChannelExtension, UCHAR TargetId, UCHAR Lun, IDE_POWER_STATE DesiredPowerState);
void __stdcall AtaPortStallExecution(ULONG Delay);
void __stdcall AtaPortWritePortBufferUchar(PUCHAR Port, PUCHAR Buffer, ULONG Count);
void __stdcall AtaPortWritePortBufferUlong(PULONG Port, PULONG Buffer, ULONG Count);
void __stdcall AtaPortWritePortBufferUshort(PUSHORT Port, PUSHORT Buffer, ULONG Count);
void __stdcall AtaPortWritePortUchar(PUCHAR Port, UCHAR Value);
void __stdcall AtaPortWritePortUlong(PULONG Port, ULONG Value);
void __stdcall AtaPortWritePortUshort(PUSHORT Port, USHORT Value);
void __stdcall AtaPortWriteRegisterBufferUchar(PUCHAR Register, PUCHAR Buffer, ULONG Count);
void __stdcall AtaPortWriteRegisterBufferUlong(PULONG Register, PULONG Buffer, ULONG Count);
void __stdcall AtaPortWriteRegisterBufferUshort(PUSHORT Register, PUSHORT Buffer, ULONG Count);
void __stdcall AtaPortWriteRegisterUchar(PUCHAR Register, UCHAR Value);
void __stdcall AtaPortWriteRegisterUlong(PULONG Register, ULONG Value);
void __stdcall AtaPortWriteRegisterUshort(PUSHORT Register, USHORT Value);
void __stdcall BCryptFreeBuffer(PVOID pvBuffer);
void __stdcall BTHHFP_AUDIO_DEVICE_CAPABILTIES_INIT(PBTHHFP_AUDIO_DEVICE_CAPABILTIES caps);
void __stdcall COMPOSITE_DEVICE_CAPABILITIES_INIT(PCOMPOSITE_DEVICE_CAPABILITIES CapabilityFlags);
void __stdcall CUSTOM_SYSTEM_EVENT_TRIGGER_INIT(PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG Config, PCWSTR TriggerId);
void __stdcall CcCoherencyFlushAndPurgeCache(PSECTION_OBJECT_POINTERS SectionObjectPointer, PLARGE_INTEGER FileOffset, ULONG Length, PIO_STATUS_BLOCK IoStatus, ULONG Flags);
void __stdcall CcDeferWrite(PFILE_OBJECT FileObject, PCC_POST_DEFERRED_WRITE PostRoutine, PVOID Context1, PVOID Context2, ULONG BytesToWrite, BOOLEAN Retrying);
void __stdcall CcFastCopyRead(PFILE_OBJECT FileObject, ULONG FileOffset, ULONG Length, ULONG PageCount, PVOID Buffer, PIO_STATUS_BLOCK IoStatus);
void __stdcall CcFastCopyWrite(PFILE_OBJECT FileObject, ULONG FileOffset, ULONG Length, PVOID Buffer);
void __stdcall CcFlushCache(PSECTION_OBJECT_POINTERS SectionObjectPointer, PLARGE_INTEGER FileOffset, ULONG Length, PIO_STATUS_BLOCK IoStatus);
void __stdcall CcInitializeCacheMap(PFILE_OBJECT FileObject, PCC_FILE_SIZES FileSizes, BOOLEAN PinAccess, PCACHE_MANAGER_CALLBACKS Callbacks, PVOID LazyWriteContext);
void __stdcall CcInitializeCacheMapEx(PFILE_OBJECT FileObject, PCC_FILE_SIZES FileSizes, BOOLEAN PinAccess, PCACHE_MANAGER_CALLBACKS Callbacks, PVOID LazyWriteContext, ULONG Flags);
void __stdcall CcMdlRead(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, PMDL *MdlChain, PIO_STATUS_BLOCK IoStatus);
void __stdcall CcMdlReadComplete(PFILE_OBJECT FileObject, PMDL MdlChain);
void __stdcall CcMdlWriteAbort(PFILE_OBJECT FileObject, PMDL MdlChain);
void __stdcall CcMdlWriteComplete(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, PMDL MdlChain);
void __stdcall CcPrepareMdlWrite(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, PMDL *MdlChain, PIO_STATUS_BLOCK IoStatus);
void __stdcall CcRepinBcb(PVOID Bcb);
void __stdcall CcScheduleReadAhead(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length);
void __stdcall CcScheduleReadAheadEx(PFILE_OBJECT FileObject, PLARGE_INTEGER FileOffset, ULONG Length, PETHREAD IoIssuerThread);
void __stdcall CcSetAdditionalCacheAttributes(PFILE_OBJECT FileObject, BOOLEAN DisableReadAhead, BOOLEAN DisableWriteBehind);
void __stdcall CcSetAdditionalCacheAttributesEx(PFILE_OBJECT FileObject, ULONG Flags);
void __stdcall CcSetBcbOwnerPointer(PVOID Bcb, PVOID OwnerPointer);
void __stdcall CcSetDirtyPageThreshold(PFILE_OBJECT FileObject, ULONG DirtyPageThreshold);
void __stdcall CcSetDirtyPinnedData(PVOID BcbVoid, PLARGE_INTEGER Lsn);
void __stdcall CcSetFileSizes(PFILE_OBJECT FileObject, PCC_FILE_SIZES FileSizes);
void __stdcall CcSetLogHandleForFile(PFILE_OBJECT FileObject, PVOID LogHandle, PFLUSH_TO_LSN FlushToLsnRoutine);
void __stdcall CcSetParallelFlushFile(PFILE_OBJECT FileObject, BOOLEAN EnableParallelFlush);
void __stdcall CcSetReadAheadGranularity(PFILE_OBJECT FileObject, ULONG Granularity);
void __stdcall CcUnpinData(PVOID Bcb);
void __stdcall CcUnpinDataForThread(PVOID Bcb, ERESOURCE_THREAD ResourceThreadId);
void __stdcall CcUnpinRepinnedBcb(PVOID Bcb, BOOLEAN WriteThrough, PIO_STATUS_BLOCK IoStatus);
void __stdcall ChangerClassFreePool(PVOID PoolToFree);
void __stdcall ChangerError(PDEVICE_OBJECT DeviceObject, PSCSI_REQUEST_BLOCK Srb, NTSTATUS *Status, BOOLEAN *Retry);
void __stdcall ClassAcquireChildLock(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension);
void __stdcall ClassCheckMediaState(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension);
void __stdcall ClassCleanupMediaChangeDetection(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension);
void __stdcall ClassCompleteRequest(PDEVICE_OBJECT DeviceObject, PIRP Irp, CCHAR PriorityBoost);
void __stdcall ClassDeleteSrbLookasideList(PCOMMON_DEVICE_EXTENSION CommonExtension);
void __stdcall ClassDisableMediaChangeDetection(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension);
void __stdcall ClassEnableMediaChangeDetection(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension);
void __stdcall ClassGetDeviceParameter(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension, PWSTR SubkeyName, PWSTR ParameterName, PULONG ParameterValue);
void __stdcall ClassInitializeMediaChangeDetection(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension, PUCHAR EventPrefix);
void __stdcall ClassInitializeSrbLookasideList(PCOMMON_DEVICE_EXTENSION CommonExtension, ULONG NumberElements);
void __stdcall ClassInvalidateBusRelations(PDEVICE_OBJECT Fdo);
void __stdcall ClassMarkChildrenMissing(PFUNCTIONAL_DEVICE_EXTENSION Fdo);
void __stdcall ClassNotifyFailurePredicted(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension, PUCHAR Buffer, ULONG BufferSize, BOOLEAN LogError, ULONG UniqueErrorValue, UCHAR PathId, UCHAR TargetId, UCHAR Lun);
void __stdcall ClassReleaseChildLock(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension);
void __stdcall ClassReleaseQueue(PDEVICE_OBJECT DeviceObject);
void __stdcall ClassReleaseRemoveLock(PDEVICE_OBJECT DeviceObject, PVOID Tag);
void __stdcall ClassResetMediaChangeTimer(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension);
void __stdcall ClassScanForSpecial(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension, CLASSPNP_SCAN_FOR_SPECIAL_INFO DeviceList[], PCLASS_SCAN_FOR_SPECIAL_HANDLER Function);
void __stdcall ClassSendDeviceIoControlSynchronous(ULONG IoControlCode, PDEVICE_OBJECT TargetDeviceObject, PVOID Buffer, ULONG InputBufferLength, ULONG OutputBufferLength, BOOLEAN InternalDeviceIoControl, PIO_STATUS_BLOCK IoStatus);
void __stdcall ClassSendNotification(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension, const GUID *Guid, ULONG ExtraDataSize, PVOID ExtraData);
void __stdcall ClassSendStartUnit(PDEVICE_OBJECT DeviceObject);
void __stdcall ClassSetMediaChangeState(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension, MEDIA_CHANGE_DETECTION_STATE State, BOOLEAN Wait);
void __stdcall ClassSplitRequest(PDEVICE_OBJECT DeviceObject, PIRP Irp, ULONG MaximumBytes);
void __stdcall ClassUpdateInformationInRegistry(PDEVICE_OBJECT Fdo, PCHAR DeviceName, ULONG DeviceNumber, PINQUIRYDATA InquiryData, ULONG InquiryDataLength);
void __stdcall CmCallbackReleaseKeyObjectIDEx(PCUNICODE_STRING ObjectName);
void __stdcall CmGetCallbackVersion(PULONG Major, PULONG Minor);
void __stdcall DbgBreakPoint();
void __stdcall DbgBreakPointWithStatus(ULONG Status);
void __stdcall DeviceDsmInitializeInput(PDEVICE_DSM_DEFINITION Definition, PDEVICE_DSM_INPUT Input, ULONG InputLength, ULONG Flags, PVOID Parameters, ULONG ParameterBlockLength);
void __stdcall DeviceDsmInitializeOutput(PDEVICE_DSM_DEFINITION Definition, PDEVICE_DSM_OUTPUT Output, ULONG OutputLength, ULONG Flags);
void __stdcall DlClearEvent(PVOID DeviceHandle, PEVENT pEvent);
void __stdcall DlFreeDeviceBase(PVOID DeviceHandle, PVOID MappedAddress);
void __stdcall DlFreePool(PVOID DeviceHandle, PVOID Ptr);
void __stdcall DlLogError(PVOID DeviceHandle, PVIDEO_REQUEST_PACKET Vrp, VP_STATUS ErrorCode, ULONG UniqueId);
void __stdcall DlReleaseCommonBuffer(PVOID DeviceHandle, PVP_DMA_ADAPTER DlpDmaAdapter, ULONG Length, LARGE_INTEGER LogicalAddress, PVOID VirtualAddress, BOOLEAN CacheEnabled);
void __stdcall DlStopTimer(PVOID DeviceHandle);
void __stdcall DlUnlockBuffer(PVOID DeviceHandle, PVOID Mdl);
void __stdcall DsmCompleteRequest(PVOID MPIOContext, PVOID DsmId);
void __stdcall DsmSendDeviceIoControlSynchronous(ULONG IoControlCode, PDEVICE_OBJECT TargetDeviceObject, PVOID InputBuffer, PVOID OutputBuffer, ULONG InputBufferLength, ULONG OutputBufferLength, BOOLEAN InternalDeviceIoControl, PIO_STATUS_BLOCK IoStatus);
void __stdcall EntropyPoolTriggerReseedForIum(BOOLEAN fPerformCallbacks);
void __stdcall EventDataDescCreate(PEVENT_DATA_DESCRIPTOR EventDataDescriptor, const void *DataPtr, ULONG DataSize);
void __stdcall EventDescCreate(PEVENT_DESCRIPTOR EventDescriptor, USHORT Id, UCHAR Version, UCHAR Channel, UCHAR Level, USHORT Task, UCHAR Opcode, ULONGLONG Keyword);
void __stdcall EventDescZero(PEVENT_DESCRIPTOR EventDescriptor);
void __stdcall ExAcquireFastMutex(PFAST_MUTEX FastMutex);
void __stdcall ExAcquireFastMutexUnsafe(PFAST_MUTEX FastMutex);
void __stdcall ExAcquirePushLockExclusiveEx(PULONG_PTR PushLock, ULONG Flags);
void __stdcall ExAcquirePushLockSharedEx(PULONG_PTR PushLock, ULONG Flags);
void __stdcall ExAcquireSpinLockExclusiveAtDpcLevel(PEX_SPIN_LOCK SpinLock);
void __stdcall ExAcquireSpinLockSharedAtDpcLevel(PEX_SPIN_LOCK SpinLock);
void __stdcall ExCleanupRundownProtectionCacheAware(PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware);
void __stdcall ExConvertExclusiveToSharedLite(PERESOURCE Resource);
void __stdcall ExDeleteLookasideListEx(PLOOKASIDE_LIST_EX Lookaside);
void __stdcall ExDeleteNPagedLookasideList(PNPAGED_LOOKASIDE_LIST Lookaside);
void __stdcall ExDeletePagedLookasideList(PPAGED_LOOKASIDE_LIST Lookaside);
void __stdcall ExDisableResourceBoostLite(PERESOURCE Resource);
void __stdcall ExFlushLookasideListEx(PLOOKASIDE_LIST_EX Lookaside);
void __stdcall ExFreeCacheAwareRundownProtection(PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware);
void __stdcall ExFreePool(PVOID P);
void __stdcall ExFreePoolWithTag(PVOID P, ULONG Tag);
void __stdcall ExFreeToLookasideListEx(PLOOKASIDE_LIST_EX Lookaside, PVOID Entry);
void __stdcall ExFreeToNPagedLookasideList(PNPAGED_LOOKASIDE_LIST Lookaside, PVOID Entry);
void __stdcall ExFreeToPagedLookasideList(PPAGED_LOOKASIDE_LIST Lookaside, PVOID Entry);
void __stdcall ExInitializeDeleteTimerParameters(PEXT_DELETE_PARAMETERS Parameters);
void __stdcall ExInitializeDriverRuntime(ULONG RuntimeFlags);
void __stdcall ExInitializeFastMutex(PFAST_MUTEX FastMutex);
void __stdcall ExInitializeNPagedLookasideList(PNPAGED_LOOKASIDE_LIST Lookaside, PALLOCATE_FUNCTION Allocate, PFREE_FUNCTION Free, ULONG Flags, SIZE_T Size, ULONG Tag, USHORT Depth);
void __stdcall ExInitializePagedLookasideList(PPAGED_LOOKASIDE_LIST Lookaside, PALLOCATE_FUNCTION Allocate, PFREE_FUNCTION Free, ULONG Flags, SIZE_T Size, ULONG Tag, USHORT Depth);
void __stdcall ExInitializePushLock(PULONG_PTR PushLock);
void __stdcall ExInitializeRundownProtection(PEX_RUNDOWN_REF RunRef);
void __stdcall ExInitializeRundownProtectionCacheAware(PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware, SIZE_T RunRefSize);
void __stdcall ExInitializeRundownProtectionCacheAwareEx(PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware, ULONG Flags);
void __stdcall ExInitializeSetTimerParameters(PEXT_SET_PARAMETERS Parameters);
void __stdcall ExInitializeWorkItem(PWORK_QUEUE_ITEM Item, PWORKER_THREAD_ROUTINE Routine, PVOID Context);
void __stdcall ExLocalTimeToSystemTime(PLARGE_INTEGER LocalTime, PLARGE_INTEGER SystemTime);
void __stdcall ExNotifyCallback(PVOID CallbackObject, PVOID Argument1, PVOID Argument2);
void __stdcall ExQueryTimerResolution(PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);
void __stdcall ExQueueWorkItem(PWORK_QUEUE_ITEM WorkItem, WORK_QUEUE_TYPE QueueType);
void __stdcall ExReInitializeRundownProtection(PEX_RUNDOWN_REF RunRef);
void __stdcall ExReInitializeRundownProtectionCacheAware(PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware);
void __stdcall ExReleaseFastMutex(PFAST_MUTEX FastMutex);
void __stdcall ExReleaseFastMutexUnsafe(PFAST_MUTEX FastMutex);
void __stdcall ExReleasePushLockExclusiveEx(PULONG_PTR PushLock, ULONG Flags);
void __stdcall ExReleasePushLockSharedEx(PULONG_PTR PushLock, ULONG Flags);
void __stdcall ExReleaseResourceAndLeaveCriticalRegion(PERESOURCE Resource);
void __stdcall ExReleaseResourceForThreadLite(PERESOURCE Resource, ERESOURCE_THREAD ResourceThreadId);
void __stdcall ExReleaseResourceLite(PERESOURCE Resource);
void __stdcall ExReleaseRundownProtection(PEX_RUNDOWN_REF RunRef);
void __stdcall ExReleaseRundownProtectionCacheAware(PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware);
void __stdcall ExReleaseRundownProtectionCacheAwareEx(PEX_RUNDOWN_REF_CACHE_AWARE RunRef, ULONG Count);
void __stdcall ExReleaseRundownProtectionEx(PEX_RUNDOWN_REF RunRef, ULONG Count);
void __stdcall ExReleaseSpinLockExclusive(PEX_SPIN_LOCK SpinLock, KIRQL OldIrql);
void __stdcall ExReleaseSpinLockExclusiveFromDpcLevel(PEX_SPIN_LOCK SpinLock);
void __stdcall ExReleaseSpinLockShared(PEX_SPIN_LOCK SpinLock, KIRQL OldIrql);
void __stdcall ExReleaseSpinLockSharedFromDpcLevel(PEX_SPIN_LOCK SpinLock);
void __stdcall ExRundownCompleted(PEX_RUNDOWN_REF RunRef);
void __stdcall ExRundownCompletedCacheAware(PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware);
void __stdcall ExSetResourceOwnerPointer(PERESOURCE Resource, PVOID OwnerPointer);
void __stdcall ExSetResourceOwnerPointerEx(PERESOURCE Resource, PVOID OwnerPointer, ULONG Flags);
void __stdcall ExSystemTimeToLocalTime(PLARGE_INTEGER SystemTime, PLARGE_INTEGER LocalTime);
void __stdcall ExUnregisterCallback(PVOID CallbackRegistration);
void __stdcall ExWaitForRundownProtectionRelease(PEX_RUNDOWN_REF RunRef);
void __stdcall ExWaitForRundownProtectionReleaseCacheAware(PEX_RUNDOWN_REF_CACHE_AWARE RunRef);
void __stdcall FREE_PORT_ALLOCATED_SENSE_BUFFER(PFUNCTIONAL_DEVICE_EXTENSION FdoExtension, PSCSI_REQUEST_BLOCK Srb);
void __stdcall FltAcknowledgeEcp(PFLT_FILTER Filter, PVOID EcpContext);
void __stdcall FltAcquirePushLockExclusive(PULONG_PTR PushLock);
void __stdcall FltAcquirePushLockExclusiveEx(PULONG_PTR PushLock, ULONG Flags);
void __stdcall FltAcquirePushLockShared(PULONG_PTR PushLock);
void __stdcall FltAcquirePushLockSharedEx(PULONG_PTR PushLock, ULONG Flags);
void __stdcall FltAcquireResourceExclusive(PERESOURCE Resource);
void __stdcall FltAcquireResourceShared(PERESOURCE Resource);
void __stdcall FltCancelFileOpen(PFLT_INSTANCE Instance, PFILE_OBJECT FileObject);
void __stdcall FltCbdqDisable(PFLT_CALLBACK_DATA_QUEUE Cbdq);
void __stdcall FltCbdqEnable(PFLT_CALLBACK_DATA_QUEUE Cbdq);
void __stdcall FltClearCallbackDataDirty(PFLT_CALLBACK_DATA Data);
void __stdcall FltCloseClientPort(PFLT_FILTER Filter, PFLT_PORT *ClientPort);
void __stdcall FltCloseCommunicationPort(PFLT_PORT ServerPort);
void __stdcall FltCompletePendedPostOperation(PFLT_CALLBACK_DATA CallbackData);
void __stdcall FltCompletePendedPreOperation(PFLT_CALLBACK_DATA CallbackData, FLT_PREOP_CALLBACK_STATUS CallbackStatus, PVOID Context);
void __stdcall FltDeleteContext(PFLT_CONTEXT Context);
void __stdcall FltDeleteExtraCreateParameterLookasideList(PFLT_FILTER Filter, PVOID Lookaside, FSRTL_ECP_LOOKASIDE_FLAGS Flags);
void __stdcall FltDeletePushLock(PULONG_PTR PushLock);
void __stdcall FltFreeCallbackData(PFLT_CALLBACK_DATA CallbackData);
void __stdcall FltFreeDeferredIoWorkItem(PFLT_DEFERRED_IO_WORKITEM FltWorkItem);
void __stdcall FltFreeExtraCreateParameter(PFLT_FILTER Filter, PVOID EcpContext);
void __stdcall FltFreeExtraCreateParameterList(PFLT_FILTER Filter, PECP_LIST EcpList);
void __stdcall FltFreeFileLock(PFILE_LOCK FileLock);
void __stdcall FltFreeGenericWorkItem(PFLT_GENERIC_WORKITEM FltWorkItem);
void __stdcall FltFreeOpenReparseList(PFLT_FILTER Filter, PECP_LIST EcpList);
void __stdcall FltFreePoolAlignedWithTag(PFLT_INSTANCE Instance, PVOID Buffer, ULONG Tag);
void __stdcall FltFreeSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor);
void __stdcall FltGetContexts(PCFLT_RELATED_OBJECTS FltObjects, FLT_CONTEXT_TYPE DesiredContexts, PFLT_RELATED_CONTEXTS Contexts);
void __stdcall FltInitExtraCreateParameterLookasideList(PFLT_FILTER Filter, PVOID Lookaside, FSRTL_ECP_LOOKASIDE_FLAGS Flags, SIZE_T Size, ULONG Tag);
void __stdcall FltInitializeFileLock(PFILE_LOCK FileLock);
void __stdcall FltInitializeOplock(POPLOCK Oplock);
void __stdcall FltInitializePushLock(PULONG_PTR PushLock);
void __stdcall FltNotifyFilterChangeDirectory(PNOTIFY_SYNC NotifySync, PLIST_ENTRY NotifyList, PVOID FsContext, PSTRING FullDirectoryName, BOOLEAN WatchTree, BOOLEAN IgnoreBuffer, ULONG CompletionFilter, PFLT_CALLBACK_DATA NotifyCallbackData, PCHECK_FOR_TRAVERSE_ACCESS TraverseCallback, PSECURITY_SUBJECT_CONTEXT SubjectContext, PFILTER_REPORT_CHANGE FilterCallback);
void __stdcall FltObjectDereference(PVOID FltObject);
void __stdcall FltPerformSynchronousIo(PFLT_CALLBACK_DATA CallbackData);
void __stdcall FltPrepareToReuseEcp(PFLT_FILTER Filter, PVOID EcpContext);
void __stdcall FltReferenceContext(PFLT_CONTEXT Context);
void __stdcall FltReferenceFileNameInformation(PFLT_FILE_NAME_INFORMATION FileNameInformation);
void __stdcall FltReissueSynchronousIo(PFLT_INSTANCE InitiatingInstance, PFLT_CALLBACK_DATA CallbackData);
void __stdcall FltReleaseContext(PFLT_CONTEXT Context);
void __stdcall FltReleaseContexts(PFLT_RELATED_CONTEXTS Contexts);
void __stdcall FltReleaseContextsEx(SIZE_T ContextsSize, PFLT_RELATED_CONTEXTS_EX Contexts);
void __stdcall FltReleaseFileNameInformation(PFLT_FILE_NAME_INFORMATION FileNameInformation);
void __stdcall FltReleasePushLock(PULONG_PTR PushLock);
void __stdcall FltReleasePushLockEx(PULONG_PTR PushLock, ULONG Flags);
void __stdcall FltReleaseResource(PERESOURCE Resource);
void __stdcall FltRemoveOpenReparseEntry(PFLT_FILTER Filter, PFLT_CALLBACK_DATA Data, POPEN_REPARSE_LIST_ENTRY OpenReparseEntry);
void __stdcall FltRetainSwappedBufferMdlAddress(PFLT_CALLBACK_DATA CallbackData);
void __stdcall FltReuseCallbackData(PFLT_CALLBACK_DATA CallbackData);
void __stdcall FltSetCallbackDataDirty(PFLT_CALLBACK_DATA Data);
void __stdcall FltUninitializeFileLock(PFILE_LOCK FileLock);
void __stdcall FltUninitializeOplock(POPLOCK Oplock);
void __stdcall FltUnregisterFilter(PFLT_FILTER Filter);
void __stdcall FreeDnsSettings(DNS_SETTINGS *Settings);
void __stdcall FreeInterfaceDnsSettings(DNS_INTERFACE_SETTINGS *Settings);
void __stdcall FreeMibTable(PVOID Memory);
void __stdcall FsRtlAcknowledgeEcp(PVOID EcpContext);
void __stdcall FsRtlAcquireFileExclusive(PFILE_OBJECT FileObject);
void __stdcall FsRtlAddToTunnelCache(TUNNEL *Cache, ULONGLONG DirectoryKey, UNICODE_STRING *ShortName, UNICODE_STRING *LongName, BOOLEAN KeyByShortName, ULONG DataLength, void *Data);
void __stdcall FsRtlAddToTunnelCacheEx(TUNNEL *Cache, ULONGLONG DirectoryKey, UNICODE_STRING *ShortName, UNICODE_STRING *LongName, ULONG Flags, ULONG DataLength, void *Data);
void __stdcall FsRtlDeleteExtraCreateParameterLookasideList(PVOID Lookaside, FSRTL_ECP_LOOKASIDE_FLAGS Flags);
void __stdcall FsRtlDeleteKeyFromTunnelCache(TUNNEL *Cache, ULONGLONG DirectoryKey);
void __stdcall FsRtlDeleteTunnelCache(TUNNEL *Cache);
void __stdcall FsRtlDeregisterUncProvider(HANDLE Handle);
void __stdcall FsRtlDismountComplete(PDEVICE_OBJECT DeviceObject, NTSTATUS DismountStatus);
void __stdcall FsRtlDissectDbcs(ANSI_STRING Path, PANSI_STRING FirstName, PANSI_STRING RemainingName);
void __stdcall FsRtlDissectName(UNICODE_STRING Path, PUNICODE_STRING FirstName, PUNICODE_STRING RemainingName);
void __stdcall FsRtlFreeExtraCreateParameter(PVOID EcpContext);
void __stdcall FsRtlFreeExtraCreateParameterList(PECP_LIST EcpList);
void __stdcall FsRtlFreeFileLock(PFILE_LOCK FileLock);
void __stdcall FsRtlInitExtraCreateParameterLookasideList(PVOID Lookaside, FSRTL_ECP_LOOKASIDE_FLAGS Flags, SIZE_T Size, ULONG Tag);
void __stdcall FsRtlInitializeBaseMcb(PBASE_MCB Mcb, POOL_TYPE PoolType);
void __stdcall FsRtlInitializeExtraCreateParameter(PECP_HEADER Ecp, ULONG EcpFlags, PFSRTL_EXTRA_CREATE_PARAMETER_CLEANUP_CALLBACK CleanupCallback, ULONG TotalSize, LPCGUID EcpType, PVOID ListAllocatedFrom);
void __stdcall FsRtlInitializeFileLock(PFILE_LOCK FileLock, PCOMPLETE_LOCK_IRP_ROUTINE CompleteLockIrpRoutine, PUNLOCK_ROUTINE UnlockRoutine);
void __stdcall FsRtlInitializeLargeMcb(PLARGE_MCB Mcb, POOL_TYPE PoolType);
void __stdcall FsRtlInitializeMcb(PMCB Mcb, POOL_TYPE PoolType);
void __stdcall FsRtlInitializeOplock(POPLOCK Oplock);
void __stdcall FsRtlInitializeTunnelCache(TUNNEL *Cache);
void __stdcall FsRtlNotifyCleanup(PNOTIFY_SYNC NotifySync, PLIST_ENTRY NotifyList, PVOID FsContext);
void __stdcall FsRtlNotifyCleanupAll(PNOTIFY_SYNC NotifySync, PLIST_ENTRY NotifyList);
void __stdcall FsRtlNotifyFilterChangeDirectory(PNOTIFY_SYNC NotifySync, PLIST_ENTRY NotifyList, PVOID FsContext, PSTRING FullDirectoryName, BOOLEAN WatchTree, BOOLEAN IgnoreBuffer, ULONG CompletionFilter, PIRP NotifyIrp, PCHECK_FOR_TRAVERSE_ACCESS TraverseCallback, PSECURITY_SUBJECT_CONTEXT SubjectContext, PFILTER_REPORT_CHANGE FilterCallback);
void __stdcall FsRtlNotifyFilterReportChange(PNOTIFY_SYNC NotifySync, PLIST_ENTRY NotifyList, PSTRING FullTargetName, USHORT TargetNameOffset, PSTRING StreamName, PSTRING NormalizedParentName, ULONG FilterMatch, ULONG Action, PVOID TargetContext, PVOID FilterContext);
void __stdcall FsRtlNotifyFullChangeDirectory(PNOTIFY_SYNC NotifySync, PLIST_ENTRY NotifyList, PVOID FsContext, PSTRING FullDirectoryName, BOOLEAN WatchTree, BOOLEAN IgnoreBuffer, ULONG CompletionFilter, PIRP NotifyIrp, PCHECK_FOR_TRAVERSE_ACCESS TraverseCallback, PSECURITY_SUBJECT_CONTEXT SubjectContext);
void __stdcall FsRtlNotifyFullReportChange(PNOTIFY_SYNC NotifySync, PLIST_ENTRY NotifyList, PSTRING FullTargetName, USHORT TargetNameOffset, PSTRING StreamName, PSTRING NormalizedParentName, ULONG FilterMatch, ULONG Action, PVOID TargetContext);
void __stdcall FsRtlNotifyInitializeSync(PNOTIFY_SYNC *NotifySync);
void __stdcall FsRtlNotifyUninitializeSync(PNOTIFY_SYNC *NotifySync);
void __stdcall FsRtlPostPagingFileStackOverflow(PVOID Context, PKEVENT Event, PFSRTL_STACK_OVERFLOW_ROUTINE StackOverflowRoutine);
void __stdcall FsRtlPostStackOverflow(PVOID Context, PKEVENT Event, PFSRTL_STACK_OVERFLOW_ROUTINE StackOverflowRoutine);
void __stdcall FsRtlPrepareToReuseEcp(PVOID EcpContext);
void __stdcall FsRtlReleaseFile(PFILE_OBJECT FileObject);
void __stdcall FsRtlRemoveLargeMcbEntry(PLARGE_MCB Mcb, LONGLONG Vbn, LONGLONG SectorCount);
void __stdcall FsRtlRemoveMcbEntry(PMCB Mcb, VBN Vbn, ULONG SectorCount);
void __stdcall FsRtlResetBaseMcb(PBASE_MCB Mcb);
void __stdcall FsRtlResetLargeMcb(PLARGE_MCB Mcb, BOOLEAN SelfSynchronized);
void __stdcall FsRtlSetupAdvancedHeader(PVOID AdvHdr, PFAST_MUTEX FMutex);
void __stdcall FsRtlTeardownPerFileContexts(PVOID *PerFileContextPointer);
void __stdcall FsRtlTeardownPerStreamContexts(PFSRTL_ADVANCED_FCB_HEADER AdvancedHeader);
void __stdcall FsRtlTruncateBaseMcb(PBASE_MCB Mcb, LONGLONG Vbn);
void __stdcall FsRtlTruncateLargeMcb(PLARGE_MCB Mcb, LONGLONG Vbn);
void __stdcall FsRtlTruncateMcb(PMCB Mcb, VBN Vbn);
void __stdcall FsRtlUninitializeBaseMcb(PBASE_MCB Mcb);
void __stdcall FsRtlUninitializeFileLock(PFILE_LOCK FileLock);
void __stdcall FsRtlUninitializeLargeMcb(PLARGE_MCB Mcb);
void __stdcall FsRtlUninitializeMcb(PMCB Mcb);
void __stdcall FsRtlUninitializeOplock(POPLOCK Oplock);
void __stdcall FsRtlUpdateDiskCounters(ULONG64 BytesRead, ULONG64 BytesWritten);
void __stdcall FwpmFreeMemory0(void **p);
void __stdcall FwpsApplyModifiedLayerData0(UINT64 classifyHandle, PVOID modifiedLayerData, UINT32 flags);
void __stdcall FwpsCompleteClassify0(UINT64 classifyHandle, UINT32 flags, const FWPS_CLASSIFY_OUT0 *classifyOut);
void __stdcall FwpsCompleteOperation0(HANDLE completionContext, PNET_BUFFER_LIST netBufferList);
void __stdcall FwpsCopyStreamDataToBuffer0(const FWPS_STREAM_DATA0 *calloutStreamData, PVOID buffer, SIZE_T bytesToCopy, SIZE_T *bytesCopied);
void __stdcall FwpsDereferenceNetBufferList0(NET_BUFFER_LIST *netBufferList, BOOLEAN dispatchLevel);
void __stdcall FwpsDereferencevSwitchPacketContext0(HANDLE packetContext);
void __stdcall FwpsDiscardClonedStreamData0(NET_BUFFER_LIST *netBufferListChain, UINT32 allocateCloneFlags, BOOLEAN dispatchLevel);
void __stdcall FwpsFreeCloneNetBufferList0(NET_BUFFER_LIST *netBufferList, ULONG freeCloneFlags);
void __stdcall FwpsFreeNetBufferList0(NET_BUFFER_LIST *netBufferList);
void __stdcall FwpsRedirectHandleDestroy0(HANDLE redirectHandle);
void __stdcall FwpsReferenceNetBufferList0(NET_BUFFER_LIST *netBufferList, BOOLEAN intendToModify);
void __stdcall FwpsReferencevSwitchPacketContext0(HANDLE packetContext);
void __stdcall FwpsReleaseClassifyHandle0(UINT64 classifyHandle);
void __stdcall FwpsvSwitchEventsUnsubscribe0(UINT32 subscriptionId, UINT32 flags, void *reserved);
void __stdcall FwpsvSwitchNotifyComplete0(void *completionContext, NTSTATUS status, UINT32 flags, void *reserved);
void __stdcall GPIO_CLX_AcquireInterruptLock(PVOID Context, BANK_ID BankId);
void __stdcall GPIO_CLX_ReleaseInterruptLock(PVOID Context, BANK_ID BankId);
void __stdcall GetCurrentThreadCompartmentScope(PNET_IF_COMPARTMENT_SCOPE CompartmentScope, PNET_IF_COMPARTMENT_ID CompartmentId);
void __stdcall HalAcquireDisplayOwnership(PHAL_RESET_DISPLAY_PARAMETERS ResetDisplayParameters);
void __stdcall HalBugCheckSystem(PWHEA_ERROR_SOURCE_DESCRIPTOR ErrorSource, PWHEA_ERROR_RECORD ErrorRecord);
void __stdcall HalExamineMBR(PDEVICE_OBJECT DeviceObject, ULONG SectorSize, ULONG MBRTypeIdentifier, PVOID *Buffer);
void __stdcall HalFreeCommonBuffer(PDMA_ADAPTER DmaAdapter, ULONG Length, PHYSICAL_ADDRESS LogicalAddress, PVOID VirtualAddress, BOOLEAN CacheEnabled);
void __stdcall HalPutDmaAdapter(PADAPTER_OBJECT DmaAdapter);
void __stdcall HalPutScatterGatherList(PADAPTER_OBJECT DmaAdapter, PSCATTER_GATHER_LIST ScatterGather, BOOLEAN WriteToDevice);
void __stdcall HalUnmapIoSpace(PVOID VirtualAddress, SIZE_T NumberOfBytes);
void __stdcall HidD_GetHidGuid(LPGUID HidGuid);
void __stdcall HidP_FreeCollectionDescription(PHIDP_DEVICE_DESC DeviceDescription);
void __stdcall IN4ADDR_SETANY(PSOCKADDR_IN a);
void __stdcall IN4ADDR_SETLOOPBACK(PSOCKADDR_IN a);
void __stdcall IN4ADDR_SETSOCKADDR(PSOCKADDR_IN a, const IN_ADDR *addr, USHORT port);
void __stdcall IN4_UNCANONICALIZE_SCOPE_ID(const IN_ADDR *Address, SCOPE_ID *ScopeId);
void __stdcall IN6ADDR_SETANY(PSOCKADDR_IN6 a);
void __stdcall IN6ADDR_SETLOOPBACK(PSOCKADDR_IN6 a);
void __stdcall IN6ADDR_SETSOCKADDR(PSOCKADDR_IN6 a, const IN6_ADDR *addr, SCOPE_ID scope, USHORT port);
void __stdcall IN6ADDR_SETV4MAPPED(PSOCKADDR_IN6 a6, const IN_ADDR *a4, SCOPE_ID scope, USHORT port);
void __stdcall IN6_SET_6TO4_PREFIX(IN6_ADDR *Ipv6Address, const IN_ADDR *Ipv4Address);
void __stdcall IN6_SET_ADDR_LOOPBACK(PIN6_ADDR a);
void __stdcall IN6_SET_ADDR_SOLICITEDNODE(PIN6_ADDR Multicast, const IN6_ADDR *Unicast);
void __stdcall IN6_SET_ADDR_UNSPECIFIED(PIN6_ADDR a);
void __stdcall IN6_SET_ADDR_V4COMPAT(PIN6_ADDR a6, const IN_ADDR *a4);
void __stdcall IN6_SET_ADDR_V4MAPPED(PIN6_ADDR a6, const IN_ADDR *a4);
void __stdcall IN6_SET_ISATAP_IDENTIFIER(IN6_ADDR *Ipv6Address, const IN_ADDR *Ipv4Address);
void __stdcall IN6_UNCANONICALIZE_SCOPE_ID(const IN6_ADDR *Address, SCOPE_ID *ScopeId);
void __stdcall INETADDR_SETANY(PSOCKADDR a);
void __stdcall INETADDR_SETLOOPBACK(PSOCKADDR a);
void __stdcall INETADDR_SETSOCKADDR(ADDRESS_FAMILY af, PSOCKADDR a, const void *addr, SCOPE_ID scope, USHORT port);
void __stdcall INETADDR_SET_ADDRESS(PSOCKADDR a, const UCHAR *Address);
void __stdcall INETADDR_SET_PORT(PSOCKADDR a, USHORT Port);
void __stdcall INET_SET_ADDRESS(ADDRESS_FAMILY Family, PUCHAR Address, const UCHAR *Value);
void __stdcall INET_UNCANONICALIZE_SCOPE_ID(ADDRESS_FAMILY AddressFamily, const UCHAR *Address, SCOPE_ID *ScopeId);
void __stdcall I_RpcClearMutex(I_RPC_MUTEX Mutex);
void __stdcall I_RpcDefaultFree(handle_t bh, void *, void (__stdcall *RealFree)(void *));
void __stdcall I_RpcDeleteMutex(I_RPC_MUTEX Mutex);
void __stdcall I_RpcFree(void *Object);
void __stdcall I_RpcFreeSystemHandle(unsigned __int8 Type, void *Handle);
void __stdcall I_RpcPauseExecution(unsigned int Milliseconds);
void __stdcall I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus, RDR_CALLOUT_STATE *CallOutState, unsigned __int16 *DllName);
void __stdcall I_RpcRequestMutex(I_RPC_MUTEX *Mutex);
void __stdcall I_RpcSessionStrictContextHandle();
void __stdcall I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle, void *ServerContextList);
void __stdcall I_RpcSsDontSerializeContext();
void __stdcall I_RpcUninitializeNdrOle();
void __stdcall InitializeIpForwardEntry(PMIB_IPFORWARD_ROW2 Row);
void __stdcall InitializeIpInterfaceEntry(PMIB_IPINTERFACE_ROW Row);
void __stdcall InitializeListHead(PLIST_ENTRY ListHead);
void __stdcall InitializeSListHead(PSLIST_HEADER SListHead);
void __stdcall InitializeUnicastIpAddressEntry(PMIB_UNICASTIPADDRESS_ROW Row);
void __stdcall InsertHeadList(PLIST_ENTRY ListHead, PLIST_ENTRY Entry);
void __stdcall InsertTailList(PLIST_ENTRY ListHead, PLIST_ENTRY Entry);
void __stdcall IoAcquireCancelSpinLock(PKIRQL Irql);
void __stdcall IoAcquireVpbSpinLock(PKIRQL Irql);
void __stdcall IoAllocateController(PCONTROLLER_OBJECT ControllerObject, PDEVICE_OBJECT DeviceObject, PDRIVER_CONTROL ExecutionRoutine, PVOID Context);
void __stdcall IoBuildPartialMdl(PMDL SourceMdl, PMDL TargetMdl, PVOID VirtualAddress, ULONG Length);
void __stdcall IoCancelFileOpen(PDEVICE_OBJECT DeviceObject, PFILE_OBJECT FileObject);
void __stdcall IoCleanupIrp(PIRP Irp);
void __stdcall IoClearActivityIdThread(LPCGUID OriginalId);
void __stdcall IoClearIrpExtraCreateParameter(PIRP Irp);
void __stdcall IoCopyCurrentIrpStackLocationToNext(PIRP Irp);
void __stdcall IoCsqInsertIrp(PIO_CSQ Csq, PIRP Irp, PIO_CSQ_IRP_CONTEXT Context);
void __stdcall IoDeleteController(PCONTROLLER_OBJECT ControllerObject);
void __stdcall IoDeleteDevice(PDEVICE_OBJECT DeviceObject);
void __stdcall IoDetachDevice(PDEVICE_OBJECT TargetDevice);
void __stdcall IoDisconnectInterrupt(PKINTERRUPT InterruptObject);
void __stdcall IoDisconnectInterruptEx(PIO_DISCONNECT_INTERRUPT_PARAMETERS Parameters);
void __stdcall IoFreeAdapterChannel(PDMA_ADAPTER DmaAdapter);
void __stdcall IoFreeController(PCONTROLLER_OBJECT ControllerObject);
void __stdcall IoFreeErrorLogEntry(PVOID ElEntry);
void __stdcall IoFreeIrp(PIRP Irp);
void __stdcall IoFreeMapRegisters(PDMA_ADAPTER DmaAdapter, PVOID MapRegisterBase, ULONG NumberOfMapRegisters);
void __stdcall IoFreeMdl(PMDL Mdl);
void __stdcall IoFreeWorkItem(PIO_WORKITEM IoWorkItem);
void __stdcall IoGetStackLimits(PULONG_PTR LowLimit, PULONG_PTR HighLimit);
void __stdcall IoInitializeDpcRequest(PDEVICE_OBJECT DeviceObject, PIO_DPC_ROUTINE DpcRoutine);
void __stdcall IoInitializeDriverCreateContext(PIO_DRIVER_CREATE_CONTEXT DriverContext);
void __stdcall IoInitializeIrp(PIRP Irp, USHORT PacketSize, CCHAR StackSize);
void __stdcall IoInitializeIrpEx(PIRP Irp, PDEVICE_OBJECT DeviceObject, USHORT PacketSize, CCHAR StackSize);
void __stdcall IoInitializePriorityInfo(PIO_PRIORITY_INFO PriorityInfo);
void __stdcall IoInitializeRemoveLockEx(PIO_REMOVE_LOCK Lock, ULONG AllocateTag, ULONG MaxLockedMinutes, ULONG HighWatermark, ULONG RemlockSize);
void __stdcall IoInitializeThreadedDpcRequest(PDEVICE_OBJECT DeviceObject, PIO_DPC_ROUTINE DpcRoutine);
void __stdcall IoInitializeWorkItem(PVOID IoObject, PIO_WORKITEM IoWorkItem);
void __stdcall IoInvalidateDeviceRelations(PDEVICE_OBJECT DeviceObject, DEVICE_RELATION_TYPE Type);
void __stdcall IoInvalidateDeviceState(PDEVICE_OBJECT PhysicalDeviceObject);
void __stdcall IoMarkIrpPending(PIRP Irp);
void __stdcall IoQueueThreadIrp(PIRP Irp);
void __stdcall IoQueueWorkItem(PIO_WORKITEM IoWorkItem, PIO_WORKITEM_ROUTINE WorkerRoutine, WORK_QUEUE_TYPE QueueType, PVOID Context);
void __stdcall IoQueueWorkItemEx(PIO_WORKITEM IoWorkItem, PIO_WORKITEM_ROUTINE_EX WorkerRoutine, WORK_QUEUE_TYPE QueueType, PVOID Context);
void __stdcall IoRaiseHardError(PIRP Irp, PVPB Vpb, PDEVICE_OBJECT RealDeviceObject);
void __stdcall IoRegisterBootDriverReinitialization(PDRIVER_OBJECT DriverObject, PDRIVER_REINITIALIZE DriverReinitializationRoutine, PVOID Context);
void __stdcall IoRegisterDriverReinitialization(PDRIVER_OBJECT DriverObject, PDRIVER_REINITIALIZE DriverReinitializationRoutine, PVOID Context);
void __stdcall IoRegisterFileSystem(PDEVICE_OBJECT DeviceObject);
void __stdcall IoReleaseCancelSpinLock(KIRQL Irql);
void __stdcall IoReleaseRemoveLockAndWaitEx(PIO_REMOVE_LOCK RemoveLock, PVOID Tag, ULONG RemlockSize);
void __stdcall IoReleaseRemoveLockEx(PIO_REMOVE_LOCK RemoveLock, PVOID Tag, ULONG RemlockSize);
void __stdcall IoReleaseVpbSpinLock(KIRQL Irql);
void __stdcall IoRemoveLinkShareAccess(PFILE_OBJECT FileObject, PSHARE_ACCESS ShareAccess, PLINK_SHARE_ACCESS LinkShareAccess);
void __stdcall IoRemoveShareAccess(PFILE_OBJECT FileObject, PSHARE_ACCESS ShareAccess);
void __stdcall IoReportInterruptActive(PIO_REPORT_INTERRUPT_ACTIVE_STATE_PARAMETERS Parameters);
void __stdcall IoReportInterruptInactive(PIO_REPORT_INTERRUPT_ACTIVE_STATE_PARAMETERS Parameters);
void __stdcall IoRequestDeviceEject(PDEVICE_OBJECT PhysicalDeviceObject);
void __stdcall IoRequestDpc(PDEVICE_OBJECT DeviceObject, PIRP Irp, PVOID Context);
void __stdcall IoReuseIrp(PIRP Irp, NTSTATUS Iostatus);
void __stdcall IoSetCompletionRoutine(PIRP Irp, PIO_COMPLETION_ROUTINE CompletionRoutine, PVOID Context, BOOLEAN InvokeOnSuccess, BOOLEAN InvokeOnError, BOOLEAN InvokeOnCancel);
void __stdcall IoSetDeviceToVerify(PETHREAD Thread, PDEVICE_OBJECT DeviceObject);
void __stdcall IoSetHardErrorOrVerifyDevice(PIRP Irp, PDEVICE_OBJECT DeviceObject);
void __stdcall IoSetLinkShareAccess(ACCESS_MASK DesiredAccess, ULONG DesiredShareAccess, PFILE_OBJECT FileObject, PSHARE_ACCESS ShareAccess, PLINK_SHARE_ACCESS LinkShareAccess, ULONG IoShareAccessFlags);
void __stdcall IoSetMasterIrpStatus(PIRP MasterIrp, NTSTATUS Status);
void __stdcall IoSetNextIrpStackLocation(PIRP Irp);
void __stdcall IoSetShareAccess(ACCESS_MASK DesiredAccess, ULONG DesiredShareAccess, PFILE_OBJECT FileObject, PSHARE_ACCESS ShareAccess);
void __stdcall IoSetShareAccessEx(ACCESS_MASK DesiredAccess, ULONG DesiredShareAccess, PFILE_OBJECT FileObject, PSHARE_ACCESS ShareAccess, PBOOLEAN WritePermission);
void __stdcall IoSetStartIoAttributes(PDEVICE_OBJECT DeviceObject, BOOLEAN DeferredStartIo, BOOLEAN NonCancelable);
void __stdcall IoSetTopLevelIrp(PIRP Irp);
void __stdcall IoSkipCurrentIrpStackLocation(PIRP Irp);
void __stdcall IoStartNextPacket(PDEVICE_OBJECT DeviceObject, BOOLEAN Cancelable);
void __stdcall IoStartNextPacketByKey(PDEVICE_OBJECT DeviceObject, BOOLEAN Cancelable, ULONG Key);
void __stdcall IoStartPacket(PDEVICE_OBJECT DeviceObject, PIRP Irp, PULONG Key, PDRIVER_CANCEL CancelFunction);
void __stdcall IoStartTimer(PDEVICE_OBJECT DeviceObject);
void __stdcall IoStopTimer(PDEVICE_OBJECT DeviceObject);
void __stdcall IoTransferActivityId(LPCGUID ActivityId, LPCGUID RelatedActivityId);
void __stdcall IoUninitializeWorkItem(PIO_WORKITEM IoWorkItem);
void __stdcall IoUnregisterBootDriverCallback(PVOID CallbackHandle);
void __stdcall IoUnregisterContainerNotification(PVOID CallbackRegistration);
void __stdcall IoUnregisterFileSystem(PDEVICE_OBJECT DeviceObject);
void __stdcall IoUnregisterFsRegistrationChange(PDRIVER_OBJECT DriverObject, PDRIVER_FS_NOTIFICATION DriverNotificationRoutine);
void __stdcall IoUnregisterShutdownNotification(PDEVICE_OBJECT DeviceObject);
void __stdcall IoUpdateLinkShareAccess(PFILE_OBJECT FileObject, PSHARE_ACCESS ShareAccess, PLINK_SHARE_ACCESS LinkShareAccess);
void __stdcall IoUpdateShareAccess(PFILE_OBJECT FileObject, PSHARE_ACCESS ShareAccess);
void __stdcall IoWriteErrorLogEntry(PVOID ElEntry);
void __stdcall IofCompleteRequest(PIRP Irp, CCHAR PriorityBoost);
void __stdcall KeAcquireGuardedMutex(PKGUARDED_MUTEX Mutex);
void __stdcall KeAcquireGuardedMutexUnsafe(PKGUARDED_MUTEX FastMutex);
void __stdcall KeAcquireInStackQueuedSpinLock(PKSPIN_LOCK SpinLock, PKLOCK_QUEUE_HANDLE LockHandle);
void __stdcall KeAcquireInStackQueuedSpinLockAtDpcLevel(PKSPIN_LOCK SpinLock, PKLOCK_QUEUE_HANDLE LockHandle);
void __stdcall KeAcquireInStackQueuedSpinLockForDpc(PKSPIN_LOCK SpinLock, PKLOCK_QUEUE_HANDLE LockHandle);
void __stdcall KeAcquireSpinLockAtDpcLevel(PKSPIN_LOCK SpinLock);
void __stdcall KeAttachProcess(PRKPROCESS Process);
void __stdcall KeClearEvent(PRKEVENT Event);
void __stdcall KeDeregisterProcessorChangeCallback(PVOID CallbackHandle);
void __stdcall KeFlushIoBuffers(PMDL Mdl, BOOLEAN ReadOperation, BOOLEAN DmaOperation);
void __stdcall KeInitializeDeviceQueue(PKDEVICE_QUEUE DeviceQueue);
void __stdcall KeInitializeDpc(PRKDPC Dpc, PKDEFERRED_ROUTINE DeferredRoutine, PVOID DeferredContext);
void __stdcall KeInitializeEvent(PRKEVENT Event, EVENT_TYPE Type, BOOLEAN State);
void __stdcall KeInitializeGuardedMutex(PKGUARDED_MUTEX Mutex);
void __stdcall KeInitializeMutant(PRKMUTANT Mutant, BOOLEAN InitialOwner);
void __stdcall KeInitializeMutex(PRKMUTEX Mutex, ULONG Level);
void __stdcall KeInitializeQueue(PRKQUEUE Queue, ULONG Count);
void __stdcall KeInitializeSemaphore(PRKSEMAPHORE Semaphore, LONG Count, LONG Limit);
void __stdcall KeInitializeSpinLock(PKSPIN_LOCK SpinLock);
void __stdcall KeInitializeThreadedDpc(PRKDPC Dpc, PKDEFERRED_ROUTINE DeferredRoutine, PVOID DeferredContext);
void __stdcall KeInitializeTimer(PKTIMER Timer);
void __stdcall KeInitializeTimer2SetParameters(PKT2_SET_PARAMETERS Parameters);
void __stdcall KeInitializeTimerEx(PKTIMER Timer, TIMER_TYPE Type);
void __stdcall KeInvalidateRangeAllCaches(PVOID BaseAddress, ULONG Length);
void __stdcall KeLowerIrql(KIRQL NewIrql);
void __stdcall KeQueryNodeActiveAffinity(USHORT NodeNumber, PGROUP_AFFINITY Affinity, PUSHORT Count);
void __stdcall KeQueryOwnerMutant(PKMUTANT Mutant, PCLIENT_ID ClientId);
void __stdcall KeQuerySystemTimePrecise(PLARGE_INTEGER CurrentTime);
void __stdcall KeReleaseGuardedMutex(PKGUARDED_MUTEX Mutex);
void __stdcall KeReleaseGuardedMutexUnsafe(PKGUARDED_MUTEX FastMutex);
void __stdcall KeReleaseInStackQueuedSpinLock(PKLOCK_QUEUE_HANDLE LockHandle);
void __stdcall KeReleaseInStackQueuedSpinLockForDpc(PKLOCK_QUEUE_HANDLE LockHandle);
void __stdcall KeReleaseInStackQueuedSpinLockFromDpcLevel(PKLOCK_QUEUE_HANDLE LockHandle);
void __stdcall KeReleaseInterruptSpinLock(PKINTERRUPT Interrupt, KIRQL OldIrql);
void __stdcall KeReleaseQueuedSpinLock(KSPIN_LOCK_QUEUE_NUMBER Number, KIRQL OldIrql);
void __stdcall KeReleaseSpinLock(PKSPIN_LOCK SpinLock, KIRQL NewIrql);
void __stdcall KeReleaseSpinLockForDpc(PKSPIN_LOCK SpinLock, KIRQL OldIrql);
void __stdcall KeReleaseSpinLockFromDpcLevel(PKSPIN_LOCK SpinLock);
void __stdcall KeRestoreExtendedProcessorState(PXSTATE_SAVE XStateSave);
void __stdcall KeRevertToUserAffinityThreadEx(KAFFINITY Affinity);
void __stdcall KeRevertToUserGroupAffinityThread(PGROUP_AFFINITY PreviousAffinity);
void __stdcall KeSetImportanceDpc(PRKDPC Dpc, KDPC_IMPORTANCE Importance);
void __stdcall KeSetSystemAffinityThread(KAFFINITY Affinity);
void __stdcall KeSetSystemGroupAffinityThread(PGROUP_AFFINITY Affinity, PGROUP_AFFINITY PreviousAffinity);
void __stdcall KeSetTargetProcessorDpc(PRKDPC Dpc, CCHAR Number);
void __stdcall KeStackAttachProcess(PRKPROCESS PROCESS, PRKAPC_STATE ApcState);
void __stdcall KeStallExecutionProcessor(ULONG MicroSeconds);
void __stdcall KeUnstackDetachProcess(PRKAPC_STATE ApcState);
void __stdcall KoRelease(const IID *const ClassId);
void __stdcall KsAcquireControl(PVOID Object);
void __stdcall KsAcquireDevice(PKSDEVICE Device);
void __stdcall KsAcquireDeviceSecurityLock(KSDEVICE_HEADER Header, BOOLEAN Exclusive);
void __stdcall KsAddEvent(PVOID Object, PKSEVENT_ENTRY EventEntry);
void __stdcall KsAddIrpToCancelableQueue(PLIST_ENTRY QueueHead, PKSPIN_LOCK SpinLock, PIRP Irp, KSLIST_ENTRY_LOCATION ListLocation, PDRIVER_CANCEL DriverCancel);
void __stdcall KsCancelIo(PLIST_ENTRY QueueHead, PKSPIN_LOCK SpinLock);
void __stdcall KsCompletePendingRequest(PIRP Irp);
void __stdcall KsDereferenceBusObject(KSDEVICE_HEADER Header);
void __stdcall KsDereferenceSoftwareBusObject(KSDEVICE_HEADER Header);
void __stdcall KsDeviceRegisterAdapterObject(PKSDEVICE Device, PADAPTER_OBJECT AdapterObject, ULONG MaxMappingsByteCount, ULONG MappingTableStride);
void __stdcall KsDiscardEvent(PKSEVENT_ENTRY EventEntry);
void __stdcall KsFilterAcquireControl(PKSFILTER Filter);
void __stdcall KsFilterAcquireProcessingMutex(PKSFILTER Filter);
void __stdcall KsFilterAddEvent(PKSFILTER Filter, PKSEVENT_ENTRY EventEntry);
void __stdcall KsFilterAttemptProcessing(PKSFILTER Filter, BOOLEAN Asynchronous);
void __stdcall KsFilterGenerateEvents(PKSFILTER Filter, const GUID *EventSet, ULONG EventId, ULONG DataSize, PVOID Data, PFNKSGENERATEEVENTCALLBACK CallBack, PVOID CallBackContext);
void __stdcall KsFilterRegisterPowerCallbacks(PKSFILTER Filter, PFNKSFILTERPOWER Sleep, PFNKSFILTERPOWER Wake);
void __stdcall KsFilterReleaseControl(PKSFILTER Filter);
void __stdcall KsFilterReleaseProcessingMutex(PKSFILTER Filter);
void __stdcall KsFreeDefaultClock(PKSDEFAULTCLOCK DefaultClock);
void __stdcall KsFreeDeviceHeader(KSDEVICE_HEADER Header);
void __stdcall KsFreeEventList(PFILE_OBJECT FileObject, PLIST_ENTRY EventsList, KSEVENTS_LOCKTYPE EventsFlags, PVOID EventsLock);
void __stdcall KsFreeObjectBag(KSOBJECT_BAG ObjectBag);
void __stdcall KsFreeObjectHeader(KSOBJECT_HEADER Header);
void __stdcall KsGateAddOffInputToAnd(PKSGATE AndGate);
void __stdcall KsGateAddOffInputToOr(PKSGATE OrGate);
void __stdcall KsGateAddOnInputToAnd(PKSGATE AndGate);
void __stdcall KsGateAddOnInputToOr(PKSGATE OrGate);
void __stdcall KsGateInitialize(PKSGATE Gate, LONG InitialCount, PKSGATE NextGate, BOOLEAN StateToPropagate);
void __stdcall KsGateInitializeAnd(PKSGATE AndGate, PKSGATE NextOrGate);
void __stdcall KsGateInitializeOr(PKSGATE OrGate, PKSGATE NextAndGate);
void __stdcall KsGateRemoveOffInputFromAnd(PKSGATE AndGate);
void __stdcall KsGateRemoveOffInputFromOr(PKSGATE OrGate);
void __stdcall KsGateRemoveOnInputFromAnd(PKSGATE AndGate);
void __stdcall KsGateRemoveOnInputFromOr(PKSGATE OrGate);
void __stdcall KsGateTerminateAnd(PKSGATE AndGate);
void __stdcall KsGateTerminateOr(PKSGATE OrGate);
void __stdcall KsGateTurnInputOff(PKSGATE Gate);
void __stdcall KsGateTurnInputOn(PKSGATE Gate);
void __stdcall KsGenerateEventList(GUID *Set, ULONG EventId, PLIST_ENTRY EventsList, KSEVENTS_LOCKTYPE EventsFlags, PVOID EventsLock);
void __stdcall KsGenerateEvents(PVOID Object, const GUID *EventSet, ULONG EventId, ULONG DataSize, PVOID Data, PFNKSGENERATEEVENTCALLBACK CallBack, PVOID CallBackContext);
void __stdcall KsNullDriverUnload(PDRIVER_OBJECT DriverObject);
void __stdcall KsPinAcquireControl(PKSPIN Pin);
void __stdcall KsPinAcquireProcessingMutex(PKSPIN Pin);
void __stdcall KsPinAddEvent(PKSPIN Pin, PKSEVENT_ENTRY EventEntry);
void __stdcall KsPinAttachAndGate(PKSPIN Pin, PKSGATE AndGate);
void __stdcall KsPinAttachOrGate(PKSPIN Pin, PKSGATE OrGate);
void __stdcall KsPinAttemptProcessing(PKSPIN Pin, BOOLEAN Asynchronous);
void __stdcall KsPinGenerateEvents(PKSPIN Pin, const GUID *EventSet, ULONG EventId, ULONG DataSize, PVOID Data, PFNKSGENERATEEVENTCALLBACK CallBack, PVOID CallBackContext);
void __stdcall KsPinGetCopyRelationships(PKSPIN Pin, PKSPIN *CopySource, PKSPIN *DelegateBranch);
void __stdcall KsPinRegisterFrameReturnCallback(PKSPIN Pin, PFNKSPINFRAMERETURN FrameReturn);
void __stdcall KsPinRegisterHandshakeCallback(PKSPIN Pin, PFNKSPINHANDSHAKE Handshake);
void __stdcall KsPinRegisterIrpCompletionCallback(PKSPIN Pin, PFNKSPINIRPCOMPLETION IrpCompletion);
void __stdcall KsPinRegisterPowerCallbacks(PKSPIN Pin, PFNKSPINPOWER Sleep, PFNKSPINPOWER Wake);
void __stdcall KsPinReleaseControl(PKSPIN Pin);
void __stdcall KsPinReleaseProcessingMutex(PKSPIN Pin);
void __stdcall KsPinSetPinClockTime(PKSPIN Pin, LONGLONG Time);
void __stdcall KsRecalculateStackDepth(KSDEVICE_HEADER Header, BOOLEAN ReuseStackLocation);
void __stdcall KsReleaseControl(PVOID Object);
void __stdcall KsReleaseDevice(PKSDEVICE Device);
void __stdcall KsReleaseDeviceSecurityLock(KSDEVICE_HEADER Header);
void __stdcall KsReleaseIrpOnCancelableQueue(PIRP Irp, PDRIVER_CANCEL DriverCancel);
void __stdcall KsRemoveSpecificIrpFromCancelableQueue(PIRP Irp);
void __stdcall KsSetDefaultClockState(PKSDEFAULTCLOCK DefaultClock, KSSTATE State);
void __stdcall KsSetDefaultClockTime(PKSDEFAULTCLOCK DefaultClock, LONGLONG Time);
void __stdcall KsSetDevicePnpAndBaseObject(KSDEVICE_HEADER Header, PDEVICE_OBJECT PnpDeviceObject, PDEVICE_OBJECT BaseObject);
void __stdcall KsSetPowerDispatch(KSOBJECT_HEADER Header, PFNKSCONTEXT_DISPATCH PowerDispatch, PVOID PowerContext);
void __stdcall KsSetTargetDeviceObject(KSOBJECT_HEADER Header, PDEVICE_OBJECT TargetDevice);
void __stdcall KsSetTargetState(KSOBJECT_HEADER Header, KSTARGET_STATE TargetState);
void __stdcall KsStreamPointerAdvanceOffsetsAndUnlock(PKSSTREAM_POINTER StreamPointer, ULONG InUsed, ULONG OutUsed, BOOLEAN Eject);
void __stdcall KsStreamPointerCancelTimeout(PKSSTREAM_POINTER StreamPointer);
void __stdcall KsStreamPointerDelete(PKSSTREAM_POINTER StreamPointer);
void __stdcall KsStreamPointerScheduleTimeout(PKSSTREAM_POINTER StreamPointer, PFNKSSTREAMPOINTER Callback, ULONGLONG Interval);
void __stdcall KsStreamPointerUnlock(PKSSTREAM_POINTER StreamPointer, BOOLEAN Eject);
void __stdcall KsTerminateDevice(PDEVICE_OBJECT DeviceObject);
void __stdcall KsUnregisterWorker(PKSWORKER Worker);
void __stdcall ListEntry32To64(PLIST_ENTRY32 l32, PLIST_ENTRY64 l64);
void __stdcall ListEntry64To32(PLIST_ENTRY64 l64, PLIST_ENTRY32 l32);
void __stdcall LkmdTelCloseHandle(HANDLE TelemetryHandle);
void __stdcall MBB_DEVICE_CONFIG_INIT(PMBB_DEVICE_CONFIG Config, PFN_MBB_DEVICE_SEND_MBIM_FRAGMENT SendMbimFragment, PFN_MBB_DEVICE_RECEIVE_MBIM_FRAGMENT ReceiveMbimFragment, PFN_MBB_DEVICE_SEND_DEVICE_SERVICE_SESSION_DATA SendDeviceServiceSessionData, PFN_MBB_DEVICE_CREATE_ADAPTER CreateAdapter);
void __stdcall MBB_DEVICE_MBIM_PARAMETERS_INIT(PMBB_DEVICE_MBIM_PARAMETERS MbimParameters, MBB_MBIM_VERSION Version, ULONG MaximumFragmentSize);
void __stdcall MIDL_user_free(void *);
void __stdcall MbbDeviceReceiveDeviceServiceSessionData(WDFDEVICE Device, DSS_SESSION_ID SessionId, WDFMEMORY Data);
void __stdcall MbbDeviceResponseAvailable(WDFDEVICE Device);
void __stdcall MbbDeviceSendDeviceServiceSessionDataComplete(WDFMEMORY Data, NTSTATUS NtStatus);
void __stdcall MbbDeviceSetMbimParameters(WDFDEVICE Device, PMBB_DEVICE_MBIM_PARAMETERS MbimParameters);
void __stdcall MbbRequestComplete(MBBREQUEST Request, NTSTATUS NtStatus);
void __stdcall MbbRequestCompleteWithInformation(MBBREQUEST Request, NTSTATUS NtStatus, ULONG_PTR Information);
void __stdcall McGenControlCallbackV2(LPCGUID SourceId, ULONG ControlCode, UCHAR Level, ULONGLONG MatchAnyKeyword, ULONGLONG MatchAllKeyword, PEVENT_FILTER_DESCRIPTOR FilterData, PVOID CallbackContext);
void __stdcall MmBuildMdlForNonPagedPool(PMDL MemoryDescriptorList);
void __stdcall MmFreeContiguousMemory(PVOID BaseAddress);
void __stdcall MmFreeContiguousMemorySpecifyCache(PVOID BaseAddress, SIZE_T NumberOfBytes, MEMORY_CACHING_TYPE CacheType);
void __stdcall MmFreeMappingAddress(PVOID BaseAddress, ULONG PoolTag);
void __stdcall MmFreeNonCachedMemory(PVOID BaseAddress, SIZE_T NumberOfBytes);
void __stdcall MmFreePagesFromMdl(PMDL MemoryDescriptorList);
void __stdcall MmFreePagesFromMdlEx(PMDL MemoryDescriptorList, ULONG Flags);
void __stdcall MmInitializeMdl(PMDL MemoryDescriptorList, PVOID BaseVa, SIZE_T Length);
void __stdcall MmLockPagableSectionByHandle(PVOID ImageSectionHandle);
void __stdcall MmPrepareMdlForReuse(PMDL MDL);
void __stdcall MmProbeAndLockPages(PMDL MemoryDescriptorList, KPROCESSOR_MODE AccessMode, LOCK_OPERATION Operation);
void __stdcall MmProbeAndLockProcessPages(PMDL MemoryDescriptorList, PEPROCESS Process, KPROCESSOR_MODE AccessMode, LOCK_OPERATION Operation);
void __stdcall MmProbeAndLockSelectedPages(PMDL MemoryDescriptorList, PFILE_SEGMENT_ELEMENT SegmentArray, KPROCESSOR_MODE AccessMode, LOCK_OPERATION Operation);
void __stdcall MmResetDriverPaging(PVOID AddressWithinSection);
void __stdcall MmUnlockPagableImageSection(PVOID ImageSectionHandle);
void __stdcall MmUnlockPages(PMDL MemoryDescriptorList);
void __stdcall MmUnmapIoSpace(PVOID BaseAddress, SIZE_T NumberOfBytes);
void __stdcall MmUnmapLockedPages(PVOID BaseAddress, PMDL MemoryDescriptorList);
void __stdcall MmUnmapReservedMapping(PVOID BaseAddress, ULONG PoolTag, PMDL MemoryDescriptorList);
void __stdcall MmUnmapVideoDisplay(PVOID BaseAddress, SIZE_T NumberOfBytes);
void __stdcall MmUnsecureVirtualMemory(HANDLE SecureHandle);
void __stdcall NDRCContextMarshall(NDR_CCONTEXT CContext, void *pBuff);
void __stdcall NDRCContextUnmarshall(NDR_CCONTEXT *pCContext, RPC_BINDING_HANDLE hBinding, void *pBuff, unsigned int DataRepresentation);
void __stdcall NDRCContextUnmarshall2(NDR_CCONTEXT *pCContext, RPC_BINDING_HANDLE hBinding, void *pBuff, unsigned int DataRepresentation);
void __stdcall NDRSContextMarshall(NDR_SCONTEXT CContext, void *pBuff, NDR_RUNDOWN userRunDownIn);
void __stdcall NDRSContextMarshall2(RPC_BINDING_HANDLE BindingHandle, NDR_SCONTEXT CContext, void *pBuff, NDR_RUNDOWN userRunDownIn, void *CtxGuard, unsigned int Flags);
void __stdcall NDRSContextMarshallEx(RPC_BINDING_HANDLE BindingHandle, NDR_SCONTEXT CContext, void *pBuff, NDR_RUNDOWN userRunDownIn);
void __stdcall NET_ADAPTER_DATAPATH_CALLBACKS_INIT(PNET_ADAPTER_DATAPATH_CALLBACKS DatapathCallbacks, PFN_NET_ADAPTER_CREATE_TXQUEUE EvtAdapterCreateTxQueue, PFN_NET_ADAPTER_CREATE_RXQUEUE EvtAdapterCreateRxQueue);
void __stdcall NET_ADAPTER_DMA_CAPABILITIES_INIT(PNET_ADAPTER_DMA_CAPABILITIES DmaCapabilities, WDFDMAENABLER DmaEnabler);
void __stdcall NET_ADAPTER_LINK_LAYER_ADDRESS_INIT(PNET_ADAPTER_LINK_LAYER_ADDRESS LinkLayerAddress, USHORT Length, PCUCHAR AddressBuffer);
void __stdcall NET_ADAPTER_LINK_LAYER_CAPABILITIES_INIT(PNET_ADAPTER_LINK_LAYER_CAPABILITIES LinkLayerCapabilities, NET_PACKET_FILTER_TYPES_FLAGS SupportedPacketFilters, ULONG MaxMulticastListSize, NET_ADAPTER_STATISTICS_FLAGS SupportedStatistics, ULONG64 MaxTxLinkSpeed, ULONG64 MaxRxLinkSpeed);
void __stdcall NET_ADAPTER_LINK_STATE_INIT(PNET_ADAPTER_LINK_STATE LinkState, ULONG64 LinkSpeed, NET_IF_MEDIA_CONNECT_STATE MediaConnectState, NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState, NET_ADAPTER_PAUSE_FUNCTIONS SupportedPauseFunctions, NET_ADAPTER_AUTO_NEGOTIATION_FLAGS AutoNegotiationFlags);
void __stdcall NET_ADAPTER_LINK_STATE_INIT_DISCONNECTED(PNET_ADAPTER_LINK_STATE LinkState);
void __stdcall NET_ADAPTER_OFFLOAD_CHECKSUM_CAPABILITIES_INIT(PNET_ADAPTER_OFFLOAD_CHECKSUM_CAPABILITIES ChecksumCapabilities, BOOLEAN IPv4, BOOLEAN Tcp, BOOLEAN Udp);
void __stdcall NET_ADAPTER_OFFLOAD_LSO_CAPABILITIES_INIT(PNET_ADAPTER_OFFLOAD_LSO_CAPABILITIES LsoCapabilities, BOOLEAN IPv4, BOOLEAN IPv6, SIZE_T MaximumOffloadSize, SIZE_T MinimumSegmentCount);
void __stdcall NET_ADAPTER_POWER_CAPABILITIES_INIT(PNET_ADAPTER_POWER_CAPABILITIES PowerCapabilities);
void __stdcall NET_ADAPTER_RECEIVE_SCALING_CAPABILITIES_INIT(NET_ADAPTER_RECEIVE_SCALING_CAPABILITIES *Capabilities, SIZE_T NumberOfQueues, NET_ADAPTER_RECEIVE_SCALING_UNHASHED_TARGET_TYPE UnhashedTargetType, NET_ADAPTER_RECEIVE_SCALING_HASH_TYPE HashTypes, NET_ADAPTER_RECEIVE_SCALING_PROTOCOL_TYPE ProtocolTypes, PFN_NET_ADAPTER_RECEIVE_SCALING_ENABLE Enable, PFN_NET_ADAPTER_RECEIVE_SCALING_DISABLE Disable, PFN_NET_ADAPTER_RECEIVE_SCALING_SET_HASH_SECRET_KEY SetHashSecretKey, PFN_NET_ADAPTER_RECEIVE_SCALING_SET_INDIRECTION_ENTRIES SetIndirectionEntries);
void __stdcall NET_ADAPTER_RX_CAPABILITIES_INIT_DRIVER_MANAGED(PNET_ADAPTER_RX_CAPABILITIES RxCapabilities, PFN_NET_ADAPTER_RETURN_RX_BUFFER EvtAdapterReturnRxBuffer, SIZE_T MaximumFragmentBufferSize, SIZE_T MaximumNumberOfQueues);
void __stdcall NET_ADAPTER_RX_CAPABILITIES_INIT_SYSTEM_MANAGED(PNET_ADAPTER_RX_CAPABILITIES RxCapabilities, SIZE_T MaximumFragmentBufferSize, SIZE_T MaximumNumberOfQueues);
void __stdcall NET_ADAPTER_RX_CAPABILITIES_INIT_SYSTEM_MANAGED_DMA(PNET_ADAPTER_RX_CAPABILITIES RxCapabilities, PNET_ADAPTER_DMA_CAPABILITIES DmaCapabilities, SIZE_T MaximumFragmentBufferSize, SIZE_T MaximumNumberOfQueues);
void __stdcall NET_ADAPTER_TX_CAPABILITIES_INIT(PNET_ADAPTER_TX_CAPABILITIES TxCapabilities, SIZE_T MaximumFragmentBufferSize, SIZE_T MaximumNumberOfQueues);
void __stdcall NET_ADAPTER_TX_CAPABILITIES_INIT_FOR_DMA(PNET_ADAPTER_TX_CAPABILITIES TxCapabilities, PNET_ADAPTER_DMA_CAPABILITIES DmaCapabilities, SIZE_T MaximumFragmentBufferSize, SIZE_T MaximumNumberOfQueues);
void __stdcall NET_BUFFER_LIST_SET_HASH_FUNCTION(PNET_BUFFER_LIST NBL, volatile ULONG HashFunction);
void __stdcall NET_BUFFER_LIST_SET_HASH_TYPE(PNET_BUFFER_LIST NBL, volatile ULONG HashType);
void __stdcall NET_PACKET_EXTENSION_INIT(PNET_PACKET_EXTENSION Extension, PCWSTR Name, ULONG Version, size_t ExtensionSize, ULONG Alignment);
void __stdcall NET_PACKET_EXTENSION_QUERY_INIT(PNET_PACKET_EXTENSION_QUERY Extension, PCWSTR Name, ULONG Version);
void __stdcall NET_PACKET_QUEUE_CONFIG_INIT(PNET_PACKET_QUEUE_CONFIG Config, PFN_PACKET_QUEUE_ADVANCE EvtAdvance, PFN_PACKET_QUEUE_SET_NOTIFICATION_ENABLED EvtSetNotificationEnabled, PFN_PACKET_QUEUE_CANCEL EvtCancel);
void __stdcall NET_REQUEST_QUEUE_CONFIG_ADD_INITIALIZED_METHOD_HANDLER(PNET_REQUEST_QUEUE_CONFIG NetRequestQueueConfig, PNET_REQUEST_QUEUE_METHOD_HANDLER MethodHandler);
void __stdcall NET_REQUEST_QUEUE_CONFIG_ADD_INITIALIZED_QUERY_DATA_HANDLER(PNET_REQUEST_QUEUE_CONFIG NetRequestQueueConfig, PNET_REQUEST_QUEUE_QUERY_DATA_HANDLER QueryDataHandler);
void __stdcall NET_REQUEST_QUEUE_CONFIG_ADD_INITIALIZED_SET_DATA_HANDLER(PNET_REQUEST_QUEUE_CONFIG NetRequestQueueConfig, PNET_REQUEST_QUEUE_SET_DATA_HANDLER SetDataHandler);
void __stdcall NET_REQUEST_QUEUE_CONFIG_ADD_METHOD_HANDLER(PNET_REQUEST_QUEUE_CONFIG NetRequestQueueConfig, NDIS_OID Oid, PFN_NET_REQUEST_METHOD EvtRequestMethod, UINT MinimumInputLength, UINT MinimumOutputLength);
void __stdcall NET_REQUEST_QUEUE_CONFIG_ADD_QUERY_DATA_HANDLER(PNET_REQUEST_QUEUE_CONFIG NetRequestQueueConfig, NDIS_OID Oid, PFN_NET_REQUEST_QUERY_DATA EvtRequestQueryData, UINT MinimumOutputLength);
void __stdcall NET_REQUEST_QUEUE_CONFIG_ADD_SET_DATA_HANDLER(PNET_REQUEST_QUEUE_CONFIG NetRequestQueueConfig, NDIS_OID Oid, PFN_NET_REQUEST_SET_DATA EvtRequestSetData, UINT MinimumInputLength);
void __stdcall NET_REQUEST_QUEUE_CONFIG_INIT(PNET_REQUEST_QUEUE_CONFIG NetRequestQueueConfig, NETADAPTER Adapter, NET_REQUEST_QUEUE_TYPE QueueType);
void __stdcall NET_REQUEST_QUEUE_CONFIG_INIT_DEFAULT_PARALLEL(PNET_REQUEST_QUEUE_CONFIG NetRequestQueueConfig, NETADAPTER Adapter);
void __stdcall NET_REQUEST_QUEUE_CONFIG_INIT_DEFAULT_SEQUENTIAL(PNET_REQUEST_QUEUE_CONFIG NetRequestQueueConfig, NETADAPTER Adapter);
void __stdcall NET_REQUEST_QUEUE_METHOD_HANDLER_INIT(PNET_REQUEST_QUEUE_METHOD_HANDLER MethodHandler, NDIS_OID Oid, PFN_NET_REQUEST_METHOD EvtRequestMethod, UINT MinimumInputLength, UINT MinimumOutputLength);
void __stdcall NET_REQUEST_QUEUE_QUERY_DATA_HANDLER_INIT(PNET_REQUEST_QUEUE_QUERY_DATA_HANDLER QueryDataHandler, NDIS_OID Oid, PFN_NET_REQUEST_QUERY_DATA EvtRequestQueryData, UINT MinimumOutputLength);
void __stdcall NET_REQUEST_QUEUE_SET_DATA_HANDLER_INIT(PNET_REQUEST_QUEUE_SET_DATA_HANDLER SetDataHandler, NDIS_OID Oid, PFN_NET_REQUEST_SET_DATA EvtRequestSetData, UINT MinimumInputLength);
void __stdcall NdisAcquireRWLockRead(PNDIS_RW_LOCK_EX Lock, PLOCK_STATE_EX LockState, UCHAR Flags);
void __stdcall NdisAcquireRWLockWrite(PNDIS_RW_LOCK_EX Lock, PLOCK_STATE_EX LockState, UCHAR Flags);
void __stdcall NdisAcquireReadWriteLock(PNDIS_RW_LOCK Lock, BOOLEAN fWrite, PLOCK_STATE LockState);
void __stdcall NdisAdjustNetBufferCurrentMdl(PNET_BUFFER NetBuffer);
void __stdcall NdisAdvanceNetBufferDataStart(PNET_BUFFER NetBuffer, ULONG DataOffsetDelta, BOOLEAN FreeMdl, NET_BUFFER_FREE_MDL_HANDLER FreeMdlHandler);
void __stdcall NdisAdvanceNetBufferListDataStart(PNET_BUFFER_LIST NetBufferList, ULONG DataOffsetDelta, BOOLEAN FreeMdl, NET_BUFFER_FREE_MDL_HANDLER FreeMdlMdlHandler);
void __stdcall NdisAllocateBuffer(PNDIS_STATUS Status, PNDIS_BUFFER *Buffer, NDIS_HANDLE PoolHandle, PVOID VirtualAddress, UINT Length);
void __stdcall NdisAllocateBufferPool(PNDIS_STATUS Status, PNDIS_HANDLE PoolHandle, UINT NumberOfDescriptors);
void __stdcall NdisAllocatePacket(PNDIS_STATUS Status, PNDIS_PACKET *Packet, NDIS_HANDLE PoolHandle);
void __stdcall NdisAllocatePacketPool(PNDIS_STATUS Status, PNDIS_HANDLE PoolHandle, UINT NumberOfDescriptors, UINT ProtocolReservedLength);
void __stdcall NdisAllocatePacketPoolEx(PNDIS_STATUS Status, PNDIS_HANDLE PoolHandle, UINT NumberOfDescriptors, UINT NumberOfOverflowDescriptors, UINT ProtocolReservedLength);
void __stdcall NdisAllocateSpinLock(PNDIS_SPIN_LOCK SpinLock);
void __stdcall NdisCancelDirectOidRequest(NDIS_HANDLE NdisBindingHandle, PVOID RequestId);
void __stdcall NdisCancelOidRequest(NDIS_HANDLE NdisBindingHandle, PVOID RequestId);
void __stdcall NdisCancelSendNetBufferLists(NDIS_HANDLE NdisBindingHandle, PVOID CancelId);
void __stdcall NdisCancelTimer(PNDIS_TIMER Timer, PBOOLEAN TimerCancelled);
void __stdcall NdisClIncomingCallComplete(NDIS_STATUS Status, NDIS_HANDLE NdisVcHandle, PCO_CALL_PARAMETERS CallParameters);
void __stdcall NdisClNotifyCloseAddressFamilyComplete(NDIS_HANDLE NdisAfHandle, NDIS_STATUS Status);
void __stdcall NdisCloseConfiguration(NDIS_HANDLE ConfigurationHandle);
void __stdcall NdisCloseFile(NDIS_HANDLE FileHandle);
void __stdcall NdisCmAddPartyComplete(NDIS_STATUS Status, NDIS_HANDLE NdisPartyHandle, NDIS_HANDLE CallMgrPartyContext, PCO_CALL_PARAMETERS CallParameters);
void __stdcall NdisCmCloseAddressFamilyComplete(NDIS_STATUS Status, NDIS_HANDLE NdisAfHandle);
void __stdcall NdisCmCloseCallComplete(NDIS_STATUS Status, NDIS_HANDLE NdisVcHandle, NDIS_HANDLE NdisPartyHandle);
void __stdcall NdisCmDeregisterSapComplete(NDIS_STATUS Status, NDIS_HANDLE NdisSapHandle);
void __stdcall NdisCmDispatchCallConnected(NDIS_HANDLE NdisVcHandle);
void __stdcall NdisCmDispatchIncomingCallQoSChange(NDIS_HANDLE NdisVcHandle, PCO_CALL_PARAMETERS CallParameters);
void __stdcall NdisCmDispatchIncomingCloseCall(NDIS_STATUS CloseStatus, NDIS_HANDLE NdisVcHandle, PVOID Buffer, UINT Size);
void __stdcall NdisCmDispatchIncomingDropParty(NDIS_STATUS DropStatus, NDIS_HANDLE NdisPartyHandle, PVOID Buffer, UINT Size);
void __stdcall NdisCmDropPartyComplete(NDIS_STATUS Status, NDIS_HANDLE NdisPartyHandle);
void __stdcall NdisCmMakeCallComplete(NDIS_STATUS Status, NDIS_HANDLE NdisVcHandle, NDIS_HANDLE NdisPartyHandle, NDIS_HANDLE CallMgrPartyContext, PCO_CALL_PARAMETERS CallParameters);
void __stdcall NdisCmModifyCallQoSComplete(NDIS_STATUS Status, NDIS_HANDLE NdisVcHandle, PCO_CALL_PARAMETERS CallParameters);
void __stdcall NdisCmOpenAddressFamilyComplete(NDIS_STATUS Status, NDIS_HANDLE NdisAfHandle, NDIS_HANDLE CallMgrAfContext);
void __stdcall NdisCmRegisterSapComplete(NDIS_STATUS Status, NDIS_HANDLE NdisSapHandle, NDIS_HANDLE CallMgrSapContext);
void __stdcall NdisCoOidRequestComplete(NDIS_HANDLE NdisAfHandle, NDIS_HANDLE NdisVcHandle, NDIS_HANDLE NdisPartyHandle, PNDIS_OID_REQUEST OidRequest, NDIS_STATUS Status);
void __stdcall NdisCoSendNetBufferLists(NDIS_HANDLE NdisVcHandle, PNET_BUFFER_LIST NetBufferLists, ULONG SendFlags);
void __stdcall NdisCompleteBindAdapterEx(NDIS_HANDLE BindAdapterContext, NDIS_STATUS Status);
void __stdcall NdisCompleteDmaTransfer(PNDIS_STATUS Status, NDIS_HANDLE NdisDmaHandle, PNDIS_BUFFER Buffer, ULONG Offset, ULONG Length, BOOLEAN WriteToDevice);
void __stdcall NdisCompleteNetPnPEvent(NDIS_HANDLE NdisBindingHandle, PNET_PNP_EVENT_NOTIFICATION NetPnPEventNotification, NDIS_STATUS Status);
void __stdcall NdisCompleteUnbindAdapterEx(NDIS_HANDLE UnbindContext);
void __stdcall NdisCopyBuffer(PNDIS_STATUS Status, PNDIS_BUFFER *Buffer, NDIS_HANDLE PoolHandle, PVOID MemoryDescriptor, UINT Offset, UINT Length);
void __stdcall NdisCopyFromPacketToPacket(PNDIS_PACKET Destination, UINT DestinationOffset, UINT BytesToCopy, PNDIS_PACKET Source, UINT SourceOffset, PUINT BytesCopied);
void __stdcall NdisCopyFromPacketToPacketSafe(PNDIS_PACKET Destination, UINT DestinationOffset, UINT BytesToCopy, PNDIS_PACKET Source, UINT SourceOffset, PUINT BytesCopied, MM_PAGE_PRIORITY Priority);
void __stdcall NdisCopyReceiveNetBufferListInfo(PNET_BUFFER_LIST DestNetBufferList, PNET_BUFFER_LIST SrcNetBufferList);
void __stdcall NdisCopySendNetBufferListInfo(PNET_BUFFER_LIST DestNetBufferList, PNET_BUFFER_LIST SrcNetBufferList);
void __stdcall NdisDeregisterDeviceEx(NDIS_HANDLE NdisDeviceHandle);
void __stdcall NdisDeregisterProtocolDriver(NDIS_HANDLE NdisProtocolHandle);
void __stdcall NdisDprAcquireReadWriteLock(PNDIS_RW_LOCK Lock, BOOLEAN fWrite, PLOCK_STATE LockState);
void __stdcall NdisDprAllocatePacket(PNDIS_STATUS Status, PNDIS_PACKET *Packet, NDIS_HANDLE PoolHandle);
void __stdcall NdisDprAllocatePacketNonInterlocked(PNDIS_STATUS Status, PNDIS_PACKET *Packet, NDIS_HANDLE PoolHandle);
void __stdcall NdisDprFreePacket(PNDIS_PACKET Packet);
void __stdcall NdisDprFreePacketNonInterlocked(PNDIS_PACKET Packet);
void __stdcall NdisDprReleaseReadWriteLock(PNDIS_RW_LOCK Lock, PLOCK_STATE LockState);
void __stdcall NdisFCancelDirectOidRequest(NDIS_HANDLE NdisFilterHandle, PVOID RequestId);
void __stdcall NdisFCancelOidRequest(NDIS_HANDLE NdisFilterHandle, PVOID RequestId);
void __stdcall NdisFCancelSendNetBufferLists(NDIS_HANDLE NdisFilterHandle, PVOID CancelId);
void __stdcall NdisFDeregisterFilterDriver(NDIS_HANDLE NdisFilterDriverHandle);
void __stdcall NdisFDevicePnPEventNotify(NDIS_HANDLE NdisFilterHandle, PNET_DEVICE_PNP_EVENT NetDevicePnPEvent);
void __stdcall NdisFDirectOidRequestComplete(NDIS_HANDLE NdisFilterHandle, PNDIS_OID_REQUEST OidRequest, NDIS_STATUS Status);
void __stdcall NdisFIndicateReceiveNetBufferLists(NDIS_HANDLE NdisFilterHandle, PNET_BUFFER_LIST NetBufferLists, NDIS_PORT_NUMBER PortNumber, ULONG NumberOfNetBufferLists, ULONG ReceiveFlags);
void __stdcall NdisFIndicateStatus(NDIS_HANDLE NdisFilterHandle, PNDIS_STATUS_INDICATION StatusIndication);
void __stdcall NdisFOidRequestComplete(NDIS_HANDLE NdisFilterHandle, PNDIS_OID_REQUEST OidRequest, NDIS_STATUS Status);
void __stdcall NdisFPauseComplete(NDIS_HANDLE NdisFilterHandle);
void __stdcall NdisFRestartComplete(NDIS_HANDLE NdisFilterHandle, NDIS_STATUS Status);
void __stdcall NdisFReturnNetBufferLists(NDIS_HANDLE NdisFilterHandle, PNET_BUFFER_LIST NetBufferLists, ULONG ReturnFlags);
void __stdcall NdisFSendNetBufferLists(NDIS_HANDLE NdisFilterHandle, PNET_BUFFER_LIST NetBufferList, NDIS_PORT_NUMBER PortNumber, ULONG SendFlags);
void __stdcall NdisFSendNetBufferListsComplete(NDIS_HANDLE NdisFilterHandle, PNET_BUFFER_LIST NetBufferList, ULONG SendCompleteFlags);
void __stdcall NdisFreeBufferPool(NDIS_HANDLE PoolHandle);
void __stdcall NdisFreeCloneNetBufferList(PNET_BUFFER_LIST CloneNetBufferList, ULONG FreeCloneFlags);
void __stdcall NdisFreeCloneOidRequest(NDIS_HANDLE SourceHandle, PNDIS_OID_REQUEST Request);
void __stdcall NdisFreeFragmentNetBufferList(PNET_BUFFER_LIST FragmentNetBufferList, ULONG DataOffsetDelta, ULONG FreeFragmentFlags);
void __stdcall NdisFreeGenericObject(PNDIS_GENERIC_OBJECT NdisObject);
void __stdcall NdisFreeIoWorkItem(NDIS_HANDLE NdisIoWorkItemHandle);
void __stdcall NdisFreeMdl(PMDL Mdl);
void __stdcall NdisFreeMemory(PVOID VirtualAddress, UINT Length, UINT MemoryFlags);
void __stdcall NdisFreeMemoryWithTag(PVOID VirtualAddress, ULONG Tag);
void __stdcall NdisFreeMemoryWithTagPriority(NDIS_HANDLE NdisHandle, PVOID VirtualAddress, ULONG Tag);
void __stdcall NdisFreeNetBuffer(PNET_BUFFER NetBuffer);
void __stdcall NdisFreeNetBufferList(PNET_BUFFER_LIST NetBufferList);
void __stdcall NdisFreeNetBufferListContext(PNET_BUFFER_LIST NetBufferList, USHORT ContextSize);
void __stdcall NdisFreeNetBufferListPool(NDIS_HANDLE PoolHandle);
void __stdcall NdisFreeNetBufferPool(NDIS_HANDLE PoolHandle);
void __stdcall NdisFreePacket(PNDIS_PACKET Packet);
void __stdcall NdisFreePacketPool(NDIS_HANDLE PoolHandle);
void __stdcall NdisFreeRWLock(PNDIS_RW_LOCK_EX Lock);
void __stdcall NdisFreeReassembledNetBufferList(PNET_BUFFER_LIST ReassembledNetBufferList, ULONG DataOffsetDelta, ULONG FreeReassembleFlags);
void __stdcall NdisFreeScatterGatherList(NDIS_HANDLE NdisHandle, PSCATTER_GATHER_LIST ScatterGatherListBuffer, BOOLEAN WriteToDevice);
void __stdcall NdisFreeSharedMemory(NDIS_HANDLE NdisHandle, NDIS_HANDLE AllocationHandle);
void __stdcall NdisFreeSpinLock(PNDIS_SPIN_LOCK SpinLock);
void __stdcall NdisFreeTimerObject(NDIS_HANDLE TimerObject);
void __stdcall NdisGetCurrentProcessorCounts(PULONG pIdleCount, PULONG pKernelAndUser, PULONG pIndex);
void __stdcall NdisGetCurrentProcessorCpuUsage(PULONG pCpuUsage);
void __stdcall NdisGetSystemUpTime(PULONG pSystemUpTime);
void __stdcall NdisGetSystemUpTimeEx(PLARGE_INTEGER pSystemUpTime);
void __stdcall NdisIMAssociateMiniport(NDIS_HANDLE DriverHandle, NDIS_HANDLE ProtocolHandle);
void __stdcall NdisIMCopySendCompletePerPacketInfo(PNDIS_PACKET DstPacket, PNDIS_PACKET SrcPacket);
void __stdcall NdisIMCopySendPerPacketInfo(PNDIS_PACKET DstPacket, PNDIS_PACKET SrcPacket);
void __stdcall NdisIMDeregisterLayeredMiniport(NDIS_HANDLE DriverHandle);
void __stdcall NdisIfDeleteIfStackEntry(NET_IFINDEX HigherLayerIfIndex, NET_IFINDEX LowerLayerIfIndex);
void __stdcall NdisIfDeregisterInterface(NET_IFINDEX ifIndex);
void __stdcall NdisIfDeregisterProvider(NDIS_HANDLE NdisProviderHandle);
void __stdcall NdisInitializeEvent(PNDIS_EVENT Event);
void __stdcall NdisInitializeNPagedLookasideList(PNPAGED_LOOKASIDE_LIST Lookaside, PALLOCATE_FUNCTION Allocate, PFREE_FUNCTION Free, ULONG Flags, SIZE_T Size, ULONG Tag, USHORT Depth);
void __stdcall NdisInitializeReadWriteLock(PNDIS_RW_LOCK Lock);
void __stdcall NdisInitializeString(PNDIS_STRING Destination, PUCHAR Source);
void __stdcall NdisInitializeTimer(PNDIS_TIMER Timer, PNDIS_TIMER_FUNCTION TimerFunction, PVOID FunctionContext);
void __stdcall NdisInitializeWrapper(PNDIS_HANDLE NdisWrapperHandle, PVOID SystemSpecific1, PVOID SystemSpecific2, PVOID SystemSpecific3);
void __stdcall NdisInitiateOffload(NDIS_HANDLE NdisBindingHandle, PNDIS_PROTOCOL_OFFLOAD_BLOCK_LIST OffloadBlockList);
void __stdcall NdisInvalidateOffload(NDIS_HANDLE NdisBindingHandle, PNDIS_PROTOCOL_OFFLOAD_BLOCK_LIST OffloadBlockList);
void __stdcall NdisMAllocateSharedMemory(NDIS_HANDLE MiniportAdapterHandle, ULONG Length, BOOLEAN Cached, PVOID *VirtualAddress, PNDIS_PHYSICAL_ADDRESS PhysicalAddress);
void __stdcall NdisMCancelTimer(PNDIS_MINIPORT_TIMER Timer, PBOOLEAN TimerCancelled);
void __stdcall NdisMCloseLog(NDIS_HANDLE LogHandle);
void __stdcall NdisMCoActivateVcComplete(NDIS_STATUS Status, NDIS_HANDLE NdisVcHandle, PCO_CALL_PARAMETERS CallParameters);
void __stdcall NdisMCoDeactivateVcComplete(NDIS_STATUS Status, NDIS_HANDLE NdisVcHandle);
void __stdcall NdisMCoIndicateReceiveNetBufferLists(NDIS_HANDLE NdisVcHandle, PNET_BUFFER_LIST NetBufferLists, ULONG NumberOfNetBufferLists, ULONG CoReceiveFlags);
void __stdcall NdisMCoIndicateReceivePacket(NDIS_HANDLE NdisVcHandle, PPNDIS_PACKET PacketArray, UINT NumberOfPackets);
void __stdcall NdisMCoIndicateStatus(NDIS_HANDLE MiniportAdapterHandle, NDIS_HANDLE NdisVcHandle, NDIS_STATUS GeneralStatus, PVOID StatusBuffer, ULONG StatusBufferSize);
void __stdcall NdisMCoIndicateStatusEx(NDIS_HANDLE MiniportAdapterHandle, NDIS_HANDLE NdisVcHandle, PNDIS_STATUS_INDICATION StatusIndication);
void __stdcall NdisMCoOidRequestComplete(NDIS_HANDLE MiniportAdapterHandle, NDIS_HANDLE NdisMiniportVcHandle, PNDIS_OID_REQUEST Request, NDIS_STATUS Status);
void __stdcall NdisMCoReceiveComplete(NDIS_HANDLE MiniportAdapterHandle);
void __stdcall NdisMCoRequestComplete(NDIS_STATUS Status, NDIS_HANDLE MiniportAdapterHandle, PNDIS_REQUEST Request);
void __stdcall NdisMCoSendComplete(NDIS_STATUS Status, NDIS_HANDLE NdisVcHandle, PNDIS_PACKET Packet);
void __stdcall NdisMCoSendNetBufferListsComplete(NDIS_HANDLE NdisVcHandle, PNET_BUFFER_LIST NetBufferLists, ULONG SendCompleteFlags);
void __stdcall NdisMCompleteBufferPhysicalMapping(NDIS_HANDLE MiniportAdapterHandle, PNDIS_BUFFER Buffer, ULONG PhysicalMapRegister);
void __stdcall NdisMDeregisterAdapterShutdownHandler(NDIS_HANDLE MiniportHandle);
void __stdcall NdisMDeregisterDmaChannel(NDIS_HANDLE MiniportDmaHandle);
void __stdcall NdisMDeregisterInterrupt(PNDIS_MINIPORT_INTERRUPT Interrupt);
void __stdcall NdisMDeregisterInterruptEx(NDIS_HANDLE NdisInterruptHandle);
void __stdcall NdisMDeregisterIoPortRange(NDIS_HANDLE MiniportAdapterHandle, UINT InitialPort, UINT NumberOfPorts, PVOID PortOffset);
void __stdcall NdisMDeregisterMiniportDriver(NDIS_HANDLE NdisMiniportDriverHandle);
void __stdcall NdisMDeregisterScatterGatherDma(NDIS_HANDLE NdisMiniportDmaHandle);
void __stdcall NdisMDeregisterWdiMiniportDriver(NDIS_MINIPORT_DRIVER_HANDLE NdisMiniportDriverHandle);
void __stdcall NdisMDirectOidRequestComplete(NDIS_HANDLE MiniportAdapterHandle, PNDIS_OID_REQUEST OidRequest, NDIS_STATUS Status);
void __stdcall NdisMFlushLog(NDIS_HANDLE LogHandle);
void __stdcall NdisMFreeMapRegisters(NDIS_HANDLE MiniportAdapterHandle);
void __stdcall NdisMFreeNetBufferSGList(NDIS_HANDLE NdisMiniportDmaHandle, PSCATTER_GATHER_LIST pSGL, PNET_BUFFER NetBuffer);
void __stdcall NdisMFreeSharedMemory(NDIS_HANDLE MiniportAdapterHandle, ULONG Length, BOOLEAN Cached, PVOID VirtualAddress, NDIS_PHYSICAL_ADDRESS PhysicalAddress);
void __stdcall NdisMGetDeviceProperty(NDIS_HANDLE MiniportAdapterHandle, PDEVICE_OBJECT *PhysicalDeviceObject, PDEVICE_OBJECT *FunctionalDeviceObject, PDEVICE_OBJECT *NextDeviceObject, PCM_RESOURCE_LIST *AllocatedResources, PCM_RESOURCE_LIST *AllocatedResourcesTranslated);
void __stdcall NdisMGetVirtualDeviceLocation(NDIS_HANDLE NdisMiniportHandle, NDIS_SRIOV_FUNCTION_ID VFId, PUSHORT SegmentNumber, PUCHAR BusNumber, PVOID Reserved, PUCHAR FunctionNumber);
void __stdcall NdisMGetVirtualFunctionLocation(NDIS_HANDLE NdisMiniportHandle, NDIS_SRIOV_FUNCTION_ID VFId, PUSHORT SegmentNumber, PUCHAR BusNumber, PUCHAR FunctionNumber);
void __stdcall NdisMIdleNotificationComplete(NDIS_HANDLE MiniportAdapterHandle);
void __stdcall NdisMIdleNotificationConfirm(NDIS_HANDLE MiniportAdapterHandle, NDIS_DEVICE_POWER_STATE IdlePowerState);
void __stdcall NdisMIndicateReceiveNetBufferLists(NDIS_HANDLE MiniportAdapterHandle, PNET_BUFFER_LIST NetBufferList, NDIS_PORT_NUMBER PortNumber, ULONG NumberOfNetBufferLists, ULONG ReceiveFlags);
void __stdcall NdisMIndicateStatus(NDIS_HANDLE MiniportHandle, NDIS_STATUS GeneralStatus, PVOID StatusBuffer, UINT StatusBufferSize);
void __stdcall NdisMIndicateStatusComplete(NDIS_HANDLE MiniportHandle);
void __stdcall NdisMIndicateStatusEx(NDIS_HANDLE MiniportAdapterHandle, PNDIS_STATUS_INDICATION StatusIndication);
void __stdcall NdisMInitializeTimer(PNDIS_MINIPORT_TIMER Timer, NDIS_HANDLE MiniportAdapterHandle, PNDIS_TIMER_FUNCTION TimerFunction, PVOID FunctionContext);
void __stdcall NdisMInitiateOffloadComplete(NDIS_HANDLE NdisMiniportHandle, PNDIS_MINIPORT_OFFLOAD_BLOCK_LIST OffloadBlockList);
void __stdcall NdisMInvalidateConfigBlock(NDIS_HANDLE NdisMiniportHandle, NDIS_SRIOV_FUNCTION_ID VFId, ULONGLONG BlockMask);
void __stdcall NdisMInvalidateOffloadComplete(NDIS_HANDLE NdisMiniportHandle, PNDIS_MINIPORT_OFFLOAD_BLOCK_LIST OffloadBlockList);
void __stdcall NdisMOffloadEventIndicate(NDIS_HANDLE NdisMiniportHandle, PNDIS_MINIPORT_OFFLOAD_BLOCK_LIST OffloadBlockList, ULONG IndicationCode);
void __stdcall NdisMOidRequestComplete(NDIS_HANDLE MiniportAdapterHandle, PNDIS_OID_REQUEST OidRequest, NDIS_STATUS Status);
void __stdcall NdisMPauseComplete(NDIS_HANDLE MiniportAdapterHandle);
void __stdcall NdisMQueryAdapterResources(PNDIS_STATUS Status, NDIS_HANDLE WrapperConfigurationContext, PNDIS_RESOURCE_LIST ResourceList, PUINT BufferSize);
void __stdcall NdisMQueryOffloadStateComplete(NDIS_HANDLE NdisMiniportHandle, PNDIS_MINIPORT_OFFLOAD_BLOCK_LIST OffloadBlockList);
void __stdcall NdisMRegisterAdapterShutdownHandler(NDIS_HANDLE MiniportHandle, PVOID ShutdownContext, ADAPTER_SHUTDOWN_HANDLER ShutdownHandler);
void __stdcall NdisMRegisterUnloadHandler(NDIS_HANDLE NdisWrapperHandle, PDRIVER_UNLOAD UnloadHandler);
void __stdcall NdisMResetComplete(NDIS_HANDLE MiniportAdapterHandle, NDIS_STATUS Status, BOOLEAN AddressingReset);
void __stdcall NdisMResetMiniport(NDIS_HANDLE MiniportAdapterHandle);
void __stdcall NdisMRestartComplete(NDIS_HANDLE MiniportAdapterHandle, NDIS_STATUS Status);
void __stdcall NdisMSendNetBufferListsComplete(NDIS_HANDLE MiniportAdapterHandle, PNET_BUFFER_LIST NetBufferList, ULONG SendCompleteFlags);
void __stdcall NdisMSetAttributesEx(NDIS_HANDLE MiniportAdapterHandle, NDIS_HANDLE MiniportAdapterContext, UINT CheckForHangTimeInSeconds, ULONG AttributeFlags, NDIS_INTERFACE_TYPE AdapterType);
void __stdcall NdisMSetPeriodicTimer(PNDIS_MINIPORT_TIMER Timer, UINT MillisecondPeriod);
void __stdcall NdisMSleep(ULONG MicrosecondsToSleep);
void __stdcall NdisMStartBufferPhysicalMapping(NDIS_HANDLE MiniportAdapterHandle, PNDIS_BUFFER Buffer, ULONG PhysicalMapRegister, BOOLEAN WriteToDevice, PNDIS_PHYSICAL_ADDRESS_UNIT PhysicalAddressArray, PUINT ArraySize);
void __stdcall NdisMTerminateOffloadComplete(NDIS_HANDLE NdisMiniportHandle, PNDIS_MINIPORT_OFFLOAD_BLOCK_LIST OffloadBlockList);
void __stdcall NdisMTriggerPDDrainNotification(NDIS_PD_QUEUE *Queue, BOOLEAN Isr);
void __stdcall NdisMUnmapIoSpace(NDIS_HANDLE MiniportAdapterHandle, PVOID VirtualAddress, UINT Length);
void __stdcall NdisMUpdateOffloadComplete(NDIS_HANDLE NdisMiniportHandle, PNDIS_MINIPORT_OFFLOAD_BLOCK_LIST OffloadBlockList);
void __stdcall NdisMapFile(PNDIS_STATUS Status, PVOID *MappedBuffer, NDIS_HANDLE FileHandle);
void __stdcall NdisOffloadTcpReceiveReturn(NDIS_HANDLE NdisBindingHandle, PNET_BUFFER_LIST NetBufferList);
void __stdcall NdisOpenConfiguration(PNDIS_STATUS Status, PNDIS_HANDLE ConfigurationHandle, NDIS_HANDLE WrapperConfigurationContext);
void __stdcall NdisOpenConfigurationKeyByIndex(PNDIS_STATUS Status, NDIS_HANDLE ConfigurationHandle, ULONG Index, PNDIS_STRING KeyName, PNDIS_HANDLE KeyHandle);
void __stdcall NdisOpenConfigurationKeyByName(PNDIS_STATUS Status, NDIS_HANDLE ConfigurationHandle, PNDIS_STRING SubKeyName, PNDIS_HANDLE SubKeyHandle);
void __stdcall NdisOpenFile(PNDIS_STATUS Status, PNDIS_HANDLE FileHandle, PUINT FileLength, PNDIS_STRING FileName, NDIS_PHYSICAL_ADDRESS HighestAcceptableAddress);
void __stdcall NdisQueryOffloadState(NDIS_HANDLE NdisBindingHandle, PNDIS_PROTOCOL_OFFLOAD_BLOCK_LIST OffloadBlockList);
void __stdcall NdisQueryPacket(PNDIS_PACKET Packet, PUINT PhysicalBufferCount, PUINT BufferCount, PNDIS_BUFFER *FirstBuffer, PUINT TotalPacketLength);
void __stdcall NdisQueueIoWorkItem(NDIS_HANDLE NdisIoWorkItemHandle, NDIS_IO_WORKITEM_ROUTINE Routine, PVOID WorkItemContext);
void __stdcall NdisReEnumerateProtocolBindings(NDIS_HANDLE NdisProtocolHandle);
void __stdcall NdisReadConfiguration(PNDIS_STATUS Status, PNDIS_CONFIGURATION_PARAMETER *ParameterValue, NDIS_HANDLE ConfigurationHandle, PNDIS_STRING Keyword, NDIS_PARAMETER_TYPE ParameterType);
void __stdcall NdisReadNetworkAddress(PNDIS_STATUS Status, PVOID *NetworkAddress, PUINT NetworkAddressLength, NDIS_HANDLE ConfigurationHandle);
void __stdcall NdisRegisterTdiCallBack(TDI_REGISTER_CALLBACK RegisterCallback, TDI_PNP_HANDLER PnPHandler);
void __stdcall NdisReleaseRWLock(PNDIS_RW_LOCK_EX Lock, PLOCK_STATE_EX LockState);
void __stdcall NdisReleaseReadWriteLock(PNDIS_RW_LOCK Lock, PLOCK_STATE LockState);
void __stdcall NdisResetEvent(PNDIS_EVENT Event);
void __stdcall NdisReturnNetBufferLists(NDIS_HANDLE NdisBindingHandle, PNET_BUFFER_LIST NetBufferLists, ULONG ReturnFlags);
void __stdcall NdisSendNetBufferLists(NDIS_HANDLE NdisBindingHandle, PNET_BUFFER_LIST NetBufferLists, NDIS_PORT_NUMBER PortNumber, ULONG SendFlags);
void __stdcall NdisSetEvent(PNDIS_EVENT Event);
void __stdcall NdisSetPacketPoolProtocolId(NDIS_HANDLE PacketPoolHandle, UINT ProtocolId);
void __stdcall NdisSetPacketStatus(PNDIS_PACKET Packet, NDIS_STATUS Status, NDIS_HANDLE Handle, ULONG Code);
void __stdcall NdisSetPeriodicTimer(PNDIS_TIMER NdisTimer, UINT MillisecondsPeriod);
void __stdcall NdisSetTimer(PNDIS_TIMER Timer, UINT MillisecondsToDelay);
void __stdcall NdisSetTimerEx(PNDIS_TIMER NdisTimer, UINT MillisecondsToDelay, PVOID FunctionContext);
void __stdcall NdisSetupDmaTransfer(PNDIS_STATUS Status, NDIS_HANDLE NdisDmaHandle, PNDIS_BUFFER Buffer, ULONG Offset, ULONG Length, BOOLEAN WriteToDevice);
void __stdcall NdisTerminateOffload(NDIS_HANDLE NdisBindingHandle, PNDIS_PROTOCOL_OFFLOAD_BLOCK_LIST OffloadBlockList);
void __stdcall NdisTerminateWrapper(NDIS_HANDLE NdisWrapperHandle, PVOID SystemSpecific);
void __stdcall NdisUnchainBufferAtBack(PNDIS_PACKET Packet, PNDIS_BUFFER *Buffer);
void __stdcall NdisUnchainBufferAtFront(PNDIS_PACKET Packet, PNDIS_BUFFER *Buffer);
void __stdcall NdisUnmapFile(NDIS_HANDLE FileHandle);
void __stdcall NdisUpdateOffload(NDIS_HANDLE NdisBindingHandle, PNDIS_PROTOCOL_OFFLOAD_BLOCK_LIST OffloadBlockList);
void __stdcall NdisUpdateSharedMemory(NDIS_HANDLE NdisAdapterHandle, ULONG Length, PVOID VirtualAddress, NDIS_PHYSICAL_ADDRESS PhysicalAddress);
void __stdcall NdisWriteConfiguration(PNDIS_STATUS Status, NDIS_HANDLE ConfigurationHandle, PNDIS_STRING Keyword, PNDIS_CONFIGURATION_PARAMETER ParameterValue);
void __stdcall Ndr64AsyncServerCall(PRPC_MESSAGE pRpcMsg);
void __stdcall Ndr64AsyncServerCall64(PRPC_MESSAGE pRpcMsg);
void __stdcall Ndr64AsyncServerCallAll(PRPC_MESSAGE pRpcMsg);
void __stdcall NdrAsyncServerCall(PRPC_MESSAGE pRpcMsg);
void __stdcall NdrByteCountPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrByteCountPointerFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrClearOutParameters(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, void *ArgAddr);
void __stdcall NdrClientContextMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT ContextHandle, int fCheck);
void __stdcall NdrClientContextUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT *pContextHandle, RPC_BINDING_HANDLE BindHandle);
void __stdcall NdrClientInitialize(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned int ProcNum);
void __stdcall NdrClientInitializeNew(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned int ProcNum);
void __stdcall NdrComplexArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrComplexArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrComplexStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrComplexStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrConformantArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrConformantArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrConformantStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrConformantStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrConformantVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrConformantVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrConformantVaryingStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrConformantVaryingStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrContextHandleSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrConvert(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
void __stdcall NdrConvert2(PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, int NumberParams);
void __stdcall NdrCorrelationFree(PMIDL_STUB_MESSAGE pStubMsg);
void __stdcall NdrCorrelationInitialize(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory, unsigned int CacheSize, unsigned int flags);
void __stdcall NdrCorrelationPass(PMIDL_STUB_MESSAGE pStubMsg);
void __stdcall NdrCsArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrCsArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrCsTagBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrFixedArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrFixedArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrFreeBuffer(PMIDL_STUB_MESSAGE pStubMsg);
void __stdcall NdrFullPointerXlatFree(PFULL_PTR_XLAT_TABLES pXlatTables);
void __stdcall NdrInterfacePointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrInterfacePointerFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrNonConformantStringBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrNonEncapsulatedUnionBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrNonEncapsulatedUnionFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrOleFree(void *NodeToFree);
void __stdcall NdrPartialIgnoreClientBufferSize(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory);
void __stdcall NdrPartialIgnoreClientMarshall(PMIDL_STUB_MESSAGE pStubMsg, void *pMemory);
void __stdcall NdrPartialIgnoreServerInitialize(PMIDL_STUB_MESSAGE pStubMsg, void **ppMemory, PFORMAT_STRING pFormat);
void __stdcall NdrPartialIgnoreServerUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, void **ppMemory);
void __stdcall NdrPointerBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrPointerFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrRpcSmClientFree(void *NodeToFree);
void __stdcall NdrRpcSmSetClientToOsf(PMIDL_STUB_MESSAGE pMessage);
void __stdcall NdrRpcSsDefaultFree(void *NodeToFree);
void __stdcall NdrRpcSsDisableAllocate(PMIDL_STUB_MESSAGE pMessage);
void __stdcall NdrRpcSsEnableAllocate(PMIDL_STUB_MESSAGE pMessage);
void __stdcall NdrServerCall(PRPC_MESSAGE pRpcMsg);
void __stdcall NdrServerCall2(PRPC_MESSAGE pRpcMsg);
void __stdcall NdrServerCall3(PRPC_MESSAGE pRpcMsg);
void __stdcall NdrServerCallAll(PRPC_MESSAGE pRpcMsg);
void __stdcall NdrServerCallNdr64(PRPC_MESSAGE pRpcMsg);
void __stdcall NdrServerContextMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine);
void __stdcall NdrServerContextNewMarshall(PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine, PFORMAT_STRING pFormat);
void __stdcall NdrServerInitializeMarshall(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg);
void __stdcall NdrServerInitializePartial(PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDescriptor, unsigned int RequestedBufferSize);
void __stdcall NdrServerMarshall(void *pThis, void *pChannel, PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat);
void __stdcall NdrSimpleStructBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrSimpleStructFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrSimpleTypeMarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, unsigned __int8 FormatChar);
void __stdcall NdrSimpleTypeUnmarshall(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, unsigned __int8 FormatChar);
void __stdcall NdrUserMarshalBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrUserMarshalFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrVaryingArrayBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrVaryingArrayFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrXmitOrRepAsBufferSize(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NdrXmitOrRepAsFree(PMIDL_STUB_MESSAGE pStubMsg, unsigned __int8 *pMemory, PFORMAT_STRING pFormat);
void __stdcall NetAdapterInitFree(PNETADAPTER_INIT AdapterInit);
void __stdcall NetAdapterInitSetDatapathCallbacks(PNETADAPTER_INIT AdapterInit, PNET_ADAPTER_DATAPATH_CALLBACKS DatapathCallbacks);
void __stdcall NetAdapterInitSetNetPowerSettingsAttributes(PNETADAPTER_INIT AdapterInit, PWDF_OBJECT_ATTRIBUTES NetPowerSettingsAttributes);
void __stdcall NetAdapterInitSetNetRequestAttributes(PNETADAPTER_INIT AdapterInit, PWDF_OBJECT_ATTRIBUTES NetRequestAttributes);
void __stdcall NetAdapterOffloadSetChecksumCapabilities(NETADAPTER Adapter, PNET_ADAPTER_OFFLOAD_CHECKSUM_CAPABILITIES HardwareCapabilities, PFN_NET_ADAPTER_OFFLOAD_SET_CHECKSUM EvtAdapterOffloadSetChecksum);
void __stdcall NetAdapterOffloadSetLsoCapabilities(NETADAPTER Adapter, PNET_ADAPTER_OFFLOAD_LSO_CAPABILITIES HardwareCapabilities, PFN_NET_ADAPTER_OFFLOAD_SET_LSO EvtAdapterOffloadSetLso);
void __stdcall NetAdapterSetCurrentLinkLayerAddress(NETADAPTER Adapter, PNET_ADAPTER_LINK_LAYER_ADDRESS LinkLayerAddress);
void __stdcall NetAdapterSetCurrentLinkState(NETADAPTER Adapter, PNET_ADAPTER_LINK_STATE CurrentLinkState);
void __stdcall NetAdapterSetDataPathCapabilities(NETADAPTER Adapter, PNET_ADAPTER_TX_CAPABILITIES TxCapabilities, PNET_ADAPTER_RX_CAPABILITIES RxCapabilities);
void __stdcall NetAdapterSetLinkLayerCapabilities(NETADAPTER Adapter, PNET_ADAPTER_LINK_LAYER_CAPABILITIES LinkLayerCapabilities);
void __stdcall NetAdapterSetLinkLayerMtuSize(NETADAPTER Adapter, ULONG MtuSize);
void __stdcall NetAdapterSetPermanentLinkLayerAddress(NETADAPTER Adapter, PNET_ADAPTER_LINK_LAYER_ADDRESS LinkLayerAddress);
void __stdcall NetAdapterSetPowerCapabilities(NETADAPTER Adapter, PNET_ADAPTER_POWER_CAPABILITIES PowerCapabilities);
void __stdcall NetAdapterSetReceiveScalingCapabilities(NETADAPTER Adapter, PCNET_ADAPTER_RECEIVE_SCALING_CAPABILITIES Capabilities);
void __stdcall NetAdapterStop(NETADAPTER Adapter);
void __stdcall NetConfigurationClose(NETCONFIGURATION Configuration);
void __stdcall NetDmaDeregisterProvider(PVOID NetDmaProviderHandle);
void __stdcall NetDmaInterruptDpc(PVOID NetDmaChannelHandle, LARGE_INTEGER DmaDescriptor);
void __stdcall NetDmaIsr(PVOID NetDmaChannelHandle, LARGE_INTEGER DmaDescriptor, PULONG pCpuNumber);
void __stdcall NetDmaPnPEventNotify(PVOID NetDmaProviderHandle, PNET_DMA_PNP_NOTIFICATION PnPEvent);
void __stdcall NetDmaProviderStart(PVOID NetDmaProviderHandle, PNET_DMA_PROVIDER_ATTRIBUTES ProviderAttributes);
void __stdcall NetDmaProviderStop(PVOID NetDmaProviderHandle);
void __stdcall NetRequestCompleteWithoutInformation(NETREQUEST Request, NTSTATUS CompletionStatus);
void __stdcall NetRequestMethodComplete(NETREQUEST Request, NTSTATUS CompletionStatus, UINT BytesRead, UINT BytesWritten);
void __stdcall NetRequestQueryDataComplete(NETREQUEST Request, NTSTATUS CompletionStatus, UINT BytesWritten);
void __stdcall NetRequestSetBytesNeeded(NETREQUEST Request, UINT BytesNeeded);
void __stdcall NetRequestSetDataComplete(NETREQUEST Request, NTSTATUS CompletionStatus, UINT BytesRead);
void __stdcall NetRingBufferReturnAllPackets(const NET_DATAPATH_DESCRIPTOR *Descriptor);
void __stdcall NetRingBufferReturnCompletedPackets(const NET_DATAPATH_DESCRIPTOR *Descriptor, UINT32 BatchSize);
void __stdcall NetRingBufferReturnCompletedPacketsThroughIndex(const NET_DATAPATH_DESCRIPTOR *Descriptor, UINT32 EndIndex, UINT32 BatchSize);
void __stdcall NetRxQueueNotifyMoreReceivedPacketsAvailable(NETPACKETQUEUE RxQueue);
void __stdcall NetTxQueueNotifyMoreCompletedPacketsAvailable(NETPACKETQUEUE TxQueue);
void __stdcall NmrClientDetachProviderComplete(HANDLE NmrBindingHandle);
void __stdcall NmrProviderDetachClientComplete(HANDLE NmrBindingHandle);
void __stdcall ORGetVersion(PDWORD pdwMajorVersion, PDWORD pdwMinorVersion);
void __stdcall ObDereferenceObjectDeferDelete(PVOID Object);
void __stdcall ObDereferenceObjectDeferDeleteWithTag(PVOID Object, ULONG Tag);
void __stdcall ObMakeTemporaryObject(PVOID Object);
void __stdcall ObReleaseObjectSecurity(PSECURITY_DESCRIPTOR SecurityDescriptor, BOOLEAN MemoryAllocated);
void __stdcall ObUnRegisterCallbacks(PVOID RegistrationHandle);
void __stdcall PCSTREAMRESOURCE_DESCRIPTOR_INIT(PPCSTREAMRESOURCE_DESCRIPTOR Resource);
void __stdcall PC_POWER_FRAMEWORK_SETTINGS_INIT(PPC_POWER_FRAMEWORK_SETTINGS PowerFrameworkSettings);
void __stdcall PEP_ACPI_INITIALIZE_EXTENDED_IO_RESOURCE(BOOLEAN ResourceUsage, UCHAR Decode, BOOLEAN IsMinFixed, BOOLEAN IsMaxFixed, UCHAR ISARanges, ULONGLONG AddressGranularity, ULONGLONG AddressMinimum, ULONGLONG AddressMaximum, ULONGLONG AddressTranslation, ULONGLONG RangeLength, ULONGLONG TypeSpecificAttributes, PUNICODE_STRING DescriptorName, BOOLEAN TranslationTypeNonStatic, BOOLEAN TanslationSparseDensity, PPEP_ACPI_RESOURCE Resource);
void __stdcall PEP_ACPI_INITIALIZE_EXTENDED_MEMORY_RESOURCE(BOOLEAN ResourceUsage, UCHAR Decode, BOOLEAN IsMinFixed, BOOLEAN IsMaxFixed, UCHAR Cacheable, BOOLEAN ReadWrite, ULONGLONG AddressGranularity, ULONGLONG AddressMinimum, ULONGLONG AddressMaximum, ULONGLONG AddressTranslation, ULONGLONG RangeLength, ULONGLONG TypeSpecificAttributes, PUNICODE_STRING DescriptorName, UCHAR MemoryRangeType, BOOLEAN TranslationTypeNonStatic, PPEP_ACPI_RESOURCE Resource);
void __stdcall PEP_ACPI_INITIALIZE_GPIO_INT_RESOURCE(KINTERRUPT_MODE InterruptType, KINTERRUPT_POLARITY LevelType, BOOLEAN Shareable, BOOLEAN CanWake, GPIO_PIN_CONFIG_TYPE PinConfig, USHORT DebounceTimeout, UCHAR ResourceSourceIndex, PUNICODE_STRING ResourceSourceName, BOOLEAN ResourceUsage, PUCHAR VendorData, USHORT VendorDataLength, PUSHORT PinTable, UCHAR PinCount, PPEP_ACPI_RESOURCE Resource);
void __stdcall PEP_ACPI_INITIALIZE_GPIO_IO_RESOURCE(BOOLEAN Shareable, BOOLEAN CanWake, GPIO_PIN_CONFIG_TYPE PinConfig, USHORT DebounceTimeout, USHORT DriveStrength, GPIO_PIN_IORESTRICTION_TYPE IoRestriction, UCHAR ResourceSourceIndex, PUNICODE_STRING ResourceSourceName, BOOLEAN ResourceUsage, PUCHAR VendorData, USHORT VendorDataLength, PUSHORT PinTable, USHORT PinCount, PPEP_ACPI_RESOURCE Resource);
void __stdcall PEP_ACPI_INITIALIZE_INTERRUPT_RESOURCE(BOOLEAN ResourceUsage, KINTERRUPT_MODE EdgeLevel, KINTERRUPT_POLARITY InterruptLevel, BOOLEAN ShareType, BOOLEAN Wake, PULONG PinTable, UCHAR PinCount, PPEP_ACPI_RESOURCE Resource);
void __stdcall PEP_ACPI_INITIALIZE_IOPORT_RESOURCE(UCHAR Decode, USHORT MinimumAddress, USHORT MaximumAddress, UCHAR Alignment, UCHAR PortLength, PPEP_ACPI_RESOURCE Resource);
void __stdcall PEP_ACPI_INITIALIZE_MEMORY_RESOURCE(UCHAR ReadWrite, ULONG MinimumAddress, ULONG MaximumAddress, ULONG Alignment, ULONG MemorySize, PPEP_ACPI_RESOURCE Resource);
void __stdcall PEP_ACPI_INITIALIZE_SPB_I2C_RESOURCE(USHORT SlaveAddress, BOOLEAN DeviceInitiated, ULONG ConnectionSpeed, BOOLEAN AddressingMode, PUNICODE_STRING ResourceSource, UCHAR ResourceSourceIndex, BOOLEAN ResourceUsage, BOOLEAN SharedMode, PCHAR VendorData, USHORT VendorDataLength, PPEP_ACPI_RESOURCE Resource);
void __stdcall PEP_ACPI_INITIALIZE_SPB_SPI_RESOURCE(USHORT DeviceSelection, UCHAR DeviceSelectionPolarity, UCHAR WireMode, UCHAR DataBitLength, BOOLEAN SlaveMode, ULONG ConnectionSpeed, UCHAR ClockPolarity, UCHAR ClockPhase, PUNICODE_STRING ResourceSource, UCHAR ResourceSourceIndex, BOOLEAN ResourceUsage, BOOLEAN SharedMode, PCHAR VendorData, USHORT VendorDataLength, PPEP_ACPI_RESOURCE Resource);
void __stdcall PEP_ACPI_INITIALIZE_SPB_UART_RESOURCE(ULONG BaudRate, UCHAR BitsPerByte, UCHAR StopBits, UCHAR LinesInUse, UCHAR IsBigEndian, UCHAR Parity, UCHAR FlowControl, USHORT RxSize, USHORT TxSize, PUNICODE_STRING ResourceSource, UCHAR ResourceSourceIndex, BOOLEAN ResourceUsage, BOOLEAN SharedMode, PCHAR VendorData, USHORT VendorDataLength, PPEP_ACPI_RESOURCE Resource);
void __stdcall PcwCloseInstance(PPCW_INSTANCE Instance);
void __stdcall PcwUnregister(PPCW_REGISTRATION Registration);
void __stdcall PfxInitialize(PPREFIX_TABLE PrefixTable);
void __stdcall PfxRemovePrefix(PPREFIX_TABLE PrefixTable, PPREFIX_TABLE_ENTRY PrefixTableEntry);
void __stdcall PoDeletePowerRequest(PVOID PowerRequest);
void __stdcall PoDeleteThermalRequest(PVOID ThermalRequest);
void __stdcall PoEndDeviceBusy(PULONG IdlePointer);
void __stdcall PoFxActivateComponent(POHANDLE Handle, ULONG Component, ULONG Flags);
void __stdcall PoFxCompleteDevicePowerNotRequired(POHANDLE Handle);
void __stdcall PoFxCompleteIdleCondition(POHANDLE Handle, ULONG Component);
void __stdcall PoFxCompleteIdleState(POHANDLE Handle, ULONG Component);
void __stdcall PoFxIdleComponent(POHANDLE Handle, ULONG Component, ULONG Flags);
void __stdcall PoFxIssueComponentPerfStateChange(POHANDLE Handle, ULONG Flags, ULONG Component, PPO_FX_PERF_STATE_CHANGE PerfChange, PVOID Context);
void __stdcall PoFxIssueComponentPerfStateChangeMultiple(POHANDLE Handle, ULONG Flags, ULONG Component, ULONG PerfChangesCount, PO_FX_PERF_STATE_CHANGE PerfChanges[], PVOID Context);
void __stdcall PoFxNotifySurprisePowerOn(PDEVICE_OBJECT Pdo);
void __stdcall PoFxRegisterDripsWatchdogCallback(POHANDLE Handle, PPO_FX_DRIPS_WATCHDOG_CALLBACK Callback, BOOLEAN IncludeChildDevices, PDRIVER_OBJECT MatchingDriverObject);
void __stdcall PoFxReportDevicePoweredOn(POHANDLE Handle);
void __stdcall PoFxSetComponentLatency(POHANDLE Handle, ULONG Component, ULONGLONG Latency);
void __stdcall PoFxSetComponentResidency(POHANDLE Handle, ULONG Component, ULONGLONG Residency);
void __stdcall PoFxSetComponentWake(POHANDLE Handle, ULONG Component, BOOLEAN WakeHint);
void __stdcall PoFxSetDeviceIdleTimeout(POHANDLE Handle, ULONGLONG IdleTimeout);
void __stdcall PoFxStartDevicePowerManagement(POHANDLE Handle);
void __stdcall PoFxUnregisterDevice(POHANDLE Handle);
void __stdcall PoSetDeviceBusyEx(PULONG IdlePointer);
void __stdcall PoSetHiberRange(PVOID MemoryMap, ULONG Flags, PVOID Address, ULONG_PTR Length, ULONG Tag);
void __stdcall PoSetSystemState(EXECUTION_STATE Flags);
void __stdcall PoSetSystemWake(PIRP Irp);
void __stdcall PoStartDeviceBusy(PULONG IdlePointer);
void __stdcall PoStartNextPowerIrp(PIRP Irp);
void __stdcall PoUnregisterSystemState(PVOID StateHandle);
void __stdcall ProbeForRead(volatile void *Address, SIZE_T Length, ULONG Alignment);
void __stdcall ProbeForWrite(volatile void *Address, SIZE_T Length, ULONG Alignment);
void __stdcall PsChargePoolQuota(PEPROCESS Process, POOL_TYPE PoolType, ULONG_PTR Amount);
void __stdcall PsDereferenceImpersonationToken(PACCESS_TOKEN ImpersonationToken);
void __stdcall PsDereferencePrimaryToken(PACCESS_TOKEN PrimaryToken);
void __stdcall PsDereferenceSiloContext(PVOID SiloContext);
void __stdcall PsDetachSiloFromCurrentThread(PESILO PreviousSilo);
void __stdcall PsReferenceSiloContext(PVOID SiloContext);
void __stdcall PsReleaseSiloHardReference(PESILO Silo);
void __stdcall PsRestoreImpersonation(PETHREAD Thread, PSE_IMPERSONATION_STATE ImpersonationState);
void __stdcall PsReturnPoolQuota(PEPROCESS Process, POOL_TYPE PoolType, ULONG_PTR Amount);
void __stdcall PsTerminateServerSilo(PESILO ServerSilo, NTSTATUS ExitStatus);
void __stdcall PsUnregisterSiloMonitor(PSILO_MONITOR Monitor);
void __stdcall PsUpdateDiskCounters(PEPROCESS Process, ULONG64 BytesRead, ULONG64 BytesWritten, ULONG ReadOperationCount, ULONG WriteOperationCount, ULONG FlushOperationCount);
void __stdcall PshedFreeMemory(PVOID Address);
void __stdcall PushEntryList(PSINGLE_LIST_ENTRY ListHead, PSINGLE_LIST_ENTRY Entry);
void __stdcall READ_PORT_BUFFER_UCHAR(PUCHAR Port, PUCHAR Buffer, ULONG Count);
void __stdcall READ_PORT_BUFFER_ULONG(PULONG Port, PULONG Buffer, ULONG Count);
void __stdcall READ_PORT_BUFFER_USHORT(PUSHORT Port, PUSHORT Buffer, ULONG Count);
void __stdcall READ_REGISTER_BUFFER_UCHAR(volatile UCHAR *Register, PUCHAR Buffer, ULONG Count);
void __stdcall READ_REGISTER_BUFFER_ULONG(volatile ULONG *Register, PULONG Buffer, ULONG Count);
void __stdcall READ_REGISTER_BUFFER_ULONG64(volatile ULONG64 *Register, PULONG64 Buffer, ULONG Count);
void __stdcall READ_REGISTER_BUFFER_USHORT(volatile USHORT *Register, PUSHORT Buffer, ULONG Count);
void __stdcall RECORDER_CONFIGURE_PARAMS_INIT(PRECORDER_CONFIGURE_PARAMS Params);
void __stdcall RECORDER_LOG_CREATE_PARAMS_INIT(PRECORDER_LOG_CREATE_PARAMS Params, PSTR LogIdentifier);
void __stdcall RECORDER_LOG_CREATE_PARAMS_INIT_APPEND_POINTER(PRECORDER_LOG_CREATE_PARAMS Params, PSTR LogIdentifier, PVOID LogIdentifierAppendPointer);
void __stdcall RpcCsGetTags(RPC_BINDING_HANDLE hBinding, int fServerSide, unsigned int *pulSendingTag, unsigned int *pulDesiredReceivingTag, unsigned int *pulReceivingTag, error_status_t *pStatus);
void __stdcall RpcErrorClearInformation();
void __stdcall RpcServerYield();
void __stdcall RpcSsDestroyClientContext(void **ContextHandle);
void __stdcall RpcSsDisableAllocate();
void __stdcall RpcSsDontSerializeContext();
void __stdcall RpcSsEnableAllocate();
void __stdcall RpcSsFree(void *NodeToFree);
void __stdcall RpcSsSetClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree);
void __stdcall RpcSsSetThreadHandle(RPC_SS_THREAD_HANDLE Id);
void __stdcall RpcSsSwapClientAllocFree(RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree, RPC_CLIENT_ALLOC **OldClientAlloc, RPC_CLIENT_FREE **OldClientFree);
void __stdcall RpcUserFree(handle_t AsyncHandle, void *pBuffer);
void __stdcall RtlAssert(PVOID VoidFailedAssertion, PVOID VoidFileName, ULONG LineNumber, PSTR MutableMessage);
void __stdcall RtlCaptureContext(PCONTEXT ContextRecord);
void __stdcall RtlClearAllBits(PRTL_BITMAP BitMapHeader);
void __stdcall RtlClearBit(PRTL_BITMAP BitMapHeader, ULONG BitNumber);
void __stdcall RtlClearBits(PRTL_BITMAP BitMapHeader, ULONG StartingIndex, ULONG NumberToClear);
void __stdcall RtlCopyBitMap(PRTL_BITMAP Source, PRTL_BITMAP Destination, ULONG TargetBit);
void __stdcall RtlCopyLuid(PLUID DestinationLuid, PLUID SourceLuid);
void __stdcall RtlCopyMemory(void *, const void *Source, SIZE_T Length);
void __stdcall RtlCopyMemoryNonTemporal(void *Destination, const void *Source, SIZE_T Length);
void __stdcall RtlCopyString(PSTRING DestinationString, const STRING *SourceString);
void __stdcall RtlCopyUnicodeString(PUNICODE_STRING DestinationString, PCUNICODE_STRING SourceString);
void __stdcall RtlDeleteElementGenericTableAvlEx(PRTL_AVL_TABLE Table, PVOID NodeOrParent);
void __stdcall RtlDeleteHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable);
void __stdcall RtlDeleteNoSplay(PRTL_SPLAY_LINKS Links, PRTL_SPLAY_LINKS *Root);
void __stdcall RtlEndEnumerationHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable, PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator);
void __stdcall RtlEndStrongEnumerationHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable, PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator);
void __stdcall RtlEndWeakEnumerationHashTable(PRTL_DYNAMIC_HASH_TABLE HashTable, PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator);
void __stdcall RtlExtractBitMap(PRTL_BITMAP Source, PRTL_BITMAP Destination, ULONG TargetBit, ULONG NumberOfBits);
void __stdcall RtlFillMemory(void *, SIZE_T Length, UCHAR Fill);
void __stdcall RtlFillMemoryUlong(PVOID Destination, SIZE_T Length, ULONG Pattern);
void __stdcall RtlFreeAnsiString(PANSI_STRING AnsiString);
void __stdcall RtlFreeOemString(POEM_STRING OemString);
void __stdcall RtlFreeUnicodeString(PUNICODE_STRING UnicodeString);
void __stdcall RtlInitAnsiString(PANSI_STRING DestinationString, PCSZ SourceString);
void __stdcall RtlInitCodePageTable(PUSHORT TableBase, PCPTABLEINFO CodePageTable);
void __stdcall RtlInitEmptyAnsiString(PANSI_STRING AnsiString, PCHAR Buffer, USHORT BufferSize);
void __stdcall RtlInitEmptyUnicodeString(PUNICODE_STRING UnicodeString, PWCHAR Buffer, USHORT BufferSize);
void __stdcall RtlInitHashTableContext(PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context);
void __stdcall RtlInitHashTableContextFromEnumerator(PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context, PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator);
void __stdcall RtlInitString(PSTRING DestinationString, PCSZ SourceString);
void __stdcall RtlInitUnicodeString(PUNICODE_STRING DestinationString, PCWSTR SourceString);
void __stdcall RtlInitializeBitMap(PRTL_BITMAP BitMapHeader, PULONG BitMapBuffer, ULONG SizeOfBitMap);
void __stdcall RtlInitializeGenericTable(PRTL_GENERIC_TABLE Table, PRTL_GENERIC_COMPARE_ROUTINE CompareRoutine, PRTL_GENERIC_ALLOCATE_ROUTINE AllocateRoutine, PRTL_GENERIC_FREE_ROUTINE FreeRoutine, PVOID TableContext);
void __stdcall RtlInitializeGenericTableAvl(PRTL_AVL_TABLE Table, PRTL_AVL_COMPARE_ROUTINE CompareRoutine, PRTL_AVL_ALLOCATE_ROUTINE AllocateRoutine, PRTL_AVL_FREE_ROUTINE FreeRoutine, PVOID TableContext);
void __stdcall RtlInitializeSplayLinks(PRTL_SPLAY_LINKS Links);
void __stdcall RtlInitializeUnicodePrefix(PUNICODE_PREFIX_TABLE PrefixTable);
void __stdcall RtlInsertAsLeftChild(PRTL_SPLAY_LINKS ParentLinks, PRTL_SPLAY_LINKS ChildLinks);
void __stdcall RtlInsertAsRightChild(PRTL_SPLAY_LINKS ParentLinks, PRTL_SPLAY_LINKS ChildLinks);
void __stdcall RtlMapGenericMask(PACCESS_MASK AccessMask, PGENERIC_MAPPING GenericMapping);
void __stdcall RtlMoveMemory(void *, const void *Source, SIZE_T Length);
void __stdcall RtlPrefetchMemoryNonTemporal(PVOID Source, SIZE_T Length);
void __stdcall RtlReleaseHashTableContext(PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context);
void __stdcall RtlRemoveUnicodePrefix(PUNICODE_PREFIX_TABLE PrefixTable, PUNICODE_PREFIX_TABLE_ENTRY PrefixTableEntry);
void __stdcall RtlRunOnceInitialize(PRTL_RUN_ONCE RunOnce);
void __stdcall RtlSanitizeUnicodeStringPadding(PUNICODE_STRING String);
void __stdcall RtlSecondsSince1970ToTime(ULONG ElapsedSeconds, PLARGE_INTEGER Time);
void __stdcall RtlSecondsSince1980ToTime(ULONG ElapsedSeconds, PLARGE_INTEGER Time);
void __stdcall RtlSetAllBits(PRTL_BITMAP BitMapHeader);
void __stdcall RtlSetBit(PRTL_BITMAP BitMapHeader, ULONG BitNumber);
void __stdcall RtlSetBits(PRTL_BITMAP BitMapHeader, ULONG StartingIndex, ULONG NumberToSet);
void __stdcall RtlTimeToTimeFields(PLARGE_INTEGER Time, PTIME_FIELDS TimeFields);
void __stdcall RtlUpperString(PSTRING DestinationString, const STRING *SourceString);
void __stdcall RtlZeroMemory(void *, SIZE_T Length);
void __stdcall RxAcquireFileForNtCreateSection(PFILE_OBJECT FileObject);
void __stdcall RxAddToWorkque(PRX_CONTEXT RxContext, PIRP Irp);
void __stdcall RxAddVirtualNetRootToNetRoot(PNET_ROOT NetRoot, PV_NET_ROOT VNetRoot);
void __stdcall RxBootstrapWorkerThreadDispatcher(PRX_WORK_QUEUE WorkQueue);
void __stdcall RxCancelBlockingOperation(PRX_CONTEXT RxContext, PIRP Irp);
void __stdcall RxCancelNotifyChangeDirectoryRequestsForFobx(PFOBX Fobx);
void __stdcall RxCancelRoutine(PDEVICE_OBJECT DeviceObject, PIRP Irp);
void __stdcall RxCeCleanupConnectCallOutContext(PRX_CREATE_CONNECTION_CALLOUT_CONTEXT CreateConnectionContext);
void __stdcall RxCeFreeIrp(PIRP pIrp);
void __stdcall RxCompleteRequest_Real(PRX_CONTEXT RxContext, PIRP Irp, NTSTATUS Status);
void __stdcall RxCompleteSrvOpenKeyAssociation(PSRV_OPEN SrvOpen);
void __stdcall RxConjureOriginalName(PFCB Fcb, PFOBX Fobx, PULONG ActualNameLength, PWCHAR OriginalName, PLONG LengthRemaining, RX_NAME_CONJURING_METHODS NameConjuringMethod);
void __stdcall RxCreateNetRootCallBack(PMRX_CREATENETROOT_CONTEXT CreateNetRootContext);
void __stdcall RxDebugControlCommand(PSTR ControlString);
void __stdcall RxDereference(PVOID Instance, LOCK_HOLDING_STATE LockHoldingState);
void __stdcall RxDereferenceAndDeleteRxContext_Real(PRX_CONTEXT RxContext);
void __stdcall RxDeregisterAsynchronousRequest(PRDBSS_DEVICE_OBJECT RxDeviceObject);
void __stdcall RxDestroyMidAtlas(PRX_MID_ATLAS MidAtlas, PCONTEXT_DESTRUCTOR ContextDestructor);
void __stdcall RxExclusivePrefixTableLockToShared(PRX_PREFIX_TABLE Table);
void __stdcall RxExtractServerName(PUNICODE_STRING FilePathName, PUNICODE_STRING SrvCallName, PUNICODE_STRING RestOfName);
void __stdcall RxFinalizeFcbTable(PRX_FCB_TABLE FcbTable);
void __stdcall RxFinalizeLockList(struct _RX_CONTEXT *RxContext);
void __stdcall RxFinalizeNetTable(PRDBSS_DEVICE_OBJECT RxDeviceObject, BOOLEAN ForceFinalization);
void __stdcall RxFinalizePrefixTable(PRX_PREFIX_TABLE ThisTable);
void __stdcall RxFinishFcbInitialization(PMRX_FCB Fcb, RX_FILE_TYPE FileType, PFCB_INIT_PACKET InitPacket);
void __stdcall RxForceFinalizeAllVNetRoots(PNET_ROOT NetRoot);
void __stdcall RxFreeFcbObject(PVOID Object);
void __stdcall RxFreeObject(PVOID pObject);
void __stdcall RxGatherRequestsForSrvOpen(PSRV_CALL SrvCall, PSRV_OPEN SrvOpen, PLIST_ENTRY RequestsListHead);
void __stdcall RxGetFileSizeWithLock(PFCB Fcb, PLONGLONG FileSize);
void __stdcall RxIndicateChangeOfBufferingState(PMRX_SRV_CALL SrvCall, PVOID SrvOpenKey, PVOID Context);
void __stdcall RxIndicateChangeOfBufferingStateForSrvOpen(PMRX_SRV_CALL SrvCall, PMRX_SRV_OPEN SrvOpen, PVOID SrvOpenKey, PVOID Context);
void __stdcall RxInitializeContext(PIRP Irp, PRDBSS_DEVICE_OBJECT RxDeviceObject, ULONG InitialContextFlags, PRX_CONTEXT RxContext);
void __stdcall RxInitializeFcbTable(PRX_FCB_TABLE FcbTable, BOOLEAN CaseInsensitiveMatch);
void __stdcall RxInitializeLowIoContext(PRX_CONTEXT RxContext, ULONG Operation, PLOWIO_CONTEXT LowIoContext);
void __stdcall RxInitializeLowIoPerFcbInfo(PLOWIO_PER_FCB_INFO LowIoPerFcbInfo);
void __stdcall RxInitializeMinirdrDispatchTable(PDRIVER_OBJECT DriverObject);
void __stdcall RxInitializePrefixTable(PRX_PREFIX_TABLE ThisTable, ULONG TableSize, BOOLEAN CaseInsensitiveMatch);
void __stdcall RxInitializePurgeSyncronizationContext(PPURGE_SYNCHRONIZATION_CONTEXT PurgeSyncronizationContext);
void __stdcall RxInitializeWorkQueue(PRX_WORK_QUEUE WorkQueue, WORK_QUEUE_TYPE WorkQueueType, ULONG MaximumNumberOfWorkerThreads, ULONG MinimumNumberOfWorkerThreads);
void __stdcall RxInitiateOrContinueThrottling(PTHROTTLING_STATE pBP);
void __stdcall RxInitiateSrvOpenKeyAssociation(PSRV_OPEN SrvOpen);
void __stdcall RxLockUserBuffer(PRX_CONTEXT RxContext, PIRP Irp, LOCK_OPERATION Operation, ULONG BufferLength);
void __stdcall RxLogEventDirect(PRDBSS_DEVICE_OBJECT DeviceObject, PUNICODE_STRING OriginatorId, ULONG EventId, NTSTATUS Status, ULONG Line);
void __stdcall RxLogEventWithAnnotation(PRDBSS_DEVICE_OBJECT DeviceObject, ULONG EventId, NTSTATUS Status, PVOID DataBuffer, USHORT DataBufferLength, PUNICODE_STRING Annotation, ULONG AnnotationCount);
void __stdcall RxLogEventWithBufferDirect(PVOID DeviceOrDriverObject, PUNICODE_STRING OriginatorId, ULONG EventId, NTSTATUS Status, PVOID DataBuffer, USHORT DataBufferLength, ULONG LineNumber);
void __stdcall RxMakeLateDeviceAvailable(PRDBSS_DEVICE_OBJECT RxDeviceObject);
void __stdcall RxMarkFobxOnCleanup(PFOBX pFobx, PBOOLEAN NeedPurge);
void __stdcall RxMarkFobxOnClose(PFOBX Fobx);
void __stdcall RxNameCacheActivateEntry(PNAME_CACHE_CONTROL NameCacheCtl, PNAME_CACHE NameCache, ULONG LifeTime, ULONG MRxContext);
void __stdcall RxNameCacheExpireEntry(PNAME_CACHE_CONTROL NameCacheCtl, PNAME_CACHE NameCache);
void __stdcall RxNameCacheExpireEntryWithShortName(PNAME_CACHE_CONTROL NameCacheCtl, PUNICODE_STRING Name);
void __stdcall RxNameCacheFinalize(PNAME_CACHE_CONTROL NameCacheCtl);
void __stdcall RxNameCacheFreeEntry(PNAME_CACHE_CONTROL NameCacheCtl, PNAME_CACHE NameCache);
void __stdcall RxNameCacheInitialize(PNAME_CACHE_CONTROL NameCacheCtl, ULONG MRxNameCacheSize, ULONG MaximumEntries);
void __stdcall RxNoOpRelease(PVOID Fcb);
void __stdcall RxOrphanSrvOpens(PV_NET_ROOT ThisVNetRoot);
void __stdcall RxOrphanSrvOpensForThisFcb(PFCB Fcb, PV_NET_ROOT ThisVNetRoot, BOOLEAN OrphanAll);
void __stdcall RxOrphanThisFcb(PFCB Fcb);
void __stdcall RxPopUpFileCorrupt(PRX_CONTEXT RxContext, PFCB Fcb);
void __stdcall RxPrePostIrp(PVOID Context, PIRP Irp);
void __stdcall RxPrepareContextForReuse(PRX_CONTEXT RxContext);
void __stdcall RxPrepareRequestForReuse(PCHANGE_BUFFERING_STATE_REQUEST Request);
void __stdcall RxPrintLog(ULONG EntriesToPrint);
void __stdcall RxPrintLog(ULONG EntriesToPrint);
void __stdcall RxProcessChangeBufferingStateRequests(PSRV_CALL SrvCall);
void __stdcall RxProcessChangeBufferingStateRequestsForSrvOpen(PSRV_OPEN SrvOpen);
void __stdcall RxProcessFcbChangeBufferingStateRequest(PFCB Fcb);
void __stdcall RxPurgeAllFobxs(PRDBSS_DEVICE_OBJECT RxDeviceObject);
void __stdcall RxPurgeChangeBufferingStateRequestsForSrvOpen(PSRV_OPEN SrvOpen);
void __stdcall RxPurgeFcb(PFCB Fcb);
void __stdcall RxRecurrentTimerWorkItemDispatcher(PVOID Context);
void __stdcall RxReference(PVOID Instance);
void __stdcall RxReinitializeContext(PRX_CONTEXT RxContext);
void __stdcall RxReleaseFcbFromLazyWrite(PVOID Null);
void __stdcall RxReleaseFcbFromReadAhead(PVOID Null);
void __stdcall RxReleaseFcbResourceForThreadInMRx(PRX_CONTEXT pRxContext, PMRX_FCB MrxFcb, ERESOURCE_THREAD ResourceThreadId);
void __stdcall RxReleaseFcbResourceInMRx(PMRX_FCB Fcb);
void __stdcall RxReleaseFileForNtCreateSection(PFILE_OBJECT FileObject);
void __stdcall RxRemoveNameNetFcb(PFCB ThisFcb);
void __stdcall RxRemoveOperationFromBlockingQueue(PRX_CONTEXT RxContext);
void __stdcall RxRemovePrefixTableEntry(PRX_PREFIX_TABLE ThisTable, PRX_PREFIX_ENTRY Entry);
void __stdcall RxRemoveShareAccessPerSrvOpens(PSRV_OPEN SrvOpen);
void __stdcall RxRemoveVirtualNetRootFromNetRoot(PNET_ROOT NetRoot, PV_NET_ROOT VNetRoot);
void __stdcall RxResumeBlockedOperations_ALL(PRX_CONTEXT RxContext);
void __stdcall RxResumeBlockedOperations_Serially(PRX_CONTEXT RxContext, PLIST_ENTRY BlockingIoQ);
void __stdcall RxScavengeAllFobxs(PRDBSS_DEVICE_OBJECT RxDeviceObject);
void __stdcall RxScavengeFobxsForNetRoot(PNET_ROOT NetRoot, PFCB PurgingFcb, BOOLEAN SynchronizeWithScavenger);
void __stdcall RxSetFileSizeWithLock(PFCB Fcb, PLONGLONG FileSize);
void __stdcall RxSpinDownOutstandingAsynchronousRequests(PRDBSS_DEVICE_OBJECT RxDeviceObject);
void __stdcall RxSpinUpRequestsDispatcher(PRX_DISPATCHER Dispatcher);
void __stdcall RxSpinUpWorkerThreads(PRX_WORK_QUEUE WorkQueue);
void __stdcall RxStackOverflowRead(PVOID Context, PKEVENT Event);
void __stdcall RxSyncUninitializeCacheMap(PRX_CONTEXT RxContext, PFILE_OBJECT FileObject);
void __stdcall RxSynchronizeWithScavenger(PRX_CONTEXT RxContext, PFCB Fcb);
void __stdcall RxTearDownRxTimer();
void __stdcall RxTearDownWorkQueue(PRX_WORK_QUEUE WorkQueue);
void __stdcall RxTearDownWorkQueueDispatcher(PRX_WORK_QUEUE_DISPATCHER Dispatcher);
void __stdcall RxTerminateScavenging(PRX_CONTEXT RxContext);
void __stdcall RxTrackPagingIoResource(PVOID Instance, ULONG Type, ULONG Line, PCSTR File);
void __stdcall RxTrackerUpdateHistory(PRX_CONTEXT RxContext, PMRX_FCB MrxFcb, ULONG Operation, ULONG LineNumber, PCSTR FileName, ULONG SerialNumber);
void __stdcall RxUndoScavengerFinalizationMarking(PVOID Instance);
void __stdcall RxUninitializeVNetRootParameters(PUNICODE_STRING UserName, PUNICODE_STRING UserDomainName, PUNICODE_STRING Password, PULONG Flags);
void __stdcall RxUnload(PDRIVER_OBJECT DriverObject);
void __stdcall RxUnlockOperation(PVOID Context, PFILE_LOCK_INFO LockInfo);
void __stdcall RxUnregisterMinirdr(PRDBSS_DEVICE_OBJECT RxDeviceObject);
void __stdcall RxUnwindTopLevelIrp(PRX_TOPLEVELIRP_CONTEXT TopLevelContext);
void __stdcall RxUpdateCondition(RX_BLOCK_CONDITION NewConditionValue, PRX_BLOCK_CONDITION Condition, PLIST_ENTRY TransitionWaitList);
void __stdcall RxUpdateShareAccessPerSrvOpens(PSRV_OPEN SrvOpen);
void __stdcall RxVerifyOperationIsLegal(PRX_CONTEXT RxContext);
void __stdcall RxWaitForStableCondition(PRX_BLOCK_CONDITION Condition, PLIST_ENTRY TransitionWaitList, PRX_CONTEXT RxContext, NTSTATUS *AsyncStatus);
void __stdcall RxWorkItemDispatcher(PVOID Context);
void __stdcall RxWorkerThreadDispatcher(PRX_WORK_QUEUE WorkQueue);
void __stdcall RxpDiscardChangeBufferingStateRequests(PLIST_ENTRY DiscardedRequests);
void __stdcall RxpMarkInstanceForScavengedFinalization(PVOID Instance);
void __stdcall RxpPrepareCreateContextForReuse(PRX_CONTEXT RxContext);
void __stdcall RxpProcessChangeBufferingStateRequests(PSRV_CALL SrvCall, BOOLEAN UpdateHandlerState);
void __stdcall RxpSpinUpWorkerThreads(PRX_WORK_QUEUE WorkQueue);
void __stdcall RxpTrackReference(ULONG TraceType, PCSTR FileName, ULONG Line, PVOID Instance);
void __stdcall RxpUndoScavengerFinalizationMarking(PVOID Instance);
void __stdcall RxpUnregisterMinirdr(PRDBSS_DEVICE_OBJECT RxDeviceObject);
void __stdcall RxpWorkerThreadDispatcher(PRX_WORK_QUEUE WorkQueue, PLARGE_INTEGER WaitInterval);
void __stdcall SERCX2_CONFIG_INIT(SERCX2_CONFIG *Config, PFN_SERCX2_APPLY_CONFIG EvtSerCx2ApplyConfig, PFN_SERCX2_CONTROL EvtSerCx2Control, PFN_SERCX2_PURGE_FIFOS EvtSerCx2PurgeFifos);
void __stdcall SERCX2_CUSTOM_RECEIVE_CONFIG_INIT(SERCX2_CUSTOM_RECEIVE_CONFIG *Config);
void __stdcall SERCX2_CUSTOM_RECEIVE_TRANSACTION_CONFIG_INIT(SERCX2_CUSTOM_RECEIVE_TRANSACTION_CONFIG *Config, PFN_SERCX2_CUSTOM_RECEIVE_TRANSACTION_START EvtSerCx2CustomReceiveTransactionStart, PFN_SERCX2_CUSTOM_RECEIVE_TRANSACTION_ENABLE_NEW_DATA_NOTIFICATION EvtSerCx2CustomReceiveTransactionEnableNewDataNotification, PFN_SERCX2_CUSTOM_RECEIVE_TRANSACTION_QUERY_PROGRESS EvtSerCx2CustomReceiveTransactionQueryProgress);
void __stdcall SERCX2_CUSTOM_TRANSMIT_CONFIG_INIT(SERCX2_CUSTOM_TRANSMIT_CONFIG *Config);
void __stdcall SERCX2_CUSTOM_TRANSMIT_TRANSACTION_CONFIG_INIT(SERCX2_CUSTOM_TRANSMIT_TRANSACTION_CONFIG *Config, PFN_SERCX2_CUSTOM_TRANSMIT_TRANSACTION_START EvtSerCx2CustomTransmitTransactionStart);
void __stdcall SERCX2_PIO_RECEIVE_CONFIG_INIT(SERCX2_PIO_RECEIVE_CONFIG *PioReceiveConfig, PFN_SERCX2_PIO_RECEIVE_READ_BUFFER EvtSerCx2PioReceiveReadBuffer, PFN_SERCX2_PIO_RECEIVE_ENABLE_READY_NOTIFICATION EvtSerCx2PioReceiveEnableReadyNotification, PFN_SERCX2_PIO_RECEIVE_CANCEL_READY_NOTIFICATION EvtSerCx2PioReceiveCancelReadyNotification);
void __stdcall SERCX2_PIO_TRANSMIT_CONFIG_INIT(SERCX2_PIO_TRANSMIT_CONFIG *PioTransmitConfig, PFN_SERCX2_PIO_TRANSMIT_WRITE_BUFFER EvtSerCx2PioTransmitWriteBuffer, PFN_SERCX2_PIO_TRANSMIT_ENABLE_READY_NOTIFICATION EvtSerCx2PioTransmitEnableReadyNotification, PFN_SERCX2_PIO_TRANSMIT_CANCEL_READY_NOTIFICATION EvtSerCx2PioTransmitCancelReadyNotification);
void __stdcall SERCX2_SYSTEM_DMA_RECEIVE_CONFIG_INIT(SERCX2_SYSTEM_DMA_RECEIVE_CONFIG *Config, size_t MaximumTransferLength, LARGE_INTEGER Address, DMA_WIDTH DmaWidth, PCM_PARTIAL_RESOURCE_DESCRIPTOR DmaDescriptor);
void __stdcall SERCX2_SYSTEM_DMA_RECEIVE_CONFIG_INIT_NEW_DATA_NOTIFICATION(SERCX2_SYSTEM_DMA_RECEIVE_CONFIG *Config, size_t MaximumTransferLength, LARGE_INTEGER Address, DMA_WIDTH DmaWidth, PCM_PARTIAL_RESOURCE_DESCRIPTOR DmaDescriptor, PFN_SERCX2_SYSTEM_DMA_RECEIVE_ENABLE_NEW_DATA_NOTIFICATION EvtSerCx2SystemDmaReceiveEnableNewDataNotification, PFN_SERCX2_SYSTEM_DMA_RECEIVE_CANCEL_NEW_DATA_NOTIFICATION EvtSerCx2SystemDmaReceiveCancelNewDataNotification);
void __stdcall SERCX2_SYSTEM_DMA_TRANSMIT_CONFIG_INIT(SERCX2_SYSTEM_DMA_TRANSMIT_CONFIG *Config, size_t MaximumTransferLength, LARGE_INTEGER Address, DMA_WIDTH DmaWidth, PCM_PARTIAL_RESOURCE_DESCRIPTOR DmaDescriptor);
void __stdcall SPB_CONNECTION_PARAMETERS_INIT(SPB_CONNECTION_PARAMETERS *Parameters);
void __stdcall SPB_CONTROLLER_CONFIG_INIT(SPB_CONTROLLER_CONFIG *Config);
void __stdcall SPB_REQUEST_PARAMETERS_INIT(SPB_REQUEST_PARAMETERS *Parameters);
void __stdcall SPB_TRANSFER_DESCRIPTOR_INIT(SPB_TRANSFER_DESCRIPTOR *Descriptor);
void __stdcall SPB_TRANSFER_LIST_INIT(SPB_TRANSFER_LIST *TransferList, ULONG TransferCount);
void __stdcall STREAM_INFO_INIT(PSTREAM_INFO StreamInfo, WDFQUEUE WdfQueue, ULONG StreamId);
void __stdcall ScsiPortCompleteRequest(PVOID HwDeviceExtension, UCHAR PathId, UCHAR TargetId, UCHAR Lun, UCHAR SrbStatus);
void __stdcall ScsiPortFlushDma(PVOID DeviceExtension);
void __stdcall ScsiPortFreeDeviceBase(PVOID HwDeviceExtension, PVOID MappedAddress);
void __stdcall ScsiPortIoMapTransfer(PVOID HwDeviceExtension, PSCSI_REQUEST_BLOCK Srb, PVOID LogicalAddress, ULONG Length);
void __stdcall ScsiPortLogError(PVOID HwDeviceExtension, PSCSI_REQUEST_BLOCK Srb, UCHAR PathId, UCHAR TargetId, UCHAR Lun, ULONG ErrorCode, ULONG UniqueId);
void __stdcall ScsiPortQuerySystemTime(PLARGE_INTEGER CurrentTime);
void __stdcall ScsiPortStallExecution(ULONG Delay);
void __stdcall ScsiPortWmiFireLogicalUnitEvent(PVOID HwDeviceExtension, UCHAR PathId, UCHAR TargetId, UCHAR Lun, LPGUID Guid, ULONG InstanceIndex, ULONG EventDataSize, PVOID EventData);
void __stdcall ScsiPortWmiPostProcess(PSCSIWMI_REQUEST_CONTEXT RequestContext, UCHAR SrbStatus, ULONG BufferUsed);
void __stdcall SdPortCompleteRequest(PSDPORT_REQUEST Request, NTSTATUS Status);
void __stdcall SdPortReadRegisterBufferUchar(PVOID BaseAddress, ULONG Register, PUCHAR Buffer, ULONG Length);
void __stdcall SdPortReadRegisterBufferUlong(PVOID BaseAddress, ULONG Register, PULONG Buffer, ULONG Length);
void __stdcall SdPortReadRegisterBufferUshort(PVOID BaseAddress, ULONG Register, PUSHORT Buffer, ULONG Length);
void __stdcall SdPortWait(ULONG Microseconds);
void __stdcall SdPortWriteRegisterBufferUchar(PVOID BaseAddress, ULONG Register, PUCHAR Buffer, ULONG Length);
void __stdcall SdPortWriteRegisterBufferUlong(PVOID BaseAddress, ULONG Register, PULONG Buffer, ULONG Length);
void __stdcall SdPortWriteRegisterBufferUshort(PVOID BaseAddress, ULONG Register, PUSHORT Buffer, ULONG Length);
void __stdcall SdPortWriteRegisterUchar(PVOID BaseAddress, ULONG Register, UCHAR Data);
void __stdcall SdPortWriteRegisterUlong(PVOID BaseAddress, ULONG Register, ULONG Data);
void __stdcall SdPortWriteRegisterUshort(PVOID BaseAddress, ULONG Register, USHORT Data);
void __stdcall SeAdjustAccessStateForAccessConstraints(PVOID ObjectType, PSECURITY_DESCRIPTOR SecurityDescriptor, PACCESS_STATE AccessState);
void __stdcall SeAdjustAccessStateForTrustLabel(PVOID ObjectType, PSECURITY_DESCRIPTOR SecurityDescriptor, PACCESS_STATE AccessState);
void __stdcall SeAuditFipsCryptoSelftests(BOOLEAN bSuccess, ULONG SelftestCode);
void __stdcall SeAuditHardLinkCreation(PUNICODE_STRING FileName, PUNICODE_STRING LinkName, BOOLEAN bSuccess);
void __stdcall SeAuditHardLinkCreationWithTransaction(PUNICODE_STRING FileName, PUNICODE_STRING LinkName, BOOLEAN bSuccess, GUID *TransactionId);
void __stdcall SeAuditTransactionStateChange(GUID *TransactionId, GUID *ResourceManagerId, ULONG NewTransactionState);
void __stdcall SeCaptureSubjectContext(PSECURITY_SUBJECT_CONTEXT SubjectContext);
void __stdcall SeCaptureSubjectContextEx(PETHREAD Thread, PEPROCESS Process, PSECURITY_SUBJECT_CONTEXT SubjectContext);
void __stdcall SeCheckForCriticalAceRemoval(PSECURITY_DESCRIPTOR CurrentDescriptor, PSECURITY_DESCRIPTOR NewDescriptor, PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext, PBOOLEAN AceRemoved);
void __stdcall SeDeleteObjectAuditAlarm(PVOID Object, HANDLE Handle);
void __stdcall SeDeleteObjectAuditAlarmWithTransaction(PVOID Object, HANDLE Handle, GUID *TransactionId);
void __stdcall SeExamineGlobalSacl(PUNICODE_STRING ObjectType, PACL ResourceSacl, PACCESS_TOKEN Token, ACCESS_MASK DesiredAccess, BOOLEAN AccessGranted, PBOOLEAN GenerateAudit, PBOOLEAN GenerateAlarm);
void __stdcall SeExamineSacl(PACL Sacl, PACL ResourceSacl, PACCESS_TOKEN Token, ACCESS_MASK DesiredAccess, BOOLEAN AccessGranted, PBOOLEAN GenerateAudit, PBOOLEAN GenerateAlarm);
void __stdcall SeFreePrivileges(PPRIVILEGE_SET Privileges);
void __stdcall SeImpersonateClient(PSECURITY_CLIENT_CONTEXT ClientContext, PETHREAD ServerThread);
void __stdcall SeLockSubjectContext(PSECURITY_SUBJECT_CONTEXT SubjectContext);
void __stdcall SeMaximumAuditMaskFromGlobalSacl(PUNICODE_STRING ObjectTypeName, ACCESS_MASK GrantedAccess, PACCESS_TOKEN Token, PACCESS_MASK AuditMask);
void __stdcall SeOpenObjectAuditAlarm(PUNICODE_STRING ObjectTypeName, PVOID Object, PUNICODE_STRING AbsoluteObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PACCESS_STATE AccessState, BOOLEAN ObjectCreated, BOOLEAN AccessGranted, KPROCESSOR_MODE AccessMode, PBOOLEAN GenerateOnClose);
void __stdcall SeOpenObjectAuditAlarmWithTransaction(PUNICODE_STRING ObjectTypeName, PVOID Object, PUNICODE_STRING AbsoluteObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PACCESS_STATE AccessState, BOOLEAN ObjectCreated, BOOLEAN AccessGranted, KPROCESSOR_MODE AccessMode, GUID *TransactionId, PBOOLEAN GenerateOnClose);
void __stdcall SeOpenObjectForDeleteAuditAlarm(PUNICODE_STRING ObjectTypeName, PVOID Object, PUNICODE_STRING AbsoluteObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PACCESS_STATE AccessState, BOOLEAN ObjectCreated, BOOLEAN AccessGranted, KPROCESSOR_MODE AccessMode, PBOOLEAN GenerateOnClose);
void __stdcall SeOpenObjectForDeleteAuditAlarmWithTransaction(PUNICODE_STRING ObjectTypeName, PVOID Object, PUNICODE_STRING AbsoluteObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PACCESS_STATE AccessState, BOOLEAN ObjectCreated, BOOLEAN AccessGranted, KPROCESSOR_MODE AccessMode, GUID *TransactionId, PBOOLEAN GenerateOnClose);
void __stdcall SeQueryTokenIntegrity(PACCESS_TOKEN Token, PSID_AND_ATTRIBUTES IntegritySA);
void __stdcall SeReleaseSubjectContext(PSECURITY_SUBJECT_CONTEXT SubjectContext);
void __stdcall SeSetAccessStateGenericMapping(PACCESS_STATE AccessState, PGENERIC_MAPPING GenericMapping);
void __stdcall SeTokenGetNoChildProcessRestricted(PACCESS_TOKEN Token, PBOOLEAN Enforced, PBOOLEAN UnlessSecure, PBOOLEAN AuditOnly);
void __stdcall SeTokenSetNoChildProcessRestricted(PACCESS_TOKEN Token, BOOLEAN UnlessSecure, BOOLEAN AuditOnly);
void __stdcall SeUnlockSubjectContext(PSECURITY_SUBJECT_CONTEXT SubjectContext);
void __stdcall SeUnregisterImageVerificationCallback(PVOID CallbackHandle);
void __stdcall SerCx2CompleteWait(WDFDEVICE Device, ULONG Event);
void __stdcall SerCx2CustomReceiveTransactionCleanupComplete(SERCX2CUSTOMRECEIVETRANSACTION CustomReceiveTransaction);
void __stdcall SerCx2CustomReceiveTransactionInitializeComplete(SERCX2CUSTOMRECEIVETRANSACTION CustomReceiveTransaction, BOOLEAN InitSuccess);
void __stdcall SerCx2CustomReceiveTransactionNewDataNotification(SERCX2CUSTOMRECEIVETRANSACTION CustomReceiveTransaction);
void __stdcall SerCx2CustomReceiveTransactionReportProgress(SERCX2CUSTOMRECEIVETRANSACTION CustomReceiveTransaction, SERCX2_CUSTOM_RECEIVE_TRANSACTION_PROGRESS Progress);
void __stdcall SerCx2CustomTransmitTransactionCleanupComplete(SERCX2CUSTOMTRANSMITTRANSACTION CustomTransmitTransaction);
void __stdcall SerCx2CustomTransmitTransactionInitializeComplete(SERCX2CUSTOMTRANSMITTRANSACTION CustomTransmitTransaction, BOOLEAN InitSuccess);
void __stdcall SerCx2PioReceiveCleanupTransactionComplete(SERCX2PIORECEIVE PioReceive);
void __stdcall SerCx2PioReceiveInitializeTransactionComplete(SERCX2PIORECEIVE PioReceive, BOOLEAN InitSuccess);
void __stdcall SerCx2PioReceiveReady(SERCX2PIORECEIVE PioReceive);
void __stdcall SerCx2PioTransmitCleanupTransactionComplete(SERCX2PIOTRANSMIT PioTransmit);
void __stdcall SerCx2PioTransmitDrainFifoComplete(SERCX2PIOTRANSMIT PioTransmit);
void __stdcall SerCx2PioTransmitInitializeTransactionComplete(SERCX2PIOTRANSMIT PioTransmit, BOOLEAN InitSuccess);
void __stdcall SerCx2PioTransmitPurgeFifoComplete(SERCX2PIOTRANSMIT PioTransmit, ULONG BytesPurged);
void __stdcall SerCx2PioTransmitReady(SERCX2PIOTRANSMIT PioTransmit);
void __stdcall SerCx2SaveReceiveFifoOnD0Exit(SERCX2PIORECEIVE PioReceive, ULONG FifoSize);
void __stdcall SerCx2SystemDmaReceiveCleanupTransactionComplete(SERCX2SYSTEMDMARECEIVE SystemDmaReceive);
void __stdcall SerCx2SystemDmaReceiveInitializeTransactionComplete(SERCX2SYSTEMDMARECEIVE SystemDmaReceive, BOOLEAN InitSuccess);
void __stdcall SerCx2SystemDmaReceiveNewDataNotification(SERCX2SYSTEMDMARECEIVE SystemDmaReceive);
void __stdcall SerCx2SystemDmaTransmitCleanupTransactionComplete(SERCX2SYSTEMDMATRANSMIT SystemDmaTransmit);
void __stdcall SerCx2SystemDmaTransmitDrainFifoComplete(SERCX2SYSTEMDMATRANSMIT SystemDmaTransmit);
void __stdcall SerCx2SystemDmaTransmitInitializeTransactionComplete(SERCX2SYSTEMDMATRANSMIT SystemDmaTransmit, BOOLEAN InitSuccess);
void __stdcall SerCx2SystemDmaTransmitPurgeFifoComplete(SERCX2SYSTEMDMATRANSMIT SystemDmaTransmit, ULONG BytesPurged);
void __stdcall SmartcardCompleteCardTracking(PSMARTCARD_EXTENSION SmartcardExtension);
void __stdcall SmartcardExit(PSMARTCARD_EXTENSION SmartcardExtension);
void __stdcall SmartcardInitializeCardCapabilities(PSMARTCARD_EXTENSION SmartcardExtension);
void __stdcall SmartcardInvertData(PUCHAR Buffer, ULONG Length);
void __stdcall SmartcardLogError(PVOID Object, LONG ErrorCode, PUNICODE_STRING Insertion, ULONG DumpWord);
void __stdcall SmartcardReleaseRemoveLock(PSMARTCARD_EXTENSION SmartcardExtension);
void __stdcall SmartcardReleaseRemoveLockAndWait(PSMARTCARD_EXTENSION SmartcardExtension);
void __stdcall SmartcardReleaseRemoveLockWithTag(PSMARTCARD_EXTENSION SmartcardExtension, ULONG Tag);
void __stdcall SmartcardSetDebugLevel(ULONG Level);
void __stdcall SpbControllerSetIoOtherCallback(WDFDEVICE FxDevice, PFN_SPB_CONTROLLER_OTHER EvtSpbControllerIoOther, PFN_WDF_IO_IN_CALLER_CONTEXT EvtIoInCallerContext);
void __stdcall SpbControllerSetRequestAttributes(WDFDEVICE FxDevice, PWDF_OBJECT_ATTRIBUTES RequestAttributes);
void __stdcall SpbControllerSetTargetAttributes(WDFDEVICE FxDevice, PWDF_OBJECT_ATTRIBUTES ObjectAttributes);
void __stdcall SpbRequestComplete(SPBREQUEST Request, NTSTATUS CompletionStatus);
void __stdcall SpbRequestGetParameters(SPBREQUEST SpbRequest, SPB_REQUEST_PARAMETERS *Parameters);
void __stdcall SpbRequestGetTransferParameters(SPBREQUEST SpbRequest, ULONG Index, SPB_TRANSFER_DESCRIPTOR *TransferDescriptor, PMDL *TransferBuffer);
void __stdcall SpbTargetGetConnectionParameters(SPBTARGET Target, SPB_CONNECTION_PARAMETERS *ConnectionParameters);
void __stdcall SrbAssignSrbFlags(PVOID Srb, ULONG Flags);
void __stdcall SrbClearSrbFlags(PVOID Srb, ULONG Flags);
void __stdcall SrbGetPathTargetLun(PVOID Srb, PUCHAR PathId, PUCHAR TargetId, PUCHAR Lun);
void __stdcall SrbSetCdbLength(PVOID Srb, UCHAR CdbLength);
void __stdcall SrbSetDataBuffer(PVOID Srb, PVOID DataBuffer);
void __stdcall SrbSetDataTransferLength(PVOID Srb, ULONG DataTransferLength);
void __stdcall SrbSetNextSrb(PVOID Srb, PVOID NextSrb);
void __stdcall SrbSetOriginalRequest(PVOID Srb, PVOID OriginalRequest);
void __stdcall SrbSetPortContext(PVOID Srb, PVOID PortContext);
void __stdcall SrbSetQueueSortKey(PVOID Srb, ULONG QueueSortKey);
void __stdcall SrbSetQueueTag(PVOID Srb, ULONG QueueTag);
void __stdcall SrbSetRequestAttribute(PVOID Srb, UCHAR RequestAttribute);
void __stdcall SrbSetScsiData(PSTORAGE_REQUEST_BLOCK SrbEx, PUCHAR CdbLength8, PULONG CdbLength32, PUCHAR ScsiStatus, PVOID *SenseInfoBuffer, PUCHAR SenseInfoBufferLength);
void __stdcall SrbSetScsiStatus(PVOID Srb, UCHAR ScsiStatus);
void __stdcall SrbSetSenseInfoBuffer(PVOID Srb, PVOID SenseInfoBuffer);
void __stdcall SrbSetSenseInfoBufferLength(PVOID Srb, UCHAR SenseInfoBufferLength);
void __stdcall SrbSetSrbFlags(PVOID Srb, ULONG Flags);
void __stdcall SrbSetSrbLength(PVOID Srb, ULONG Length);
void __stdcall SrbSetSrbStatus(PVOID Srb, UCHAR status);
void __stdcall SrbSetSystemStatus(PVOID Srb, ULONG Status);
void __stdcall SrbSetTimeOutValue(PVOID Srb, ULONG TimeOutValue);
void __stdcall SrbZeroSrb(PVOID Srb);
void __stdcall SspiFreeAsyncContext(SspiAsyncContext *Handle);
void __stdcall SspiFreeAuthIdentity(PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData);
void __stdcall SspiLocalFree(PVOID DataBuffer);
void __stdcall SspiZeroAuthIdentity(PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData);
void __stdcall StorCleanupTracing(PVOID TraceContext);
void __stdcall StorRtlInitUnicodeString(PVOID Arg1, PCWSTR Arg2);
void __stdcall StorTraceDiagFreeEvent(PVOID DeviceExtension, STORAGE_TRACE_CONTEXT TraceContext, PVOID Event);
void __stdcall StorTraceErrorFreeRecord(PVOID DeviceExtension, STORAGE_TRACE_CONTEXT TraceContext, PSTORAGE_ERRORLOG_PACKET ErrorLogPacket);
void __stdcall StorTraceErrorWriteRecord(PVOID DeviceExtension, PVOID Arg1, PVOID Arg2);
void __stdcall StorWppInitGlobalLogger(LPCGUID Arg1, PVOID Arg2, PVOID Arg3, PVOID Arg4);
void __stdcall Store64_HLERelease(volatile __int64 *, __int64);
void __stdcall StorePointer_HLERelease(void *volatile *, void *);
void __stdcall Store_HLERelease(volatile int *, int);
void __stdcall StreamClassAbortOutstandingRequests(PVOID HwDeviceExtension, PHW_STREAM_OBJECT HwStreamObject, NTSTATUS Status);
void __stdcall StreamClassCallAtNewPriority(PHW_STREAM_OBJECT StreamObject, PVOID HwDeviceExtension, STREAM_PRIORITY Priority, PHW_PRIORITY_ROUTINE PriorityRoutine, PVOID Context);
void __stdcall StreamClassCompleteRequestAndMarkQueueReady(PHW_STREAM_REQUEST_BLOCK Srb);
void __stdcall StreamClassDebugAssert(PCHAR File, ULONG Line, PCHAR AssertText, ULONG AssertValue);
void __stdcall StreamClassFilterReenumerateStreams(PVOID HwInstanceExtension, ULONG StreamDescriptorSize);
void __stdcall StreamClassQueryMasterClock(PHW_STREAM_OBJECT HwStreamObject, HANDLE MasterClockHandle, TIME_FUNCTION TimeFunction, PHW_QUERY_CLOCK_ROUTINE ClockCallbackRoutine);
void __stdcall StreamClassQueryMasterClockSync(HANDLE MasterClockHandle, PHW_TIME_CONTEXT TimeContext);
void __stdcall StreamClassReenumerateStreams(PVOID HwDeviceExtension, ULONG StreamDescriptorSize);
void __stdcall StreamClassScheduleTimer(PHW_STREAM_OBJECT StreamObject, PVOID HwDeviceExtension, ULONG NumberOfMicroseconds, PHW_TIMER_ROUTINE TimerRoutine, PVOID Context);
void __stdcall TapeClassZeroMemory(PVOID Buffer, ULONG BufferSize);
void __stdcall TdiBuildNetbiosAddress(PUCHAR NetbiosName, BOOLEAN IsGroupName, PTA_NETBIOS_ADDRESS NetworkName);
void __stdcall TdiCopyBufferToMdlWithReservedMapping(PVOID SourceBuffer, PMDL DestinationMdl, ULONG DestinationOffset, ULONG BytesToCopy);
void __stdcall TdiCopyBufferToMdlWithReservedMappingAtDpcLevel(PVOID SourceBuffer, PMDL DestinationMdl, ULONG DestinationOffset, ULONG BytesToCopy);
void __stdcall TdiGet9FTriageBlock(PVOID *TriageBlockAddress);
void __stdcall TdiPnPPowerComplete(HANDLE BindingHandle, PNET_PNP_EVENT PowerEvent, NTSTATUS Status);
void __stdcall TdiReturnChainedReceives(PVOID *TsduDescriptors, ULONG NumberOfTsdus);
void __stdcall TlgCreateArray(PEVENT_DATA_DESCRIPTOR pDesc, const void *pVals, const UINT16 *pcVals, ULONG cbVal);
void __stdcall TlgCreateBinary(PEVENT_DATA_DESCRIPTOR pDesc, const void *pVals, ULONG cVals);
void __stdcall TlgCreateFixedArray(PEVENT_DATA_DESCRIPTOR pDesc, const void *pVals, ULONG cVals, ULONG cbVal);
void __stdcall TlgCreateSid(PEVENT_DATA_DESCRIPTOR pDesc, const SID *pSid);
void __stdcall TlgCreateSz(PEVENT_DATA_DESCRIPTOR pDesc, LPCSTR psz);
void __stdcall TlgCreateWsz(PEVENT_DATA_DESCRIPTOR pDesc, LPCWSTR pwsz);
void __stdcall TlgEnableCallback(LPCGUID pSourceId, ULONG callbackType, UCHAR level, ULONGLONG keywordAny, ULONGLONG keywordAll, PEVENT_FILTER_DESCRIPTOR pFilterData, PVOID pCallbackContext);
void __stdcall TlgWriteCommon(TraceLoggingHProvider hProvider, const void *pEventMetadata, ULONGLONG *pDesc, EVENT_DATA_DESCRIPTOR *pData);
void __stdcall TmGetTransactionId(PKTRANSACTION Transaction, PUOW TransactionId);
void __stdcall TraceLoggingUnregister(TraceLoggingHProvider hProvider);
void __stdcall UCMTCPCI_DEVICE_CONFIG_INIT(PUCMTCPCI_DEVICE_CONFIG Config);
void __stdcall UCMTCPCI_PORT_CONTROLLER_ALERT_DATA_INIT(PUCMTCPCI_PORT_CONTROLLER_ALERT_DATA AlertData);
void __stdcall UCMTCPCI_PORT_CONTROLLER_CAPABILITIES_INIT(PUCMTCPCI_PORT_CONTROLLER_CAPABILITIES Capabilities);
void __stdcall UCMTCPCI_PORT_CONTROLLER_CONFIG_INIT(PUCMTCPCI_PORT_CONTROLLER_CONFIG Config, PUCMTCPCI_PORT_CONTROLLER_IDENTIFICATION Identification, PUCMTCPCI_PORT_CONTROLLER_CAPABILITIES Capabilities);
void __stdcall UCMTCPCI_PORT_CONTROLLER_IDENTIFICATION_INIT(PUCMTCPCI_PORT_CONTROLLER_IDENTIFICATION Identification);
void __stdcall UCMUCSI_CONNECTOR_INFO_INIT(PUCMUCSI_CONNECTOR_INFO ConnectorInfo);
void __stdcall UCMUCSI_DEVICE_CONFIG_INIT(PUCMUCSI_DEVICE_CONFIG Config);
void __stdcall UCMUCSI_PPM_CONFIG_INIT(PUCMUCSI_PPM_CONFIG Config, UCMUCSI_CONNECTOR_COLLECTION CollectionObject);
void __stdcall UCM_CONNECTOR_CONFIG_INIT(PUCM_CONNECTOR_CONFIG Config, ULONGLONG ConnectorId);
void __stdcall UCM_CONNECTOR_PD_CONFIG_INIT(PUCM_CONNECTOR_PD_CONFIG Config, ULONG SupportedPowerRoles);
void __stdcall UCM_CONNECTOR_PD_CONN_STATE_CHANGED_PARAMS_INIT(PUCM_CONNECTOR_PD_CONN_STATE_CHANGED_PARAMS Params, UCM_PD_CONN_STATE PdConnState);
void __stdcall UCM_CONNECTOR_TYPEC_ATTACH_PARAMS_INIT(PUCM_CONNECTOR_TYPEC_ATTACH_PARAMS Params, UCM_TYPEC_PARTNER Partner);
void __stdcall UCM_CONNECTOR_TYPEC_CONFIG_INIT(PUCM_CONNECTOR_TYPEC_CONFIG Config, ULONG SupportedOperatingModes, ULONG SupportedPowerSourcingCapabilities);
void __stdcall UCM_MANAGER_CONFIG_INIT(PUCM_MANAGER_CONFIG Config);
void __stdcall UCM_PD_POWER_DATA_OBJECT_INIT_BATTERY(PUCM_PD_POWER_DATA_OBJECT Pdo);
void __stdcall UCM_PD_POWER_DATA_OBJECT_INIT_FIXED(PUCM_PD_POWER_DATA_OBJECT Pdo);
void __stdcall UCM_PD_POWER_DATA_OBJECT_INIT_ULONG(PUCM_PD_POWER_DATA_OBJECT Pdo, ULONG UlongInLittleEndian);
void __stdcall UCM_PD_POWER_DATA_OBJECT_INIT_VARIABLE_NON_BATTERY(PUCM_PD_POWER_DATA_OBJECT Pdo);
void __stdcall UCM_PD_REQUEST_DATA_OBJECT_INIT_ULONG(PUCM_PD_REQUEST_DATA_OBJECT Rdo, ULONG UlongInLittleEndian);
void __stdcall UCX_CONTROLLER_CONFIG_INIT(PUCX_CONTROLLER_CONFIG Config, LPCSTR DeviceDescription);
void __stdcall UCX_CONTROLLER_CONFIG_SET_ACPI_INFO(PUCX_CONTROLLER_CONFIG Config, PSTR VendorId, PSTR DeviceId, PSTR RevisionId);
void __stdcall UCX_CONTROLLER_CONFIG_SET_PCI_INFO(PUCX_CONTROLLER_CONFIG Config, ULONG VendorId, ULONG DeviceId, USHORT RevisionId, ULONG BusNumber, ULONG DeviceNumber, ULONG FunctionNumber);
void __stdcall UCX_CONTROLLER_RESET_COMPLETE_INFO_INIT(PUCX_CONTROLLER_RESET_COMPLETE_INFO UcxControllerResetCompleteInfo, UCX_CONTROLLER_STATE UcxControllerState, BOOLEAN UcxCoordinated);
void __stdcall UCX_DEFAULT_ENDPOINT_EVENT_CALLBACKS_INIT(PUCX_DEFAULT_ENDPOINT_EVENT_CALLBACKS Callbacks, PFN_UCX_ENDPOINT_PURGE EvtEndpointPurge, PFN_UCX_ENDPOINT_START EvtEndpointStart, PFN_UCX_ENDPOINT_ABORT EvtEndpointAbort, PFN_UCX_ENDPOINT_OK_TO_CANCEL_TRANSFERS EvtEndpointOkToCancelTransfers, PFN_UCX_DEFAULT_ENDPOINT_UPDATE EvtDefaultEndpointUpdate);
void __stdcall UCX_ENDPOINT_EVENT_CALLBACKS_INIT(PUCX_ENDPOINT_EVENT_CALLBACKS Callbacks, PFN_UCX_ENDPOINT_PURGE EvtEndpointPurge, PFN_UCX_ENDPOINT_START EvtEndpointStart, PFN_UCX_ENDPOINT_ABORT EvtEndpointAbort, PFN_UCX_ENDPOINT_RESET EvtEndpointReset, PFN_UCX_ENDPOINT_OK_TO_CANCEL_TRANSFERS EvtEndpointOkToCancelTransfers, PFN_UCX_ENDPOINT_STATIC_STREAMS_ADD EvtEndpointStaticStreamsAdd, PFN_UCX_ENDPOINT_STATIC_STREAMS_ENABLE EvtEndpointStaticStreamsEnable, PFN_UCX_ENDPOINT_STATIC_STREAMS_DISABLE EvtEndpointStaticStreamsDisable);
void __stdcall UCX_ROOTHUB_CONFIG_INIT(PUCX_ROOTHUB_CONFIG Config, PFN_UCX_ROOTHUB_CONTROL_URB EvtRootHubClearHubFeature, PFN_UCX_ROOTHUB_CONTROL_URB EvtRootHubClearPortFeature, PFN_UCX_ROOTHUB_CONTROL_URB EvtRootHubGetHubStatus, PFN_UCX_ROOTHUB_CONTROL_URB EvtRootHubGetPortStatus, PFN_UCX_ROOTHUB_CONTROL_URB EvtRootHubSetHubFeature, PFN_UCX_ROOTHUB_CONTROL_URB EvtRootHubSetPortFeature, PFN_UCX_ROOTHUB_CONTROL_URB EvtRootHubGetPortErrorCount, PFN_UCX_ROOTHUB_INTERRUPT_TX EvtRootHubInterruptTx, PFN_UCX_ROOTHUB_GET_INFO EvtRootHubGetInfo, PFN_UCX_ROOTHUB_GET_20PORT_INFO EvtRootHubGet20PortInfo, PFN_UCX_ROOTHUB_GET_30PORT_INFO EvtRootHubGet30PortInfo);
void __stdcall UCX_ROOTHUB_CONFIG_INIT_WITH_CONTROL_URB_HANDLER(PUCX_ROOTHUB_CONFIG Config, PFN_UCX_ROOTHUB_CONTROL_URB EvtRootHubControlUrb, PFN_UCX_ROOTHUB_INTERRUPT_TX EvtRootHubInterruptTx, PFN_UCX_ROOTHUB_GET_INFO EvtRootHubGetInfo, PFN_UCX_ROOTHUB_GET_20PORT_INFO EvtRootHubGet20PortInfo, PFN_UCX_ROOTHUB_GET_30PORT_INFO EvtRootHubGet30PortInfo);
void __stdcall UCX_USBDEVICE_EVENT_CALLBACKS_INIT(PUCX_USBDEVICE_EVENT_CALLBACKS Callbacks, PFN_UCX_USBDEVICE_ENDPOINTS_CONFIGURE EvtUsbDeviceEndpointsConfigure, PFN_UCX_USBDEVICE_ENABLE EvtUsbDeviceEnable, PFN_UCX_USBDEVICE_DISABLE EvtUsbDeviceDisable, PFN_UCX_USBDEVICE_RESET EvtUsbDeviceReset, PFN_UCX_USBDEVICE_ADDRESS EvtUsbDeviceAddress, PFN_UCX_USBDEVICE_UPDATE EvtUsbDeviceUpdate, PFN_UCX_USBDEVICE_HUB_INFO EvtUsbDeviceHubInfo, PFN_UCX_USBDEVICE_DEFAULT_ENDPOINT_ADD EvtUsbDeviceDefaultEndpointAdd, PFN_UCX_USBDEVICE_ENDPOINT_ADD EvtUsbDeviceEndpointAdd);
void __stdcall UDECX_USB_DEVICE_CALLBACKS_INIT(PUDECX_USB_DEVICE_STATE_CHANGE_CALLBACKS Callbacks);
void __stdcall UDECX_USB_DEVICE_PLUG_IN_OPTIONS_INIT(PUDECX_USB_DEVICE_PLUG_IN_OPTIONS Options);
void __stdcall UDECX_USB_ENDPOINT_CALLBACKS_INIT(PUDECX_USB_ENDPOINT_CALLBACKS Callbacks, PFN_UDECX_USB_ENDPOINT_RESET EvtUsbEndpointReset);
void __stdcall UDECX_WDF_DEVICE_CONFIG_INIT(PUDECX_WDF_DEVICE_CONFIG Config, PFN_UDECX_WDF_DEVICE_QUERY_USB_CAPABILITY EvtUdecxWdfDeviceQueryUsbCapability);
void __stdcall UFX_DEVICE_CALLBACKS_INIT(PUFX_DEVICE_CALLBACKS Callbacks);
void __stdcall UFX_DEVICE_CAPABILITIES_INIT(PUFX_DEVICE_CAPABILITIES Capabilities);
void __stdcall UFX_ENDPOINT_CALLBACKS_INIT(PUFX_ENDPOINT_CALLBACKS Callbacks);
void __stdcall URS_CONFIG_INIT(PURS_CONFIG Config, URS_HOST_INTERFACE_TYPE HostInterfaceType, PFN_URS_DEVICE_FILTER_RESOURCE_REQUIREMENTS EvtUrsFilterRemoveResourceRequirements);
void __stdcall USBD_AssignUrbToIoStackLocation(USBD_HANDLE USBDHandle, PIO_STACK_LOCATION IoStackLocation, PURB Urb);
void __stdcall USBD_BuildRegisterCompositeDevice(USBD_HANDLE USBDHandle, COMPOSITE_DEVICE_CAPABILITIES CapabilityFlags, ULONG FunctionCount, PREGISTER_COMPOSITE_DEVICE RegisterCompositeDevice);
void __stdcall USBD_CloseHandle(USBD_HANDLE USBDHandle);
void __stdcall USBD_GetUSBDIVersion(PUSBD_VERSION_INFORMATION VersionInformation);
void __stdcall USBD_RegisterHcFilter(PDEVICE_OBJECT DeviceObject, PDEVICE_OBJECT FilterDeviceObject);
void __stdcall USBD_UrbFree(USBD_HANDLE USBDHandle, PURB Urb);
void __stdcall USBFNKMCLASSLIB_POWER_MANAGEMENT_PARAMETERS_INIT(PUSBFNKMCLASSLIB_POWER_MANAGEMENT_PARAMETERS pParameters);
void __stdcall USBPM_ASSIGN_CONNECTOR_POWER_LEVEL_PARAMS_INIT(PUSBPM_ASSIGN_CONNECTOR_POWER_LEVEL_PARAMS Params, USBC_POWER_ROLE PowerRole, USBPM_ASSIGN_POWER_LEVEL_PARAMS_FORMAT Format);
void __stdcall USBPM_CLIENT_CONFIG_INIT(PUSBPM_CLIENT_CONFIG ClientConfig, ULONG AccessDesired, PFN_USBPM_EVENT_CALLBACK EventCallback);
void __stdcall USBPM_CONNECTOR_PROPERTIES_INIT(PUSBPM_CONNECTOR_PROPERTIES Properties);
void __stdcall USBPM_CONNECTOR_STATE_INIT(PUSBPM_CONNECTOR_STATE ConnectorState);
void __stdcall USBPM_HUB_CONNECTOR_HANDLES_INIT(PUSBPM_HUB_CONNECTOR_HANDLES HubConnectorHandles, ULONG ConnectorCount, USBPM_CONNECTOR *ConnectorHandlesBuffer);
void __stdcall USBPM_HUB_PROPERTIES_INIT(PUSBPM_HUB_PROPERTIES Properties);
void __stdcall UcmConnectorDataDirectionChanged(UCMCONNECTOR Connector, BOOLEAN Success, UCM_DATA_ROLE CurrentDataRole);
void __stdcall UcmConnectorPowerDirectionChanged(UCMCONNECTOR Connector, BOOLEAN Success, UCM_POWER_ROLE CurrentPowerRole);
void __stdcall UcmTcpciPortControllerAlert(UCMTCPCIPORTCONTROLLER PortControllerObject, PUCMTCPCI_PORT_CONTROLLER_ALERT_DATA AlertData, size_t NumberOfAlerts);
void __stdcall UcmTcpciPortControllerSetHardwareRequestQueue(UCMTCPCIPORTCONTROLLER PortControllerObject, WDFQUEUE HardwareRequestQueue);
void __stdcall UcmTcpciPortControllerStop(UCMTCPCIPORTCONTROLLER PortControllerObject);
void __stdcall UcmUcsiPpmNotification(UCMUCSIPPM PpmObject, PUCSI_DATA_BLOCK DataBlock);
void __stdcall UcmUcsiPpmSetUcsiCommandRequestQueue(UCMUCSIPPM PpmObject, WDFQUEUE PpmRequestQueue);
void __stdcall UcmUcsiPpmStop(UCMUCSIPPM PpmObject);
void __stdcall UcxControllerNeedsReset(UCXCONTROLLER Controller);
void __stdcall UcxControllerNotifyTransportCharacteristicsChange(UCXCONTROLLER Controller, PUCX_CONTROLLER_TRANSPORT_CHARACTERISTICS UcxControllerTransportCharacteristics);
void __stdcall UcxControllerResetComplete(UCXCONTROLLER Controller, PUCX_CONTROLLER_RESET_COMPLETE_INFO UcxControllerResetCompleteInfo);
void __stdcall UcxControllerSetFailed(UCXCONTROLLER Controller);
void __stdcall UcxDefaultEndpointInitSetEventCallbacks(PUCXENDPOINT_INIT EndpointInit, PUCX_DEFAULT_ENDPOINT_EVENT_CALLBACKS EventCallbacks);
void __stdcall UcxEndpointAbortComplete(UCXENDPOINT Endpoint);
void __stdcall UcxEndpointInitSetEventCallbacks(PUCXENDPOINT_INIT EndpointInit, PUCX_ENDPOINT_EVENT_CALLBACKS EventCallbacks);
void __stdcall UcxEndpointNeedToCancelTransfers(UCXENDPOINT Endpoint);
void __stdcall UcxEndpointNoPingResponseError(UCXENDPOINT Endpoint);
void __stdcall UcxEndpointPurgeComplete(UCXENDPOINT Endpoint);
void __stdcall UcxEndpointSetWdfIoQueue(UCXENDPOINT Endpoint, WDFQUEUE WdfQueue);
void __stdcall UcxRootHubPortChanged(UCXROOTHUB UcxRootHub);
void __stdcall UcxStaticStreamsSetStreamInfo(UCXSSTREAMS StaticStreams, PSTREAM_INFO StreamInfo);
void __stdcall UcxUsbDeviceInitSetEventCallbacks(PUCXUSBDEVICE_INIT UsbDeviceInit, PUCX_USBDEVICE_EVENT_CALLBACKS EventCallbacks);
void __stdcall UcxUsbDeviceRemoteWakeNotification(UCXUSBDEVICE UsbDevice, ULONG Interface);
void __stdcall UdecxUrbComplete(WDFREQUEST Request, USBD_STATUS UsbdStatus);
void __stdcall UdecxUrbCompleteWithNtStatus(WDFREQUEST Request, NTSTATUS NtStatus);
void __stdcall UdecxUrbSetBytesCompleted(WDFREQUEST Request, ULONG BytesCompleted);
void __stdcall UdecxUsbDeviceInitFree(PUDECXUSBDEVICE_INIT UdecxUsbDeviceInit);
void __stdcall UdecxUsbDeviceInitSetEndpointsType(PUDECXUSBDEVICE_INIT UdecxUsbDeviceInit, UDECX_ENDPOINT_TYPE UdecxEndpointType);
void __stdcall UdecxUsbDeviceInitSetSpeed(PUDECXUSBDEVICE_INIT UdecxUsbDeviceInit, UDECX_USB_DEVICE_SPEED UsbDeviceSpeed);
void __stdcall UdecxUsbDeviceInitSetStateChangeCallbacks(PUDECXUSBDEVICE_INIT UdecxUsbDeviceInit, PUDECX_USB_DEVICE_STATE_CHANGE_CALLBACKS Callbacks);
void __stdcall UdecxUsbDeviceLinkPowerEntryComplete(UDECXUSBDEVICE UdecxUsbDevice, NTSTATUS CompletionStatus);
void __stdcall UdecxUsbDeviceLinkPowerExitComplete(UDECXUSBDEVICE UdecxUsbDevice, NTSTATUS CompletionStatus);
void __stdcall UdecxUsbDeviceSetFunctionSuspendAndWakeComplete(UDECXUSBDEVICE UdecxUsbDevice, NTSTATUS CompletionStatus);
void __stdcall UdecxUsbDeviceSignalFunctionWake(UDECXUSBDEVICE UdecxUsbDevice, ULONG Interface);
void __stdcall UdecxUsbDeviceSignalWake(UDECXUSBDEVICE UdecxUsbDevice);
void __stdcall UdecxUsbEndpointInitFree(PUDECXUSBENDPOINT_INIT Init);
void __stdcall UdecxUsbEndpointInitSetCallbacks(PUDECXUSBENDPOINT_INIT UdecxUsbEndpointInit, PUDECX_USB_ENDPOINT_CALLBACKS EndpointCallbacks);
void __stdcall UdecxUsbEndpointInitSetEndpointAddress(PUDECXUSBENDPOINT_INIT Init, UCHAR EndpointAddress);
void __stdcall UdecxUsbEndpointPurgeComplete(UDECXUSBENDPOINT UdecxUsbEndpoint);
void __stdcall UdecxUsbEndpointSetWdfIoQueue(UDECXUSBENDPOINT UdecxUsbEndpoint, WDFQUEUE WdfQueue);
void __stdcall UdecxWdfDeviceResetComplete(WDFDEVICE UdeWdfDevice);
void __stdcall UfxDeviceEventComplete(UFXDEVICE UfxDevice, NTSTATUS Status);
void __stdcall UfxDeviceNotifyAttach(UFXDEVICE UfxDevice);
void __stdcall UfxDeviceNotifyDetach(UFXDEVICE UfxDevice);
void __stdcall UfxDeviceNotifyFinalExit(UFXDEVICE UfxDevice);
void __stdcall UfxDeviceNotifyHardwareFailure(UFXDEVICE UfxDevice, PUFX_HARDWARE_FAILURE_CONTEXT HardwareFailureContext);
void __stdcall UfxDeviceNotifyHardwareReady(UFXDEVICE UfxDevice);
void __stdcall UfxDeviceNotifyReset(UFXDEVICE UfxDevice, USB_DEVICE_SPEED DeviceSpeed);
void __stdcall UfxDeviceNotifyResume(UFXDEVICE UfxDevice);
void __stdcall UfxDeviceNotifySuspend(UFXDEVICE UfxDevice);
void __stdcall UfxDevicePortDetectComplete(UFXDEVICE UfxDevice, USBFN_PORT_TYPE PortType);
void __stdcall UfxDevicePortDetectCompleteEx(UFXDEVICE UfxDevice, USBFN_PORT_TYPE PortType, USBFN_ACTION Action);
void __stdcall UfxDeviceProprietaryChargerDetectComplete(UFXDEVICE UfxDevice, PUFX_PROPRIETARY_CHARGER DetectedCharger);
void __stdcall UfxEndpointInitSetEventCallbacks(PUFXENDPOINT_INIT EndpointInit, PUFX_ENDPOINT_CALLBACKS Callbacks);
void __stdcall UfxEndpointNotifySetup(UFXENDPOINT UfxEndpoint, PUSB_DEFAULT_PIPE_SETUP_PACKET SetupInfo);
void __stdcall UrsReportHardwareEvent(WDFDEVICE Device, URS_HARDWARE_EVENT HardwareEvent);
void __stdcall UrsSetHardwareEventSupport(WDFDEVICE Device, BOOLEAN HardwareEventReportingSupported);
void __stdcall UrsSetPoHandle(WDFDEVICE Device, POHANDLE PoHandle);
void __stdcall UsbBuildOpenStaticStreamsRequest(PURB Urb, USBD_PIPE_HANDLE PipeHandle, USHORT NumberOfStreams, PUSBD_STREAM_INFORMATION StreamInfoArray);
void __stdcall UsbFnKmClassLibUnregisterClassDevice(KUSBFNCLASSLIBHANDLE ClassHandle);
void __stdcall VMB_CHANNEL_STATE_CHANGE_CALLBACKS_INIT(PVMB_CHANNEL_STATE_CHANGE_CALLBACKS Callbacks);
void __stdcall VideoPortAcquireDeviceLock(PVOID HwDeviceExtension);
void __stdcall VideoPortAcquireSpinLock(PVOID HwDeviceExtension, PSPIN_LOCK SpinLock, PUCHAR OldIrql);
void __stdcall VideoPortAcquireSpinLockAtDpcLevel(PVOID HwDeviceExtension, PSPIN_LOCK SpinLock);
void __stdcall VideoPortClearEvent(PVOID HwDeviceExtension, PEVENT pEvent);
void __stdcall VideoPortDbgReportComplete(PVIDEO_DEBUG_REPORT pReport);
void __stdcall VideoPortFreeCommonBuffer(PVOID HwDeviceExtension, ULONG Length, PVOID VirtualAddress, LARGE_INTEGER LogicalAddress, BOOLEAN CacheEnabled);
void __stdcall VideoPortFreeDeviceBase(PVOID HwDeviceExtension, PVOID MappedAddress);
void __stdcall VideoPortFreePool(PVOID HwDeviceExtension, PVOID Ptr);
void __stdcall VideoPortLogError(PVOID HwDeviceExtension, PVIDEO_REQUEST_PACKET Vrp, VP_STATUS ErrorCode, ULONG UniqueId);
void __stdcall VideoPortMoveMemory(PVOID Destination, PVOID Source, ULONG Length);
void __stdcall VideoPortPutDmaAdapter(PVOID HwDeviceExtension, PVP_DMA_ADAPTER VpDmaAdapter);
void __stdcall VideoPortQuerySystemTime(PLARGE_INTEGER CurrentTime);
void __stdcall VideoPortReadPortBufferUchar(PUCHAR Port, PUCHAR Buffer, ULONG Count);
void __stdcall VideoPortReadPortBufferUlong(PULONG Port, PULONG Buffer, ULONG Count);
void __stdcall VideoPortReadPortBufferUshort(PUSHORT Port, PUSHORT Buffer, ULONG Count);
void __stdcall VideoPortReadRegisterBufferUchar(PUCHAR Register, PUCHAR Buffer, ULONG Count);
void __stdcall VideoPortReadRegisterBufferUlong(PULONG Register, PULONG Buffer, ULONG Count);
void __stdcall VideoPortReadRegisterBufferUshort(PUSHORT Register, PUSHORT Buffer, ULONG Count);
void __stdcall VideoPortReleaseBuffer(PVOID HwDeviceExtension, PVOID Buffer);
void __stdcall VideoPortReleaseCommonBuffer(PVOID HwDeviceExtension, PVP_DMA_ADAPTER VpDmaAdapter, ULONG Length, LARGE_INTEGER LogicalAddress, PVOID VirtualAddress, BOOLEAN CacheEnabled);
void __stdcall VideoPortReleaseDeviceLock(PVOID HwDeviceExtension);
void __stdcall VideoPortReleaseSpinLock(PVOID HwDeviceExtension, PSPIN_LOCK SpinLock, UCHAR NewIrql);
void __stdcall VideoPortReleaseSpinLockFromDpcLevel(PVOID HwDeviceExtension, PSPIN_LOCK SpinLock);
void __stdcall VideoPortSetBytesUsed(PVOID HwDeviceExtension, PDMA pDma, ULONG BytesUsed);
void __stdcall VideoPortSetDmaContext(PVOID HwDeviceExtension, PDMA pDma, PVOID InstanceContext);
void __stdcall VideoPortStallExecution(ULONG Microseconds);
void __stdcall VideoPortStartTimer(PVOID HwDeviceExtension);
void __stdcall VideoPortStopTimer(PVOID HwDeviceExtension);
void __stdcall VideoPortUnlockBuffer(PVOID HwDeviceExtension, PVOID Mdl);
void __stdcall VideoPortWritePortBufferUchar(PUCHAR Port, PUCHAR Buffer, ULONG Count);
void __stdcall VideoPortWritePortBufferUlong(PULONG Port, PULONG Buffer, ULONG Count);
void __stdcall VideoPortWritePortBufferUshort(PUSHORT Port, PUSHORT Buffer, ULONG Count);
void __stdcall VideoPortWritePortUchar(PUCHAR Port, UCHAR Value);
void __stdcall VideoPortWritePortUlong(PULONG Port, ULONG Value);
void __stdcall VideoPortWritePortUshort(PUSHORT Port, USHORT Value);
void __stdcall VideoPortWriteRegisterBufferUchar(PUCHAR Register, PUCHAR Buffer, ULONG Count);
void __stdcall VideoPortWriteRegisterBufferUlong(PULONG Register, PULONG Buffer, ULONG Count);
void __stdcall VideoPortWriteRegisterBufferUshort(PUSHORT Register, PUSHORT Buffer, ULONG Count);
void __stdcall VideoPortWriteRegisterUchar(PUCHAR Register, UCHAR Value);
void __stdcall VideoPortWriteRegisterUlong(PULONG Register, ULONG Value);
void __stdcall VideoPortWriteRegisterUshort(PUSHORT Register, USHORT Value);
void __stdcall VideoPortZeroDeviceMemory(PVOID Destination, ULONG Length);
void __stdcall VideoPortZeroMemory(PVOID Destination, ULONG Length);
void __stdcall WDF_CHILD_ADDRESS_DESCRIPTION_HEADER_INIT(PWDF_CHILD_ADDRESS_DESCRIPTION_HEADER Header, ULONG AddressDescriptionSize);
void __stdcall WDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER_INIT(PWDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER Header, ULONG IdentificationDescriptionSize);
void __stdcall WDF_CHILD_LIST_CONFIG_INIT(PWDF_CHILD_LIST_CONFIG Config, ULONG IdentificationDescriptionSize, PFN_WDF_CHILD_LIST_CREATE_DEVICE EvtChildListCreateDevice);
void __stdcall WDF_CHILD_LIST_ITERATOR_INIT(PWDF_CHILD_LIST_ITERATOR Iterator, ULONG Flags);
void __stdcall WDF_CHILD_RETRIEVE_INFO_INIT(PWDF_CHILD_RETRIEVE_INFO Info, PWDF_CHILD_IDENTIFICATION_DESCRIPTION_HEADER IdentificationDescription);
void __stdcall WDF_COINSTALLER_INSTALL_OPTIONS_INIT(PWDF_COINSTALLER_INSTALL_OPTIONS ClientOptions);
void __stdcall WDF_COMMON_BUFFER_CONFIG_INIT(PWDF_COMMON_BUFFER_CONFIG Config, ULONG AlignmentRequirement);
void __stdcall WDF_DEVICE_PNP_CAPABILITIES_INIT(PWDF_DEVICE_PNP_CAPABILITIES Caps);
void __stdcall WDF_DEVICE_POWER_CAPABILITIES_INIT(PWDF_DEVICE_POWER_CAPABILITIES Caps);
void __stdcall WDF_DEVICE_POWER_POLICY_IDLE_SETTINGS_INIT(PWDF_DEVICE_POWER_POLICY_IDLE_SETTINGS Settings, WDF_POWER_POLICY_S0_IDLE_CAPABILITIES IdleCaps);
void __stdcall WDF_DEVICE_POWER_POLICY_WAKE_SETTINGS_INIT(PWDF_DEVICE_POWER_POLICY_WAKE_SETTINGS Settings);
void __stdcall WDF_DEVICE_PROPERTY_DATA_INIT(PWDF_DEVICE_PROPERTY_DATA PropertyData, const DEVPROPKEY *PropertyKey);
void __stdcall WDF_DEVICE_STATE_INIT(PWDF_DEVICE_STATE PnpDeviceState);
void __stdcall WDF_DMA_ENABLER_CONFIG_INIT(PWDF_DMA_ENABLER_CONFIG Config, WDF_DMA_PROFILE Profile, size_t MaximumLength);
void __stdcall WDF_DMA_SYSTEM_PROFILE_CONFIG_INIT(PWDF_DMA_SYSTEM_PROFILE_CONFIG DmaConfig, LARGE_INTEGER Address, DMA_WIDTH DmaWidth, PCM_PARTIAL_RESOURCE_DESCRIPTOR DmaDescriptor);
void __stdcall WDF_DPC_CONFIG_INIT(PWDF_DPC_CONFIG Config, PFN_WDF_DPC EvtDpcFunc);
void __stdcall WDF_DRIVER_CONFIG_INIT(PWDF_DRIVER_CONFIG Config, PFN_WDF_DRIVER_DEVICE_ADD EvtDriverDeviceAdd);
void __stdcall WDF_DRIVER_VERSION_AVAILABLE_PARAMS_INIT(PWDF_DRIVER_VERSION_AVAILABLE_PARAMS Params, ULONG MajorVersion, ULONG MinorVersion);
void __stdcall WDF_FDO_EVENT_CALLBACKS_INIT(PWDF_FDO_EVENT_CALLBACKS Callbacks);
void __stdcall WDF_FILEOBJECT_CONFIG_INIT(PWDF_FILEOBJECT_CONFIG FileEventCallbacks, PFN_WDF_DEVICE_FILE_CREATE EvtDeviceFileCreate, PFN_WDF_FILE_CLOSE EvtFileClose, PFN_WDF_FILE_CLEANUP EvtFileCleanup);
void __stdcall WDF_INTERRUPT_CONFIG_INIT(PWDF_INTERRUPT_CONFIG Configuration, PFN_WDF_INTERRUPT_ISR EvtInterruptIsr, PFN_WDF_INTERRUPT_DPC EvtInterruptDpc);
void __stdcall WDF_INTERRUPT_EXTENDED_POLICY_INIT(PWDF_INTERRUPT_EXTENDED_POLICY ExtendedPolicy);
void __stdcall WDF_INTERRUPT_INFO_INIT(PWDF_INTERRUPT_INFO Info);
void __stdcall WDF_IO_QUEUE_CONFIG_INIT(PWDF_IO_QUEUE_CONFIG Config, WDF_IO_QUEUE_DISPATCH_TYPE DispatchType);
void __stdcall WDF_IO_QUEUE_CONFIG_INIT_DEFAULT_QUEUE(PWDF_IO_QUEUE_CONFIG Config, WDF_IO_QUEUE_DISPATCH_TYPE DispatchType);
void __stdcall WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_DEFAULT_INIT(PWDF_IO_QUEUE_FORWARD_PROGRESS_POLICY Policy, ULONG TotalForwardProgressRequests);
void __stdcall WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_EXAMINE_INIT(PWDF_IO_QUEUE_FORWARD_PROGRESS_POLICY Policy, ULONG TotalForwardProgressRequests, PFN_WDF_IO_WDM_IRP_FOR_FORWARD_PROGRESS EvtIoWdmIrpForForwardProgress);
void __stdcall WDF_IO_QUEUE_FORWARD_PROGRESS_POLICY_PAGINGIO_INIT(PWDF_IO_QUEUE_FORWARD_PROGRESS_POLICY Policy, ULONG TotalForwardProgressRequests);
void __stdcall WDF_IO_TARGET_OPEN_PARAMS_INIT_CREATE_BY_NAME(PWDF_IO_TARGET_OPEN_PARAMS Params, PCUNICODE_STRING TargetDeviceName, ACCESS_MASK DesiredAccess);
void __stdcall WDF_IO_TARGET_OPEN_PARAMS_INIT_EXISTING_DEVICE(PWDF_IO_TARGET_OPEN_PARAMS Params, PDEVICE_OBJECT DeviceObject);
void __stdcall WDF_IO_TARGET_OPEN_PARAMS_INIT_OPEN_BY_NAME(PWDF_IO_TARGET_OPEN_PARAMS Params, PCUNICODE_STRING TargetDeviceName, ACCESS_MASK DesiredAccess);
void __stdcall WDF_IO_TARGET_OPEN_PARAMS_INIT_REOPEN(PWDF_IO_TARGET_OPEN_PARAMS Params);
void __stdcall WDF_IO_TYPE_CONFIG_INIT(PWDF_IO_TYPE_CONFIG IoTypeConfig);
void __stdcall WDF_MEMORY_DESCRIPTOR_INIT_BUFFER(PWDF_MEMORY_DESCRIPTOR Descriptor, PVOID Buffer, ULONG BufferLength);
void __stdcall WDF_MEMORY_DESCRIPTOR_INIT_HANDLE(PWDF_MEMORY_DESCRIPTOR Descriptor, WDFMEMORY Memory, PWDFMEMORY_OFFSET Offsets);
void __stdcall WDF_MEMORY_DESCRIPTOR_INIT_MDL(PWDF_MEMORY_DESCRIPTOR Descriptor, PMDL Mdl, ULONG BufferLength);
void __stdcall WDF_OBJECT_ATTRIBUTES_INIT(PWDF_OBJECT_ATTRIBUTES Attributes);
void __stdcall WDF_PDO_EVENT_CALLBACKS_INIT(PWDF_PDO_EVENT_CALLBACKS Callbacks);
void __stdcall WDF_PNPPOWER_EVENT_CALLBACKS_INIT(PWDF_PNPPOWER_EVENT_CALLBACKS Callbacks);
void __stdcall WDF_POWER_FRAMEWORK_SETTINGS_INIT(PWDF_POWER_FRAMEWORK_SETTINGS PowerFrameworkSettings);
void __stdcall WDF_POWER_POLICY_EVENT_CALLBACKS_INIT(PWDF_POWER_POLICY_EVENT_CALLBACKS Callbacks);
void __stdcall WDF_QUERY_INTERFACE_CONFIG_INIT(PWDF_QUERY_INTERFACE_CONFIG InterfaceConfig, PINTERFACE Interface, const GUID *InterfaceType, PFN_WDF_DEVICE_PROCESS_QUERY_INTERFACE_REQUEST EvtDeviceProcessQueryInterfaceRequest);
void __stdcall WDF_REMOVE_LOCK_OPTIONS_INIT(PWDF_REMOVE_LOCK_OPTIONS RemoveLockOptions, ULONG Flags);
void __stdcall WDF_REQUEST_COMPLETION_PARAMS_INIT(PWDF_REQUEST_COMPLETION_PARAMS Params);
void __stdcall WDF_REQUEST_FORWARD_OPTIONS_INIT(PWDF_REQUEST_FORWARD_OPTIONS ForwardOptions);
void __stdcall WDF_REQUEST_PARAMETERS_INIT(PWDF_REQUEST_PARAMETERS Parameters);
void __stdcall WDF_REQUEST_REUSE_PARAMS_INIT(PWDF_REQUEST_REUSE_PARAMS Params, ULONG Flags, NTSTATUS Status);
void __stdcall WDF_REQUEST_REUSE_PARAMS_SET_NEW_IRP(PWDF_REQUEST_REUSE_PARAMS Params, PIRP NewIrp);
void __stdcall WDF_REQUEST_SEND_OPTIONS_INIT(PWDF_REQUEST_SEND_OPTIONS Options, ULONG Flags);
void __stdcall WDF_REQUEST_SEND_OPTIONS_SET_TIMEOUT(PWDF_REQUEST_SEND_OPTIONS Options, LONGLONG Timeout);
void __stdcall WDF_TIMER_CONFIG_INIT(PWDF_TIMER_CONFIG Config, PFN_WDF_TIMER EvtTimerFunc);
void __stdcall WDF_TIMER_CONFIG_INIT_PERIODIC(PWDF_TIMER_CONFIG Config, PFN_WDF_TIMER EvtTimerFunc, LONG Period);
void __stdcall WDF_USB_CONTINUOUS_READER_CONFIG_INIT(PWDF_USB_CONTINUOUS_READER_CONFIG Config, PFN_WDF_USB_READER_COMPLETION_ROUTINE EvtUsbTargetPipeReadComplete, WDFCONTEXT EvtUsbTargetPipeReadCompleteContext, size_t TransferLength);
void __stdcall WDF_USB_CONTROL_SETUP_PACKET_INIT(PWDF_USB_CONTROL_SETUP_PACKET Packet, WDF_USB_BMREQUEST_DIRECTION Direction, WDF_USB_BMREQUEST_RECIPIENT Recipient, UCHAR Request, USHORT Value, USHORT Index);
void __stdcall WDF_USB_CONTROL_SETUP_PACKET_INIT_CLASS(PWDF_USB_CONTROL_SETUP_PACKET Packet, WDF_USB_BMREQUEST_DIRECTION Direction, WDF_USB_BMREQUEST_RECIPIENT Recipient, UCHAR Request, USHORT Value, USHORT Index);
void __stdcall WDF_USB_CONTROL_SETUP_PACKET_INIT_FEATURE(PWDF_USB_CONTROL_SETUP_PACKET Packet, WDF_USB_BMREQUEST_RECIPIENT BmRequestRecipient, USHORT FeatureSelector, USHORT Index, BOOLEAN SetFeature);
void __stdcall WDF_USB_CONTROL_SETUP_PACKET_INIT_GET_STATUS(PWDF_USB_CONTROL_SETUP_PACKET Packet, WDF_USB_BMREQUEST_RECIPIENT BmRequestRecipient, USHORT Index);
void __stdcall WDF_USB_CONTROL_SETUP_PACKET_INIT_VENDOR(PWDF_USB_CONTROL_SETUP_PACKET Packet, WDF_USB_BMREQUEST_DIRECTION Direction, WDF_USB_BMREQUEST_RECIPIENT Recipient, UCHAR Request, USHORT Value, USHORT Index);
void __stdcall WDF_USB_DEVICE_CREATE_CONFIG_INIT(PWDF_USB_DEVICE_CREATE_CONFIG Config, ULONG USBDClientContractVersion);
void __stdcall WDF_USB_DEVICE_INFORMATION_INIT(PWDF_USB_DEVICE_INFORMATION Udi);
void __stdcall WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_INIT_DECONFIG(PWDF_USB_DEVICE_SELECT_CONFIG_PARAMS Params);
void __stdcall WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_INIT_INTERFACES_DESCRIPTORS(PWDF_USB_DEVICE_SELECT_CONFIG_PARAMS Params, PUSB_CONFIGURATION_DESCRIPTOR ConfigDescriptor, PUSB_INTERFACE_DESCRIPTOR *InterfaceDescriptors, ULONG NumInterfaceDescriptors);
void __stdcall WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_INIT_MULTIPLE_INTERFACES(PWDF_USB_DEVICE_SELECT_CONFIG_PARAMS Params, UCHAR NumberInterfaces, PWDF_USB_INTERFACE_SETTING_PAIR SettingPairs);
void __stdcall WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_INIT_SINGLE_INTERFACE(PWDF_USB_DEVICE_SELECT_CONFIG_PARAMS Params);
void __stdcall WDF_USB_DEVICE_SELECT_CONFIG_PARAMS_INIT_URB(PWDF_USB_DEVICE_SELECT_CONFIG_PARAMS Params, PURB Urb);
void __stdcall WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_INIT_DESCRIPTOR(PWDF_USB_INTERFACE_SELECT_SETTING_PARAMS Params, PUSB_INTERFACE_DESCRIPTOR Interface);
void __stdcall WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_INIT_SETTING(PWDF_USB_INTERFACE_SELECT_SETTING_PARAMS Params, UCHAR SettingIndex);
void __stdcall WDF_USB_INTERFACE_SELECT_SETTING_PARAMS_INIT_URB(PWDF_USB_INTERFACE_SELECT_SETTING_PARAMS Params, PURB Urb);
void __stdcall WDF_USB_PIPE_INFORMATION_INIT(PWDF_USB_PIPE_INFORMATION Info);
void __stdcall WDF_WMI_INSTANCE_CONFIG_INIT_PROVIDER(PWDF_WMI_INSTANCE_CONFIG Config, WDFWMIPROVIDER Provider);
void __stdcall WDF_WMI_INSTANCE_CONFIG_INIT_PROVIDER_CONFIG(PWDF_WMI_INSTANCE_CONFIG Config, PWDF_WMI_PROVIDER_CONFIG ProviderConfig);
void __stdcall WDF_WMI_PROVIDER_CONFIG_INIT(PWDF_WMI_PROVIDER_CONFIG Config, const GUID *Guid);
void __stdcall WDF_WORKITEM_CONFIG_INIT(PWDF_WORKITEM_CONFIG Config, PFN_WDF_WORKITEM EvtWorkItemFunc);
void __stdcall WRITE_PORT_BUFFER_UCHAR(PUCHAR Port, PUCHAR Buffer, ULONG Count);
void __stdcall WRITE_PORT_BUFFER_ULONG(PULONG Port, PULONG Buffer, ULONG Count);
void __stdcall WRITE_PORT_BUFFER_USHORT(PUSHORT Port, PUSHORT Buffer, ULONG Count);
void __stdcall WRITE_PORT_UCHAR(PUCHAR Port, UCHAR Value);
void __stdcall WRITE_PORT_ULONG(PULONG Port, ULONG Value);
void __stdcall WRITE_PORT_USHORT(PUSHORT Port, USHORT Value);
void __stdcall WRITE_REGISTER_BUFFER_UCHAR(volatile UCHAR *Register, PUCHAR Buffer, ULONG Count);
void __stdcall WRITE_REGISTER_BUFFER_ULONG(volatile ULONG *Register, PULONG Buffer, ULONG Count);
void __stdcall WRITE_REGISTER_BUFFER_ULONG64(volatile ULONG64 *Register, PULONG64 Buffer, ULONG Count);
void __stdcall WRITE_REGISTER_BUFFER_USHORT(volatile USHORT *Register, PUSHORT Buffer, ULONG Count);
void __stdcall WRITE_REGISTER_UCHAR(volatile UCHAR *Register, UCHAR Value);
void __stdcall WRITE_REGISTER_ULONG(volatile ULONG *Register, ULONG Value);
void __stdcall WRITE_REGISTER_ULONG64(volatile ULONG64 *Register, ULONG64 Value);
void __stdcall WRITE_REGISTER_USHORT(volatile USHORT *Register, USHORT Value);
void __stdcall WdfChildListBeginIteration(WDFCHILDLIST ChildList, PWDF_CHILD_LIST_ITERATOR Iterator);
void __stdcall WdfChildListBeginScan(WDFCHILDLIST ChildList);
void __stdcall WdfChildListEndIteration(WDFCHILDLIST ChildList, PWDF_CHILD_LIST_ITERATOR Iterator);
void __stdcall WdfChildListEndScan(WDFCHILDLIST ChildList);
void __stdcall WdfChildListUpdateAllChildDescriptionsAsPresent(WDFCHILDLIST ChildList);
void __stdcall WdfCmResourceListRemove(WDFCMRESLIST List, ULONG Index);
void __stdcall WdfCmResourceListRemoveByDescriptor(WDFCMRESLIST List, PCM_PARTIAL_RESOURCE_DESCRIPTOR Descriptor);
void __stdcall WdfCollectionRemove(WDFCOLLECTION Collection, WDFOBJECT Item);
void __stdcall WdfCollectionRemoveItem(WDFCOLLECTION Collection, ULONG Index);
void __stdcall WdfControlDeviceInitSetShutdownNotification(PWDFDEVICE_INIT DeviceInit, PFN_WDF_DEVICE_SHUTDOWN_NOTIFICATION Notification, UCHAR Flags);
void __stdcall WdfControlFinishInitializing(WDFDEVICE Device);
void __stdcall WdfDeviceClearRemovalRelationsDevices(WDFDEVICE Device);
void __stdcall WdfDeviceGetDeviceState(WDFDEVICE Device, PWDF_DEVICE_STATE DeviceState);
void __stdcall WdfDeviceInitFree(PWDFDEVICE_INIT DeviceInit);
void __stdcall WdfDeviceInitSetCharacteristics(PWDFDEVICE_INIT DeviceInit, ULONG DeviceCharacteristics, BOOLEAN OrInValues);
void __stdcall WdfDeviceInitSetDeviceClass(PWDFDEVICE_INIT DeviceInit, const GUID *DeviceClassGuid);
void __stdcall WdfDeviceInitSetDeviceType(PWDFDEVICE_INIT DeviceInit, ULONG DeviceType);
void __stdcall WdfDeviceInitSetExclusive(PWDFDEVICE_INIT DeviceInit, BOOLEAN IsExclusive);
void __stdcall WdfDeviceInitSetFileObjectConfig(PWDFDEVICE_INIT DeviceInit, PWDF_FILEOBJECT_CONFIG FileObjectConfig, PWDF_OBJECT_ATTRIBUTES FileObjectAttributes);
void __stdcall WdfDeviceInitSetIoInCallerContextCallback(PWDFDEVICE_INIT DeviceInit, PFN_WDF_IO_IN_CALLER_CONTEXT EvtIoInCallerContext);
void __stdcall WdfDeviceInitSetIoType(PWDFDEVICE_INIT DeviceInit, WDF_DEVICE_IO_TYPE IoType);
void __stdcall WdfDeviceInitSetIoTypeEx(PWDFDEVICE_INIT DeviceInit, PWDF_IO_TYPE_CONFIG IoTypeConfig);
void __stdcall WdfDeviceInitSetPnpPowerEventCallbacks(PWDFDEVICE_INIT DeviceInit, PWDF_PNPPOWER_EVENT_CALLBACKS PnpPowerEventCallbacks);
void __stdcall WdfDeviceInitSetPowerInrush(PWDFDEVICE_INIT DeviceInit);
void __stdcall WdfDeviceInitSetPowerNotPageable(PWDFDEVICE_INIT DeviceInit);
void __stdcall WdfDeviceInitSetPowerPageable(PWDFDEVICE_INIT DeviceInit);
void __stdcall WdfDeviceInitSetPowerPolicyEventCallbacks(PWDFDEVICE_INIT DeviceInit, PWDF_POWER_POLICY_EVENT_CALLBACKS PowerPolicyEventCallbacks);
void __stdcall WdfDeviceInitSetPowerPolicyOwnership(PWDFDEVICE_INIT DeviceInit, BOOLEAN IsPowerPolicyOwner);
void __stdcall WdfDeviceInitSetReleaseHardwareOrderOnFailure(PWDFDEVICE_INIT DeviceInit, WDF_RELEASE_HARDWARE_ORDER_ON_FAILURE ReleaseHardwareOrderOnFailure);
void __stdcall WdfDeviceInitSetRemoveLockOptions(PWDFDEVICE_INIT DeviceInit, PWDF_REMOVE_LOCK_OPTIONS Options);
void __stdcall WdfDeviceInitSetRequestAttributes(PWDFDEVICE_INIT DeviceInit, PWDF_OBJECT_ATTRIBUTES RequestAttributes);
void __stdcall WdfDeviceInterfaceDereferenceNoOp(PVOID Context);
void __stdcall WdfDeviceInterfaceReferenceNoOp(PVOID Context);
void __stdcall WdfDeviceRemoveDependentUsageDeviceObject(WDFDEVICE Device, PDEVICE_OBJECT DependentDevice);
void __stdcall WdfDeviceRemoveRemovalRelationsPhysicalDevice(WDFDEVICE Device, PDEVICE_OBJECT PhysicalDevice);
void __stdcall WdfDeviceResumeIdleActual(WDFDEVICE Device, PVOID Tag, LONG Line, PCHAR File);
void __stdcall WdfDeviceResumeIdleNoTrack(WDFDEVICE Device);
void __stdcall WdfDeviceSetAlignmentRequirement(WDFDEVICE Device, ULONG AlignmentRequirement);
void __stdcall WdfDeviceSetBusInformationForChildren(WDFDEVICE Device, PPNP_BUS_INFORMATION BusInformation);
void __stdcall WdfDeviceSetCharacteristics(WDFDEVICE Device, ULONG DeviceCharacteristics);
void __stdcall WdfDeviceSetDeviceInterfaceState(WDFDEVICE Device, const GUID *InterfaceClassGUID, PCUNICODE_STRING ReferenceString, BOOLEAN IsInterfaceEnabled);
void __stdcall WdfDeviceSetDeviceState(WDFDEVICE Device, PWDF_DEVICE_STATE DeviceState);
void __stdcall WdfDeviceSetFailed(WDFDEVICE Device, WDF_DEVICE_FAILED_ACTION FailedAction);
void __stdcall WdfDeviceSetPnpCapabilities(WDFDEVICE Device, PWDF_DEVICE_PNP_CAPABILITIES PnpCapabilities);
void __stdcall WdfDeviceSetPowerCapabilities(WDFDEVICE Device, PWDF_DEVICE_POWER_CAPABILITIES PowerCapabilities);
void __stdcall WdfDeviceSetSpecialFileSupport(WDFDEVICE Device, WDF_SPECIAL_FILE_TYPE FileType, BOOLEAN FileTypeIsSupported);
void __stdcall WdfDeviceSetStaticStopRemove(WDFDEVICE Device, BOOLEAN Stoppable);
void __stdcall WdfDmaEnablerSetMaximumScatterGatherElements(WDFDMAENABLER DmaEnabler, size_t MaximumFragments);
void __stdcall WdfDmaTransactionFreeResources(WDFDMATRANSACTION DmaTransaction);
void __stdcall WdfDmaTransactionGetTransferInfo(WDFDMATRANSACTION DmaTransaction, ULONG *MapRegisterCount, ULONG *ScatterGatherElementCount);
void __stdcall WdfDmaTransactionSetChannelConfigurationCallback(WDFDMATRANSACTION DmaTransaction, PFN_WDF_DMA_TRANSACTION_CONFIGURE_DMA_CHANNEL ConfigureRoutine, PVOID ConfigureContext);
void __stdcall WdfDmaTransactionSetDeviceAddressOffset(WDFDMATRANSACTION DmaTransaction, ULONG Offset);
void __stdcall WdfDmaTransactionSetImmediateExecution(WDFDMATRANSACTION DmaTransaction, BOOLEAN UseImmediateExecution);
void __stdcall WdfDmaTransactionSetMaximumLength(WDFDMATRANSACTION DmaTransaction, size_t MaximumLength);
void __stdcall WdfDmaTransactionSetTransferCompleteCallback(WDFDMATRANSACTION DmaTransaction, PFN_WDF_DMA_TRANSACTION_DMA_TRANSFER_COMPLETE DmaCompletionRoutine, PVOID DmaCompletionContext);
void __stdcall WdfDmaTransactionStopSystemTransfer(WDFDMATRANSACTION DmaTransaction);
void __stdcall WdfDriverMiniportUnload(WDFDRIVER Driver);
void __stdcall WdfFdoInitSetDefaultChildListConfig(PWDFDEVICE_INIT DeviceInit, PWDF_CHILD_LIST_CONFIG Config, PWDF_OBJECT_ATTRIBUTES DefaultChildListAttributes);
void __stdcall WdfFdoInitSetEventCallbacks(PWDFDEVICE_INIT DeviceInit, PWDF_FDO_EVENT_CALLBACKS FdoEventCallbacks);
void __stdcall WdfFdoInitSetFilter(PWDFDEVICE_INIT DeviceInit);
void __stdcall WdfFdoLockStaticChildListForIteration(WDFDEVICE Fdo);
void __stdcall WdfFdoUnlockStaticChildListFromIteration(WDFDEVICE Fdo);
void __stdcall WdfInterruptAcquireLock(WDFINTERRUPT Interrupt);
void __stdcall WdfInterruptDisable(WDFINTERRUPT Interrupt);
void __stdcall WdfInterruptEnable(WDFINTERRUPT Interrupt);
void __stdcall WdfInterruptGetInfo(WDFINTERRUPT Interrupt, PWDF_INTERRUPT_INFO Info);
void __stdcall WdfInterruptReleaseLock(WDFINTERRUPT Interrupt);
void __stdcall WdfInterruptReportActive(WDFINTERRUPT Interrupt);
void __stdcall WdfInterruptReportInactive(WDFINTERRUPT Interrupt);
void __stdcall WdfInterruptSetExtendedPolicy(WDFINTERRUPT Interrupt, PWDF_INTERRUPT_EXTENDED_POLICY PolicyAndGroup);
void __stdcall WdfInterruptSetPolicy(WDFINTERRUPT Interrupt, WDF_INTERRUPT_POLICY Policy, WDF_INTERRUPT_PRIORITY Priority, KAFFINITY TargetProcessorSet);
void __stdcall WdfIoQueueDrain(WDFQUEUE Queue, PFN_WDF_IO_QUEUE_STATE DrainComplete, WDFCONTEXT Context);
void __stdcall WdfIoQueueDrainSynchronously(WDFQUEUE Queue);
void __stdcall WdfIoQueuePurge(WDFQUEUE Queue, PFN_WDF_IO_QUEUE_STATE PurgeComplete, WDFCONTEXT Context);
void __stdcall WdfIoQueuePurgeSynchronously(WDFQUEUE Queue);
void __stdcall WdfIoQueueStart(WDFQUEUE Queue);
void __stdcall WdfIoQueueStop(WDFQUEUE Queue, PFN_WDF_IO_QUEUE_STATE StopComplete, WDFCONTEXT Context);
void __stdcall WdfIoQueueStopAndPurge(WDFQUEUE Queue, PFN_WDF_IO_QUEUE_STATE StopAndPurgeComplete, WDFCONTEXT Context);
void __stdcall WdfIoQueueStopAndPurgeSynchronously(WDFQUEUE Queue);
void __stdcall WdfIoQueueStopSynchronously(WDFQUEUE Queue);
void __stdcall WdfIoResourceListRemove(WDFIORESLIST ResourceList, ULONG Index);
void __stdcall WdfIoResourceListRemoveByDescriptor(WDFIORESLIST ResourceList, PIO_RESOURCE_DESCRIPTOR Descriptor);
void __stdcall WdfIoResourceListUpdateDescriptor(WDFIORESLIST ResourceList, PIO_RESOURCE_DESCRIPTOR Descriptor, ULONG Index);
void __stdcall WdfIoResourceRequirementsListRemove(WDFIORESREQLIST RequirementsList, ULONG Index);
void __stdcall WdfIoResourceRequirementsListRemoveByIoResList(WDFIORESREQLIST RequirementsList, WDFIORESLIST IoResList);
void __stdcall WdfIoResourceRequirementsListSetInterfaceType(WDFIORESREQLIST RequirementsList, INTERFACE_TYPE InterfaceType);
void __stdcall WdfIoResourceRequirementsListSetSlotNumber(WDFIORESREQLIST RequirementsList, ULONG SlotNumber);
void __stdcall WdfIoTargetClose(WDFIOTARGET IoTarget);
void __stdcall WdfIoTargetCloseForQueryRemove(WDFIOTARGET IoTarget);
void __stdcall WdfIoTargetPurge(WDFIOTARGET IoTarget, WDF_IO_TARGET_PURGE_IO_ACTION Action);
void __stdcall WdfIoTargetStop(WDFIOTARGET IoTarget, WDF_IO_TARGET_SENT_IO_ACTION Action);
void __stdcall WdfObjectAcquireLock(WDFOBJECT Object);
void __stdcall WdfObjectDelete(WDFOBJECT Object);
void __stdcall WdfObjectDereferenceActual(WDFOBJECT Handle, PVOID Tag, LONG Line, PCHAR File);
void __stdcall WdfObjectReferenceActual(WDFOBJECT Handle, PVOID Tag, LONG Line, PCHAR File);
void __stdcall WdfObjectReleaseLock(WDFOBJECT Object);
void __stdcall WdfPdoClearEjectionRelationsDevices(WDFDEVICE Device);
void __stdcall WdfPdoInitAllowForwardingRequestToParent(PWDFDEVICE_INIT DeviceInit);
void __stdcall WdfPdoInitSetDefaultLocale(PWDFDEVICE_INIT DeviceInit, LCID LocaleId);
void __stdcall WdfPdoInitSetEventCallbacks(PWDFDEVICE_INIT DeviceInit, PWDF_PDO_EVENT_CALLBACKS DispatchTable);
void __stdcall WdfPdoRemoveEjectionRelationsPhysicalDevice(WDFDEVICE Device, PDEVICE_OBJECT PhysicalDevice);
void __stdcall WdfPdoRequestEject(WDFDEVICE Device);
void __stdcall WdfRegistryClose(WDFKEY Key);
void __stdcall WdfRequestComplete(WDFREQUEST Request, NTSTATUS Status);
void __stdcall WdfRequestCompleteWithInformation(WDFREQUEST Request, NTSTATUS Status, ULONG_PTR Information);
void __stdcall WdfRequestCompleteWithPriorityBoost(WDFREQUEST Request, NTSTATUS Status, CCHAR PriorityBoost);
void __stdcall WdfRequestFormatRequestUsingCurrentType(WDFREQUEST Request);
void __stdcall WdfRequestGetCompletionParams(WDFREQUEST Request, PWDF_REQUEST_COMPLETION_PARAMS Params);
void __stdcall WdfRequestGetParameters(WDFREQUEST Request, PWDF_REQUEST_PARAMETERS Parameters);
void __stdcall WdfRequestMarkCancelable(WDFREQUEST Request, PFN_WDF_REQUEST_CANCEL EvtRequestCancel);
void __stdcall WdfRequestSetCompletionRoutine(WDFREQUEST Request, PFN_WDF_REQUEST_COMPLETION_ROUTINE CompletionRoutine, WDFCONTEXT CompletionContext);
void __stdcall WdfRequestSetInformation(WDFREQUEST Request, ULONG_PTR Information);
void __stdcall WdfRequestStopAcknowledge(WDFREQUEST Request, BOOLEAN Requeue);
void __stdcall WdfRequestWdmFormatUsingStackLocation(WDFREQUEST Request, PIO_STACK_LOCATION Stack);
void __stdcall WdfSpinLockAcquire(WDFSPINLOCK SpinLock);
void __stdcall WdfSpinLockRelease(WDFSPINLOCK SpinLock);
void __stdcall WdfStringGetUnicodeString(WDFSTRING String, PUNICODE_STRING UnicodeString);
void __stdcall WdfUsbInterfaceGetDescriptor(WDFUSBINTERFACE UsbInterface, UCHAR SettingIndex, PUSB_INTERFACE_DESCRIPTOR InterfaceDescriptor);
void __stdcall WdfUsbInterfaceGetEndpointInformation(WDFUSBINTERFACE UsbInterface, UCHAR SettingIndex, UCHAR EndpointIndex, PWDF_USB_PIPE_INFORMATION EndpointInfo);
void __stdcall WdfUsbTargetDeviceGetDeviceDescriptor(WDFUSBDEVICE UsbDevice, PUSB_DEVICE_DESCRIPTOR UsbDeviceDescriptor);
void __stdcall WdfUsbTargetPipeGetInformation(WDFUSBPIPE Pipe, PWDF_USB_PIPE_INFORMATION PipeInformation);
void __stdcall WdfUsbTargetPipeSetNoMaximumPacketSizeCheck(WDFUSBPIPE Pipe);
void __stdcall WdfVerifierDbgBreakPoint();
void __stdcall WdfVerifierKeBugCheck(ULONG BugCheckCode, ULONG_PTR BugCheckParameter1, ULONG_PTR BugCheckParameter2, ULONG_PTR BugCheckParameter3, ULONG_PTR BugCheckParameter4);
void __stdcall WdfWaitLockRelease(WDFWAITLOCK Lock);
void __stdcall WdfWmiInstanceDeregister(WDFWMIINSTANCE WmiInstance);
void __stdcall WdfWorkItemEnqueue(WDFWORKITEM WorkItem);
void __stdcall WdfWorkItemFlush(WDFWORKITEM WorkItem);
void __stdcall Wdi_NdisMDeregisterWdiMiniportDriver(NDIS_HANDLE NdisMiniportDriverHandle);
void __stdcall Wdi_NdisMIndicateStatusEx(NDIS_HANDLE MiniportAdapterHandle, PNDIS_STATUS_INDICATION StatusIndication);
void __stdcall Wdi_NdisMOidRequestComplete(NDIS_HANDLE MiniportAdapterHandle, PNDIS_OID_REQUEST Request, NDIS_STATUS Status);
void __stdcall WdmlibKeRevertToUserAffinityThreadEx(KAFFINITY Affinity);
void __stdcall WdmlibKeRevertToUserGroupAffinityThread(PGROUP_AFFINITY PreviousAffinity);
void __stdcall WdmlibKeSetSystemGroupAffinityThread(PGROUP_AFFINITY NewAffinity, PGROUP_AFFINITY PreviousAffinity);
void __stdcall WheaInitEventLogEntry(PWHEA_EVENT_LOG_ENTRY LogEntry, WHEA_EVENT_LOG_ENTRY_TYPE Type, WHEA_EVENT_LOG_ENTRY_ID Id, WHEA_EVENT_LOG_ENTRY_FLAGS Flags, ULONG OwnerTag, ULONG PayloadLength);
void __stdcall WriteBooleanNoFence(volatile BOOLEAN *Destination, BOOLEAN Value);
void __stdcall WriteBooleanRelease(volatile BOOLEAN *Destination, BOOLEAN Value);
void __stdcall WriteNoFence(volatile LONG *Destination, LONG Value);
void __stdcall WriteNoFence16(volatile SHORT *Destination, SHORT Value);
void __stdcall WriteNoFence64(volatile LONG64 *Destination, LONG64 Value);
void __stdcall WriteNoFence8(volatile CHAR *Destination, CHAR Value);
void __stdcall WritePointerNoFence(volatile PVOID *Destination, PVOID Value);
void __stdcall WritePointerRaw(volatile PVOID *Destination, PVOID Value);
void __stdcall WritePointerRelease(volatile PVOID *Destination, PVOID Value);
void __stdcall WriteRaw(volatile LONG *Destination, LONG Value);
void __stdcall WriteRaw16(volatile SHORT *Destination, SHORT Value);
void __stdcall WriteRaw64(volatile LONG64 *Destination, LONG64 Value);
void __stdcall WriteRaw8(volatile CHAR *Destination, CHAR Value);
void __stdcall WriteRelease(volatile LONG *Destination, LONG Value);
void __stdcall WriteRelease16(volatile SHORT *Destination, SHORT Value);
void __stdcall WriteRelease64(volatile LONG64 *Destination, LONG64 Value);
void __stdcall WriteRelease8(volatile CHAR *Destination, CHAR Value);
void __stdcall WriteUCharNoFence(volatile UCHAR *Destination, UCHAR Value);
void __stdcall WriteUCharRaw(volatile UCHAR *Destination, UCHAR Value);
void __stdcall WriteUCharRelease(volatile UCHAR *Destination, UCHAR Value);
void __stdcall WriteULong64NoFence(volatile ULONG64 *Destination, ULONG64 Value);
void __stdcall WriteULong64Raw(volatile ULONG64 *Destination, ULONG64 Value);
void __stdcall WriteULong64Release(volatile ULONG64 *Destination, ULONG64 Value);
void __stdcall WriteULongNoFence(volatile ULONG *Destination, ULONG Value);
void __stdcall WriteULongRaw(volatile ULONG *Destination, ULONG Value);
void __stdcall WriteULongRelease(volatile ULONG *Destination, ULONG Value);
void __stdcall WriteUShortNoFence(volatile USHORT *Destination, USHORT Value);
void __stdcall WriteUShortRaw(volatile USHORT *Destination, USHORT Value);
void __stdcall WriteUShortRelease(volatile USHORT *Destination, USHORT Value);
void __stdcall WskDeregister(PWSK_REGISTRATION WskRegistration);
void __stdcall WskReleaseProviderNPI(PWSK_REGISTRATION WskRegistration);
void __stdcall _RxFillAndInstallFastIoDispatch(PRDBSS_DEVICE_OBJECT RxDeviceObject, PFAST_IO_DISPATCH FastIoDispatch, ULONG FastIoDispatchSize);
void __stdcall _RxInitializeTopLevelIrpContext(PRX_TOPLEVELIRP_CONTEXT TopLevelContext, PIRP Irp, PRDBSS_DEVICE_OBJECT RxDeviceObject, ULONG Flags);
void __stdcall _RxReleaseFcb(PRX_CONTEXT RxContext, PMRX_FCB MrxFcb, ULONG LineNumber, PCSTR FileName, ULONG SerialNumber);
void __stdcall _RxReleaseFcbForThread(PRX_CONTEXT RxContext, PMRX_FCB MrxFcb, ERESOURCE_THREAD ResourceThreadId, ULONG LineNumber, PCSTR FileName, ULONG SerialNumber);
void __stdcall __noreturn ExRaiseStatus(NTSTATUS Status);
void __stdcall __noreturn KeBugCheck(ULONG BugCheckCode);
void __stdcall __noreturn KeBugCheckEx(ULONG BugCheckCode, ULONG_PTR BugCheckParameter1, ULONG_PTR BugCheckParameter2, ULONG_PTR BugCheckParameter3, ULONG_PTR BugCheckParameter4);
void __stdcall __noreturn RpcRaiseException(RPC_STATUS exception);
void __stdcall __noreturn RtlFailFast(ULONG Code);
void __stdcall __noreturn _fastfail(unsigned int Code);
void __stdcall _addgsbyte(ULONG Offset, UCHAR Value);
void __stdcall _addgsdword(ULONG Offset, ULONG Value);
void __stdcall _addgsqword(ULONG Offset, ULONG64 Value);
void __stdcall _addgsword(ULONG Offset, USHORT Value);
void __stdcall _cpuidex(int CPUInfo[4], int Function, int SubLeaf);
void __stdcall _inbytestring(USHORT Port, PUCHAR Buffer, ULONG Count);
void __stdcall _incgsbyte(ULONG Offset);
void __stdcall _incgsdword(ULONG Offset);
void __stdcall _incgsqword(ULONG Offset);
void __stdcall _incgsword(ULONG Offset);
void __stdcall _indwordstring(USHORT Port, PULONG Buffer, ULONG Count);
void __stdcall _inwordstring(USHORT Port, PUSHORT Buffer, ULONG Count);
void __stdcall _llwpcb(void *);
void __stdcall _lwpval32(unsigned int, unsigned int, unsigned int);
void __stdcall _lwpval64(unsigned __int64, unsigned int, unsigned int);
void __stdcall _movsb(PUCHAR Destination, const UCHAR *Source, SIZE_T Count);
void __stdcall _movsd(PULONG Destination, const ULONG *Source, SIZE_T Count);
void __stdcall _movsq(PULONG64 Destination, const ULONG64 *Source, SIZE_T Count);
void __stdcall _movsw(PUSHORT Destination, const USHORT *Source, SIZE_T Count);
void __stdcall _outbyte(USHORT Port, UCHAR Data);
void __stdcall _outbytestring(USHORT Port, PUCHAR Buffer, ULONG Count);
void __stdcall _outdword(USHORT Port, ULONG Data);
void __stdcall _outdwordstring(USHORT Port, PULONG Buffer, ULONG Count);
void __stdcall _outword(USHORT Port, USHORT Data);
void __stdcall _outwordstring(USHORT Port, PUSHORT Buffer, ULONG Count);
void __stdcall _stosb(PUCHAR Destination, UCHAR Value, SIZE_T Count);
void __stdcall _stosd(PULONG Destination, ULONG Value, SIZE_T Count);
void __stdcall _stosq(PULONG64 Destination, ULONG64 Value, SIZE_T Count);
void __stdcall _stosw(PUSHORT Destination, USHORT Value, SIZE_T Count);
void __stdcall _writecr8(ULONG64 Data);
void __stdcall _writegsbyte(ULONG Offset, UCHAR Data);
void __stdcall _writegsdword(ULONG Offset, ULONG Data);
void __stdcall _writegsqword(ULONG Offset, ULONG64 Data);
void __stdcall _writegsword(ULONG Offset, USHORT Data);
void __stdcall imp_WppRecorderConfigure(PVOID WppCb, PRECORDER_CONFIGURE_PARAMS ConfigureParams);
void __stdcall imp_WppRecorderLogDelete(PVOID WppCb, RECORDER_LOG RecorderLog);
void __stdcall imp_WppRecorderLogSetIdentifier(PVOID WppCb, RECORDER_LOG RecorderLog, PSTR LogIdentifier);
void __stdcall m_maskmovq(__m64, __m64, char *);
void __stdcall m_prefetch(void *);
void __stdcall m_prefetchw(const volatile void *Source);
void __stdcall mm_clflush(const void *Address);
void __stdcall mm_maskmoveu_si128(__m128i D, __m128i N, char *P);
void __stdcall mm_monitor(const void *p, unsigned int extensions, unsigned int hints);
void __stdcall mm_mwait(unsigned int extensions, unsigned int hints);
void __stdcall mm_prefetch(const CHAR *a, int sel);
void __stdcall mm_setcsr(unsigned int MxCsr);
void __stdcall mm_store1_pd(double *Dp, __m128d A);
void __stdcall mm_store_pd(double *Dp, __m128d A);
void __stdcall mm_store_ps(float *V, __m128 A);
void __stdcall mm_store_ps1(float *V, __m128 A);
void __stdcall mm_store_sd(double *Dp, __m128d A);
void __stdcall mm_store_si128(__m128i *P, __m128i B);
void __stdcall mm_store_ss(float *V, __m128 A);
void __stdcall mm_storeh_pd(double *Dp, __m128d A);
void __stdcall mm_storeh_pi(__m64 *, __m128);
void __stdcall mm_storel_epi64(__m128i *P, __m128i Q);
void __stdcall mm_storel_pd(double *Dp, __m128d A);
void __stdcall mm_storel_pi(__m64 *, __m128);
void __stdcall mm_storer_pd(double *Dp, __m128d A);
void __stdcall mm_storer_ps(float *V, __m128 A);
void __stdcall mm_storeu_pd(double *Dp, __m128d A);
void __stdcall mm_storeu_ps(float *V, __m128 A);
void __stdcall mm_storeu_si128(__m128i *P, __m128i B);
void __stdcall mm_stream_pd(double *Dp, __m128d A);
void __stdcall mm_stream_pi(__m64 *, __m64);
void __stdcall mm_stream_ps(float *, __m128);
void __stdcall mm_stream_si128(__m128i *P, __m128i A);
void __stdcall mm_stream_si32(int *P, int I);
void __stdcall xabort(const unsigned int imm);
void _faststorefence(void);
void _int2c(void);
void _va_start(va_list *, ...);
void m_empty(void);
void m_femms(void);
void mm_lfence(void);
void mm_mfence(void);
void mm_pause(void);
void mm_sfence(void);
void xend(void);
wchar_t *__cdecl _wcserror(const wchar_t *Str);
wchar_t *__cdecl cgetws(wchar_t *Buffer);
wchar_t *__cdecl fgetws(wchar_t *Dst, int SizeInWords, FILE *File);
wchar_t *__cdecl i64tow(__int64 Val, wchar_t *DstBuf, int Radix);
wchar_t *__cdecl itow(int Value, wchar_t *Dest, int Radix);
wchar_t *__cdecl ltow(int Value, wchar_t *Dest, int Radix);
wchar_t *__cdecl ui64tow(unsigned __int64 Val, wchar_t *DstBuf, int Radix);
wchar_t *__cdecl ultow(unsigned int Value, wchar_t *Dest, int Radix);
wchar_t *__cdecl wasctime(const struct tm *Tm);
wchar_t *__cdecl wcscat(wchar_t *Dest, const wchar_t *Source);
wchar_t *__cdecl wcschr(const wchar_t *Str, wchar_t Ch);
wchar_t *__cdecl wcscpy(wchar_t *Dest, const wchar_t *Source);
wchar_t *__cdecl wcsdup(const wchar_t *Str);
wchar_t *__cdecl wcsdup(const wchar_t *Str);
wchar_t *__cdecl wcserror(int ErrNum);
wchar_t *__cdecl wcslwr(wchar_t *Str);
wchar_t *__cdecl wcslwr(wchar_t *String);
wchar_t *__cdecl wcslwr_l(wchar_t *String, _locale_t Locale);
wchar_t *__cdecl wcsncat(wchar_t *Dest, const wchar_t *Source, size_t Count);
wchar_t *__cdecl wcsncpy(wchar_t *Dest, const wchar_t *Source, size_t Count);
wchar_t *__cdecl wcsnset(wchar_t *Str, wchar_t Val, size_t MaxCount);
wchar_t *__cdecl wcsnset(wchar_t *Str, wchar_t Val, size_t MaxCount);
wchar_t *__cdecl wcspbrk(const wchar_t *Str, const wchar_t *Control);
wchar_t *__cdecl wcsrchr(const wchar_t *Str, wchar_t Ch);
wchar_t *__cdecl wcsrev(wchar_t *Str);
wchar_t *__cdecl wcsrev(wchar_t *Str);
wchar_t *__cdecl wcsset(wchar_t *Str, wchar_t Val);
wchar_t *__cdecl wcsset(wchar_t *Str, wchar_t Val);
wchar_t *__cdecl wcsstr(const wchar_t *Str, const wchar_t *SubStr);
wchar_t *__cdecl wcstok(wchar_t *Str, const wchar_t *Delim);
wchar_t *__cdecl wcstok_s(wchar_t *Str, const wchar_t *Delim, wchar_t **Context);
wchar_t *__cdecl wcsupr(wchar_t *Str);
wchar_t *__cdecl wcsupr(wchar_t *String);
wchar_t *__cdecl wcsupr_l(wchar_t *String, _locale_t Locale);
wchar_t *__cdecl wctime(const time_t *);
wchar_t *__cdecl wctime32(const __time32_t *Time);
wchar_t *__cdecl wctime64(const __time64_t *Time);
wchar_t *__cdecl wfullpath(wchar_t *FullPath, const wchar_t *Path, size_t SizeInWords);
wchar_t *__cdecl wgetcwd(wchar_t *DstBuf, int SizeInWords);
wchar_t *__cdecl wgetdcwd(int Drive, wchar_t *DstBuf, int SizeInWords);
wchar_t *__cdecl wgetdcwd_nolock(int Drive, wchar_t *DstBuf, int SizeInWords);
wchar_t *__cdecl wgetenv(const wchar_t *VarName);
wchar_t *__cdecl wmemchr(const wchar_t *S, wchar_t C, size_t N);
wchar_t *__cdecl wmemcpy(wchar_t *S1, const wchar_t *S2, size_t N);
wchar_t *__cdecl wmemmove(wchar_t *S1, const wchar_t *S2, size_t N);
wchar_t *__cdecl wmemset(wchar_t *S, wchar_t C, size_t N);
wchar_t *__cdecl wmktemp(wchar_t *TemplateName);
wchar_t *__cdecl wsetlocale(int Category, const wchar_t *Locale);
wchar_t *__cdecl wstrdate(wchar_t *Buffer);
wchar_t *__cdecl wstrtime(wchar_t *Buffer);
wchar_t *__cdecl wtempnam(const wchar_t *Directory, const wchar_t *FilePrefix);
wchar_t *__cdecl wtmpnam(wchar_t *Buffer);
wint_t __cdecl btowc(int);
wint_t __cdecl fgetwc(FILE *File);
wint_t __cdecl fgetwc_nolock(FILE *File);
wint_t __cdecl fgetwchar();
wint_t __cdecl fputwc(wchar_t Ch, FILE *File);
wint_t __cdecl fputwc_nolock(wchar_t Ch, FILE *File);
wint_t __cdecl fputwchar(wchar_t Ch);
wint_t __cdecl getwc(FILE *File);
wint_t __cdecl getwch();
wint_t __cdecl getwch_nolock();
wint_t __cdecl getwchar();
wint_t __cdecl getwche();
wint_t __cdecl getwche_nolock();
wint_t __cdecl putwc(wchar_t Ch, FILE *File);
wint_t __cdecl putwch(wchar_t WCh);
wint_t __cdecl putwch_nolock(wchar_t WCh);
wint_t __cdecl putwchar(wchar_t Ch);
wint_t __cdecl towlower(wint_t C);
wint_t __cdecl towlower_l(wint_t C, _locale_t Locale);
wint_t __cdecl towupper(wint_t C);
wint_t __cdecl towupper_l(wint_t C, _locale_t Locale);
wint_t __cdecl ungetwc(wint_t Ch, FILE *File);
wint_t __cdecl ungetwc_nolock(wint_t Ch, FILE *File);
wint_t __cdecl ungetwch(wint_t WCh);
wint_t __cdecl ungetwch_nolock(wint_t WCh);