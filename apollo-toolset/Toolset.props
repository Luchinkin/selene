<!--
***********************************************************************************************
Toolset.props

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <_DefaultLLVMInstallDir Condition="'$(_DefaultLLVMInstallDir)' == ''">$(VsInstallRoot)\VC\Tools\Llvm\x64</_DefaultLLVMInstallDir>
    <LLVMInstallDir Condition="'$(LLVMInstallDir)' == ''">$(_DefaultLLVMInstallDir)</LLVMInstallDir>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)ImportBefore\*.props" Condition="Exists('$(MSBuildThisFileDirectory)ImportBefore')" />

  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.MSVC.Toolset.x64.props"/>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.ClangCl.Common.props"/>

  <PropertyGroup>
    <TargetPlatformIdentifier>Clang.Windows</TargetPlatformIdentifier>
    <ToolsetISenseIdentifier>$(TargetPlatformIdentifier)</ToolsetISenseIdentifier>
    <CLToolExe>clang-cl.exe</CLToolExe>
    <LinkToolExe>$(SeleneRoot)apollo-linker\x64\Release\linker.exe</LinkToolExe>
    <LibToolExe>llvm-lib.exe</LibToolExe>
    <ExecutablePath>$(LLVMInstallDir)\bin;$(ExecutablePath)</ExecutablePath>

	  <!-- ClangCl is not compatiable with MSVC analysis, use clang-tidy as default -->
    <EnableMicrosoftCodeAnalysis>false</EnableMicrosoftCodeAnalysis>
    <EnableClangTidyCodeAnalysis>true</EnableClangTidyCodeAnalysis>
    <EnableClangTidyCodeAnalysis Condition="'$(ApplicationType)' == 'Linux'">false</EnableClangTidyCodeAnalysis>
    <ClCompilerPath>$(ClangAnalysisToolsPath)\clang-cl.exe</ClCompilerPath>

    <!-- Define Use* properties from LLVM Toolset Extension for backwards compatibility with downstream components that rely on those properties being set. -->
    <!-- For example vcpkg relies on UseLldLink=true for handling of lld-link.exe (https://github.com/microsoft/vcpkg/issues/4359) -->
    <UseClangCl>true</UseClangCl>
    <UseLldLink>true</UseLldLink>
    <UseLlvmLib>true</UseLlvmLib>
  </PropertyGroup>


  <ItemDefinitionGroup>
      <ClCompile>
          <MultiProcessorCompilation>true</MultiProcessorCompilation>
          <BuildStlModules>false</BuildStlModules>
      </ClCompile>
  </ItemDefinitionGroup>

  <PropertyGroup>
    <DebuggerFlavor Condition="'$(DebuggerFlavor)'==''">WindowsLocalDebugger</DebuggerFlavor>
    <LlvmArchitectureSwitch>-m64</LlvmArchitectureSwitch>

    <!-- Add Clang include path for IntelliSense -->
    <IncludePath>$(LLVMInstallDir)\x64\lib\clang\10.0.0\include;$(IncludePath)</IncludePath>
    <ExcludePath Condition="'$(ExcludePath)' == ''">$(LLVMInstallDir)\x64\lib\clang\10.0.0\include;$(CommonExcludePath)</ExcludePath>
    <ProjectEvaluationFingerprint>$(LLVMInstallDir)\$(ProjectEvaluationFingerprint)</ProjectEvaluationFingerprint>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)ImportAfter\*.props" Condition="Exists('$(MSBuildThisFileDirectory)ImportAfter')" />
</Project>
