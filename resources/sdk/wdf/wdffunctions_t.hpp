#pragma once
#include <sdkgen/support_library.hpp>
#include "request_type_t.hpp"
#include "dma_direction_t.hpp"
#include "usb_pipe_type_t.hpp"
#include "device_io_type_t.hpp"
#include "io_queue_state_t.hpp"
#include "../nt/pool_type_t.hpp"
#include "../power/action_t.hpp"
#include "io_target_state_t.hpp"
#include "device_pnp_state_t.hpp"
#include "interrupt_policy_t.hpp"
#include "special_file_type_t.hpp"
#include "device_power_state_t.hpp"
#include "interrupt_priority_t.hpp"
#include "../nt/interface_type_t.hpp"
#include "device_failed_action_t.hpp"
#include "wmi_provider_control_t.hpp"
#include "../dma/completion_status_t.hpp"
#include "device_registry_property_t.hpp"
#include "io_target_sent_io_action_t.hpp"
#include "device_power_policy_state_t.hpp"
#include "io_target_purge_io_action_t.hpp"
#include "release_hardware_order_on_failure_t.hpp"

namespace cm  { struct partial_resource_descriptor_t; }
namespace dma { struct adapter_t;                     }
namespace io  { struct resource_descriptor_t;         }
namespace io  { struct stack_location_t;              }
namespace nt  { struct device_object_t;               }
namespace nt  { struct driver_object_t;               }
namespace nt  { struct eprocess_t;                    }
namespace nt  { struct file_object_t;                 }
namespace nt  { struct guid_t;                        }
namespace nt  { struct interface_t;                   }
namespace nt  { struct irp_t;                         }
namespace nt  { struct kdpc_t;                        }
namespace nt  { struct kinterrupt_t;                  }
namespace nt  { struct mdl_t;                         }
namespace nt  { struct scatter_gather_list_t;         }
namespace pnp { struct bus_information_t;             }

#include "magic/wdffunctions_t.start.hpp"
namespace wdf
{
    struct urb_t;
    struct wdfdpc_t;
    struct wdfkey_t;
    struct wdfqueue_t;
    struct wdftimer_t;
    struct wdfdevice_t;
    struct wdfdriver_t;
    struct wdfmemory_t;
    struct wdfstring_t;
    struct dpc_config_t;
    struct wdfrequest_t;
    struct wdfusbpipe_t;
    struct wdfiotarget_t;
    struct wdfspinlock_t;
    struct wdfwaitlock_t;
    struct wdfworkitem_t;
    struct device_state_t;
    struct timer_config_t;
    struct wdfchildlist_t;
    struct wdfcmreslist_t;
    struct wdfinterrupt_t;
    struct wdfioreslist_t;
    struct wdflookaside_t;
    struct wdfusbdevice_t;
    struct driver_config_t;
    struct wdfcollection_t;
    struct wdfdmaenabler_t;
    struct wdffileobject_t;
    struct driver_globals_t;
    struct interrupt_info_t;
    struct io_type_config_t;
    struct wdfdevice_init_t;
    struct wdfwmiinstance_t;
    struct wdfwmiprovider_t;
    struct io_queue_config_t;
    struct wdfcommonbuffer_t;
    struct wdfioresreqlist_t;
    struct wdfusbinterface_t;
    struct workitem_config_t;
    struct interrupt_config_t;
    struct wdfcxdevice_init_t;
    struct wdfmemory_offset_t;
    struct child_list_config_t;
    struct fileobject_config_t;
    struct memory_descriptor_t;
    struct object_attributes_t;
    struct task_send_options_t;
    struct wdfdmatransaction_t;
    struct dma_enabler_config_t;
    struct request_parameters_t;
    struct wdfcompaniontarget_t;
    struct child_list_iterator_t;
    struct child_retrieve_info_t;
    struct fdo_event_callbacks_t;
    struct pdo_event_callbacks_t;
    struct remove_lock_options_t;
    struct wmi_instance_config_t;
    struct wmi_provider_config_t;
    struct common_buffer_config_t;
    struct device_property_data_t;
    struct request_reuse_params_t;
    struct request_send_options_t;
    struct usb_pipe_information_t;
    struct io_target_open_params_t;
    struct usb_device_descriptor_t;
    struct query_interface_config_t;
    struct usb_device_information_t;
    struct device_pnp_capabilities_t;
    struct request_forward_options_t;
    struct wdfcx_fileobject_config_t;
    union usb_control_setup_packet_t;
    struct object_context_type_info_t;
    struct pnppower_event_callbacks_t;
    struct power_framework_settings_t;
    struct usb_device_create_config_t;
    struct usb_interface_descriptor_t;
    struct device_power_capabilities_t;
    struct dma_system_profile_config_t;
    struct interrupt_extended_policy_t;
    struct request_completion_params_t;
    struct device_pnp_notification_data_t;
    struct power_policy_event_callbacks_t;
    struct usb_continuous_reader_config_t;
    struct device_power_notification_data_t;
    struct wdfcx_pnppower_event_callbacks_t;
    struct driver_version_available_params_t;
    struct usb_device_select_config_params_t;
    struct child_address_description_header_t;
    struct io_queue_forward_progress_policy_t;
    struct device_power_policy_idle_settings_t;
    struct device_power_policy_wake_settings_t;
    struct wdfcx_power_policy_event_callbacks_t;
    struct usb_interface_select_setting_params_t;
    struct device_power_policy_notification_data_t;
    struct child_identification_description_header_t;

    // [struct _WDFFUNCTIONS]
    // => Windows 10 v1607, Windows 10 v2004, Windows 11, Windows 10 v20H2
    //
    struct wdffunctions_t                                                                                                                        
    {                                                                                                                                            
        using pfn_wdfchildlistcreate_t =                                          sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::child_list_config_t*, struct wdf::object_attributes_t*, struct wdf::wdfchildlist_t**)>*;                                                                
        using pfn_wdfchildlistgetdevice_t =                                       sdk::function<struct wdf::wdfdevice_t*(struct wdf::driver_globals_t*, struct wdf::wdfchildlist_t*)>*;                                                                
        using pfn_wdfchildlistretrievepdo_t =                                     sdk::function<struct wdf::wdfdevice_t*(struct wdf::driver_globals_t*, struct wdf::wdfchildlist_t*, struct wdf::child_retrieve_info_t*)>*;                                                                
        using pfn_wdf_child_list_retrieve_address_description_t =                 sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfchildlist_t*, struct wdf::child_identification_description_header_t*, struct wdf::child_address_description_header_t*)>*;                                                                
        using pfn_wdf_child_list_begin_scan_t =                                   sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfchildlist_t*)>*;                                                                
        using pfn_wdf_child_list_end_scan_t =                                     sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfchildlist_t*)>*;                                                                
        using pfn_wdf_child_list_begin_iteration_t =                              sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfchildlist_t*, struct wdf::child_list_iterator_t*)>*;                                                                
        using pfn_wdfchildlistretrievenextdevice_t =                              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfchildlist_t*, struct wdf::child_list_iterator_t*, struct wdf::wdfdevice_t**, struct wdf::child_retrieve_info_t*)>*;                                                                
        using pfn_wdf_child_list_end_iteration_t =                                sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfchildlist_t*, struct wdf::child_list_iterator_t*)>*;                                                                
        using pfn_wdf_child_list_add_or_update_child_description_as_present_t =   sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfchildlist_t*, struct wdf::child_identification_description_header_t*, struct wdf::child_address_description_header_t*)>*;                                                                
        using pfn_wdfchildlistupdatechilddescriptionasmissing_t =                 sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfchildlist_t*, struct wdf::child_identification_description_header_t*)>*;                                                                
        using pfn_wdf_child_list_update_child_description_as_missing_t =          pfn_wdfchildlistupdatechilddescriptionasmissing_t ;                                                                
        using pfn_wdf_child_list_update_all_child_descriptions_as_present_t =     sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfchildlist_t*)>*;                                                                
        using pfn_wdfchildlistrequestchildeject_t =                               sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfchildlist_t*, struct wdf::child_identification_description_header_t*)>*;                                                                
        using pfn_wdfcollectioncreate_t =                                         sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::object_attributes_t*, struct wdf::wdfcollection_t**)>*;                                                                
        using pfn_wdfcollectiongetcount_t =                                       sdk::function<uint32_t(struct wdf::driver_globals_t*, struct wdf::wdfcollection_t*)>*;                                                                
        using pfn_wdfcollectionadd_t =                                            sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfcollection_t*, void*)>*;                                                                
        using pfn_wdfcollectionremove_t =                                         sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfcollection_t*, void*)>*;                                                                
        using pfn_wdfcollectionremoveitem_t =                                     sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfcollection_t*, uint32_t)>*;                                                                
        using pfn_wdfcollectiongetitem_t =                                        sdk::function<void*(struct wdf::driver_globals_t*, struct wdf::wdfcollection_t*, uint32_t)>*;                                                                
        using pfn_wdf_collection_get_first_item_t =                               sdk::function<void*(struct wdf::driver_globals_t*, struct wdf::wdfcollection_t*)>*;                                                                
        using pfn_wdf_collection_get_last_item_t =                                sdk::function<void*(struct wdf::driver_globals_t*, struct wdf::wdfcollection_t*)>*;                                                                
        using pfn_wdfcommonbuffercreate_t =                                       sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdmaenabler_t*, uint64_t, struct wdf::object_attributes_t*, struct wdf::wdfcommonbuffer_t**)>*;                                                                
        using pfn_wdfcommonbuffergetalignedvirtualaddress_t =                     sdk::function<void*(struct wdf::driver_globals_t*, struct wdf::wdfcommonbuffer_t*)>*;                                                                
        using pfn_wdfcommonbuffergetalignedlogicaladdress_t =                     sdk::function<int64_t(struct wdf::driver_globals_t*, struct wdf::wdfcommonbuffer_t*)>*;                                                                
        using pfn_wdfcommonbuffergetlength_t =                                    sdk::function<uint64_t(struct wdf::driver_globals_t*, struct wdf::wdfcommonbuffer_t*)>*;                                                                
        using pfn_wdfcontroldeviceinitallocate_t =                                sdk::function<struct wdf::wdfdevice_init_t*(struct wdf::driver_globals_t*, struct wdf::wdfdriver_t*, const nt::unicode_view*)>*;                                                                
        using pfn_wdfcontroldeviceinitsetshutdownnotification_t =                 sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, sdk::function<void(struct wdf::wdfdevice_t*)>*, uint8_t)>*;                                                                
        using pfn_wdf_control_device_init_set_shutdown_notification_t =           pfn_wdfcontroldeviceinitsetshutdownnotification_t ;                                                                
        using pfn_wdf_control_finish_initializing_t =                             sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdf_device_get_device_state_t =                                 sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::device_state_t*)>*;                                                                
        using pfn_wdf_device_set_device_state_t =                                 sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::device_state_t*)>*;                                                                
        using pfn_wdfwdmdevicegetwdfdevicehandle_t =                              sdk::function<struct wdf::wdfdevice_t*(struct wdf::driver_globals_t*, struct nt::device_object_t*)>*;                                                                
        using pfn_wdf_device_wdm_get_device_object_t =                            sdk::function<struct nt::device_object_t*(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdf_device_wdm_get_attached_device_t =                          sdk::function<struct nt::device_object_t*(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdf_device_wdm_get_physical_device_t =                          sdk::function<struct nt::device_object_t*(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdfdevicewdmdispatchpreprocessedirp_t =                         sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct nt::irp_t*)>*;                                                                
        using pfn_wdf_device_add_dependent_usage_device_object_t =                sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct nt::device_object_t*)>*;                                                                
        using pfn_wdf_device_add_removal_relations_physical_device_t =            sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct nt::device_object_t*)>*;                                                                
        using pfn_wdf_device_remove_removal_relations_physical_device_t =         sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct nt::device_object_t*)>*;                                                                
        using pfn_wdf_device_clear_removal_relations_devices_t =                  sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdfdevicegetdriver_t =                                          sdk::function<struct wdf::wdfdriver_t*(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdfdeviceretrievedevicename_t =                                 sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::wdfstring_t*)>*;                                                                
        using pfn_wdf_device_assign_mof_resource_name_t =                         sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, const nt::unicode_view*)>*;                                                                
        using pfn_wdf_device_get_io_target_t =                                    sdk::function<struct wdf::wdfiotarget_t*(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdfdevicegetdevicepnpstate_t =                                  sdk::function<enum wdf::device_pnp_state_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdfdevicegetdevicepowerstate_t =                                sdk::function<enum wdf::device_power_state_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdfdevicegetdevicepowerpolicystate_t =                          sdk::function<enum wdf::device_power_policy_state_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdfdeviceassigns0idlesettings_t =                               sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::device_power_policy_idle_settings_t*)>*;                                                                
        using pfn_wdfdeviceassignsxwakesettings_t =                               sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::device_power_policy_wake_settings_t*)>*;                                                                
        using pfn_wdfdeviceopenregistrykey_t =                                    sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, uint32_t, uint32_t, struct wdf::object_attributes_t*, struct wdf::wdfkey_t**)>*;                                                                
        using pfn_wdfdevicesetspecialfilesupport_t =                              sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, enum wdf::special_file_type_t, uint8_t)>*;                                                                
        using pfn_wdf_device_set_characteristics_t =                              sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, uint32_t)>*;                                                                
        using pfn_wdf_device_get_characteristics_t =                              sdk::function<uint32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdf_device_get_alignment_requirement_t =                        sdk::function<uint32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdf_device_set_alignment_requirement_t =                        sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, uint32_t)>*;                                                                
        using pfn_wdf_device_init_free_t =                                        sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*)>*;                                                                
        using pfn_wdfdeviceinitsetpnppowereventcallbacks_t =                      sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, struct wdf::pnppower_event_callbacks_t*)>*;                                                                
        using pfn_wdfdeviceinitsetpowerpolicyeventcallbacks_t =                   sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, struct wdf::power_policy_event_callbacks_t*)>*;                                                                
        using pfn_wdf_device_init_set_power_policy_ownership_t =                  sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, uint8_t)>*;                                                                
        using pfn_wdfdeviceinitregisterpnpstatechangecallback_t =                 sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, enum wdf::device_pnp_state_t, sdk::function<void(struct wdf::wdfdevice_t*, const struct wdf::device_pnp_notification_data_t*)>*, uint32_t)>*;                                                                
        using pfn_wdf_device_init_register_pnp_state_change_callback_t =          pfn_wdfdeviceinitregisterpnpstatechangecallback_t ;                                                                
        using pfn_wdfdeviceinitregisterpowerstatechangecallback_t =               sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, enum wdf::device_power_state_t, sdk::function<void(struct wdf::wdfdevice_t*, const struct wdf::device_power_notification_data_t*)>*, uint32_t)>*;                                                                
        using pfn_wdf_device_init_register_power_state_change_callback_t =        pfn_wdfdeviceinitregisterpowerstatechangecallback_t ;                                                                
        using pfn_wdfdeviceinitregisterpowerpolicystatechangecallback_t =         sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, enum wdf::device_power_policy_state_t, sdk::function<void(struct wdf::wdfdevice_t*, const struct wdf::device_power_policy_notification_data_t*)>*, uint32_t)>*;                                                                
        using pfn_wdf_device_init_register_power_policy_state_change_callback_t = pfn_wdfdeviceinitregisterpowerpolicystatechangecallback_t ;                                                                
        using pfn_wdfdeviceinitsetiotype_t =                                      sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, enum wdf::device_io_type_t)>*;                                                                
        using pfn_wdf_device_init_set_exclusive_t =                               sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, uint8_t)>*;                                                                
        using pfn_wdf_device_init_set_power_not_pageable_t =                      sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*)>*;                                                                
        using pfn_wdf_device_init_set_power_pageable_t =                          sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*)>*;                                                                
        using pfn_wdf_device_init_set_power_inrush_t =                            sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*)>*;                                                                
        using pfn_wdf_device_init_set_device_type_t =                             sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, uint32_t)>*;                                                                
        using pfn_wdf_device_init_assign_name_t =                                 sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, const nt::unicode_view*)>*;                                                                
        using pfn_wdf_device_init_assign_sddl_string_t =                          sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, const nt::unicode_view*)>*;                                                                
        using pfn_wdfdeviceinitsetdeviceclass_t =                                 sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, const struct nt::guid_t*)>*;                                                                
        using pfn_wdfdeviceinitsetcharacteristics_t =                             sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, uint32_t, uint8_t)>*;                                                                
        using pfn_wdfdeviceinitsetfileobjectconfig_t =                            sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, struct wdf::fileobject_config_t*, struct wdf::object_attributes_t*)>*;                                                                
        using pfn_wdfdeviceinitsetrequestattributes_t =                           sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, struct wdf::object_attributes_t*)>*;                                                                
        using pfn_wdfdeviceinitassignwdmirppreprocesscallback_t =                 sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, sdk::function<int32_t(struct wdf::wdfdevice_t*, struct nt::irp_t*)>*, uint8_t, uint8_t*, uint32_t)>*;                                                                
        using pfn_wdf_device_init_assign_wdm_irp_preprocess_callback_t =          pfn_wdfdeviceinitassignwdmirppreprocesscallback_t ;                                                                
        using pfn_wdfdeviceinitsetioincallercontextcallback_t =                   sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, sdk::function<void(struct wdf::wdfdevice_t*, struct wdf::wdfrequest_t*)>*)>*;                                                                
        using pfn_wdfdevicecreate_t =                                             sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t**, struct wdf::object_attributes_t*, struct wdf::wdfdevice_t**)>*;                                                                
        using pfn_wdfdevicesetstaticstopremove_t =                                sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, uint8_t)>*;                                                                
        using pfn_wdfdevicecreatedeviceinterface_t =                              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, const struct nt::guid_t*, const nt::unicode_view*)>*;                                                                
        using pfn_wdfdevicesetdeviceinterfacestate_t =                            sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, const struct nt::guid_t*, const nt::unicode_view*, uint8_t)>*;                                                                
        using pfn_wdfdeviceretrievedeviceinterfacestring_t =                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, const struct nt::guid_t*, const nt::unicode_view*, struct wdf::wdfstring_t*)>*;                                                                
        using pfn_wdf_device_create_symbolic_link_t =                             sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, const nt::unicode_view*)>*;                                                                
        using pfn_wdfdevicequeryproperty_t =                                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, enum wdf::device_registry_property_t, uint32_t, void*, uint32_t*)>*;                                                                
        using pfn_wdfdeviceallocandqueryproperty_t =                              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, enum wdf::device_registry_property_t, enum nt::pool_type_t, struct wdf::object_attributes_t*, struct wdf::wdfmemory_t**)>*;                                                                
        using pfn_wdfdevicesetpnpcapabilities_t =                                 sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::device_pnp_capabilities_t*)>*;                                                                
        using pfn_wdfdevicesetpowercapabilities_t =                               sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::device_power_capabilities_t*)>*;                                                                
        using pfn_wdfdevicesetbusinformationforchildren_t =                       sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct pnp::bus_information_t*)>*;                                                                
        using pfn_wdfdeviceindicatewakestatus_t =                                 sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, int32_t)>*;                                                                
        using pfn_wdfdevicesetfailed_t =                                          sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, enum wdf::device_failed_action_t)>*;                                                                
        using pfn_wdfdevicestopidlenotrack_t =                                    sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, uint8_t)>*;                                                                
        using pfn_wdf_device_resume_idle_no_track_t =                             sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdfdevicegetfileobject_t =                                      sdk::function<struct wdf::wdffileobject_t*(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct nt::file_object_t*)>*;                                                                
        using pfn_wdfdeviceenqueuerequest_t =                                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdfdevicegetdefaultqueue_t =                                    sdk::function<struct wdf::wdfqueue_t*(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdfdeviceconfigurerequestdispatching_t =                        sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::wdfqueue_t*, enum wdf::request_type_t)>*;                                                                
        using pfn_wdfdmaenablercreate_t =                                         sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::dma_enabler_config_t*, struct wdf::object_attributes_t*, struct wdf::wdfdmaenabler_t**)>*;                                                                
        using pfn_wdf_dma_enabler_get_maximum_length_t =                          sdk::function<uint64_t(struct wdf::driver_globals_t*, struct wdf::wdfdmaenabler_t*)>*;                                                                
        using pfn_wdf_dma_enabler_get_maximum_scatter_gather_elements_t =         sdk::function<uint64_t(struct wdf::driver_globals_t*, struct wdf::wdfdmaenabler_t*)>*;                                                                
        using pfn_wdfdmaenablersetmaximumscattergatherelements_t =                sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdmaenabler_t*, uint64_t)>*;                                                                
        using pfn_wdf_dma_enabler_set_maximum_scatter_gather_elements_t =         pfn_wdfdmaenablersetmaximumscattergatherelements_t ;                                                                
        using pfn_wdfdmatransactioncreate_t =                                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdmaenabler_t*, struct wdf::object_attributes_t*, struct wdf::wdfdmatransaction_t**)>*;                                                                
        using pfn_wdfdmatransactioninitialize_t =                                 sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*, sdk::function<uint8_t(struct wdf::wdfdmatransaction_t*, struct wdf::wdfdevice_t*, void*, enum wdf::dma_direction_t, struct nt::scatter_gather_list_t*)>*, enum wdf::dma_direction_t, struct nt::mdl_t*, void*, uint64_t)>*;                                                                
        using pfn_wdfdmatransactioninitializeusingrequest_t =                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*, struct wdf::wdfrequest_t*, sdk::function<uint8_t(struct wdf::wdfdmatransaction_t*, struct wdf::wdfdevice_t*, void*, enum wdf::dma_direction_t, struct nt::scatter_gather_list_t*)>*, enum wdf::dma_direction_t)>*;                                                                
        using pfn_wdfdmatransactionexecute_t =                                    sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*, void*)>*;                                                                
        using pfn_wdfdmatransactionrelease_t =                                    sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*)>*;                                                                
        using pfn_wdfdmatransactiondmacompleted_t =                               sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*, int32_t*)>*;                                                                
        using pfn_wdf_dma_transaction_dma_completed_with_length_t =               sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*, uint64_t, int32_t*)>*;                                                                
        using pfn_wdf_dma_transaction_dma_completed_final_t =                     sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*, uint64_t, int32_t*)>*;                                                                
        using pfn_wdf_dma_transaction_get_bytes_transferred_t =                   sdk::function<uint64_t(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*)>*;                                                                
        using pfn_wdfdmatransactionsetmaximumlength_t =                           sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*, uint64_t)>*;                                                                
        using pfn_wdfdmatransactiongetrequest_t =                                 sdk::function<struct wdf::wdfrequest_t*(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*)>*;                                                                
        using pfn_wdf_dma_transaction_get_current_dma_transfer_length_t =         sdk::function<uint64_t(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*)>*;                                                                
        using pfn_wdfdmatransactiongetdevice_t =                                  sdk::function<struct wdf::wdfdevice_t*(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*)>*;                                                                
        using pfn_wdfdpccreate_t =                                                sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::dpc_config_t*, struct wdf::object_attributes_t*, struct wdf::wdfdpc_t**)>*;                                                                
        using pfn_wdfdpcenqueue_t =                                               sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfdpc_t*)>*;                                                                
        using pfn_wdfdpccancel_t =                                                sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfdpc_t*, uint8_t)>*;                                                                
        using pfn_wdfdpcgetparentobject_t =                                       sdk::function<void*(struct wdf::driver_globals_t*, struct wdf::wdfdpc_t*)>*;                                                                
        using pfn_wdfdpcwdmgetdpc_t =                                             sdk::function<struct nt::kdpc_t*(struct wdf::driver_globals_t*, struct wdf::wdfdpc_t*)>*;                                                                
        using pfn_wdfdrivercreate_t =                                             sdk::function<int32_t(struct wdf::driver_globals_t*, struct nt::driver_object_t*, const nt::unicode_view*, struct wdf::object_attributes_t*, struct wdf::driver_config_t*, struct wdf::wdfdriver_t**)>*;                                                                
        using pfn_wdfdrivergetregistrypath_t =                                    sdk::function<wchar_t*(struct wdf::driver_globals_t*, struct wdf::wdfdriver_t*)>*;                                                                
        using pfn_wdfdriverwdmgetdriverobject_t =                                 sdk::function<struct nt::driver_object_t*(struct wdf::driver_globals_t*, struct wdf::wdfdriver_t*)>*;                                                                
        using pfn_wdfdriveropenparametersregistrykey_t =                          sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdriver_t*, uint32_t, struct wdf::object_attributes_t*, struct wdf::wdfkey_t**)>*;                                                                
        using pfn_wdfwdmdrivergetwdfdriverhandle_t =                              sdk::function<struct wdf::wdfdriver_t*(struct wdf::driver_globals_t*, struct nt::driver_object_t*)>*;                                                                
        using pfn_wdfdriverregistertraceinfo_t =                                  sdk::function<int32_t(struct wdf::driver_globals_t*, struct nt::driver_object_t*, sdk::function<int32_t(uint8_t, void*, uint32_t, void*, void*, uint32_t*)>*, void*)>*;                                                                
        using pfn_wdfdriverretrieveversionstring_t =                              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdriver_t*, struct wdf::wdfstring_t*)>*;                                                                
        using pfn_wdfdriverisversionavailable_t =                                 sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfdriver_t*, struct wdf::driver_version_available_params_t*)>*;                                                                
        using pfn_wdffdoinitwdmgetphysicaldevice_t =                              sdk::function<struct nt::device_object_t*(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*)>*;                                                                
        using pfn_wdffdoinitopenregistrykey_t =                                   sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, uint32_t, uint32_t, struct wdf::object_attributes_t*, struct wdf::wdfkey_t**)>*;                                                                
        using pfn_wdffdoinitqueryproperty_t =                                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, enum wdf::device_registry_property_t, uint32_t, void*, uint32_t*)>*;                                                                
        using pfn_wdffdoinitallocandqueryproperty_t =                             sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, enum wdf::device_registry_property_t, enum nt::pool_type_t, struct wdf::object_attributes_t*, struct wdf::wdfmemory_t**)>*;                                                                
        using pfn_wdffdoinitseteventcallbacks_t =                                 sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, struct wdf::fdo_event_callbacks_t*)>*;                                                                
        using pfn_wdf_fdo_init_set_filter_t =                                     sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*)>*;                                                                
        using pfn_wdffdoinitsetdefaultchildlistconfig_t =                         sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, struct wdf::child_list_config_t*, struct wdf::object_attributes_t*)>*;                                                                
        using pfn_wdffdoqueryforinterface_t =                                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, const struct nt::guid_t*, struct nt::interface_t*, uint16_t, uint16_t, void*)>*;                                                                
        using pfn_wdffdogetdefaultchildlist_t =                                   sdk::function<struct wdf::wdfchildlist_t*(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdffdoaddstaticchild_t =                                        sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdf_fdo_lock_static_child_list_for_iteration_t =                sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdffdoretrievenextstaticchild_t =                               sdk::function<struct wdf::wdfdevice_t*(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::wdfdevice_t*, uint32_t)>*;                                                                
        using pfn_wdf_fdo_unlock_static_child_list_from_iteration_t =             sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdffileobjectgetfilename_t =                                    sdk::function<nt::unicode_view*(struct wdf::driver_globals_t*, struct wdf::wdffileobject_t*)>*;                                                                
        using pfn_wdffileobjectgetflags_t =                                       sdk::function<uint32_t(struct wdf::driver_globals_t*, struct wdf::wdffileobject_t*)>*;                                                                
        using pfn_wdffileobjectgetdevice_t =                                      sdk::function<struct wdf::wdfdevice_t*(struct wdf::driver_globals_t*, struct wdf::wdffileobject_t*)>*;                                                                
        using pfn_wdffileobjectwdmgetfileobject_t =                               sdk::function<struct nt::file_object_t*(struct wdf::driver_globals_t*, struct wdf::wdffileobject_t*)>*;                                                                
        using pfn_wdfinterruptcreate_t =                                          sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::interrupt_config_t*, struct wdf::object_attributes_t*, struct wdf::wdfinterrupt_t**)>*;                                                                
        using pfn_wdf_interrupt_queue_dpc_for_isr_t =                             sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfinterrupt_t*)>*;                                                                
        using pfn_wdfinterruptsynchronize_t =                                     sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfinterrupt_t*, sdk::function<uint8_t(struct wdf::wdfinterrupt_t*, void*)>*, void*)>*;                                                                
        using pfn_wdf_interrupt_acquire_lock_t =                                  sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfinterrupt_t*)>*;                                                                
        using pfn_wdf_interrupt_release_lock_t =                                  sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfinterrupt_t*)>*;                                                                
        using pfn_wdf_interrupt_enable_t =                                        sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfinterrupt_t*)>*;                                                                
        using pfn_wdf_interrupt_disable_t =                                       sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfinterrupt_t*)>*;                                                                
        using pfn_wdfinterruptwdmgetinterrupt_t =                                 sdk::function<struct nt::kinterrupt_t*(struct wdf::driver_globals_t*, struct wdf::wdfinterrupt_t*)>*;                                                                
        using pfn_wdfinterruptgetinfo_t =                                         sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfinterrupt_t*, struct wdf::interrupt_info_t*)>*;                                                                
        using pfn_wdfinterruptsetpolicy_t =                                       sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfinterrupt_t*, enum wdf::interrupt_policy_t, enum wdf::interrupt_priority_t, uint64_t)>*;                                                                
        using pfn_wdfinterruptgetdevice_t =                                       sdk::function<struct wdf::wdfdevice_t*(struct wdf::driver_globals_t*, struct wdf::wdfinterrupt_t*)>*;                                                                
        using pfn_wdfioqueuecreate_t =                                            sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::io_queue_config_t*, struct wdf::object_attributes_t*, struct wdf::wdfqueue_t**)>*;                                                                
        using pfn_wdfioqueuegetstate_t =                                          sdk::function<enum wdf::io_queue_state_t(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*, uint32_t*, uint32_t*)>*;                                                                
        using pfn_wdf_io_queue_start_t =                                          sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*)>*;                                                                
        using pfn_wdf_io_queue_stop_t =                                           sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*, sdk::function<void(struct wdf::wdfqueue_t*, void*)>*, void*)>*;                                                                
        using pfn_wdf_io_queue_stop_synchronously_t =                             sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*)>*;                                                                
        using pfn_wdfioqueuegetdevice_t =                                         sdk::function<struct wdf::wdfdevice_t*(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*)>*;                                                                
        using pfn_wdfioqueueretrievenextrequest_t =                               sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*, struct wdf::wdfrequest_t**)>*;                                                                
        using pfn_wdfioqueueretrieverequestbyfileobject_t =                       sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*, struct wdf::wdffileobject_t*, struct wdf::wdfrequest_t**)>*;                                                                
        using pfn_wdfioqueuefindrequest_t =                                       sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*, struct wdf::wdfrequest_t*, struct wdf::wdffileobject_t*, struct wdf::request_parameters_t*, struct wdf::wdfrequest_t**)>*;                                                                
        using pfn_wdfioqueueretrievefoundrequest_t =                              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*, struct wdf::wdfrequest_t*, struct wdf::wdfrequest_t**)>*;                                                                
        using pfn_wdf_io_queue_drain_synchronously_t =                            sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*)>*;                                                                
        using pfn_wdf_io_queue_drain_t =                                          sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*, sdk::function<void(struct wdf::wdfqueue_t*, void*)>*, void*)>*;                                                                
        using pfn_wdf_io_queue_purge_synchronously_t =                            sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*)>*;                                                                
        using pfn_wdf_io_queue_purge_t =                                          sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*, sdk::function<void(struct wdf::wdfqueue_t*, void*)>*, void*)>*;                                                                
        using pfn_wdfioqueuereadynotify_t =                                       sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*, sdk::function<void(struct wdf::wdfqueue_t*, void*)>*, void*)>*;                                                                
        using pfn_wdfiotargetcreate_t =                                           sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::object_attributes_t*, struct wdf::wdfiotarget_t**)>*;                                                                
        using pfn_wdfiotargetopen_t =                                             sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, struct wdf::io_target_open_params_t*)>*;                                                                
        using pfn_wdf_io_target_close_for_query_remove_t =                        sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*)>*;                                                                
        using pfn_wdf_io_target_close_t =                                         sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*)>*;                                                                
        using pfn_wdfiotargetstart_t =                                            sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*)>*;                                                                
        using pfn_wdfiotargetstop_t =                                             sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, enum wdf::io_target_sent_io_action_t)>*;                                                                
        using pfn_wdfiotargetgetstate_t =                                         sdk::function<enum wdf::io_target_state_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*)>*;                                                                
        using pfn_wdfiotargetgetdevice_t =                                        sdk::function<struct wdf::wdfdevice_t*(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*)>*;                                                                
        using pfn_wdfiotargetquerytargetproperty_t =                              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, enum wdf::device_registry_property_t, uint32_t, void*, uint32_t*)>*;                                                                
        using pfn_wdfiotargetallocandquerytargetproperty_t =                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, enum wdf::device_registry_property_t, enum nt::pool_type_t, struct wdf::object_attributes_t*, struct wdf::wdfmemory_t**)>*;                                                                
        using pfn_wdfiotargetqueryforinterface_t =                                sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, const struct nt::guid_t*, struct nt::interface_t*, uint16_t, uint16_t, void*)>*;                                                                
        using pfn_wdf_io_target_wdm_get_target_device_object_t =                  sdk::function<struct nt::device_object_t*(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*)>*;                                                                
        using pfn_wdf_io_target_wdm_get_target_physical_device_t =                sdk::function<struct nt::device_object_t*(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*)>*;                                                                
        using pfn_wdfiotargetwdmgettargetfileobject_t =                           sdk::function<struct nt::file_object_t*(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*)>*;                                                                
        using pfn_wdfiotargetwdmgettargetfilehandle_t =                           sdk::function<void*(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*)>*;                                                                
        using pfn_wdf_io_target_send_read_synchronously_t =                       sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, struct wdf::wdfrequest_t*, struct wdf::memory_descriptor_t*, int64_t*, struct wdf::request_send_options_t*, uint64_t*)>*;                                                                
        using pfn_wdf_io_target_format_request_for_read_t =                       sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, struct wdf::wdfrequest_t*, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*, int64_t*)>*;                                                                
        using pfn_wdf_io_target_send_write_synchronously_t =                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, struct wdf::wdfrequest_t*, struct wdf::memory_descriptor_t*, int64_t*, struct wdf::request_send_options_t*, uint64_t*)>*;                                                                
        using pfn_wdf_io_target_format_request_for_write_t =                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, struct wdf::wdfrequest_t*, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*, int64_t*)>*;                                                                
        using pfn_wdf_io_target_send_ioctl_synchronously_t =                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, struct wdf::wdfrequest_t*, uint32_t, struct wdf::memory_descriptor_t*, struct wdf::memory_descriptor_t*, struct wdf::request_send_options_t*, uint64_t*)>*;                                                                
        using pfn_wdf_io_target_format_request_for_ioctl_t =                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, struct wdf::wdfrequest_t*, uint32_t, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*)>*;                                                                
        using pfn_wdf_io_target_send_internal_ioctl_synchronously_t =             sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, struct wdf::wdfrequest_t*, uint32_t, struct wdf::memory_descriptor_t*, struct wdf::memory_descriptor_t*, struct wdf::request_send_options_t*, uint64_t*)>*;                                                                
        using pfn_wdf_io_target_format_request_for_internal_ioctl_t =             sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, struct wdf::wdfrequest_t*, uint32_t, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*)>*;                                                                
        using pfn_wdfiotargetsendinternalioctlotherssynchronously_t =             sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, struct wdf::wdfrequest_t*, uint32_t, struct wdf::memory_descriptor_t*, struct wdf::memory_descriptor_t*, struct wdf::memory_descriptor_t*, struct wdf::request_send_options_t*, uint64_t*)>*;                                                                
        using pfn_wdf_io_target_send_internal_ioctl_others_synchronously_t =      pfn_wdfiotargetsendinternalioctlotherssynchronously_t ;                                                                
        using pfn_wdfiotargetformatrequestforinternalioctlothers_t =              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, struct wdf::wdfrequest_t*, uint32_t, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*)>*;                                                                
        using pfn_wdf_io_target_format_request_for_internal_ioctl_others_t =      pfn_wdfiotargetformatrequestforinternalioctlothers_t ;                                                                
        using pfn_wdfmemorycreate_t =                                             sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::object_attributes_t*, enum nt::pool_type_t, uint32_t, uint64_t, struct wdf::wdfmemory_t**, void**)>*;                                                                
        using pfn_wdfmemorycreatepreallocated_t =                                 sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::object_attributes_t*, void*, uint64_t, struct wdf::wdfmemory_t**)>*;                                                                
        using pfn_wdfmemorygetbuffer_t =                                          sdk::function<void*(struct wdf::driver_globals_t*, struct wdf::wdfmemory_t*, uint64_t*)>*;                                                                
        using pfn_wdfmemoryassignbuffer_t =                                       sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfmemory_t*, void*, uint64_t)>*;                                                                
        using pfn_wdf_memory_copy_to_buffer_t =                                   sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfmemory_t*, uint64_t, void*, uint64_t)>*;                                                                
        using pfn_wdf_memory_copy_from_buffer_t =                                 sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfmemory_t*, uint64_t, void*, uint64_t)>*;                                                                
        using pfn_wdflookasidelistcreate_t =                                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::object_attributes_t*, uint64_t, enum nt::pool_type_t, struct wdf::object_attributes_t*, uint32_t, struct wdf::wdflookaside_t**)>*;                                                                
        using pfn_wdfmemorycreatefromlookaside_t =                                sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdflookaside_t*, struct wdf::wdfmemory_t**)>*;                                                                
        using pfn_wdfdeviceminiportcreate_t =                                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdriver_t*, struct wdf::object_attributes_t*, struct nt::device_object_t*, struct nt::device_object_t*, struct nt::device_object_t*, struct wdf::wdfdevice_t**)>*;                                                                
        using pfn_wdfdriverminiportunload_t =                                     sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdriver_t*)>*;                                                                
        using pfn_wdfobjectgettypedcontextworker_t =                              sdk::function<void*(struct wdf::driver_globals_t*, void*, const struct wdf::object_context_type_info_t*)>*;                                                                
        using pfn_wdfobjectallocatecontext_t =                                    sdk::function<int32_t(struct wdf::driver_globals_t*, void*, struct wdf::object_attributes_t*, void**)>*;                                                                
        using pfn_wdfobjectcontextgetobject_t =                                   sdk::function<void*(struct wdf::driver_globals_t*, void*)>*;                                                                
        using pfn_wdf_object_reference_actual_t =                                 sdk::variant<sdk::function<void(struct wdf::driver_globals_t*, void*, void*, int32_t, char*)>*, sdk::function<void(struct wdf::driver_globals_t*, void*, void*, int32_t, const char*)>*>;                                                                
        using pfn_wdf_object_dereference_actual_t =                               sdk::variant<sdk::function<void(struct wdf::driver_globals_t*, void*, void*, int32_t, char*)>*, sdk::function<void(struct wdf::driver_globals_t*, void*, void*, int32_t, const char*)>*>;                                                                
        using pfn_wdfobjectcreate_t =                                             sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::object_attributes_t*, void**)>*;                                                                
        using pfn_wdf_object_delete_t =                                           sdk::function<void(struct wdf::driver_globals_t*, void*)>*;                                                                
        using pfn_wdfobjectquery_t =                                              sdk::function<int32_t(struct wdf::driver_globals_t*, void*, const struct nt::guid_t*, uint32_t, void*)>*;                                                                
        using pfn_wdfpdoinitallocate_t =                                          sdk::function<struct wdf::wdfdevice_init_t*(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdfpdoinitseteventcallbacks_t =                                 sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, struct wdf::pdo_event_callbacks_t*)>*;                                                                
        using pfn_wdf_pdo_init_assign_device_id_t =                               sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, const nt::unicode_view*)>*;                                                                
        using pfn_wdf_pdo_init_assign_instance_id_t =                             sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, const nt::unicode_view*)>*;                                                                
        using pfn_wdf_pdo_init_add_hardware_id_t =                                sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, const nt::unicode_view*)>*;                                                                
        using pfn_wdf_pdo_init_add_compatible_id_t =                              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, const nt::unicode_view*)>*;                                                                
        using pfn_wdfpdoinitadddevicetext_t =                                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, const nt::unicode_view*, const nt::unicode_view*, uint32_t)>*;                                                                
        using pfn_wdf_pdo_init_set_default_locale_t =                             sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, uint32_t)>*;                                                                
        using pfn_wdfpdoinitassignrawdevice_t =                                   sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, const struct nt::guid_t*)>*;                                                                
        using pfn_wdfpdomarkmissing_t =                                           sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdf_pdo_request_eject_t =                                       sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdfpdogetparent_t =                                             sdk::function<struct wdf::wdfdevice_t*(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdfpdoretrieveidentificationdescription_t =                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::child_identification_description_header_t*)>*;                                                                
        using pfn_wdf_pdo_retrieve_address_description_t =                        sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::child_address_description_header_t*)>*;                                                                
        using pfn_wdf_pdo_update_address_description_t =                          sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::child_address_description_header_t*)>*;                                                                
        using pfn_wdf_pdo_add_ejection_relations_physical_device_t =              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct nt::device_object_t*)>*;                                                                
        using pfn_wdf_pdo_remove_ejection_relations_physical_device_t =           sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct nt::device_object_t*)>*;                                                                
        using pfn_wdf_pdo_clear_ejection_relations_devices_t =                    sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdfdeviceaddqueryinterface_t =                                  sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::query_interface_config_t*)>*;                                                                
        using pfn_wdfregistryopenkey_t =                                          sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*, const nt::unicode_view*, uint32_t, struct wdf::object_attributes_t*, struct wdf::wdfkey_t**)>*;                                                                
        using pfn_wdfregistrycreatekey_t =                                        sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*, const nt::unicode_view*, uint32_t, uint32_t, uint32_t*, struct wdf::object_attributes_t*, struct wdf::wdfkey_t**)>*;                                                                
        using pfn_wdfregistryclose_t =                                            sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*)>*;                                                                
        using pfn_wdfregistrywdmgethandle_t =                                     sdk::function<void*(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*)>*;                                                                
        using pfn_wdfregistryremovekey_t =                                        sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*)>*;                                                                
        using pfn_wdfregistryremovevalue_t =                                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*, const nt::unicode_view*)>*;                                                                
        using pfn_wdfregistryqueryvalue_t =                                       sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*, const nt::unicode_view*, uint32_t, void*, uint32_t*, uint32_t*)>*;                                                                
        using pfn_wdfregistryquerymemory_t =                                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*, const nt::unicode_view*, enum nt::pool_type_t, struct wdf::object_attributes_t*, struct wdf::wdfmemory_t**, uint32_t*)>*;                                                                
        using pfn_wdfregistryquerymultistring_t =                                 sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*, const nt::unicode_view*, struct wdf::object_attributes_t*, struct wdf::wdfcollection_t*)>*;                                                                
        using pfn_wdfregistryqueryunicodestring_t =                               sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*, const nt::unicode_view*, uint16_t*, nt::unicode_view*)>*;                                                                
        using pfn_wdf_registry_query_string_t =                                   sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*, const nt::unicode_view*, struct wdf::wdfstring_t*)>*;                                                                
        using pfn_wdfregistryqueryulong_t =                                       sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*, const nt::unicode_view*, uint32_t*)>*;                                                                
        using pfn_wdfregistryassignvalue_t =                                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*, const nt::unicode_view*, uint32_t, uint32_t, void*)>*;                                                                
        using pfn_wdfregistryassignmemory_t =                                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*, const nt::unicode_view*, uint32_t, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*)>*;                                                                
        using pfn_wdfregistryassignmultistring_t =                                sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*, const nt::unicode_view*, struct wdf::wdfcollection_t*)>*;                                                                
        using pfn_wdfregistryassignunicodestring_t =                              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*, const nt::unicode_view*, const nt::unicode_view*)>*;                                                                
        using pfn_wdf_registry_assign_string_t =                                  sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*, const nt::unicode_view*, struct wdf::wdfstring_t*)>*;                                                                
        using pfn_wdfregistryassignulong_t =                                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfkey_t*, const nt::unicode_view*, uint32_t)>*;                                                                
        using pfn_wdfrequestcreate_t =                                            sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::object_attributes_t*, struct wdf::wdfiotarget_t*, struct wdf::wdfrequest_t**)>*;                                                                
        using pfn_wdfrequestcreatefromirp_t =                                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::object_attributes_t*, struct nt::irp_t*, uint8_t, struct wdf::wdfrequest_t**)>*;                                                                
        using pfn_wdfrequestreuse_t =                                             sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, struct wdf::request_reuse_params_t*)>*;                                                                
        using pfn_wdfrequestchangetarget_t =                                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, struct wdf::wdfiotarget_t*)>*;                                                                
        using pfn_wdfrequestformatrequestusingcurrenttype_t =                     sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdfrequestwdmformatusingstacklocation_t =                       sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, struct io::stack_location_t*)>*;                                                                
        using pfn_wdfrequestsend_t =                                              sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, struct wdf::wdfiotarget_t*, struct wdf::request_send_options_t*)>*;                                                                
        using pfn_wdf_request_get_status_t =                                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdfrequestmarkcancelable_t =                                    sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, sdk::function<void(struct wdf::wdfrequest_t*)>*)>*;                                                                
        using pfn_wdf_request_unmark_cancelable_t =                               sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdf_request_is_canceled_t =                                     sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdf_request_cancel_sent_request_t =                             sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdf_request_is_from32_bit_process_t =                           sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdfrequestsetcompletionroutine_t =                              sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, sdk::function<void(struct wdf::wdfrequest_t*, struct wdf::wdfiotarget_t*, struct wdf::request_completion_params_t*, void*)>*, void*)>*;                                                                
        using pfn_wdfrequestgetcompletionparams_t =                               sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, struct wdf::request_completion_params_t*)>*;                                                                
        using pfn_wdf_request_allocate_timer_t =                                  sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdfrequestcomplete_t =                                          sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, int32_t)>*;                                                                
        using pfn_wdfrequestcompletewithpriorityboost_t =                         sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, int32_t, char)>*;                                                                
        using pfn_wdfrequestcompletewithinformation_t =                           sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, int32_t, uint64_t)>*;                                                                
        using pfn_wdfrequestgetparameters_t =                                     sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, struct wdf::request_parameters_t*)>*;                                                                
        using pfn_wdf_request_retrieve_input_memory_t =                           sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, struct wdf::wdfmemory_t**)>*;                                                                
        using pfn_wdf_request_retrieve_output_memory_t =                          sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, struct wdf::wdfmemory_t**)>*;                                                                
        using pfn_wdf_request_retrieve_input_buffer_t =                           sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, uint64_t, void**, uint64_t*)>*;                                                                
        using pfn_wdf_request_retrieve_output_buffer_t =                          sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, uint64_t, void**, uint64_t*)>*;                                                                
        using pfn_wdf_request_retrieve_input_wdm_mdl_t =                          sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, struct nt::mdl_t**)>*;                                                                
        using pfn_wdf_request_retrieve_output_wdm_mdl_t =                         sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, struct nt::mdl_t**)>*;                                                                
        using pfn_wdf_request_retrieve_unsafe_user_input_buffer_t =               sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, uint64_t, void**, uint64_t*)>*;                                                                
        using pfn_wdf_request_retrieve_unsafe_user_output_buffer_t =              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, uint64_t, void**, uint64_t*)>*;                                                                
        using pfn_wdfrequestsetinformation_t =                                    sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, uint64_t)>*;                                                                
        using pfn_wdfrequestgetinformation_t =                                    sdk::function<uint64_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdfrequestgetfileobject_t =                                     sdk::function<struct wdf::wdffileobject_t*(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdf_request_probe_and_lock_user_buffer_for_read_t =             sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, void*, uint64_t, struct wdf::wdfmemory_t**)>*;                                                                
        using pfn_wdf_request_probe_and_lock_user_buffer_for_write_t =            sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, void*, uint64_t, struct wdf::wdfmemory_t**)>*;                                                                
        using pfn_wdfrequestgetrequestormode_t =                                  sdk::function<char(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdfrequestforwardtoioqueue_t =                                  sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, struct wdf::wdfqueue_t*)>*;                                                                
        using pfn_wdfrequestgetioqueue_t =                                        sdk::function<struct wdf::wdfqueue_t*(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdf_request_requeue_t =                                         sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdfrequeststopacknowledge_t =                                   sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, uint8_t)>*;                                                                
        using pfn_wdfrequestwdmgetirp_t =                                         sdk::function<struct nt::irp_t*(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdf_io_resource_requirements_list_set_slot_number_t =           sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfioresreqlist_t*, uint32_t)>*;                                                                
        using pfn_wdfioresourcerequirementslistsetinterfacetype_t =               sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfioresreqlist_t*, enum nt::interface_type_t)>*;                                                                
        using pfn_wdf_io_resource_requirements_list_set_interface_type_t =        pfn_wdfioresourcerequirementslistsetinterfacetype_t ;                                                                
        using pfn_wdfioresourcerequirementslistappendioreslist_t =                sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfioresreqlist_t*, struct wdf::wdfioreslist_t*)>*;                                                                
        using pfn_wdf_io_resource_requirements_list_append_io_res_list_t =        pfn_wdfioresourcerequirementslistappendioreslist_t ;                                                                
        using pfn_wdfioresourcerequirementslistinsertioreslist_t =                sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfioresreqlist_t*, struct wdf::wdfioreslist_t*, uint32_t)>*;                                                                
        using pfn_wdf_io_resource_requirements_list_insert_io_res_list_t =        pfn_wdfioresourcerequirementslistinsertioreslist_t ;                                                                
        using pfn_wdfioresourcerequirementslistgetcount_t =                       sdk::function<uint32_t(struct wdf::driver_globals_t*, struct wdf::wdfioresreqlist_t*)>*;                                                                
        using pfn_wdfioresourcerequirementslistgetioreslist_t =                   sdk::function<struct wdf::wdfioreslist_t*(struct wdf::driver_globals_t*, struct wdf::wdfioresreqlist_t*, uint32_t)>*;                                                                
        using pfn_wdf_io_resource_requirements_list_remove_t =                    sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfioresreqlist_t*, uint32_t)>*;                                                                
        using pfn_wdfioresourcerequirementslistremovebyioreslist_t =              sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfioresreqlist_t*, struct wdf::wdfioreslist_t*)>*;                                                                
        using pfn_wdf_io_resource_requirements_list_remove_by_io_res_list_t =     pfn_wdfioresourcerequirementslistremovebyioreslist_t ;                                                                
        using pfn_wdfioresourcelistcreate_t =                                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfioresreqlist_t*, struct wdf::object_attributes_t*, struct wdf::wdfioreslist_t**)>*;                                                                
        using pfn_wdfioresourcelistappenddescriptor_t =                           sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfioreslist_t*, struct io::resource_descriptor_t*)>*;                                                                
        using pfn_wdfioresourcelistinsertdescriptor_t =                           sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfioreslist_t*, struct io::resource_descriptor_t*, uint32_t)>*;                                                                
        using pfn_wdfioresourcelistupdatedescriptor_t =                           sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfioreslist_t*, struct io::resource_descriptor_t*, uint32_t)>*;                                                                
        using pfn_wdfioresourcelistgetcount_t =                                   sdk::function<uint32_t(struct wdf::driver_globals_t*, struct wdf::wdfioreslist_t*)>*;                                                                
        using pfn_wdfioresourcelistgetdescriptor_t =                              sdk::function<struct io::resource_descriptor_t*(struct wdf::driver_globals_t*, struct wdf::wdfioreslist_t*, uint32_t)>*;                                                                
        using pfn_wdfioresourcelistremove_t =                                     sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfioreslist_t*, uint32_t)>*;                                                                
        using pfn_wdfioresourcelistremovebydescriptor_t =                         sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfioreslist_t*, struct io::resource_descriptor_t*)>*;                                                                
        using pfn_wdfcmresourcelistappenddescriptor_t =                           sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfcmreslist_t*, struct cm::partial_resource_descriptor_t*)>*;                                                                
        using pfn_wdfcmresourcelistinsertdescriptor_t =                           sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfcmreslist_t*, struct cm::partial_resource_descriptor_t*, uint32_t)>*;                                                                
        using pfn_wdfcmresourcelistgetcount_t =                                   sdk::function<uint32_t(struct wdf::driver_globals_t*, struct wdf::wdfcmreslist_t*)>*;                                                                
        using pfn_wdfcmresourcelistgetdescriptor_t =                              sdk::function<struct cm::partial_resource_descriptor_t*(struct wdf::driver_globals_t*, struct wdf::wdfcmreslist_t*, uint32_t)>*;                                                                
        using pfn_wdfcmresourcelistremove_t =                                     sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfcmreslist_t*, uint32_t)>*;                                                                
        using pfn_wdfcmresourcelistremovebydescriptor_t =                         sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfcmreslist_t*, struct cm::partial_resource_descriptor_t*)>*;                                                                
        using pfn_wdfstringcreate_t =                                             sdk::function<int32_t(struct wdf::driver_globals_t*, const nt::unicode_view*, struct wdf::object_attributes_t*, struct wdf::wdfstring_t**)>*;                                                                
        using pfn_wdfstringgetunicodestring_t =                                   sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfstring_t*, nt::unicode_view*)>*;                                                                
        using pfn_wdf_object_acquire_lock_t =                                     sdk::function<void(struct wdf::driver_globals_t*, void*)>*;                                                                
        using pfn_wdf_object_release_lock_t =                                     sdk::function<void(struct wdf::driver_globals_t*, void*)>*;                                                                
        using pfn_wdfwaitlockcreate_t =                                           sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::object_attributes_t*, struct wdf::wdfwaitlock_t**)>*;                                                                
        using pfn_wdfwaitlockacquire_t =                                          sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfwaitlock_t*, int64_t*)>*;                                                                
        using pfn_wdfwaitlockrelease_t =                                          sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfwaitlock_t*)>*;                                                                
        using pfn_wdfspinlockcreate_t =                                           sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::object_attributes_t*, struct wdf::wdfspinlock_t**)>*;                                                                
        using pfn_wdf_spin_lock_acquire_t =                                       sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfspinlock_t*)>*;                                                                
        using pfn_wdf_spin_lock_release_t =                                       sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfspinlock_t*)>*;                                                                
        using pfn_wdftimercreate_t =                                              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::timer_config_t*, struct wdf::object_attributes_t*, struct wdf::wdftimer_t**)>*;                                                                
        using pfn_wdftimerstart_t =                                               sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdftimer_t*, int64_t)>*;                                                                
        using pfn_wdftimerstop_t =                                                sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdftimer_t*, uint8_t)>*;                                                                
        using pfn_wdftimergetparentobject_t =                                     sdk::function<void*(struct wdf::driver_globals_t*, struct wdf::wdftimer_t*)>*;                                                                
        using pfn_wdfusbtargetdevicecreate_t =                                    sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::object_attributes_t*, struct wdf::wdfusbdevice_t**)>*;                                                                
        using pfn_wdfusbtargetdeviceretrieveinformation_t =                       sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, struct wdf::usb_device_information_t*)>*;                                                                
        using pfn_wdfusbtargetdevicegetdevicedescriptor_t =                       sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, struct wdf::usb_device_descriptor_t*)>*;                                                                
        using pfn_wdfusbtargetdeviceretrieveconfigdescriptor_t =                  sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, void*, uint16_t*)>*;                                                                
        using pfn_wdf_usb_target_device_retrieve_config_descriptor_t =            pfn_wdfusbtargetdeviceretrieveconfigdescriptor_t ;                                                                
        using pfn_wdfusbtargetdevicequerystring_t =                               sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, struct wdf::wdfrequest_t*, struct wdf::request_send_options_t*, uint16_t*, uint16_t*, uint8_t, uint16_t)>*;                                                                
        using pfn_wdfusbtargetdeviceallocandquerystring_t =                       sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, struct wdf::object_attributes_t*, struct wdf::wdfmemory_t**, uint16_t*, uint8_t, uint16_t)>*;                                                                
        using pfn_wdfusbtargetdeviceformatrequestforstring_t =                    sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, struct wdf::wdfrequest_t*, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*, uint8_t, uint16_t)>*;                                                                
        using pfn_wdfusbtargetdevicegetnuminterfaces_t =                          sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*)>*;                                                                
        using pfn_wdfusbtargetdeviceselectconfig_t =                              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, struct wdf::object_attributes_t*, struct wdf::usb_device_select_config_params_t*)>*;                                                                
        using pfn_wdfusbtargetdevicewdmgetconfigurationhandle_t =                 sdk::function<void*(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*)>*;                                                                
        using pfn_wdf_usb_target_device_wdm_get_configuration_handle_t =          pfn_wdfusbtargetdevicewdmgetconfigurationhandle_t ;                                                                
        using pfn_wdfusbtargetdeviceretrievecurrentframenumber_t =                sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, uint32_t*)>*;                                                                
        using pfn_wdf_usb_target_device_retrieve_current_frame_number_t =         pfn_wdfusbtargetdeviceretrievecurrentframenumber_t ;                                                                
        using pfn_wdfusbtargetdevicesendcontroltransfersynchronously_t =          sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, struct wdf::wdfrequest_t*, struct wdf::request_send_options_t*, union wdf::usb_control_setup_packet_t*, struct wdf::memory_descriptor_t*, uint32_t*)>*;                                                                
        using pfn_wdf_usb_target_device_send_control_transfer_synchronously_t =   pfn_wdfusbtargetdevicesendcontroltransfersynchronously_t ;                                                                
        using pfn_wdfusbtargetdeviceformatrequestforcontroltransfer_t =           sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, struct wdf::wdfrequest_t*, union wdf::usb_control_setup_packet_t*, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*)>*;                                                                
        using pfn_wdf_usb_target_device_format_request_for_control_transfer_t =   pfn_wdfusbtargetdeviceformatrequestforcontroltransfer_t ;                                                                
        using pfn_wdf_usb_target_device_is_connected_synchronous_t =              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*)>*;                                                                
        using pfn_wdf_usb_target_device_reset_port_synchronously_t =              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*)>*;                                                                
        using pfn_wdf_usb_target_device_cycle_port_synchronously_t =              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*)>*;                                                                
        using pfn_wdfusbtargetdeviceformatrequestforcycleport_t =                 sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdf_usb_target_device_format_request_for_cycle_port_t =         pfn_wdfusbtargetdeviceformatrequestforcycleport_t ;                                                                
        using pfn_wdfusbtargetdevicesendurbsynchronously_t =                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, struct wdf::wdfrequest_t*, struct wdf::request_send_options_t*, struct wdf::urb_t*)>*;                                                                
        using pfn_wdfusbtargetdeviceformatrequestforurb_t =                       sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, struct wdf::wdfrequest_t*, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*)>*;                                                                
        using pfn_wdfusbtargetpipegetinformation_t =                              sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*, struct wdf::usb_pipe_information_t*)>*;                                                                
        using pfn_wdf_usb_target_pipe_is_in_endpoint_t =                          sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*)>*;                                                                
        using pfn_wdf_usb_target_pipe_is_out_endpoint_t =                         sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*)>*;                                                                
        using pfn_wdfusbtargetpipegettype_t =                                     sdk::function<enum wdf::usb_pipe_type_t(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*)>*;                                                                
        using pfn_wdfusbtargetpipesetnomaximumpacketsizecheck_t =                 sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*)>*;                                                                
        using pfn_wdf_usb_target_pipe_set_no_maximum_packet_size_check_t =        pfn_wdfusbtargetpipesetnomaximumpacketsizecheck_t ;                                                                
        using pfn_wdf_usb_target_pipe_write_synchronously_t =                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*, struct wdf::wdfrequest_t*, struct wdf::request_send_options_t*, struct wdf::memory_descriptor_t*, uint32_t*)>*;                                                                
        using pfn_wdf_usb_target_pipe_format_request_for_write_t =                sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*, struct wdf::wdfrequest_t*, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*)>*;                                                                
        using pfn_wdf_usb_target_pipe_read_synchronously_t =                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*, struct wdf::wdfrequest_t*, struct wdf::request_send_options_t*, struct wdf::memory_descriptor_t*, uint32_t*)>*;                                                                
        using pfn_wdf_usb_target_pipe_format_request_for_read_t =                 sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*, struct wdf::wdfrequest_t*, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*)>*;                                                                
        using pfn_wdfusbtargetpipeconfigcontinuousreader_t =                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*, struct wdf::usb_continuous_reader_config_t*)>*;                                                                
        using pfn_wdf_usb_target_pipe_abort_synchronously_t =                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*, struct wdf::wdfrequest_t*, struct wdf::request_send_options_t*)>*;                                                                
        using pfn_wdf_usb_target_pipe_format_request_for_abort_t =                sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdf_usb_target_pipe_reset_synchronously_t =                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*, struct wdf::wdfrequest_t*, struct wdf::request_send_options_t*)>*;                                                                
        using pfn_wdf_usb_target_pipe_format_request_for_reset_t =                sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdfusbtargetpipesendurbsynchronously_t =                        sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*, struct wdf::wdfrequest_t*, struct wdf::request_send_options_t*, struct wdf::urb_t*)>*;                                                                
        using pfn_wdf_usb_target_pipe_format_request_for_urb_t =                  sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*, struct wdf::wdfrequest_t*, struct wdf::wdfmemory_t*, struct wdf::wdfmemory_offset_t*)>*;                                                                
        using pfn_wdf_usb_interface_get_interface_number_t =                      sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfusbinterface_t*)>*;                                                                
        using pfn_wdfusbinterfacegetnumendpoints_t =                              sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfusbinterface_t*, uint8_t)>*;                                                                
        using pfn_wdfusbinterfacegetdescriptor_t =                                sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfusbinterface_t*, uint8_t, struct wdf::usb_interface_descriptor_t*)>*;                                                                
        using pfn_wdfusbinterfaceselectsetting_t =                                sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbinterface_t*, struct wdf::object_attributes_t*, struct wdf::usb_interface_select_setting_params_t*)>*;                                                                
        using pfn_wdfusbinterfacegetendpointinformation_t =                       sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfusbinterface_t*, uint8_t, uint8_t, struct wdf::usb_pipe_information_t*)>*;                                                                
        using pfn_wdfusbtargetdevicegetinterface_t =                              sdk::function<struct wdf::wdfusbinterface_t*(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, uint8_t)>*;                                                                
        using pfn_wdf_usb_interface_get_configured_setting_index_t =              sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfusbinterface_t*)>*;                                                                
        using pfn_wdf_usb_interface_get_num_configured_pipes_t =                  sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfusbinterface_t*)>*;                                                                
        using pfn_wdfusbinterfacegetconfiguredpipe_t =                            sdk::function<struct wdf::wdfusbpipe_t*(struct wdf::driver_globals_t*, struct wdf::wdfusbinterface_t*, uint8_t, struct wdf::usb_pipe_information_t*)>*;                                                                
        using pfn_wdfusbtargetpipewdmgetpipehandle_t =                            sdk::function<void*(struct wdf::driver_globals_t*, struct wdf::wdfusbpipe_t*)>*;                                                                
        using pfn_wdfverifierdbgbreakpoint_t =                                    sdk::function<void(struct wdf::driver_globals_t*)>*;                                                                
        using pfn_wdfverifierkebugcheck_t =                                       sdk::function<void(struct wdf::driver_globals_t*, uint32_t, uint64_t, uint64_t, uint64_t, uint64_t)>*;                                                                
        using pfn_wdfwmiprovidercreate_t =                                        sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::wmi_provider_config_t*, struct wdf::object_attributes_t*, struct wdf::wdfwmiprovider_t**)>*;                                                                
        using pfn_wdfwmiprovidergetdevice_t =                                     sdk::function<struct wdf::wdfdevice_t*(struct wdf::driver_globals_t*, struct wdf::wdfwmiprovider_t*)>*;                                                                
        using pfn_wdfwmiproviderisenabled_t =                                     sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfwmiprovider_t*, enum wdf::wmi_provider_control_t)>*;                                                                
        using pfn_wdfwmiprovidergettracinghandle_t =                              sdk::function<uint64_t(struct wdf::driver_globals_t*, struct wdf::wdfwmiprovider_t*)>*;                                                                
        using pfn_wdfwmiinstancecreate_t =                                        sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::wmi_instance_config_t*, struct wdf::object_attributes_t*, struct wdf::wdfwmiinstance_t**)>*;                                                                
        using pfn_wdfwmiinstanceregister_t =                                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfwmiinstance_t*)>*;                                                                
        using pfn_wdfwmiinstancederegister_t =                                    sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfwmiinstance_t*)>*;                                                                
        using pfn_wdfwmiinstancegetdevice_t =                                     sdk::function<struct wdf::wdfdevice_t*(struct wdf::driver_globals_t*, struct wdf::wdfwmiinstance_t*)>*;                                                                
        using pfn_wdfwmiinstancegetprovider_t =                                   sdk::function<struct wdf::wdfwmiprovider_t*(struct wdf::driver_globals_t*, struct wdf::wdfwmiinstance_t*)>*;                                                                
        using pfn_wdfwmiinstancefireevent_t =                                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfwmiinstance_t*, uint32_t, void*)>*;                                                                
        using pfn_wdfworkitemcreate_t =                                           sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::workitem_config_t*, struct wdf::object_attributes_t*, struct wdf::wdfworkitem_t**)>*;                                                                
        using pfn_wdf_work_item_enqueue_t =                                       sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfworkitem_t*)>*;                                                                
        using pfn_wdfworkitemgetparentobject_t =                                  sdk::function<void*(struct wdf::driver_globals_t*, struct wdf::wdfworkitem_t*)>*;                                                                
        using pfn_wdf_work_item_flush_t =                                         sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfworkitem_t*)>*;                                                                
        using pfn_wdfcommonbuffercreatewithconfig_t =                             sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdmaenabler_t*, uint64_t, struct wdf::common_buffer_config_t*, struct wdf::object_attributes_t*, struct wdf::wdfcommonbuffer_t**)>*;                                                                
        using pfn_wdfdmaenablergetfragmentlength_t =                              sdk::function<uint64_t(struct wdf::driver_globals_t*, struct wdf::wdfdmaenabler_t*, enum wdf::dma_direction_t)>*;                                                                
        using pfn_wdfdmaenablerwdmgetdmaadapter_t =                               sdk::function<struct dma::adapter_t*(struct wdf::driver_globals_t*, struct wdf::wdfdmaenabler_t*, enum wdf::dma_direction_t)>*;                                                                
        using pfn_wdf_usb_interface_get_num_settings_t =                          sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfusbinterface_t*)>*;                                                                
        using pfn_wdf_device_remove_dependent_usage_device_object_t =             sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct nt::device_object_t*)>*;                                                                
        using pfn_wdfdevicegetsystempoweraction_t =                               sdk::function<enum power::action_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdfinterruptsetextendedpolicy_t =                               sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfinterrupt_t*, struct wdf::interrupt_extended_policy_t*)>*;                                                                
        using pfn_wdfioqueueassignforwardprogresspolicy_t =                       sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*, struct wdf::io_queue_forward_progress_policy_t*)>*;                                                                
        using pfn_wdf_pdo_init_assign_container_id_t =                            sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, const nt::unicode_view*)>*;                                                                
        using pfn_wdf_pdo_init_allow_forwarding_request_to_parent_t =             sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*)>*;                                                                
        using pfn_wdfrequestmarkcancelableex_t =                                  sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, sdk::function<void(struct wdf::wdfrequest_t*)>*)>*;                                                                
        using pfn_wdf_request_is_reserved_t =                                     sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdfrequestforwardtoparentdeviceioqueue_t =                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*, struct wdf::wdfqueue_t*, struct wdf::request_forward_options_t*)>*;                                                                
        using pfn_wdfcxdeviceinitallocate_t =                                     sdk::function<struct wdf::wdfcxdevice_init_t*(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*)>*;                                                                
        using pfn_wdfcxdeviceinitassignwdmirppreprocesscallback_t =               sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfcxdevice_init_t*, sdk::function<int32_t(struct wdf::wdfdevice_t*, struct nt::irp_t*, void*)>*, uint8_t, uint8_t*, uint32_t)>*;                                                                
        using pfn_wdf_cx_device_init_assign_wdm_irp_preprocess_callback_t =       pfn_wdfcxdeviceinitassignwdmirppreprocesscallback_t ;                                                                
        using pfn_wdfcxdeviceinitsetioincallercontextcallback_t =                 sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfcxdevice_init_t*, sdk::function<void(struct wdf::wdfdevice_t*, struct wdf::wdfrequest_t*)>*)>*;                                                                
        using pfn_wdf_cx_device_init_set_io_in_caller_context_callback_t =        pfn_wdfcxdeviceinitsetioincallercontextcallback_t ;                                                                
        using pfn_wdfcxdeviceinitsetrequestattributes_t =                         sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfcxdevice_init_t*, struct wdf::object_attributes_t*)>*;                                                                
        using pfn_wdfcxdeviceinitsetfileobjectconfig_t =                          sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfcxdevice_init_t*, struct wdf::wdfcx_fileobject_config_t*, struct wdf::object_attributes_t*)>*;                                                                
        using pfn_wdfdevicewdmdispatchirp_t =                                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct nt::irp_t*, void*)>*;                                                                
        using pfn_wdfdevicewdmdispatchirptoioqueue_t =                            sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct nt::irp_t*, struct wdf::wdfqueue_t*, uint32_t)>*;                                                                
        using pfn_wdfdeviceinitsetremovelockoptions_t =                           sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, struct wdf::remove_lock_options_t*)>*;                                                                
        using pfn_wdfdeviceconfigurewdmirpdispatchcallback_t =                    sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::wdfdriver_t*, uint8_t, sdk::function<int32_t(struct wdf::wdfdevice_t*, uint8_t, uint8_t, uint32_t, void*, struct nt::irp_t*, void*)>*, void*)>*;                                                                
        using pfn_wdfdmaenablerconfiguresystemprofile_t =                         sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdmaenabler_t*, struct wdf::dma_system_profile_config_t*, enum wdf::dma_direction_t)>*;                                                                
        using pfn_wdfdmatransactioninitializeusingoffset_t =                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*, sdk::function<uint8_t(struct wdf::wdfdmatransaction_t*, struct wdf::wdfdevice_t*, void*, enum wdf::dma_direction_t, struct nt::scatter_gather_list_t*)>*, enum wdf::dma_direction_t, struct nt::mdl_t*, uint64_t, uint64_t)>*;                                                                
        using pfn_wdfdmatransactiongettransferinfo_t =                            sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*, uint32_t*, uint32_t*)>*;                                                                
        using pfn_wdfdmatransactionsetchannelconfigurationcallback_t =            sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*, sdk::function<uint8_t(struct wdf::wdfdmatransaction_t*, struct wdf::wdfdevice_t*, void*, struct nt::mdl_t*, uint64_t, uint64_t)>*, void*)>*;                                                                
        using pfn_wdf_dma_transaction_set_channel_configuration_callback_t =      pfn_wdfdmatransactionsetchannelconfigurationcallback_t ;                                                                
        using pfn_wdfdmatransactionsettransfercompletecallback_t =                sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*, sdk::function<void(struct wdf::wdfdmatransaction_t*, struct wdf::wdfdevice_t*, void*, enum wdf::dma_direction_t, enum dma::completion_status_t)>*, void*)>*;                                                                
        using pfn_wdf_dma_transaction_set_transfer_complete_callback_t =          pfn_wdfdmatransactionsettransfercompletecallback_t ;                                                                
        using pfn_wdf_dma_transaction_set_immediate_execution_t =                 sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*, uint8_t)>*;                                                                
        using pfn_wdfdmatransactionallocateresources_t =                          sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*, enum wdf::dma_direction_t, uint32_t, sdk::function<void(struct wdf::wdfdmatransaction_t*, void*)>*, void*)>*;                                                                
        using pfn_wdfdmatransactionsetdeviceaddressoffset_t =                     sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*, uint32_t)>*;                                                                
        using pfn_wdf_dma_transaction_free_resources_t =                          sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*)>*;                                                                
        using pfn_wdfdmatransactioncancel_t =                                     sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*)>*;                                                                
        using pfn_wdfdmatransactionwdmgettransfercontext_t =                      sdk::function<void*(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*)>*;                                                                
        using pfn_wdf_interrupt_queue_work_item_for_isr_t =                       sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfinterrupt_t*)>*;                                                                
        using pfn_wdf_interrupt_try_to_acquire_lock_t =                           sdk::function<uint8_t(struct wdf::driver_globals_t*, struct wdf::wdfinterrupt_t*)>*;                                                                
        using pfn_wdf_io_queue_stop_and_purge_t =                                 sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*, sdk::function<void(struct wdf::wdfqueue_t*, void*)>*, void*)>*;                                                                
        using pfn_wdf_io_queue_stop_and_purge_synchronously_t =                   sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfqueue_t*)>*;                                                                
        using pfn_wdfiotargetpurge_t =                                            sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, enum wdf::io_target_purge_io_action_t)>*;                                                                
        using pfn_wdfusbtargetdevicecreatewithparameters_t =                      sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::usb_device_create_config_t*, struct wdf::object_attributes_t*, struct wdf::wdfusbdevice_t**)>*;                                                                
        using pfn_wdfusbtargetdevicequeryusbcapability_t =                        sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, const struct nt::guid_t*, uint32_t, void*, uint32_t*)>*;                                                                
        using pfn_wdfusbtargetdevicecreateurb_t =                                 sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, struct wdf::object_attributes_t*, struct wdf::wdfmemory_t**, struct wdf::urb_t**)>*;                                                                
        using pfn_wdfusbtargetdevicecreateisochurb_t =                            sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfusbdevice_t*, struct wdf::object_attributes_t*, uint32_t, struct wdf::wdfmemory_t**, struct wdf::urb_t**)>*;                                                                
        using pfn_wdfdevicewdmassignpowerframeworksettings_t =                    sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::power_framework_settings_t*)>*;                                                                
        using pfn_wdf_dma_transaction_stop_system_transfer_t =                    sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*)>*;                                                                
        using pfn_wdfcxverifierkebugcheck_t =                                     sdk::function<void(struct wdf::driver_globals_t*, void*, uint32_t, uint64_t, uint64_t, uint64_t, uint64_t)>*;                                                                
        using pfn_wdf_interrupt_report_active_t =                                 sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfinterrupt_t*)>*;                                                                
        using pfn_wdf_interrupt_report_inactive_t =                               sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfinterrupt_t*)>*;                                                                
        using pfn_wdfdeviceinitsetreleasehardwareorderonfailure_t =               sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, enum wdf::release_hardware_order_on_failure_t)>*;                                                                
        using pfn_wdf_device_init_set_release_hardware_order_on_failure_t =       pfn_wdfdeviceinitsetreleasehardwareorderonfailure_t ;                                                                
        using pfn_wdfgettriageinfo_t =                                            sdk::function<void*(struct wdf::driver_globals_t*)>*;                                                                
        using pfn_wdfdeviceinitsetiotypeex_t =                                    sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, struct wdf::io_type_config_t*)>*;                                                                
        using pfn_wdfdevicequerypropertyex_t =                                    sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::device_property_data_t*, uint32_t, void*, uint32_t*, uint32_t*)>*;                                                                
        using pfn_wdfdeviceallocandquerypropertyex_t =                            sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::device_property_data_t*, enum nt::pool_type_t, struct wdf::object_attributes_t*, struct wdf::wdfmemory_t**, uint32_t*)>*;                                                                
        using pfn_wdfdeviceassignproperty_t =                                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::device_property_data_t*, uint32_t, uint32_t, void*)>*;                                                                
        using pfn_wdffdoinitquerypropertyex_t =                                   sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, struct wdf::device_property_data_t*, uint32_t, void*, uint32_t*, uint32_t*)>*;                                                                
        using pfn_wdffdoinitallocandquerypropertyex_t =                           sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, struct wdf::device_property_data_t*, enum nt::pool_type_t, struct wdf::object_attributes_t*, struct wdf::wdfmemory_t**, uint32_t*)>*;                                                                
        using pfn_wdf_device_stop_idle_actual_t =                                 sdk::variant<sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, uint8_t, void*, int32_t, char*)>*, sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, uint8_t, void*, int32_t, const char*)>*>;                                                                
        using pfn_wdf_device_resume_idle_actual_t =                               sdk::variant<sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, void*, int32_t, char*)>*, sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, void*, int32_t, const char*)>*>;                                                                
        using pfn_wdf_device_get_self_io_target_t =                               sdk::function<struct wdf::wdfiotarget_t*(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*)>*;                                                                
        using pfn_wdf_device_init_allow_self_io_target_t =                        sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*)>*;                                                                
        using pfn_wdfiotargetselfassigndefaultioqueue_t =                         sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfiotarget_t*, struct wdf::wdfqueue_t*)>*;                                                                
        using pfn_wdfdeviceopendevicemapkey_t =                                   sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, const nt::unicode_view*, uint32_t, struct wdf::object_attributes_t*, struct wdf::wdfkey_t**)>*;                                                                
        using pfn_wdf_dma_transaction_set_single_transfer_requirement_t =         sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdmatransaction_t*, uint8_t)>*;                                                                
        using pfn_wdfcxdeviceinitsetpnppowereventcallbacks_t =                    sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfcxdevice_init_t*, struct wdf::wdfcx_pnppower_event_callbacks_t*)>*;                                                                
        using pfn_wdf_file_object_get_initiator_process_id_t =                    sdk::function<uint32_t(struct wdf::driver_globals_t*, struct wdf::wdffileobject_t*)>*;                                                                
        using pfn_wdfrequestgetrequestorprocessid_t =                             sdk::function<uint32_t(struct wdf::driver_globals_t*, struct wdf::wdfrequest_t*)>*;                                                                
        using pfn_wdfdeviceretrievecompaniontarget_t =                            sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, struct wdf::wdfcompaniontarget_t**)>*;                                                                
        using pfn_wdfcompaniontargetsendtasksynchronously_t =                     sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfcompaniontarget_t*, uint16_t, uint32_t, struct wdf::memory_descriptor_t*, struct wdf::memory_descriptor_t*, struct wdf::task_send_options_t*, uint64_t*)>*;                                                                
        using pfn_wdfcompaniontargetwdmgetcompanionprocess_t =                    sdk::function<struct nt::eprocess_t*(struct wdf::driver_globals_t*, struct wdf::wdfcompaniontarget_t*)>*;                                                                
        using pfn_wdf_driver_open_persistent_state_registry_key_t =               sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdriver_t*, uint32_t, struct wdf::object_attributes_t*, struct wdf::wdfkey_t**)>*;                                                                
        using pfn_wdfdrivererrorreportapimissing_t =                              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdriver_t*, const wchar_t*, uint32_t, uint8_t)>*;                                                                
        using pfn_wdf_pdo_init_remove_power_dependency_on_parent_t =              sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*)>*;                                                                
        using pfn_wdfcxdeviceinitallocatecontext_t =                              sdk::function<int32_t(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, struct wdf::object_attributes_t*, void**)>*;                                                                
        using pfn_wdfcxdeviceinitgettypedcontextworker_t =                        sdk::function<void*(struct wdf::driver_globals_t*, struct wdf::wdfdevice_init_t*, const struct wdf::object_context_type_info_t*)>*;                                                                
        using pfn_wdfcxdeviceinitsetpowerpolicyeventcallbacks_t =                 sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfcxdevice_init_t*, struct wdf::wdfcx_power_policy_event_callbacks_t*)>*;                                                                
        using pfn_wdf_cx_device_init_set_power_policy_event_callbacks_t =         pfn_wdfcxdeviceinitsetpowerpolicyeventcallbacks_t ;                                                                
        using pfn_wdf_device_set_device_interface_state_ex_t =                    sdk::function<void(struct wdf::driver_globals_t*, struct wdf::wdfdevice_t*, const struct nt::guid_t*, const nt::unicode_view*, uint8_t)>*;                                                                
                                                                                                                                                 
        // Windows 10 v1607, Windows 10 v2004, Windows 11, Windows 10 v20H2                                                                      
        //                                                                                                                                       
        _m000 pfn_wdfchildlistcreate_t                                           pfn_wdf_child_list_create;                                        //{ +0x0000    +0x0000    +0x0000    +0x0000    } | .pfnWdfChildListCreate
        _m001 pfn_wdfchildlistgetdevice_t                                        pfn_wdf_child_list_get_device;                                    //{ +0x0008    +0x0008    +0x0008    +0x0008    } | .pfnWdfChildListGetDevice
        _m002 pfn_wdfchildlistretrievepdo_t                                      pfn_wdf_child_list_retrieve_pdo;                                  //{ +0x0010    +0x0010    +0x0010    +0x0010    } | .pfnWdfChildListRetrievePdo
        _m003 pfn_wdf_child_list_retrieve_address_description_t                  pfn_wdf_child_list_retrieve_address_description;                  //{ +0x0018    +0x0018    +0x0018    +0x0018    } | .pfnWdfChildListRetrieveAddressDescription
        _m004 pfn_wdf_child_list_begin_scan_t                                    pfn_wdf_child_list_begin_scan;                                    //{ +0x0020    +0x0020    +0x0020    +0x0020    } | .pfnWdfChildListBeginScan
        _m005 pfn_wdf_child_list_end_scan_t                                      pfn_wdf_child_list_end_scan;                                      //{ +0x0028    +0x0028    +0x0028    +0x0028    } | .pfnWdfChildListEndScan
        _m006 pfn_wdf_child_list_begin_iteration_t                               pfn_wdf_child_list_begin_iteration;                               //{ +0x0030    +0x0030    +0x0030    +0x0030    } | .pfnWdfChildListBeginIteration
        _m007 pfn_wdfchildlistretrievenextdevice_t                               pfn_wdf_child_list_retrieve_next_device;                          //{ +0x0038    +0x0038    +0x0038    +0x0038    } | .pfnWdfChildListRetrieveNextDevice
        _m008 pfn_wdf_child_list_end_iteration_t                                 pfn_wdf_child_list_end_iteration;                                 //{ +0x0040    +0x0040    +0x0040    +0x0040    } | .pfnWdfChildListEndIteration
        _m009 pfn_wdf_child_list_add_or_update_child_description_as_present_t    pfn_wdf_child_list_add_or_update_child_description_as_present;    //{ +0x0048    +0x0048    +0x0048    +0x0048    } | .pfnWdfChildListAddOrUpdateChildDescriptionAsPresent
        _m010 pfn_wdf_child_list_update_child_description_as_missing_t           pfn_wdf_child_list_update_child_description_as_missing;           //{ +0x0050    +0x0050    +0x0050    +0x0050    } | .pfnWdfChildListUpdateChildDescriptionAsMissing
        _m011 pfn_wdf_child_list_update_all_child_descriptions_as_present_t      pfn_wdf_child_list_update_all_child_descriptions_as_present;      //{ +0x0058    +0x0058    +0x0058    +0x0058    } | .pfnWdfChildListUpdateAllChildDescriptionsAsPresent
        _m012 pfn_wdfchildlistrequestchildeject_t                                pfn_wdf_child_list_request_child_eject;                           //{ +0x0060    +0x0060    +0x0060    +0x0060    } | .pfnWdfChildListRequestChildEject
        _m013 pfn_wdfcollectioncreate_t                                          pfn_wdf_collection_create;                                        //{ +0x0068    +0x0068    +0x0068    +0x0068    } | .pfnWdfCollectionCreate
        _m014 pfn_wdfcollectiongetcount_t                                        pfn_wdf_collection_get_count;                                     //{ +0x0070    +0x0070    +0x0070    +0x0070    } | .pfnWdfCollectionGetCount
        _m015 pfn_wdfcollectionadd_t                                             pfn_wdf_collection_add;                                           //{ +0x0078    +0x0078    +0x0078    +0x0078    } | .pfnWdfCollectionAdd
        _m016 pfn_wdfcollectionremove_t                                          pfn_wdf_collection_remove;                                        //{ +0x0080    +0x0080    +0x0080    +0x0080    } | .pfnWdfCollectionRemove
        _m017 pfn_wdfcollectionremoveitem_t                                      pfn_wdf_collection_remove_item;                                   //{ +0x0088    +0x0088    +0x0088    +0x0088    } | .pfnWdfCollectionRemoveItem
        _m018 pfn_wdfcollectiongetitem_t                                         pfn_wdf_collection_get_item;                                      //{ +0x0090    +0x0090    +0x0090    +0x0090    } | .pfnWdfCollectionGetItem
        _m019 pfn_wdf_collection_get_first_item_t                                pfn_wdf_collection_get_first_item;                                //{ +0x0098    +0x0098    +0x0098    +0x0098    } | .pfnWdfCollectionGetFirstItem
        _m020 pfn_wdf_collection_get_last_item_t                                 pfn_wdf_collection_get_last_item;                                 //{ +0x00a0    +0x00a0    +0x00a0    +0x00a0    } | .pfnWdfCollectionGetLastItem
        _m021 pfn_wdfcommonbuffercreate_t                                        pfn_wdf_common_buffer_create;                                     //{ +0x00a8    +0x00a8    +0x00a8    +0x00a8    } | .pfnWdfCommonBufferCreate
        _m022 pfn_wdfcommonbuffergetalignedvirtualaddress_t                      pfn_wdf_common_buffer_get_aligned_virtual_address;                //{ +0x00b0    +0x00b0    +0x00b0    +0x00b0    } | .pfnWdfCommonBufferGetAlignedVirtualAddress
        _m023 pfn_wdfcommonbuffergetalignedlogicaladdress_t                      pfn_wdf_common_buffer_get_aligned_logical_address;                //{ +0x00b8    +0x00b8    +0x00b8    +0x00b8    } | .pfnWdfCommonBufferGetAlignedLogicalAddress
        _m024 pfn_wdfcommonbuffergetlength_t                                     pfn_wdf_common_buffer_get_length;                                 //{ +0x00c0    +0x00c0    +0x00c0    +0x00c0    } | .pfnWdfCommonBufferGetLength
        _m025 pfn_wdfcontroldeviceinitallocate_t                                 pfn_wdf_control_device_init_allocate;                             //{ +0x00c8    +0x00c8    +0x00c8    +0x00c8    } | .pfnWdfControlDeviceInitAllocate
        _m026 pfn_wdf_control_device_init_set_shutdown_notification_t            pfn_wdf_control_device_init_set_shutdown_notification;            //{ +0x00d0    +0x00d0    +0x00d0    +0x00d0    } | .pfnWdfControlDeviceInitSetShutdownNotification
        _m027 pfn_wdf_control_finish_initializing_t                              pfn_wdf_control_finish_initializing;                              //{ +0x00d8    +0x00d8    +0x00d8    +0x00d8    } | .pfnWdfControlFinishInitializing
        _m028 pfn_wdf_device_get_device_state_t                                  pfn_wdf_device_get_device_state;                                  //{ +0x00e0    +0x00e0    +0x00e0    +0x00e0    } | .pfnWdfDeviceGetDeviceState
        _m029 pfn_wdf_device_set_device_state_t                                  pfn_wdf_device_set_device_state;                                  //{ +0x00e8    +0x00e8    +0x00e8    +0x00e8    } | .pfnWdfDeviceSetDeviceState
        _m030 pfn_wdfwdmdevicegetwdfdevicehandle_t                               pfn_wdf_wdm_device_get_wdf_device_handle;                         //{ +0x00f0    +0x00f0    +0x00f0    +0x00f0    } | .pfnWdfWdmDeviceGetWdfDeviceHandle
        _m031 pfn_wdf_device_wdm_get_device_object_t                             pfn_wdf_device_wdm_get_device_object;                             //{ +0x00f8    +0x00f8    +0x00f8    +0x00f8    } | .pfnWdfDeviceWdmGetDeviceObject
        _m032 pfn_wdf_device_wdm_get_attached_device_t                           pfn_wdf_device_wdm_get_attached_device;                           //{ +0x0100    +0x0100    +0x0100    +0x0100    } | .pfnWdfDeviceWdmGetAttachedDevice
        _m033 pfn_wdf_device_wdm_get_physical_device_t                           pfn_wdf_device_wdm_get_physical_device;                           //{ +0x0108    +0x0108    +0x0108    +0x0108    } | .pfnWdfDeviceWdmGetPhysicalDevice
        _m034 pfn_wdfdevicewdmdispatchpreprocessedirp_t                          pfn_wdf_device_wdm_dispatch_preprocessed_irp;                     //{ +0x0110    +0x0110    +0x0110    +0x0110    } | .pfnWdfDeviceWdmDispatchPreprocessedIrp
        _m035 pfn_wdf_device_add_dependent_usage_device_object_t                 pfn_wdf_device_add_dependent_usage_device_object;                 //{ +0x0118    +0x0118    +0x0118    +0x0118    } | .pfnWdfDeviceAddDependentUsageDeviceObject
        _m036 pfn_wdf_device_add_removal_relations_physical_device_t             pfn_wdf_device_add_removal_relations_physical_device;             //{ +0x0120    +0x0120    +0x0120    +0x0120    } | .pfnWdfDeviceAddRemovalRelationsPhysicalDevice
        _m037 pfn_wdf_device_remove_removal_relations_physical_device_t          pfn_wdf_device_remove_removal_relations_physical_device;          //{ +0x0128    +0x0128    +0x0128    +0x0128    } | .pfnWdfDeviceRemoveRemovalRelationsPhysicalDevice
        _m038 pfn_wdf_device_clear_removal_relations_devices_t                   pfn_wdf_device_clear_removal_relations_devices;                   //{ +0x0130    +0x0130    +0x0130    +0x0130    } | .pfnWdfDeviceClearRemovalRelationsDevices
        _m039 pfn_wdfdevicegetdriver_t                                           pfn_wdf_device_get_driver;                                        //{ +0x0138    +0x0138    +0x0138    +0x0138    } | .pfnWdfDeviceGetDriver
        _m040 pfn_wdfdeviceretrievedevicename_t                                  pfn_wdf_device_retrieve_device_name;                              //{ +0x0140    +0x0140    +0x0140    +0x0140    } | .pfnWdfDeviceRetrieveDeviceName
        _m041 pfn_wdf_device_assign_mof_resource_name_t                          pfn_wdf_device_assign_mof_resource_name;                          //{ +0x0148    +0x0148    +0x0148    +0x0148    } | .pfnWdfDeviceAssignMofResourceName
        _m042 pfn_wdf_device_get_io_target_t                                     pfn_wdf_device_get_io_target;                                     //{ +0x0150    +0x0150    +0x0150    +0x0150    } | .pfnWdfDeviceGetIoTarget
        _m043 pfn_wdfdevicegetdevicepnpstate_t                                   pfn_wdf_device_get_device_pnp_state;                              //{ +0x0158    +0x0158    +0x0158    +0x0158    } | .pfnWdfDeviceGetDevicePnpState
        _m044 pfn_wdfdevicegetdevicepowerstate_t                                 pfn_wdf_device_get_device_power_state;                            //{ +0x0160    +0x0160    +0x0160    +0x0160    } | .pfnWdfDeviceGetDevicePowerState
        _m045 pfn_wdfdevicegetdevicepowerpolicystate_t                           pfn_wdf_device_get_device_power_policy_state;                     //{ +0x0168    +0x0168    +0x0168    +0x0168    } | .pfnWdfDeviceGetDevicePowerPolicyState
        _m046 pfn_wdfdeviceassigns0idlesettings_t                                pfn_wdf_device_assign_s0_idle_settings;                           //{ +0x0170    +0x0170    +0x0170    +0x0170    } | .pfnWdfDeviceAssignS0IdleSettings
        _m047 pfn_wdfdeviceassignsxwakesettings_t                                pfn_wdf_device_assign_sx_wake_settings;                           //{ +0x0178    +0x0178    +0x0178    +0x0178    } | .pfnWdfDeviceAssignSxWakeSettings
        _m048 pfn_wdfdeviceopenregistrykey_t                                     pfn_wdf_device_open_registry_key;                                 //{ +0x0180    +0x0180    +0x0180    +0x0180    } | .pfnWdfDeviceOpenRegistryKey
        _m049 pfn_wdfdevicesetspecialfilesupport_t                               pfn_wdf_device_set_special_file_support;                          //{ +0x0188    +0x0188    +0x0188    +0x0188    } | .pfnWdfDeviceSetSpecialFileSupport
        _m050 pfn_wdf_device_set_characteristics_t                               pfn_wdf_device_set_characteristics;                               //{ +0x0190    +0x0190    +0x0190    +0x0190    } | .pfnWdfDeviceSetCharacteristics
        _m051 pfn_wdf_device_get_characteristics_t                               pfn_wdf_device_get_characteristics;                               //{ +0x0198    +0x0198    +0x0198    +0x0198    } | .pfnWdfDeviceGetCharacteristics
        _m052 pfn_wdf_device_get_alignment_requirement_t                         pfn_wdf_device_get_alignment_requirement;                         //{ +0x01a0    +0x01a0    +0x01a0    +0x01a0    } | .pfnWdfDeviceGetAlignmentRequirement
        _m053 pfn_wdf_device_set_alignment_requirement_t                         pfn_wdf_device_set_alignment_requirement;                         //{ +0x01a8    +0x01a8    +0x01a8    +0x01a8    } | .pfnWdfDeviceSetAlignmentRequirement
        _m054 pfn_wdf_device_init_free_t                                         pfn_wdf_device_init_free;                                         //{ +0x01b0    +0x01b0    +0x01b0    +0x01b0    } | .pfnWdfDeviceInitFree
        _m055 pfn_wdfdeviceinitsetpnppowereventcallbacks_t                       pfn_wdf_device_init_set_pnp_power_event_callbacks;                //{ +0x01b8    +0x01b8    +0x01b8    +0x01b8    } | .pfnWdfDeviceInitSetPnpPowerEventCallbacks
        _m056 pfn_wdfdeviceinitsetpowerpolicyeventcallbacks_t                    pfn_wdf_device_init_set_power_policy_event_callbacks;             //{ +0x01c0    +0x01c0    +0x01c0    +0x01c0    } | .pfnWdfDeviceInitSetPowerPolicyEventCallbacks
        _m057 pfn_wdf_device_init_set_power_policy_ownership_t                   pfn_wdf_device_init_set_power_policy_ownership;                   //{ +0x01c8    +0x01c8    +0x01c8    +0x01c8    } | .pfnWdfDeviceInitSetPowerPolicyOwnership
        _m058 pfn_wdf_device_init_register_pnp_state_change_callback_t           pfn_wdf_device_init_register_pnp_state_change_callback;           //{ +0x01d0    +0x01d0    +0x01d0    +0x01d0    } | .pfnWdfDeviceInitRegisterPnpStateChangeCallback
        _m059 pfn_wdf_device_init_register_power_state_change_callback_t         pfn_wdf_device_init_register_power_state_change_callback;         //{ +0x01d8    +0x01d8    +0x01d8    +0x01d8    } | .pfnWdfDeviceInitRegisterPowerStateChangeCallback
        _m060 pfn_wdf_device_init_register_power_policy_state_change_callback_t  pfn_wdf_device_init_register_power_policy_state_change_callback;  //{ +0x01e0    +0x01e0    +0x01e0    +0x01e0    } | .pfnWdfDeviceInitRegisterPowerPolicyStateChangeCallback
        _m061 pfn_wdfdeviceinitsetiotype_t                                       pfn_wdf_device_init_set_io_type;                                  //{ +0x01e8    +0x01e8    +0x01e8    +0x01e8    } | .pfnWdfDeviceInitSetIoType
        _m062 pfn_wdf_device_init_set_exclusive_t                                pfn_wdf_device_init_set_exclusive;                                //{ +0x01f0    +0x01f0    +0x01f0    +0x01f0    } | .pfnWdfDeviceInitSetExclusive
        _m063 pfn_wdf_device_init_set_power_not_pageable_t                       pfn_wdf_device_init_set_power_not_pageable;                       //{ +0x01f8    +0x01f8    +0x01f8    +0x01f8    } | .pfnWdfDeviceInitSetPowerNotPageable
        _m064 pfn_wdf_device_init_set_power_pageable_t                           pfn_wdf_device_init_set_power_pageable;                           //{ +0x0200    +0x0200    +0x0200    +0x0200    } | .pfnWdfDeviceInitSetPowerPageable
        _m065 pfn_wdf_device_init_set_power_inrush_t                             pfn_wdf_device_init_set_power_inrush;                             //{ +0x0208    +0x0208    +0x0208    +0x0208    } | .pfnWdfDeviceInitSetPowerInrush
        _m066 pfn_wdf_device_init_set_device_type_t                              pfn_wdf_device_init_set_device_type;                              //{ +0x0210    +0x0210    +0x0210    +0x0210    } | .pfnWdfDeviceInitSetDeviceType
        _m067 pfn_wdf_device_init_assign_name_t                                  pfn_wdf_device_init_assign_name;                                  //{ +0x0218    +0x0218    +0x0218    +0x0218    } | .pfnWdfDeviceInitAssignName
        _m068 pfn_wdf_device_init_assign_sddl_string_t                           pfn_wdf_device_init_assign_sddl_string;                           //{ +0x0220    +0x0220    +0x0220    +0x0220    } | .pfnWdfDeviceInitAssignSDDLString
        _m069 pfn_wdfdeviceinitsetdeviceclass_t                                  pfn_wdf_device_init_set_device_class;                             //{ +0x0228    +0x0228    +0x0228    +0x0228    } | .pfnWdfDeviceInitSetDeviceClass
        _m070 pfn_wdfdeviceinitsetcharacteristics_t                              pfn_wdf_device_init_set_characteristics;                          //{ +0x0230    +0x0230    +0x0230    +0x0230    } | .pfnWdfDeviceInitSetCharacteristics
        _m071 pfn_wdfdeviceinitsetfileobjectconfig_t                             pfn_wdf_device_init_set_file_object_config;                       //{ +0x0238    +0x0238    +0x0238    +0x0238    } | .pfnWdfDeviceInitSetFileObjectConfig
        _m072 pfn_wdfdeviceinitsetrequestattributes_t                            pfn_wdf_device_init_set_request_attributes;                       //{ +0x0240    +0x0240    +0x0240    +0x0240    } | .pfnWdfDeviceInitSetRequestAttributes
        _m073 pfn_wdf_device_init_assign_wdm_irp_preprocess_callback_t           pfn_wdf_device_init_assign_wdm_irp_preprocess_callback;           //{ +0x0248    +0x0248    +0x0248    +0x0248    } | .pfnWdfDeviceInitAssignWdmIrpPreprocessCallback
        _m074 pfn_wdfdeviceinitsetioincallercontextcallback_t                    pfn_wdf_device_init_set_io_in_caller_context_callback;            //{ +0x0250    +0x0250    +0x0250    +0x0250    } | .pfnWdfDeviceInitSetIoInCallerContextCallback
        _m075 pfn_wdfdevicecreate_t                                              pfn_wdf_device_create;                                            //{ +0x0258    +0x0258    +0x0258    +0x0258    } | .pfnWdfDeviceCreate
        _m076 pfn_wdfdevicesetstaticstopremove_t                                 pfn_wdf_device_set_static_stop_remove;                            //{ +0x0260    +0x0260    +0x0260    +0x0260    } | .pfnWdfDeviceSetStaticStopRemove
        _m077 pfn_wdfdevicecreatedeviceinterface_t                               pfn_wdf_device_create_device_interface;                           //{ +0x0268    +0x0268    +0x0268    +0x0268    } | .pfnWdfDeviceCreateDeviceInterface
        _m078 pfn_wdfdevicesetdeviceinterfacestate_t                             pfn_wdf_device_set_device_interface_state;                        //{ +0x0270    +0x0270    +0x0270    +0x0270    } | .pfnWdfDeviceSetDeviceInterfaceState
        _m079 pfn_wdfdeviceretrievedeviceinterfacestring_t                       pfn_wdf_device_retrieve_device_interface_string;                  //{ +0x0278    +0x0278    +0x0278    +0x0278    } | .pfnWdfDeviceRetrieveDeviceInterfaceString
        _m080 pfn_wdf_device_create_symbolic_link_t                              pfn_wdf_device_create_symbolic_link;                              //{ +0x0280    +0x0280    +0x0280    +0x0280    } | .pfnWdfDeviceCreateSymbolicLink
        _m081 pfn_wdfdevicequeryproperty_t                                       pfn_wdf_device_query_property;                                    //{ +0x0288    +0x0288    +0x0288    +0x0288    } | .pfnWdfDeviceQueryProperty
        _m082 pfn_wdfdeviceallocandqueryproperty_t                               pfn_wdf_device_alloc_and_query_property;                          //{ +0x0290    +0x0290    +0x0290    +0x0290    } | .pfnWdfDeviceAllocAndQueryProperty
        _m083 pfn_wdfdevicesetpnpcapabilities_t                                  pfn_wdf_device_set_pnp_capabilities;                              //{ +0x0298    +0x0298    +0x0298    +0x0298    } | .pfnWdfDeviceSetPnpCapabilities
        _m084 pfn_wdfdevicesetpowercapabilities_t                                pfn_wdf_device_set_power_capabilities;                            //{ +0x02a0    +0x02a0    +0x02a0    +0x02a0    } | .pfnWdfDeviceSetPowerCapabilities
        _m085 pfn_wdfdevicesetbusinformationforchildren_t                        pfn_wdf_device_set_bus_information_for_children;                  //{ +0x02a8    +0x02a8    +0x02a8    +0x02a8    } | .pfnWdfDeviceSetBusInformationForChildren
        _m086 pfn_wdfdeviceindicatewakestatus_t                                  pfn_wdf_device_indicate_wake_status;                              //{ +0x02b0    +0x02b0    +0x02b0    +0x02b0    } | .pfnWdfDeviceIndicateWakeStatus
        _m087 pfn_wdfdevicesetfailed_t                                           pfn_wdf_device_set_failed;                                        //{ +0x02b8    +0x02b8    +0x02b8    +0x02b8    } | .pfnWdfDeviceSetFailed
        _m088 pfn_wdfdevicestopidlenotrack_t                                     pfn_wdf_device_stop_idle_no_track;                                //{ +0x02c0    +0x02c0    +0x02c0    +0x02c0    } | .pfnWdfDeviceStopIdleNoTrack
        _m089 pfn_wdf_device_resume_idle_no_track_t                              pfn_wdf_device_resume_idle_no_track;                              //{ +0x02c8    +0x02c8    +0x02c8    +0x02c8    } | .pfnWdfDeviceResumeIdleNoTrack
        _m090 pfn_wdfdevicegetfileobject_t                                       pfn_wdf_device_get_file_object;                                   //{ +0x02d0    +0x02d0    +0x02d0    +0x02d0    } | .pfnWdfDeviceGetFileObject
        _m091 pfn_wdfdeviceenqueuerequest_t                                      pfn_wdf_device_enqueue_request;                                   //{ +0x02d8    +0x02d8    +0x02d8    +0x02d8    } | .pfnWdfDeviceEnqueueRequest
        _m092 pfn_wdfdevicegetdefaultqueue_t                                     pfn_wdf_device_get_default_queue;                                 //{ +0x02e0    +0x02e0    +0x02e0    +0x02e0    } | .pfnWdfDeviceGetDefaultQueue
        _m093 pfn_wdfdeviceconfigurerequestdispatching_t                         pfn_wdf_device_configure_request_dispatching;                     //{ +0x02e8    +0x02e8    +0x02e8    +0x02e8    } | .pfnWdfDeviceConfigureRequestDispatching
        _m094 pfn_wdfdmaenablercreate_t                                          pfn_wdf_dma_enabler_create;                                       //{ +0x02f0    +0x02f0    +0x02f0    +0x02f0    } | .pfnWdfDmaEnablerCreate
        _m095 pfn_wdf_dma_enabler_get_maximum_length_t                           pfn_wdf_dma_enabler_get_maximum_length;                           //{ +0x02f8    +0x02f8    +0x02f8    +0x02f8    } | .pfnWdfDmaEnablerGetMaximumLength
        _m096 pfn_wdf_dma_enabler_get_maximum_scatter_gather_elements_t          pfn_wdf_dma_enabler_get_maximum_scatter_gather_elements;          //{ +0x0300    +0x0300    +0x0300    +0x0300    } | .pfnWdfDmaEnablerGetMaximumScatterGatherElements
        _m097 pfn_wdf_dma_enabler_set_maximum_scatter_gather_elements_t          pfn_wdf_dma_enabler_set_maximum_scatter_gather_elements;          //{ +0x0308    +0x0308    +0x0308    +0x0308    } | .pfnWdfDmaEnablerSetMaximumScatterGatherElements
        _m098 pfn_wdfdmatransactioncreate_t                                      pfn_wdf_dma_transaction_create;                                   //{ +0x0310    +0x0310    +0x0310    +0x0310    } | .pfnWdfDmaTransactionCreate
        _m099 pfn_wdfdmatransactioninitialize_t                                  pfn_wdf_dma_transaction_initialize;                               //{ +0x0318    +0x0318    +0x0318    +0x0318    } | .pfnWdfDmaTransactionInitialize
        _m100 pfn_wdfdmatransactioninitializeusingrequest_t                      pfn_wdf_dma_transaction_initialize_using_request;                 //{ +0x0320    +0x0320    +0x0320    +0x0320    } | .pfnWdfDmaTransactionInitializeUsingRequest
        _m101 pfn_wdfdmatransactionexecute_t                                     pfn_wdf_dma_transaction_execute;                                  //{ +0x0328    +0x0328    +0x0328    +0x0328    } | .pfnWdfDmaTransactionExecute
        _m102 pfn_wdfdmatransactionrelease_t                                     pfn_wdf_dma_transaction_release;                                  //{ +0x0330    +0x0330    +0x0330    +0x0330    } | .pfnWdfDmaTransactionRelease
        _m103 pfn_wdfdmatransactiondmacompleted_t                                pfn_wdf_dma_transaction_dma_completed;                            //{ +0x0338    +0x0338    +0x0338    +0x0338    } | .pfnWdfDmaTransactionDmaCompleted
        _m104 pfn_wdf_dma_transaction_dma_completed_with_length_t                pfn_wdf_dma_transaction_dma_completed_with_length;                //{ +0x0340    +0x0340    +0x0340    +0x0340    } | .pfnWdfDmaTransactionDmaCompletedWithLength
        _m105 pfn_wdf_dma_transaction_dma_completed_final_t                      pfn_wdf_dma_transaction_dma_completed_final;                      //{ +0x0348    +0x0348    +0x0348    +0x0348    } | .pfnWdfDmaTransactionDmaCompletedFinal
        _m106 pfn_wdf_dma_transaction_get_bytes_transferred_t                    pfn_wdf_dma_transaction_get_bytes_transferred;                    //{ +0x0350    +0x0350    +0x0350    +0x0350    } | .pfnWdfDmaTransactionGetBytesTransferred
        _m107 pfn_wdfdmatransactionsetmaximumlength_t                            pfn_wdf_dma_transaction_set_maximum_length;                       //{ +0x0358    +0x0358    +0x0358    +0x0358    } | .pfnWdfDmaTransactionSetMaximumLength
        _m108 pfn_wdfdmatransactiongetrequest_t                                  pfn_wdf_dma_transaction_get_request;                              //{ +0x0360    +0x0360    +0x0360    +0x0360    } | .pfnWdfDmaTransactionGetRequest
        _m109 pfn_wdf_dma_transaction_get_current_dma_transfer_length_t          pfn_wdf_dma_transaction_get_current_dma_transfer_length;          //{ +0x0368    +0x0368    +0x0368    +0x0368    } | .pfnWdfDmaTransactionGetCurrentDmaTransferLength
        _m110 pfn_wdfdmatransactiongetdevice_t                                   pfn_wdf_dma_transaction_get_device;                               //{ +0x0370    +0x0370    +0x0370    +0x0370    } | .pfnWdfDmaTransactionGetDevice
        _m111 pfn_wdfdpccreate_t                                                 pfn_wdf_dpc_create;                                               //{ +0x0378    +0x0378    +0x0378    +0x0378    } | .pfnWdfDpcCreate
        _m112 pfn_wdfdpcenqueue_t                                                pfn_wdf_dpc_enqueue;                                              //{ +0x0380    +0x0380    +0x0380    +0x0380    } | .pfnWdfDpcEnqueue
        _m113 pfn_wdfdpccancel_t                                                 pfn_wdf_dpc_cancel;                                               //{ +0x0388    +0x0388    +0x0388    +0x0388    } | .pfnWdfDpcCancel
        _m114 pfn_wdfdpcgetparentobject_t                                        pfn_wdf_dpc_get_parent_object;                                    //{ +0x0390    +0x0390    +0x0390    +0x0390    } | .pfnWdfDpcGetParentObject
        _m115 pfn_wdfdpcwdmgetdpc_t                                              pfn_wdf_dpc_wdm_get_dpc;                                          //{ +0x0398    +0x0398    +0x0398    +0x0398    } | .pfnWdfDpcWdmGetDpc
        _m116 pfn_wdfdrivercreate_t                                              pfn_wdf_driver_create;                                            //{ +0x03a0    +0x03a0    +0x03a0    +0x03a0    } | .pfnWdfDriverCreate
        _m117 pfn_wdfdrivergetregistrypath_t                                     pfn_wdf_driver_get_registry_path;                                 //{ +0x03a8    +0x03a8    +0x03a8    +0x03a8    } | .pfnWdfDriverGetRegistryPath
        _m118 pfn_wdfdriverwdmgetdriverobject_t                                  pfn_wdf_driver_wdm_get_driver_object;                             //{ +0x03b0    +0x03b0    +0x03b0    +0x03b0    } | .pfnWdfDriverWdmGetDriverObject
        _m119 pfn_wdfdriveropenparametersregistrykey_t                           pfn_wdf_driver_open_parameters_registry_key;                      //{ +0x03b8    +0x03b8    +0x03b8    +0x03b8    } | .pfnWdfDriverOpenParametersRegistryKey
        _m120 pfn_wdfwdmdrivergetwdfdriverhandle_t                               pfn_wdf_wdm_driver_get_wdf_driver_handle;                         //{ +0x03c0    +0x03c0    +0x03c0    +0x03c0    } | .pfnWdfWdmDriverGetWdfDriverHandle
        _m121 pfn_wdfdriverregistertraceinfo_t                                   pfn_wdf_driver_register_trace_info;                               //{ +0x03c8    +0x03c8    +0x03c8    +0x03c8    } | .pfnWdfDriverRegisterTraceInfo
        _m122 pfn_wdfdriverretrieveversionstring_t                               pfn_wdf_driver_retrieve_version_string;                           //{ +0x03d0    +0x03d0    +0x03d0    +0x03d0    } | .pfnWdfDriverRetrieveVersionString
        _m123 pfn_wdfdriverisversionavailable_t                                  pfn_wdf_driver_is_version_available;                              //{ +0x03d8    +0x03d8    +0x03d8    +0x03d8    } | .pfnWdfDriverIsVersionAvailable
        _m124 pfn_wdffdoinitwdmgetphysicaldevice_t                               pfn_wdf_fdo_init_wdm_get_physical_device;                         //{ +0x03e0    +0x03e0    +0x03e0    +0x03e0    } | .pfnWdfFdoInitWdmGetPhysicalDevice
        _m125 pfn_wdffdoinitopenregistrykey_t                                    pfn_wdf_fdo_init_open_registry_key;                               //{ +0x03e8    +0x03e8    +0x03e8    +0x03e8    } | .pfnWdfFdoInitOpenRegistryKey
        _m126 pfn_wdffdoinitqueryproperty_t                                      pfn_wdf_fdo_init_query_property;                                  //{ +0x03f0    +0x03f0    +0x03f0    +0x03f0    } | .pfnWdfFdoInitQueryProperty
        _m127 pfn_wdffdoinitallocandqueryproperty_t                              pfn_wdf_fdo_init_alloc_and_query_property;                        //{ +0x03f8    +0x03f8    +0x03f8    +0x03f8    } | .pfnWdfFdoInitAllocAndQueryProperty
        _m128 pfn_wdffdoinitseteventcallbacks_t                                  pfn_wdf_fdo_init_set_event_callbacks;                             //{ +0x0400    +0x0400    +0x0400    +0x0400    } | .pfnWdfFdoInitSetEventCallbacks
        _m129 pfn_wdf_fdo_init_set_filter_t                                      pfn_wdf_fdo_init_set_filter;                                      //{ +0x0408    +0x0408    +0x0408    +0x0408    } | .pfnWdfFdoInitSetFilter
        _m130 pfn_wdffdoinitsetdefaultchildlistconfig_t                          pfn_wdf_fdo_init_set_default_child_list_config;                   //{ +0x0410    +0x0410    +0x0410    +0x0410    } | .pfnWdfFdoInitSetDefaultChildListConfig
        _m131 pfn_wdffdoqueryforinterface_t                                      pfn_wdf_fdo_query_for_interface;                                  //{ +0x0418    +0x0418    +0x0418    +0x0418    } | .pfnWdfFdoQueryForInterface
        _m132 pfn_wdffdogetdefaultchildlist_t                                    pfn_wdf_fdo_get_default_child_list;                               //{ +0x0420    +0x0420    +0x0420    +0x0420    } | .pfnWdfFdoGetDefaultChildList
        _m133 pfn_wdffdoaddstaticchild_t                                         pfn_wdf_fdo_add_static_child;                                     //{ +0x0428    +0x0428    +0x0428    +0x0428    } | .pfnWdfFdoAddStaticChild
        _m134 pfn_wdf_fdo_lock_static_child_list_for_iteration_t                 pfn_wdf_fdo_lock_static_child_list_for_iteration;                 //{ +0x0430    +0x0430    +0x0430    +0x0430    } | .pfnWdfFdoLockStaticChildListForIteration
        _m135 pfn_wdffdoretrievenextstaticchild_t                                pfn_wdf_fdo_retrieve_next_static_child;                           //{ +0x0438    +0x0438    +0x0438    +0x0438    } | .pfnWdfFdoRetrieveNextStaticChild
        _m136 pfn_wdf_fdo_unlock_static_child_list_from_iteration_t              pfn_wdf_fdo_unlock_static_child_list_from_iteration;              //{ +0x0440    +0x0440    +0x0440    +0x0440    } | .pfnWdfFdoUnlockStaticChildListFromIteration
        _m137 pfn_wdffileobjectgetfilename_t                                     pfn_wdf_file_object_get_file_name;                                //{ +0x0448    +0x0448    +0x0448    +0x0448    } | .pfnWdfFileObjectGetFileName
        _m138 pfn_wdffileobjectgetflags_t                                        pfn_wdf_file_object_get_flags;                                    //{ +0x0450    +0x0450    +0x0450    +0x0450    } | .pfnWdfFileObjectGetFlags
        _m139 pfn_wdffileobjectgetdevice_t                                       pfn_wdf_file_object_get_device;                                   //{ +0x0458    +0x0458    +0x0458    +0x0458    } | .pfnWdfFileObjectGetDevice
        _m140 pfn_wdffileobjectwdmgetfileobject_t                                pfn_wdf_file_object_wdm_get_file_object;                          //{ +0x0460    +0x0460    +0x0460    +0x0460    } | .pfnWdfFileObjectWdmGetFileObject
        _m141 pfn_wdfinterruptcreate_t                                           pfn_wdf_interrupt_create;                                         //{ +0x0468    +0x0468    +0x0468    +0x0468    } | .pfnWdfInterruptCreate
        _m142 pfn_wdf_interrupt_queue_dpc_for_isr_t                              pfn_wdf_interrupt_queue_dpc_for_isr;                              //{ +0x0470    +0x0470    +0x0470    +0x0470    } | .pfnWdfInterruptQueueDpcForIsr
        _m143 pfn_wdfinterruptsynchronize_t                                      pfn_wdf_interrupt_synchronize;                                    //{ +0x0478    +0x0478    +0x0478    +0x0478    } | .pfnWdfInterruptSynchronize
        _m144 pfn_wdf_interrupt_acquire_lock_t                                   pfn_wdf_interrupt_acquire_lock;                                   //{ +0x0480    +0x0480    +0x0480    +0x0480    } | .pfnWdfInterruptAcquireLock
        _m145 pfn_wdf_interrupt_release_lock_t                                   pfn_wdf_interrupt_release_lock;                                   //{ +0x0488    +0x0488    +0x0488    +0x0488    } | .pfnWdfInterruptReleaseLock
        _m146 pfn_wdf_interrupt_enable_t                                         pfn_wdf_interrupt_enable;                                         //{ +0x0490    +0x0490    +0x0490    +0x0490    } | .pfnWdfInterruptEnable
        _m147 pfn_wdf_interrupt_disable_t                                        pfn_wdf_interrupt_disable;                                        //{ +0x0498    +0x0498    +0x0498    +0x0498    } | .pfnWdfInterruptDisable
        _m148 pfn_wdfinterruptwdmgetinterrupt_t                                  pfn_wdf_interrupt_wdm_get_interrupt;                              //{ +0x04a0    +0x04a0    +0x04a0    +0x04a0    } | .pfnWdfInterruptWdmGetInterrupt
        _m149 pfn_wdfinterruptgetinfo_t                                          pfn_wdf_interrupt_get_info;                                       //{ +0x04a8    +0x04a8    +0x04a8    +0x04a8    } | .pfnWdfInterruptGetInfo
        _m150 pfn_wdfinterruptsetpolicy_t                                        pfn_wdf_interrupt_set_policy;                                     //{ +0x04b0    +0x04b0    +0x04b0    +0x04b0    } | .pfnWdfInterruptSetPolicy
        _m151 pfn_wdfinterruptgetdevice_t                                        pfn_wdf_interrupt_get_device;                                     //{ +0x04b8    +0x04b8    +0x04b8    +0x04b8    } | .pfnWdfInterruptGetDevice
        _m152 pfn_wdfioqueuecreate_t                                             pfn_wdf_io_queue_create;                                          //{ +0x04c0    +0x04c0    +0x04c0    +0x04c0    } | .pfnWdfIoQueueCreate
        _m153 pfn_wdfioqueuegetstate_t                                           pfn_wdf_io_queue_get_state;                                       //{ +0x04c8    +0x04c8    +0x04c8    +0x04c8    } | .pfnWdfIoQueueGetState
        _m154 pfn_wdf_io_queue_start_t                                           pfn_wdf_io_queue_start;                                           //{ +0x04d0    +0x04d0    +0x04d0    +0x04d0    } | .pfnWdfIoQueueStart
        _m155 pfn_wdf_io_queue_stop_t                                            pfn_wdf_io_queue_stop;                                            //{ +0x04d8    +0x04d8    +0x04d8    +0x04d8    } | .pfnWdfIoQueueStop
        _m156 pfn_wdf_io_queue_stop_synchronously_t                              pfn_wdf_io_queue_stop_synchronously;                              //{ +0x04e0    +0x04e0    +0x04e0    +0x04e0    } | .pfnWdfIoQueueStopSynchronously
        _m157 pfn_wdfioqueuegetdevice_t                                          pfn_wdf_io_queue_get_device;                                      //{ +0x04e8    +0x04e8    +0x04e8    +0x04e8    } | .pfnWdfIoQueueGetDevice
        _m158 pfn_wdfioqueueretrievenextrequest_t                                pfn_wdf_io_queue_retrieve_next_request;                           //{ +0x04f0    +0x04f0    +0x04f0    +0x04f0    } | .pfnWdfIoQueueRetrieveNextRequest
        _m159 pfn_wdfioqueueretrieverequestbyfileobject_t                        pfn_wdf_io_queue_retrieve_request_by_file_object;                 //{ +0x04f8    +0x04f8    +0x04f8    +0x04f8    } | .pfnWdfIoQueueRetrieveRequestByFileObject
        _m160 pfn_wdfioqueuefindrequest_t                                        pfn_wdf_io_queue_find_request;                                    //{ +0x0500    +0x0500    +0x0500    +0x0500    } | .pfnWdfIoQueueFindRequest
        _m161 pfn_wdfioqueueretrievefoundrequest_t                               pfn_wdf_io_queue_retrieve_found_request;                          //{ +0x0508    +0x0508    +0x0508    +0x0508    } | .pfnWdfIoQueueRetrieveFoundRequest
        _m162 pfn_wdf_io_queue_drain_synchronously_t                             pfn_wdf_io_queue_drain_synchronously;                             //{ +0x0510    +0x0510    +0x0510    +0x0510    } | .pfnWdfIoQueueDrainSynchronously
        _m163 pfn_wdf_io_queue_drain_t                                           pfn_wdf_io_queue_drain;                                           //{ +0x0518    +0x0518    +0x0518    +0x0518    } | .pfnWdfIoQueueDrain
        _m164 pfn_wdf_io_queue_purge_synchronously_t                             pfn_wdf_io_queue_purge_synchronously;                             //{ +0x0520    +0x0520    +0x0520    +0x0520    } | .pfnWdfIoQueuePurgeSynchronously
        _m165 pfn_wdf_io_queue_purge_t                                           pfn_wdf_io_queue_purge;                                           //{ +0x0528    +0x0528    +0x0528    +0x0528    } | .pfnWdfIoQueuePurge
        _m166 pfn_wdfioqueuereadynotify_t                                        pfn_wdf_io_queue_ready_notify;                                    //{ +0x0530    +0x0530    +0x0530    +0x0530    } | .pfnWdfIoQueueReadyNotify
        _m167 pfn_wdfiotargetcreate_t                                            pfn_wdf_io_target_create;                                         //{ +0x0538    +0x0538    +0x0538    +0x0538    } | .pfnWdfIoTargetCreate
        _m168 pfn_wdfiotargetopen_t                                              pfn_wdf_io_target_open;                                           //{ +0x0540    +0x0540    +0x0540    +0x0540    } | .pfnWdfIoTargetOpen
        _m169 pfn_wdf_io_target_close_for_query_remove_t                         pfn_wdf_io_target_close_for_query_remove;                         //{ +0x0548    +0x0548    +0x0548    +0x0548    } | .pfnWdfIoTargetCloseForQueryRemove
        _m170 pfn_wdf_io_target_close_t                                          pfn_wdf_io_target_close;                                          //{ +0x0550    +0x0550    +0x0550    +0x0550    } | .pfnWdfIoTargetClose
        _m171 pfn_wdfiotargetstart_t                                             pfn_wdf_io_target_start;                                          //{ +0x0558    +0x0558    +0x0558    +0x0558    } | .pfnWdfIoTargetStart
        _m172 pfn_wdfiotargetstop_t                                              pfn_wdf_io_target_stop;                                           //{ +0x0560    +0x0560    +0x0560    +0x0560    } | .pfnWdfIoTargetStop
        _m173 pfn_wdfiotargetgetstate_t                                          pfn_wdf_io_target_get_state;                                      //{ +0x0568    +0x0568    +0x0568    +0x0568    } | .pfnWdfIoTargetGetState
        _m174 pfn_wdfiotargetgetdevice_t                                         pfn_wdf_io_target_get_device;                                     //{ +0x0570    +0x0570    +0x0570    +0x0570    } | .pfnWdfIoTargetGetDevice
        _m175 pfn_wdfiotargetquerytargetproperty_t                               pfn_wdf_io_target_query_target_property;                          //{ +0x0578    +0x0578    +0x0578    +0x0578    } | .pfnWdfIoTargetQueryTargetProperty
        _m176 pfn_wdfiotargetallocandquerytargetproperty_t                       pfn_wdf_io_target_alloc_and_query_target_property;                //{ +0x0580    +0x0580    +0x0580    +0x0580    } | .pfnWdfIoTargetAllocAndQueryTargetProperty
        _m177 pfn_wdfiotargetqueryforinterface_t                                 pfn_wdf_io_target_query_for_interface;                            //{ +0x0588    +0x0588    +0x0588    +0x0588    } | .pfnWdfIoTargetQueryForInterface
        _m178 pfn_wdf_io_target_wdm_get_target_device_object_t                   pfn_wdf_io_target_wdm_get_target_device_object;                   //{ +0x0590    +0x0590    +0x0590    +0x0590    } | .pfnWdfIoTargetWdmGetTargetDeviceObject
        _m179 pfn_wdf_io_target_wdm_get_target_physical_device_t                 pfn_wdf_io_target_wdm_get_target_physical_device;                 //{ +0x0598    +0x0598    +0x0598    +0x0598    } | .pfnWdfIoTargetWdmGetTargetPhysicalDevice
        _m180 pfn_wdfiotargetwdmgettargetfileobject_t                            pfn_wdf_io_target_wdm_get_target_file_object;                     //{ +0x05a0    +0x05a0    +0x05a0    +0x05a0    } | .pfnWdfIoTargetWdmGetTargetFileObject
        _m181 pfn_wdfiotargetwdmgettargetfilehandle_t                            pfn_wdf_io_target_wdm_get_target_file_handle;                     //{ +0x05a8    +0x05a8    +0x05a8    +0x05a8    } | .pfnWdfIoTargetWdmGetTargetFileHandle
        _m182 pfn_wdf_io_target_send_read_synchronously_t                        pfn_wdf_io_target_send_read_synchronously;                        //{ +0x05b0    +0x05b0    +0x05b0    +0x05b0    } | .pfnWdfIoTargetSendReadSynchronously
        _m183 pfn_wdf_io_target_format_request_for_read_t                        pfn_wdf_io_target_format_request_for_read;                        //{ +0x05b8    +0x05b8    +0x05b8    +0x05b8    } | .pfnWdfIoTargetFormatRequestForRead
        _m184 pfn_wdf_io_target_send_write_synchronously_t                       pfn_wdf_io_target_send_write_synchronously;                       //{ +0x05c0    +0x05c0    +0x05c0    +0x05c0    } | .pfnWdfIoTargetSendWriteSynchronously
        _m185 pfn_wdf_io_target_format_request_for_write_t                       pfn_wdf_io_target_format_request_for_write;                       //{ +0x05c8    +0x05c8    +0x05c8    +0x05c8    } | .pfnWdfIoTargetFormatRequestForWrite
        _m186 pfn_wdf_io_target_send_ioctl_synchronously_t                       pfn_wdf_io_target_send_ioctl_synchronously;                       //{ +0x05d0    +0x05d0    +0x05d0    +0x05d0    } | .pfnWdfIoTargetSendIoctlSynchronously
        _m187 pfn_wdf_io_target_format_request_for_ioctl_t                       pfn_wdf_io_target_format_request_for_ioctl;                       //{ +0x05d8    +0x05d8    +0x05d8    +0x05d8    } | .pfnWdfIoTargetFormatRequestForIoctl
        _m188 pfn_wdf_io_target_send_internal_ioctl_synchronously_t              pfn_wdf_io_target_send_internal_ioctl_synchronously;              //{ +0x05e0    +0x05e0    +0x05e0    +0x05e0    } | .pfnWdfIoTargetSendInternalIoctlSynchronously
        _m189 pfn_wdf_io_target_format_request_for_internal_ioctl_t              pfn_wdf_io_target_format_request_for_internal_ioctl;              //{ +0x05e8    +0x05e8    +0x05e8    +0x05e8    } | .pfnWdfIoTargetFormatRequestForInternalIoctl
        _m190 pfn_wdf_io_target_send_internal_ioctl_others_synchronously_t       pfn_wdf_io_target_send_internal_ioctl_others_synchronously;       //{ +0x05f0    +0x05f0    +0x05f0    +0x05f0    } | .pfnWdfIoTargetSendInternalIoctlOthersSynchronously
        _m191 pfn_wdf_io_target_format_request_for_internal_ioctl_others_t       pfn_wdf_io_target_format_request_for_internal_ioctl_others;       //{ +0x05f8    +0x05f8    +0x05f8    +0x05f8    } | .pfnWdfIoTargetFormatRequestForInternalIoctlOthers
        _m192 pfn_wdfmemorycreate_t                                              pfn_wdf_memory_create;                                            //{ +0x0600    +0x0600    +0x0600    +0x0600    } | .pfnWdfMemoryCreate
        _m193 pfn_wdfmemorycreatepreallocated_t                                  pfn_wdf_memory_create_preallocated;                               //{ +0x0608    +0x0608    +0x0608    +0x0608    } | .pfnWdfMemoryCreatePreallocated
        _m194 pfn_wdfmemorygetbuffer_t                                           pfn_wdf_memory_get_buffer;                                        //{ +0x0610    +0x0610    +0x0610    +0x0610    } | .pfnWdfMemoryGetBuffer
        _m195 pfn_wdfmemoryassignbuffer_t                                        pfn_wdf_memory_assign_buffer;                                     //{ +0x0618    +0x0618    +0x0618    +0x0618    } | .pfnWdfMemoryAssignBuffer
        _m196 pfn_wdf_memory_copy_to_buffer_t                                    pfn_wdf_memory_copy_to_buffer;                                    //{ +0x0620    +0x0620    +0x0620    +0x0620    } | .pfnWdfMemoryCopyToBuffer
        _m197 pfn_wdf_memory_copy_from_buffer_t                                  pfn_wdf_memory_copy_from_buffer;                                  //{ +0x0628    +0x0628    +0x0628    +0x0628    } | .pfnWdfMemoryCopyFromBuffer
        _m198 pfn_wdflookasidelistcreate_t                                       pfn_wdf_lookaside_list_create;                                    //{ +0x0630    +0x0630    +0x0630    +0x0630    } | .pfnWdfLookasideListCreate
        _m199 pfn_wdfmemorycreatefromlookaside_t                                 pfn_wdf_memory_create_from_lookaside;                             //{ +0x0638    +0x0638    +0x0638    +0x0638    } | .pfnWdfMemoryCreateFromLookaside
        _m200 pfn_wdfdeviceminiportcreate_t                                      pfn_wdf_device_miniport_create;                                   //{ +0x0640    +0x0640    +0x0640    +0x0640    } | .pfnWdfDeviceMiniportCreate
        _m201 pfn_wdfdriverminiportunload_t                                      pfn_wdf_driver_miniport_unload;                                   //{ +0x0648    +0x0648    +0x0648    +0x0648    } | .pfnWdfDriverMiniportUnload
        _m202 pfn_wdfobjectgettypedcontextworker_t                               pfn_wdf_object_get_typed_context_worker;                          //{ +0x0650    +0x0650    +0x0650    +0x0650    } | .pfnWdfObjectGetTypedContextWorker
        _m203 pfn_wdfobjectallocatecontext_t                                     pfn_wdf_object_allocate_context;                                  //{ +0x0658    +0x0658    +0x0658    +0x0658    } | .pfnWdfObjectAllocateContext
        _m204 pfn_wdfobjectcontextgetobject_t                                    pfn_wdf_object_context_get_object;                                //{ +0x0660    +0x0660    +0x0660    +0x0660    } | .pfnWdfObjectContextGetObject
        _m205 pfn_wdf_object_reference_actual_t                                  pfn_wdf_object_reference_actual;                                  //{ +0x0668    +0x0668    +0x0668    +0x0668    } | .pfnWdfObjectReferenceActual
        _m206 pfn_wdf_object_dereference_actual_t                                pfn_wdf_object_dereference_actual;                                //{ +0x0670    +0x0670    +0x0670    +0x0670    } | .pfnWdfObjectDereferenceActual
        _m207 pfn_wdfobjectcreate_t                                              pfn_wdf_object_create;                                            //{ +0x0678    +0x0678    +0x0678    +0x0678    } | .pfnWdfObjectCreate
        _m208 pfn_wdf_object_delete_t                                            pfn_wdf_object_delete;                                            //{ +0x0680    +0x0680    +0x0680    +0x0680    } | .pfnWdfObjectDelete
        _m209 pfn_wdfobjectquery_t                                               pfn_wdf_object_query;                                             //{ +0x0688    +0x0688    +0x0688    +0x0688    } | .pfnWdfObjectQuery
        _m210 pfn_wdfpdoinitallocate_t                                           pfn_wdf_pdo_init_allocate;                                        //{ +0x0690    +0x0690    +0x0690    +0x0690    } | .pfnWdfPdoInitAllocate
        _m211 pfn_wdfpdoinitseteventcallbacks_t                                  pfn_wdf_pdo_init_set_event_callbacks;                             //{ +0x0698    +0x0698    +0x0698    +0x0698    } | .pfnWdfPdoInitSetEventCallbacks
        _m212 pfn_wdf_pdo_init_assign_device_id_t                                pfn_wdf_pdo_init_assign_device_id;                                //{ +0x06a0    +0x06a0    +0x06a0    +0x06a0    } | .pfnWdfPdoInitAssignDeviceID
        _m213 pfn_wdf_pdo_init_assign_instance_id_t                              pfn_wdf_pdo_init_assign_instance_id;                              //{ +0x06a8    +0x06a8    +0x06a8    +0x06a8    } | .pfnWdfPdoInitAssignInstanceID
        _m214 pfn_wdf_pdo_init_add_hardware_id_t                                 pfn_wdf_pdo_init_add_hardware_id;                                 //{ +0x06b0    +0x06b0    +0x06b0    +0x06b0    } | .pfnWdfPdoInitAddHardwareID
        _m215 pfn_wdf_pdo_init_add_compatible_id_t                               pfn_wdf_pdo_init_add_compatible_id;                               //{ +0x06b8    +0x06b8    +0x06b8    +0x06b8    } | .pfnWdfPdoInitAddCompatibleID
        _m216 pfn_wdfpdoinitadddevicetext_t                                      pfn_wdf_pdo_init_add_device_text;                                 //{ +0x06c0    +0x06c0    +0x06c0    +0x06c0    } | .pfnWdfPdoInitAddDeviceText
        _m217 pfn_wdf_pdo_init_set_default_locale_t                              pfn_wdf_pdo_init_set_default_locale;                              //{ +0x06c8    +0x06c8    +0x06c8    +0x06c8    } | .pfnWdfPdoInitSetDefaultLocale
        _m218 pfn_wdfpdoinitassignrawdevice_t                                    pfn_wdf_pdo_init_assign_raw_device;                               //{ +0x06d0    +0x06d0    +0x06d0    +0x06d0    } | .pfnWdfPdoInitAssignRawDevice
        _m219 pfn_wdfpdomarkmissing_t                                            pfn_wdf_pdo_mark_missing;                                         //{ +0x06d8    +0x06d8    +0x06d8    +0x06d8    } | .pfnWdfPdoMarkMissing
        _m220 pfn_wdf_pdo_request_eject_t                                        pfn_wdf_pdo_request_eject;                                        //{ +0x06e0    +0x06e0    +0x06e0    +0x06e0    } | .pfnWdfPdoRequestEject
        _m221 pfn_wdfpdogetparent_t                                              pfn_wdf_pdo_get_parent;                                           //{ +0x06e8    +0x06e8    +0x06e8    +0x06e8    } | .pfnWdfPdoGetParent
        _m222 pfn_wdfpdoretrieveidentificationdescription_t                      pfn_wdf_pdo_retrieve_identification_description;                  //{ +0x06f0    +0x06f0    +0x06f0    +0x06f0    } | .pfnWdfPdoRetrieveIdentificationDescription
        _m223 pfn_wdf_pdo_retrieve_address_description_t                         pfn_wdf_pdo_retrieve_address_description;                         //{ +0x06f8    +0x06f8    +0x06f8    +0x06f8    } | .pfnWdfPdoRetrieveAddressDescription
        _m224 pfn_wdf_pdo_update_address_description_t                           pfn_wdf_pdo_update_address_description;                           //{ +0x0700    +0x0700    +0x0700    +0x0700    } | .pfnWdfPdoUpdateAddressDescription
        _m225 pfn_wdf_pdo_add_ejection_relations_physical_device_t               pfn_wdf_pdo_add_ejection_relations_physical_device;               //{ +0x0708    +0x0708    +0x0708    +0x0708    } | .pfnWdfPdoAddEjectionRelationsPhysicalDevice
        _m226 pfn_wdf_pdo_remove_ejection_relations_physical_device_t            pfn_wdf_pdo_remove_ejection_relations_physical_device;            //{ +0x0710    +0x0710    +0x0710    +0x0710    } | .pfnWdfPdoRemoveEjectionRelationsPhysicalDevice
        _m227 pfn_wdf_pdo_clear_ejection_relations_devices_t                     pfn_wdf_pdo_clear_ejection_relations_devices;                     //{ +0x0718    +0x0718    +0x0718    +0x0718    } | .pfnWdfPdoClearEjectionRelationsDevices
        _m228 pfn_wdfdeviceaddqueryinterface_t                                   pfn_wdf_device_add_query_interface;                               //{ +0x0720    +0x0720    +0x0720    +0x0720    } | .pfnWdfDeviceAddQueryInterface
        _m229 pfn_wdfregistryopenkey_t                                           pfn_wdf_registry_open_key;                                        //{ +0x0728    +0x0728    +0x0728    +0x0728    } | .pfnWdfRegistryOpenKey
        _m230 pfn_wdfregistrycreatekey_t                                         pfn_wdf_registry_create_key;                                      //{ +0x0730    +0x0730    +0x0730    +0x0730    } | .pfnWdfRegistryCreateKey
        _m231 pfn_wdfregistryclose_t                                             pfn_wdf_registry_close;                                           //{ +0x0738    +0x0738    +0x0738    +0x0738    } | .pfnWdfRegistryClose
        _m232 pfn_wdfregistrywdmgethandle_t                                      pfn_wdf_registry_wdm_get_handle;                                  //{ +0x0740    +0x0740    +0x0740    +0x0740    } | .pfnWdfRegistryWdmGetHandle
        _m233 pfn_wdfregistryremovekey_t                                         pfn_wdf_registry_remove_key;                                      //{ +0x0748    +0x0748    +0x0748    +0x0748    } | .pfnWdfRegistryRemoveKey
        _m234 pfn_wdfregistryremovevalue_t                                       pfn_wdf_registry_remove_value;                                    //{ +0x0750    +0x0750    +0x0750    +0x0750    } | .pfnWdfRegistryRemoveValue
        _m235 pfn_wdfregistryqueryvalue_t                                        pfn_wdf_registry_query_value;                                     //{ +0x0758    +0x0758    +0x0758    +0x0758    } | .pfnWdfRegistryQueryValue
        _m236 pfn_wdfregistryquerymemory_t                                       pfn_wdf_registry_query_memory;                                    //{ +0x0760    +0x0760    +0x0760    +0x0760    } | .pfnWdfRegistryQueryMemory
        _m237 pfn_wdfregistryquerymultistring_t                                  pfn_wdf_registry_query_multi_string;                              //{ +0x0768    +0x0768    +0x0768    +0x0768    } | .pfnWdfRegistryQueryMultiString
        _m238 pfn_wdfregistryqueryunicodestring_t                                pfn_wdf_registry_query_unicode_string;                            //{ +0x0770    +0x0770    +0x0770    +0x0770    } | .pfnWdfRegistryQueryUnicodeString
        _m239 pfn_wdf_registry_query_string_t                                    pfn_wdf_registry_query_string;                                    //{ +0x0778    +0x0778    +0x0778    +0x0778    } | .pfnWdfRegistryQueryString
        _m240 pfn_wdfregistryqueryulong_t                                        pfn_wdf_registry_query_u_long;                                    //{ +0x0780    +0x0780    +0x0780    +0x0780    } | .pfnWdfRegistryQueryULong
        _m241 pfn_wdfregistryassignvalue_t                                       pfn_wdf_registry_assign_value;                                    //{ +0x0788    +0x0788    +0x0788    +0x0788    } | .pfnWdfRegistryAssignValue
        _m242 pfn_wdfregistryassignmemory_t                                      pfn_wdf_registry_assign_memory;                                   //{ +0x0790    +0x0790    +0x0790    +0x0790    } | .pfnWdfRegistryAssignMemory
        _m243 pfn_wdfregistryassignmultistring_t                                 pfn_wdf_registry_assign_multi_string;                             //{ +0x0798    +0x0798    +0x0798    +0x0798    } | .pfnWdfRegistryAssignMultiString
        _m244 pfn_wdfregistryassignunicodestring_t                               pfn_wdf_registry_assign_unicode_string;                           //{ +0x07a0    +0x07a0    +0x07a0    +0x07a0    } | .pfnWdfRegistryAssignUnicodeString
        _m245 pfn_wdf_registry_assign_string_t                                   pfn_wdf_registry_assign_string;                                   //{ +0x07a8    +0x07a8    +0x07a8    +0x07a8    } | .pfnWdfRegistryAssignString
        _m246 pfn_wdfregistryassignulong_t                                       pfn_wdf_registry_assign_u_long;                                   //{ +0x07b0    +0x07b0    +0x07b0    +0x07b0    } | .pfnWdfRegistryAssignULong
        _m247 pfn_wdfrequestcreate_t                                             pfn_wdf_request_create;                                           //{ +0x07b8    +0x07b8    +0x07b8    +0x07b8    } | .pfnWdfRequestCreate
        _m248 pfn_wdfrequestcreatefromirp_t                                      pfn_wdf_request_create_from_irp;                                  //{ +0x07c0    +0x07c0    +0x07c0    +0x07c0    } | .pfnWdfRequestCreateFromIrp
        _m249 pfn_wdfrequestreuse_t                                              pfn_wdf_request_reuse;                                            //{ +0x07c8    +0x07c8    +0x07c8    +0x07c8    } | .pfnWdfRequestReuse
        _m250 pfn_wdfrequestchangetarget_t                                       pfn_wdf_request_change_target;                                    //{ +0x07d0    +0x07d0    +0x07d0    +0x07d0    } | .pfnWdfRequestChangeTarget
        _m251 pfn_wdfrequestformatrequestusingcurrenttype_t                      pfn_wdf_request_format_request_using_current_type;                //{ +0x07d8    +0x07d8    +0x07d8    +0x07d8    } | .pfnWdfRequestFormatRequestUsingCurrentType
        _m252 pfn_wdfrequestwdmformatusingstacklocation_t                        pfn_wdf_request_wdm_format_using_stack_location;                  //{ +0x07e0    +0x07e0    +0x07e0    +0x07e0    } | .pfnWdfRequestWdmFormatUsingStackLocation
        _m253 pfn_wdfrequestsend_t                                               pfn_wdf_request_send;                                             //{ +0x07e8    +0x07e8    +0x07e8    +0x07e8    } | .pfnWdfRequestSend
        _m254 pfn_wdf_request_get_status_t                                       pfn_wdf_request_get_status;                                       //{ +0x07f0    +0x07f0    +0x07f0    +0x07f0    } | .pfnWdfRequestGetStatus
        _m255 pfn_wdfrequestmarkcancelable_t                                     pfn_wdf_request_mark_cancelable;                                  //{ +0x07f8    +0x07f8    +0x07f8    +0x07f8    } | .pfnWdfRequestMarkCancelable
        _m256 pfn_wdf_request_unmark_cancelable_t                                pfn_wdf_request_unmark_cancelable;                                //{ +0x0800    +0x0800    +0x0800    +0x0800    } | .pfnWdfRequestUnmarkCancelable
        _m257 pfn_wdf_request_is_canceled_t                                      pfn_wdf_request_is_canceled;                                      //{ +0x0808    +0x0808    +0x0808    +0x0808    } | .pfnWdfRequestIsCanceled
        _m258 pfn_wdf_request_cancel_sent_request_t                              pfn_wdf_request_cancel_sent_request;                              //{ +0x0810    +0x0810    +0x0810    +0x0810    } | .pfnWdfRequestCancelSentRequest
        _m259 pfn_wdf_request_is_from32_bit_process_t                            pfn_wdf_request_is_from32_bit_process;                            //{ +0x0818    +0x0818    +0x0818    +0x0818    } | .pfnWdfRequestIsFrom32BitProcess
        _m260 pfn_wdfrequestsetcompletionroutine_t                               pfn_wdf_request_set_completion_routine;                           //{ +0x0820    +0x0820    +0x0820    +0x0820    } | .pfnWdfRequestSetCompletionRoutine
        _m261 pfn_wdfrequestgetcompletionparams_t                                pfn_wdf_request_get_completion_params;                            //{ +0x0828    +0x0828    +0x0828    +0x0828    } | .pfnWdfRequestGetCompletionParams
        _m262 pfn_wdf_request_allocate_timer_t                                   pfn_wdf_request_allocate_timer;                                   //{ +0x0830    +0x0830    +0x0830    +0x0830    } | .pfnWdfRequestAllocateTimer
        _m263 pfn_wdfrequestcomplete_t                                           pfn_wdf_request_complete;                                         //{ +0x0838    +0x0838    +0x0838    +0x0838    } | .pfnWdfRequestComplete
        _m264 pfn_wdfrequestcompletewithpriorityboost_t                          pfn_wdf_request_complete_with_priority_boost;                     //{ +0x0840    +0x0840    +0x0840    +0x0840    } | .pfnWdfRequestCompleteWithPriorityBoost
        _m265 pfn_wdfrequestcompletewithinformation_t                            pfn_wdf_request_complete_with_information;                        //{ +0x0848    +0x0848    +0x0848    +0x0848    } | .pfnWdfRequestCompleteWithInformation
        _m266 pfn_wdfrequestgetparameters_t                                      pfn_wdf_request_get_parameters;                                   //{ +0x0850    +0x0850    +0x0850    +0x0850    } | .pfnWdfRequestGetParameters
        _m267 pfn_wdf_request_retrieve_input_memory_t                            pfn_wdf_request_retrieve_input_memory;                            //{ +0x0858    +0x0858    +0x0858    +0x0858    } | .pfnWdfRequestRetrieveInputMemory
        _m268 pfn_wdf_request_retrieve_output_memory_t                           pfn_wdf_request_retrieve_output_memory;                           //{ +0x0860    +0x0860    +0x0860    +0x0860    } | .pfnWdfRequestRetrieveOutputMemory
        _m269 pfn_wdf_request_retrieve_input_buffer_t                            pfn_wdf_request_retrieve_input_buffer;                            //{ +0x0868    +0x0868    +0x0868    +0x0868    } | .pfnWdfRequestRetrieveInputBuffer
        _m270 pfn_wdf_request_retrieve_output_buffer_t                           pfn_wdf_request_retrieve_output_buffer;                           //{ +0x0870    +0x0870    +0x0870    +0x0870    } | .pfnWdfRequestRetrieveOutputBuffer
        _m271 pfn_wdf_request_retrieve_input_wdm_mdl_t                           pfn_wdf_request_retrieve_input_wdm_mdl;                           //{ +0x0878    +0x0878    +0x0878    +0x0878    } | .pfnWdfRequestRetrieveInputWdmMdl
        _m272 pfn_wdf_request_retrieve_output_wdm_mdl_t                          pfn_wdf_request_retrieve_output_wdm_mdl;                          //{ +0x0880    +0x0880    +0x0880    +0x0880    } | .pfnWdfRequestRetrieveOutputWdmMdl
        _m273 pfn_wdf_request_retrieve_unsafe_user_input_buffer_t                pfn_wdf_request_retrieve_unsafe_user_input_buffer;                //{ +0x0888    +0x0888    +0x0888    +0x0888    } | .pfnWdfRequestRetrieveUnsafeUserInputBuffer
        _m274 pfn_wdf_request_retrieve_unsafe_user_output_buffer_t               pfn_wdf_request_retrieve_unsafe_user_output_buffer;               //{ +0x0890    +0x0890    +0x0890    +0x0890    } | .pfnWdfRequestRetrieveUnsafeUserOutputBuffer
        _m275 pfn_wdfrequestsetinformation_t                                     pfn_wdf_request_set_information;                                  //{ +0x0898    +0x0898    +0x0898    +0x0898    } | .pfnWdfRequestSetInformation
        _m276 pfn_wdfrequestgetinformation_t                                     pfn_wdf_request_get_information;                                  //{ +0x08a0    +0x08a0    +0x08a0    +0x08a0    } | .pfnWdfRequestGetInformation
        _m277 pfn_wdfrequestgetfileobject_t                                      pfn_wdf_request_get_file_object;                                  //{ +0x08a8    +0x08a8    +0x08a8    +0x08a8    } | .pfnWdfRequestGetFileObject
        _m278 pfn_wdf_request_probe_and_lock_user_buffer_for_read_t              pfn_wdf_request_probe_and_lock_user_buffer_for_read;              //{ +0x08b0    +0x08b0    +0x08b0    +0x08b0    } | .pfnWdfRequestProbeAndLockUserBufferForRead
        _m279 pfn_wdf_request_probe_and_lock_user_buffer_for_write_t             pfn_wdf_request_probe_and_lock_user_buffer_for_write;             //{ +0x08b8    +0x08b8    +0x08b8    +0x08b8    } | .pfnWdfRequestProbeAndLockUserBufferForWrite
        _m280 pfn_wdfrequestgetrequestormode_t                                   pfn_wdf_request_get_requestor_mode;                               //{ +0x08c0    +0x08c0    +0x08c0    +0x08c0    } | .pfnWdfRequestGetRequestorMode
        _m281 pfn_wdfrequestforwardtoioqueue_t                                   pfn_wdf_request_forward_to_io_queue;                              //{ +0x08c8    +0x08c8    +0x08c8    +0x08c8    } | .pfnWdfRequestForwardToIoQueue
        _m282 pfn_wdfrequestgetioqueue_t                                         pfn_wdf_request_get_io_queue;                                     //{ +0x08d0    +0x08d0    +0x08d0    +0x08d0    } | .pfnWdfRequestGetIoQueue
        _m283 pfn_wdf_request_requeue_t                                          pfn_wdf_request_requeue;                                          //{ +0x08d8    +0x08d8    +0x08d8    +0x08d8    } | .pfnWdfRequestRequeue
        _m284 pfn_wdfrequeststopacknowledge_t                                    pfn_wdf_request_stop_acknowledge;                                 //{ +0x08e0    +0x08e0    +0x08e0    +0x08e0    } | .pfnWdfRequestStopAcknowledge
        _m285 pfn_wdfrequestwdmgetirp_t                                          pfn_wdf_request_wdm_get_irp;                                      //{ +0x08e8    +0x08e8    +0x08e8    +0x08e8    } | .pfnWdfRequestWdmGetIrp
        _m286 pfn_wdf_io_resource_requirements_list_set_slot_number_t            pfn_wdf_io_resource_requirements_list_set_slot_number;            //{ +0x08f0    +0x08f0    +0x08f0    +0x08f0    } | .pfnWdfIoResourceRequirementsListSetSlotNumber
        _m287 pfn_wdf_io_resource_requirements_list_set_interface_type_t         pfn_wdf_io_resource_requirements_list_set_interface_type;         //{ +0x08f8    +0x08f8    +0x08f8    +0x08f8    } | .pfnWdfIoResourceRequirementsListSetInterfaceType
        _m288 pfn_wdf_io_resource_requirements_list_append_io_res_list_t         pfn_wdf_io_resource_requirements_list_append_io_res_list;         //{ +0x0900    +0x0900    +0x0900    +0x0900    } | .pfnWdfIoResourceRequirementsListAppendIoResList
        _m289 pfn_wdf_io_resource_requirements_list_insert_io_res_list_t         pfn_wdf_io_resource_requirements_list_insert_io_res_list;         //{ +0x0908    +0x0908    +0x0908    +0x0908    } | .pfnWdfIoResourceRequirementsListInsertIoResList
        _m290 pfn_wdfioresourcerequirementslistgetcount_t                        pfn_wdf_io_resource_requirements_list_get_count;                  //{ +0x0910    +0x0910    +0x0910    +0x0910    } | .pfnWdfIoResourceRequirementsListGetCount
        _m291 pfn_wdfioresourcerequirementslistgetioreslist_t                    pfn_wdf_io_resource_requirements_list_get_io_res_list;            //{ +0x0918    +0x0918    +0x0918    +0x0918    } | .pfnWdfIoResourceRequirementsListGetIoResList
        _m292 pfn_wdf_io_resource_requirements_list_remove_t                     pfn_wdf_io_resource_requirements_list_remove;                     //{ +0x0920    +0x0920    +0x0920    +0x0920    } | .pfnWdfIoResourceRequirementsListRemove
        _m293 pfn_wdf_io_resource_requirements_list_remove_by_io_res_list_t      pfn_wdf_io_resource_requirements_list_remove_by_io_res_list;      //{ +0x0928    +0x0928    +0x0928    +0x0928    } | .pfnWdfIoResourceRequirementsListRemoveByIoResList
        _m294 pfn_wdfioresourcelistcreate_t                                      pfn_wdf_io_resource_list_create;                                  //{ +0x0930    +0x0930    +0x0930    +0x0930    } | .pfnWdfIoResourceListCreate
        _m295 pfn_wdfioresourcelistappenddescriptor_t                            pfn_wdf_io_resource_list_append_descriptor;                       //{ +0x0938    +0x0938    +0x0938    +0x0938    } | .pfnWdfIoResourceListAppendDescriptor
        _m296 pfn_wdfioresourcelistinsertdescriptor_t                            pfn_wdf_io_resource_list_insert_descriptor;                       //{ +0x0940    +0x0940    +0x0940    +0x0940    } | .pfnWdfIoResourceListInsertDescriptor
        _m297 pfn_wdfioresourcelistupdatedescriptor_t                            pfn_wdf_io_resource_list_update_descriptor;                       //{ +0x0948    +0x0948    +0x0948    +0x0948    } | .pfnWdfIoResourceListUpdateDescriptor
        _m298 pfn_wdfioresourcelistgetcount_t                                    pfn_wdf_io_resource_list_get_count;                               //{ +0x0950    +0x0950    +0x0950    +0x0950    } | .pfnWdfIoResourceListGetCount
        _m299 pfn_wdfioresourcelistgetdescriptor_t                               pfn_wdf_io_resource_list_get_descriptor;                          //{ +0x0958    +0x0958    +0x0958    +0x0958    } | .pfnWdfIoResourceListGetDescriptor
        _m300 pfn_wdfioresourcelistremove_t                                      pfn_wdf_io_resource_list_remove;                                  //{ +0x0960    +0x0960    +0x0960    +0x0960    } | .pfnWdfIoResourceListRemove
        _m301 pfn_wdfioresourcelistremovebydescriptor_t                          pfn_wdf_io_resource_list_remove_by_descriptor;                    //{ +0x0968    +0x0968    +0x0968    +0x0968    } | .pfnWdfIoResourceListRemoveByDescriptor
        _m302 pfn_wdfcmresourcelistappenddescriptor_t                            pfn_wdf_cm_resource_list_append_descriptor;                       //{ +0x0970    +0x0970    +0x0970    +0x0970    } | .pfnWdfCmResourceListAppendDescriptor
        _m303 pfn_wdfcmresourcelistinsertdescriptor_t                            pfn_wdf_cm_resource_list_insert_descriptor;                       //{ +0x0978    +0x0978    +0x0978    +0x0978    } | .pfnWdfCmResourceListInsertDescriptor
        _m304 pfn_wdfcmresourcelistgetcount_t                                    pfn_wdf_cm_resource_list_get_count;                               //{ +0x0980    +0x0980    +0x0980    +0x0980    } | .pfnWdfCmResourceListGetCount
        _m305 pfn_wdfcmresourcelistgetdescriptor_t                               pfn_wdf_cm_resource_list_get_descriptor;                          //{ +0x0988    +0x0988    +0x0988    +0x0988    } | .pfnWdfCmResourceListGetDescriptor
        _m306 pfn_wdfcmresourcelistremove_t                                      pfn_wdf_cm_resource_list_remove;                                  //{ +0x0990    +0x0990    +0x0990    +0x0990    } | .pfnWdfCmResourceListRemove
        _m307 pfn_wdfcmresourcelistremovebydescriptor_t                          pfn_wdf_cm_resource_list_remove_by_descriptor;                    //{ +0x0998    +0x0998    +0x0998    +0x0998    } | .pfnWdfCmResourceListRemoveByDescriptor
        _m308 pfn_wdfstringcreate_t                                              pfn_wdf_string_create;                                            //{ +0x09a0    +0x09a0    +0x09a0    +0x09a0    } | .pfnWdfStringCreate
        _m309 pfn_wdfstringgetunicodestring_t                                    pfn_wdf_string_get_unicode_string;                                //{ +0x09a8    +0x09a8    +0x09a8    +0x09a8    } | .pfnWdfStringGetUnicodeString
        _m310 pfn_wdf_object_acquire_lock_t                                      pfn_wdf_object_acquire_lock;                                      //{ +0x09b0    +0x09b0    +0x09b0    +0x09b0    } | .pfnWdfObjectAcquireLock
        _m311 pfn_wdf_object_release_lock_t                                      pfn_wdf_object_release_lock;                                      //{ +0x09b8    +0x09b8    +0x09b8    +0x09b8    } | .pfnWdfObjectReleaseLock
        _m312 pfn_wdfwaitlockcreate_t                                            pfn_wdf_wait_lock_create;                                         //{ +0x09c0    +0x09c0    +0x09c0    +0x09c0    } | .pfnWdfWaitLockCreate
        _m313 pfn_wdfwaitlockacquire_t                                           pfn_wdf_wait_lock_acquire;                                        //{ +0x09c8    +0x09c8    +0x09c8    +0x09c8    } | .pfnWdfWaitLockAcquire
        _m314 pfn_wdfwaitlockrelease_t                                           pfn_wdf_wait_lock_release;                                        //{ +0x09d0    +0x09d0    +0x09d0    +0x09d0    } | .pfnWdfWaitLockRelease
        _m315 pfn_wdfspinlockcreate_t                                            pfn_wdf_spin_lock_create;                                         //{ +0x09d8    +0x09d8    +0x09d8    +0x09d8    } | .pfnWdfSpinLockCreate
        _m316 pfn_wdf_spin_lock_acquire_t                                        pfn_wdf_spin_lock_acquire;                                        //{ +0x09e0    +0x09e0    +0x09e0    +0x09e0    } | .pfnWdfSpinLockAcquire
        _m317 pfn_wdf_spin_lock_release_t                                        pfn_wdf_spin_lock_release;                                        //{ +0x09e8    +0x09e8    +0x09e8    +0x09e8    } | .pfnWdfSpinLockRelease
        _m318 pfn_wdftimercreate_t                                               pfn_wdf_timer_create;                                             //{ +0x09f0    +0x09f0    +0x09f0    +0x09f0    } | .pfnWdfTimerCreate
        _m319 pfn_wdftimerstart_t                                                pfn_wdf_timer_start;                                              //{ +0x09f8    +0x09f8    +0x09f8    +0x09f8    } | .pfnWdfTimerStart
        _m320 pfn_wdftimerstop_t                                                 pfn_wdf_timer_stop;                                               //{ +0x0a00    +0x0a00    +0x0a00    +0x0a00    } | .pfnWdfTimerStop
        _m321 pfn_wdftimergetparentobject_t                                      pfn_wdf_timer_get_parent_object;                                  //{ +0x0a08    +0x0a08    +0x0a08    +0x0a08    } | .pfnWdfTimerGetParentObject
        _m322 pfn_wdfusbtargetdevicecreate_t                                     pfn_wdf_usb_target_device_create;                                 //{ +0x0a10    +0x0a10    +0x0a10    +0x0a10    } | .pfnWdfUsbTargetDeviceCreate
        _m323 pfn_wdfusbtargetdeviceretrieveinformation_t                        pfn_wdf_usb_target_device_retrieve_information;                   //{ +0x0a18    +0x0a18    +0x0a18    +0x0a18    } | .pfnWdfUsbTargetDeviceRetrieveInformation
        _m324 pfn_wdfusbtargetdevicegetdevicedescriptor_t                        pfn_wdf_usb_target_device_get_device_descriptor;                  //{ +0x0a20    +0x0a20    +0x0a20    +0x0a20    } | .pfnWdfUsbTargetDeviceGetDeviceDescriptor
        _m325 pfn_wdf_usb_target_device_retrieve_config_descriptor_t             pfn_wdf_usb_target_device_retrieve_config_descriptor;             //{ +0x0a28    +0x0a28    +0x0a28    +0x0a28    } | .pfnWdfUsbTargetDeviceRetrieveConfigDescriptor
        _m326 pfn_wdfusbtargetdevicequerystring_t                                pfn_wdf_usb_target_device_query_string;                           //{ +0x0a30    +0x0a30    +0x0a30    +0x0a30    } | .pfnWdfUsbTargetDeviceQueryString
        _m327 pfn_wdfusbtargetdeviceallocandquerystring_t                        pfn_wdf_usb_target_device_alloc_and_query_string;                 //{ +0x0a38    +0x0a38    +0x0a38    +0x0a38    } | .pfnWdfUsbTargetDeviceAllocAndQueryString
        _m328 pfn_wdfusbtargetdeviceformatrequestforstring_t                     pfn_wdf_usb_target_device_format_request_for_string;              //{ +0x0a40    +0x0a40    +0x0a40    +0x0a40    } | .pfnWdfUsbTargetDeviceFormatRequestForString
        _m329 pfn_wdfusbtargetdevicegetnuminterfaces_t                           pfn_wdf_usb_target_device_get_num_interfaces;                     //{ +0x0a48    +0x0a48    +0x0a48    +0x0a48    } | .pfnWdfUsbTargetDeviceGetNumInterfaces
        _m330 pfn_wdfusbtargetdeviceselectconfig_t                               pfn_wdf_usb_target_device_select_config;                          //{ +0x0a50    +0x0a50    +0x0a50    +0x0a50    } | .pfnWdfUsbTargetDeviceSelectConfig
        _m331 pfn_wdf_usb_target_device_wdm_get_configuration_handle_t           pfn_wdf_usb_target_device_wdm_get_configuration_handle;           //{ +0x0a58    +0x0a58    +0x0a58    +0x0a58    } | .pfnWdfUsbTargetDeviceWdmGetConfigurationHandle
        _m332 pfn_wdf_usb_target_device_retrieve_current_frame_number_t          pfn_wdf_usb_target_device_retrieve_current_frame_number;          //{ +0x0a60    +0x0a60    +0x0a60    +0x0a60    } | .pfnWdfUsbTargetDeviceRetrieveCurrentFrameNumber
        _m333 pfn_wdf_usb_target_device_send_control_transfer_synchronously_t    pfn_wdf_usb_target_device_send_control_transfer_synchronously;    //{ +0x0a68    +0x0a68    +0x0a68    +0x0a68    } | .pfnWdfUsbTargetDeviceSendControlTransferSynchronously
        _m334 pfn_wdf_usb_target_device_format_request_for_control_transfer_t    pfn_wdf_usb_target_device_format_request_for_control_transfer;    //{ +0x0a70    +0x0a70    +0x0a70    +0x0a70    } | .pfnWdfUsbTargetDeviceFormatRequestForControlTransfer
        _m335 pfn_wdf_usb_target_device_is_connected_synchronous_t               pfn_wdf_usb_target_device_is_connected_synchronous;               //{ +0x0a78    +0x0a78    +0x0a78    +0x0a78    } | .pfnWdfUsbTargetDeviceIsConnectedSynchronous
        _m336 pfn_wdf_usb_target_device_reset_port_synchronously_t               pfn_wdf_usb_target_device_reset_port_synchronously;               //{ +0x0a80    +0x0a80    +0x0a80    +0x0a80    } | .pfnWdfUsbTargetDeviceResetPortSynchronously
        _m337 pfn_wdf_usb_target_device_cycle_port_synchronously_t               pfn_wdf_usb_target_device_cycle_port_synchronously;               //{ +0x0a88    +0x0a88    +0x0a88    +0x0a88    } | .pfnWdfUsbTargetDeviceCyclePortSynchronously
        _m338 pfn_wdf_usb_target_device_format_request_for_cycle_port_t          pfn_wdf_usb_target_device_format_request_for_cycle_port;          //{ +0x0a90    +0x0a90    +0x0a90    +0x0a90    } | .pfnWdfUsbTargetDeviceFormatRequestForCyclePort
        _m339 pfn_wdfusbtargetdevicesendurbsynchronously_t                       pfn_wdf_usb_target_device_send_urb_synchronously;                 //{ +0x0a98    +0x0a98    +0x0a98    +0x0a98    } | .pfnWdfUsbTargetDeviceSendUrbSynchronously
        _m340 pfn_wdfusbtargetdeviceformatrequestforurb_t                        pfn_wdf_usb_target_device_format_request_for_urb;                 //{ +0x0aa0    +0x0aa0    +0x0aa0    +0x0aa0    } | .pfnWdfUsbTargetDeviceFormatRequestForUrb
        _m341 pfn_wdfusbtargetpipegetinformation_t                               pfn_wdf_usb_target_pipe_get_information;                          //{ +0x0aa8    +0x0aa8    +0x0aa8    +0x0aa8    } | .pfnWdfUsbTargetPipeGetInformation
        _m342 pfn_wdf_usb_target_pipe_is_in_endpoint_t                           pfn_wdf_usb_target_pipe_is_in_endpoint;                           //{ +0x0ab0    +0x0ab0    +0x0ab0    +0x0ab0    } | .pfnWdfUsbTargetPipeIsInEndpoint
        _m343 pfn_wdf_usb_target_pipe_is_out_endpoint_t                          pfn_wdf_usb_target_pipe_is_out_endpoint;                          //{ +0x0ab8    +0x0ab8    +0x0ab8    +0x0ab8    } | .pfnWdfUsbTargetPipeIsOutEndpoint
        _m344 pfn_wdfusbtargetpipegettype_t                                      pfn_wdf_usb_target_pipe_get_type;                                 //{ +0x0ac0    +0x0ac0    +0x0ac0    +0x0ac0    } | .pfnWdfUsbTargetPipeGetType
        _m345 pfn_wdf_usb_target_pipe_set_no_maximum_packet_size_check_t         pfn_wdf_usb_target_pipe_set_no_maximum_packet_size_check;         //{ +0x0ac8    +0x0ac8    +0x0ac8    +0x0ac8    } | .pfnWdfUsbTargetPipeSetNoMaximumPacketSizeCheck
        _m346 pfn_wdf_usb_target_pipe_write_synchronously_t                      pfn_wdf_usb_target_pipe_write_synchronously;                      //{ +0x0ad0    +0x0ad0    +0x0ad0    +0x0ad0    } | .pfnWdfUsbTargetPipeWriteSynchronously
        _m347 pfn_wdf_usb_target_pipe_format_request_for_write_t                 pfn_wdf_usb_target_pipe_format_request_for_write;                 //{ +0x0ad8    +0x0ad8    +0x0ad8    +0x0ad8    } | .pfnWdfUsbTargetPipeFormatRequestForWrite
        _m348 pfn_wdf_usb_target_pipe_read_synchronously_t                       pfn_wdf_usb_target_pipe_read_synchronously;                       //{ +0x0ae0    +0x0ae0    +0x0ae0    +0x0ae0    } | .pfnWdfUsbTargetPipeReadSynchronously
        _m349 pfn_wdf_usb_target_pipe_format_request_for_read_t                  pfn_wdf_usb_target_pipe_format_request_for_read;                  //{ +0x0ae8    +0x0ae8    +0x0ae8    +0x0ae8    } | .pfnWdfUsbTargetPipeFormatRequestForRead
        _m350 pfn_wdfusbtargetpipeconfigcontinuousreader_t                       pfn_wdf_usb_target_pipe_config_continuous_reader;                 //{ +0x0af0    +0x0af0    +0x0af0    +0x0af0    } | .pfnWdfUsbTargetPipeConfigContinuousReader
        _m351 pfn_wdf_usb_target_pipe_abort_synchronously_t                      pfn_wdf_usb_target_pipe_abort_synchronously;                      //{ +0x0af8    +0x0af8    +0x0af8    +0x0af8    } | .pfnWdfUsbTargetPipeAbortSynchronously
        _m352 pfn_wdf_usb_target_pipe_format_request_for_abort_t                 pfn_wdf_usb_target_pipe_format_request_for_abort;                 //{ +0x0b00    +0x0b00    +0x0b00    +0x0b00    } | .pfnWdfUsbTargetPipeFormatRequestForAbort
        _m353 pfn_wdf_usb_target_pipe_reset_synchronously_t                      pfn_wdf_usb_target_pipe_reset_synchronously;                      //{ +0x0b08    +0x0b08    +0x0b08    +0x0b08    } | .pfnWdfUsbTargetPipeResetSynchronously
        _m354 pfn_wdf_usb_target_pipe_format_request_for_reset_t                 pfn_wdf_usb_target_pipe_format_request_for_reset;                 //{ +0x0b10    +0x0b10    +0x0b10    +0x0b10    } | .pfnWdfUsbTargetPipeFormatRequestForReset
        _m355 pfn_wdfusbtargetpipesendurbsynchronously_t                         pfn_wdf_usb_target_pipe_send_urb_synchronously;                   //{ +0x0b18    +0x0b18    +0x0b18    +0x0b18    } | .pfnWdfUsbTargetPipeSendUrbSynchronously
        _m356 pfn_wdf_usb_target_pipe_format_request_for_urb_t                   pfn_wdf_usb_target_pipe_format_request_for_urb;                   //{ +0x0b20    +0x0b20    +0x0b20    +0x0b20    } | .pfnWdfUsbTargetPipeFormatRequestForUrb
        _m357 pfn_wdf_usb_interface_get_interface_number_t                       pfn_wdf_usb_interface_get_interface_number;                       //{ +0x0b28    +0x0b28    +0x0b28    +0x0b28    } | .pfnWdfUsbInterfaceGetInterfaceNumber
        _m358 pfn_wdfusbinterfacegetnumendpoints_t                               pfn_wdf_usb_interface_get_num_endpoints;                          //{ +0x0b30    +0x0b30    +0x0b30    +0x0b30    } | .pfnWdfUsbInterfaceGetNumEndpoints
        _m359 pfn_wdfusbinterfacegetdescriptor_t                                 pfn_wdf_usb_interface_get_descriptor;                             //{ +0x0b38    +0x0b38    +0x0b38    +0x0b38    } | .pfnWdfUsbInterfaceGetDescriptor
        _m360 pfn_wdfusbinterfaceselectsetting_t                                 pfn_wdf_usb_interface_select_setting;                             //{ +0x0b40    +0x0b40    +0x0b40    +0x0b40    } | .pfnWdfUsbInterfaceSelectSetting
        _m361 pfn_wdfusbinterfacegetendpointinformation_t                        pfn_wdf_usb_interface_get_endpoint_information;                   //{ +0x0b48    +0x0b48    +0x0b48    +0x0b48    } | .pfnWdfUsbInterfaceGetEndpointInformation
        _m362 pfn_wdfusbtargetdevicegetinterface_t                               pfn_wdf_usb_target_device_get_interface;                          //{ +0x0b50    +0x0b50    +0x0b50    +0x0b50    } | .pfnWdfUsbTargetDeviceGetInterface
        _m363 pfn_wdf_usb_interface_get_configured_setting_index_t               pfn_wdf_usb_interface_get_configured_setting_index;               //{ +0x0b58    +0x0b58    +0x0b58    +0x0b58    } | .pfnWdfUsbInterfaceGetConfiguredSettingIndex
        _m364 pfn_wdf_usb_interface_get_num_configured_pipes_t                   pfn_wdf_usb_interface_get_num_configured_pipes;                   //{ +0x0b60    +0x0b60    +0x0b60    +0x0b60    } | .pfnWdfUsbInterfaceGetNumConfiguredPipes
        _m365 pfn_wdfusbinterfacegetconfiguredpipe_t                             pfn_wdf_usb_interface_get_configured_pipe;                        //{ +0x0b68    +0x0b68    +0x0b68    +0x0b68    } | .pfnWdfUsbInterfaceGetConfiguredPipe
        _m366 pfn_wdfusbtargetpipewdmgetpipehandle_t                             pfn_wdf_usb_target_pipe_wdm_get_pipe_handle;                      //{ +0x0b70    +0x0b70    +0x0b70    +0x0b70    } | .pfnWdfUsbTargetPipeWdmGetPipeHandle
        _m367 pfn_wdfverifierdbgbreakpoint_t                                     pfn_wdf_verifier_dbg_break_point;                                 //{ +0x0b78    +0x0b78    +0x0b78    +0x0b78    } | .pfnWdfVerifierDbgBreakPoint
        _m368 pfn_wdfverifierkebugcheck_t                                        pfn_wdf_verifier_ke_bug_check;                                    //{ +0x0b80    +0x0b80    +0x0b80    +0x0b80    } | .pfnWdfVerifierKeBugCheck
        _m369 pfn_wdfwmiprovidercreate_t                                         pfn_wdf_wmi_provider_create;                                      //{ +0x0b88    +0x0b88    +0x0b88    +0x0b88    } | .pfnWdfWmiProviderCreate
        _m370 pfn_wdfwmiprovidergetdevice_t                                      pfn_wdf_wmi_provider_get_device;                                  //{ +0x0b90    +0x0b90    +0x0b90    +0x0b90    } | .pfnWdfWmiProviderGetDevice
        _m371 pfn_wdfwmiproviderisenabled_t                                      pfn_wdf_wmi_provider_is_enabled;                                  //{ +0x0b98    +0x0b98    +0x0b98    +0x0b98    } | .pfnWdfWmiProviderIsEnabled
        _m372 pfn_wdfwmiprovidergettracinghandle_t                               pfn_wdf_wmi_provider_get_tracing_handle;                          //{ +0x0ba0    +0x0ba0    +0x0ba0    +0x0ba0    } | .pfnWdfWmiProviderGetTracingHandle
        _m373 pfn_wdfwmiinstancecreate_t                                         pfn_wdf_wmi_instance_create;                                      //{ +0x0ba8    +0x0ba8    +0x0ba8    +0x0ba8    } | .pfnWdfWmiInstanceCreate
        _m374 pfn_wdfwmiinstanceregister_t                                       pfn_wdf_wmi_instance_register;                                    //{ +0x0bb0    +0x0bb0    +0x0bb0    +0x0bb0    } | .pfnWdfWmiInstanceRegister
        _m375 pfn_wdfwmiinstancederegister_t                                     pfn_wdf_wmi_instance_deregister;                                  //{ +0x0bb8    +0x0bb8    +0x0bb8    +0x0bb8    } | .pfnWdfWmiInstanceDeregister
        _m376 pfn_wdfwmiinstancegetdevice_t                                      pfn_wdf_wmi_instance_get_device;                                  //{ +0x0bc0    +0x0bc0    +0x0bc0    +0x0bc0    } | .pfnWdfWmiInstanceGetDevice
        _m377 pfn_wdfwmiinstancegetprovider_t                                    pfn_wdf_wmi_instance_get_provider;                                //{ +0x0bc8    +0x0bc8    +0x0bc8    +0x0bc8    } | .pfnWdfWmiInstanceGetProvider
        _m378 pfn_wdfwmiinstancefireevent_t                                      pfn_wdf_wmi_instance_fire_event;                                  //{ +0x0bd0    +0x0bd0    +0x0bd0    +0x0bd0    } | .pfnWdfWmiInstanceFireEvent
        _m379 pfn_wdfworkitemcreate_t                                            pfn_wdf_work_item_create;                                         //{ +0x0bd8    +0x0bd8    +0x0bd8    +0x0bd8    } | .pfnWdfWorkItemCreate
        _m380 pfn_wdf_work_item_enqueue_t                                        pfn_wdf_work_item_enqueue;                                        //{ +0x0be0    +0x0be0    +0x0be0    +0x0be0    } | .pfnWdfWorkItemEnqueue
        _m381 pfn_wdfworkitemgetparentobject_t                                   pfn_wdf_work_item_get_parent_object;                              //{ +0x0be8    +0x0be8    +0x0be8    +0x0be8    } | .pfnWdfWorkItemGetParentObject
        _m382 pfn_wdf_work_item_flush_t                                          pfn_wdf_work_item_flush;                                          //{ +0x0bf0    +0x0bf0    +0x0bf0    +0x0bf0    } | .pfnWdfWorkItemFlush
        _m383 pfn_wdfcommonbuffercreatewithconfig_t                              pfn_wdf_common_buffer_create_with_config;                         //{ +0x0bf8    +0x0bf8    +0x0bf8    +0x0bf8    } | .pfnWdfCommonBufferCreateWithConfig
        _m384 pfn_wdfdmaenablergetfragmentlength_t                               pfn_wdf_dma_enabler_get_fragment_length;                          //{ +0x0c00    +0x0c00    +0x0c00    +0x0c00    } | .pfnWdfDmaEnablerGetFragmentLength
        _m385 pfn_wdfdmaenablerwdmgetdmaadapter_t                                pfn_wdf_dma_enabler_wdm_get_dma_adapter;                          //{ +0x0c08    +0x0c08    +0x0c08    +0x0c08    } | .pfnWdfDmaEnablerWdmGetDmaAdapter
        _m386 pfn_wdf_usb_interface_get_num_settings_t                           pfn_wdf_usb_interface_get_num_settings;                           //{ +0x0c10    +0x0c10    +0x0c10    +0x0c10    } | .pfnWdfUsbInterfaceGetNumSettings
        _m387 pfn_wdf_device_remove_dependent_usage_device_object_t              pfn_wdf_device_remove_dependent_usage_device_object;              //{ +0x0c18    +0x0c18    +0x0c18    +0x0c18    } | .pfnWdfDeviceRemoveDependentUsageDeviceObject
        _m388 pfn_wdfdevicegetsystempoweraction_t                                pfn_wdf_device_get_system_power_action;                           //{ +0x0c20    +0x0c20    +0x0c20    +0x0c20    } | .pfnWdfDeviceGetSystemPowerAction
        _m389 pfn_wdfinterruptsetextendedpolicy_t                                pfn_wdf_interrupt_set_extended_policy;                            //{ +0x0c28    +0x0c28    +0x0c28    +0x0c28    } | .pfnWdfInterruptSetExtendedPolicy
        _m390 pfn_wdfioqueueassignforwardprogresspolicy_t                        pfn_wdf_io_queue_assign_forward_progress_policy;                  //{ +0x0c30    +0x0c30    +0x0c30    +0x0c30    } | .pfnWdfIoQueueAssignForwardProgressPolicy
        _m391 pfn_wdf_pdo_init_assign_container_id_t                             pfn_wdf_pdo_init_assign_container_id;                             //{ +0x0c38    +0x0c38    +0x0c38    +0x0c38    } | .pfnWdfPdoInitAssignContainerID
        _m392 pfn_wdf_pdo_init_allow_forwarding_request_to_parent_t              pfn_wdf_pdo_init_allow_forwarding_request_to_parent;              //{ +0x0c40    +0x0c40    +0x0c40    +0x0c40    } | .pfnWdfPdoInitAllowForwardingRequestToParent
        _m393 pfn_wdfrequestmarkcancelableex_t                                   pfn_wdf_request_mark_cancelable_ex;                               //{ +0x0c48    +0x0c48    +0x0c48    +0x0c48    } | .pfnWdfRequestMarkCancelableEx
        _m394 pfn_wdf_request_is_reserved_t                                      pfn_wdf_request_is_reserved;                                      //{ +0x0c50    +0x0c50    +0x0c50    +0x0c50    } | .pfnWdfRequestIsReserved
        _m395 pfn_wdfrequestforwardtoparentdeviceioqueue_t                       pfn_wdf_request_forward_to_parent_device_io_queue;                //{ +0x0c58    +0x0c58    +0x0c58    +0x0c58    } | .pfnWdfRequestForwardToParentDeviceIoQueue
        _m396 pfn_wdfcxdeviceinitallocate_t                                      pfn_wdf_cx_device_init_allocate;                                  //{ +0x0c60    +0x0c60    +0x0c60    +0x0c60    } | .pfnWdfCxDeviceInitAllocate
        _m397 pfn_wdf_cx_device_init_assign_wdm_irp_preprocess_callback_t        pfn_wdf_cx_device_init_assign_wdm_irp_preprocess_callback;        //{ +0x0c68    +0x0c68    +0x0c68    +0x0c68    } | .pfnWdfCxDeviceInitAssignWdmIrpPreprocessCallback
        _m398 pfn_wdf_cx_device_init_set_io_in_caller_context_callback_t         pfn_wdf_cx_device_init_set_io_in_caller_context_callback;         //{ +0x0c70    +0x0c70    +0x0c70    +0x0c70    } | .pfnWdfCxDeviceInitSetIoInCallerContextCallback
        _m399 pfn_wdfcxdeviceinitsetrequestattributes_t                          pfn_wdf_cx_device_init_set_request_attributes;                    //{ +0x0c78    +0x0c78    +0x0c78    +0x0c78    } | .pfnWdfCxDeviceInitSetRequestAttributes
        _m400 pfn_wdfcxdeviceinitsetfileobjectconfig_t                           pfn_wdf_cx_device_init_set_file_object_config;                    //{ +0x0c80    +0x0c80    +0x0c80    +0x0c80    } | .pfnWdfCxDeviceInitSetFileObjectConfig
        _m401 pfn_wdfdevicewdmdispatchirp_t                                      pfn_wdf_device_wdm_dispatch_irp;                                  //{ +0x0c88    +0x0c88    +0x0c88    +0x0c88    } | .pfnWdfDeviceWdmDispatchIrp
        _m402 pfn_wdfdevicewdmdispatchirptoioqueue_t                             pfn_wdf_device_wdm_dispatch_irp_to_io_queue;                      //{ +0x0c90    +0x0c90    +0x0c90    +0x0c90    } | .pfnWdfDeviceWdmDispatchIrpToIoQueue
        _m403 pfn_wdfdeviceinitsetremovelockoptions_t                            pfn_wdf_device_init_set_remove_lock_options;                      //{ +0x0c98    +0x0c98    +0x0c98    +0x0c98    } | .pfnWdfDeviceInitSetRemoveLockOptions
        _m404 pfn_wdfdeviceconfigurewdmirpdispatchcallback_t                     pfn_wdf_device_configure_wdm_irp_dispatch_callback;               //{ +0x0ca0    +0x0ca0    +0x0ca0    +0x0ca0    } | .pfnWdfDeviceConfigureWdmIrpDispatchCallback
        _m405 pfn_wdfdmaenablerconfiguresystemprofile_t                          pfn_wdf_dma_enabler_configure_system_profile;                     //{ +0x0ca8    +0x0ca8    +0x0ca8    +0x0ca8    } | .pfnWdfDmaEnablerConfigureSystemProfile
        _m406 pfn_wdfdmatransactioninitializeusingoffset_t                       pfn_wdf_dma_transaction_initialize_using_offset;                  //{ +0x0cb0    +0x0cb0    +0x0cb0    +0x0cb0    } | .pfnWdfDmaTransactionInitializeUsingOffset
        _m407 pfn_wdfdmatransactiongettransferinfo_t                             pfn_wdf_dma_transaction_get_transfer_info;                        //{ +0x0cb8    +0x0cb8    +0x0cb8    +0x0cb8    } | .pfnWdfDmaTransactionGetTransferInfo
        _m408 pfn_wdf_dma_transaction_set_channel_configuration_callback_t       pfn_wdf_dma_transaction_set_channel_configuration_callback;       //{ +0x0cc0    +0x0cc0    +0x0cc0    +0x0cc0    } | .pfnWdfDmaTransactionSetChannelConfigurationCallback
        _m409 pfn_wdf_dma_transaction_set_transfer_complete_callback_t           pfn_wdf_dma_transaction_set_transfer_complete_callback;           //{ +0x0cc8    +0x0cc8    +0x0cc8    +0x0cc8    } | .pfnWdfDmaTransactionSetTransferCompleteCallback
        _m410 pfn_wdf_dma_transaction_set_immediate_execution_t                  pfn_wdf_dma_transaction_set_immediate_execution;                  //{ +0x0cd0    +0x0cd0    +0x0cd0    +0x0cd0    } | .pfnWdfDmaTransactionSetImmediateExecution
        _m411 pfn_wdfdmatransactionallocateresources_t                           pfn_wdf_dma_transaction_allocate_resources;                       //{ +0x0cd8    +0x0cd8    +0x0cd8    +0x0cd8    } | .pfnWdfDmaTransactionAllocateResources
        _m412 pfn_wdfdmatransactionsetdeviceaddressoffset_t                      pfn_wdf_dma_transaction_set_device_address_offset;                //{ +0x0ce0    +0x0ce0    +0x0ce0    +0x0ce0    } | .pfnWdfDmaTransactionSetDeviceAddressOffset
        _m413 pfn_wdf_dma_transaction_free_resources_t                           pfn_wdf_dma_transaction_free_resources;                           //{ +0x0ce8    +0x0ce8    +0x0ce8    +0x0ce8    } | .pfnWdfDmaTransactionFreeResources
        _m414 pfn_wdfdmatransactioncancel_t                                      pfn_wdf_dma_transaction_cancel;                                   //{ +0x0cf0    +0x0cf0    +0x0cf0    +0x0cf0    } | .pfnWdfDmaTransactionCancel
        _m415 pfn_wdfdmatransactionwdmgettransfercontext_t                       pfn_wdf_dma_transaction_wdm_get_transfer_context;                 //{ +0x0cf8    +0x0cf8    +0x0cf8    +0x0cf8    } | .pfnWdfDmaTransactionWdmGetTransferContext
        _m416 pfn_wdf_interrupt_queue_work_item_for_isr_t                        pfn_wdf_interrupt_queue_work_item_for_isr;                        //{ +0x0d00    +0x0d00    +0x0d00    +0x0d00    } | .pfnWdfInterruptQueueWorkItemForIsr
        _m417 pfn_wdf_interrupt_try_to_acquire_lock_t                            pfn_wdf_interrupt_try_to_acquire_lock;                            //{ +0x0d08    +0x0d08    +0x0d08    +0x0d08    } | .pfnWdfInterruptTryToAcquireLock
        _m418 pfn_wdf_io_queue_stop_and_purge_t                                  pfn_wdf_io_queue_stop_and_purge;                                  //{ +0x0d10    +0x0d10    +0x0d10    +0x0d10    } | .pfnWdfIoQueueStopAndPurge
        _m419 pfn_wdf_io_queue_stop_and_purge_synchronously_t                    pfn_wdf_io_queue_stop_and_purge_synchronously;                    //{ +0x0d18    +0x0d18    +0x0d18    +0x0d18    } | .pfnWdfIoQueueStopAndPurgeSynchronously
        _m420 pfn_wdfiotargetpurge_t                                             pfn_wdf_io_target_purge;                                          //{ +0x0d20    +0x0d20    +0x0d20    +0x0d20    } | .pfnWdfIoTargetPurge
        _m421 pfn_wdfusbtargetdevicecreatewithparameters_t                       pfn_wdf_usb_target_device_create_with_parameters;                 //{ +0x0d28    +0x0d28    +0x0d28    +0x0d28    } | .pfnWdfUsbTargetDeviceCreateWithParameters
        _m422 pfn_wdfusbtargetdevicequeryusbcapability_t                         pfn_wdf_usb_target_device_query_usb_capability;                   //{ +0x0d30    +0x0d30    +0x0d30    +0x0d30    } | .pfnWdfUsbTargetDeviceQueryUsbCapability
        _m423 pfn_wdfusbtargetdevicecreateurb_t                                  pfn_wdf_usb_target_device_create_urb;                             //{ +0x0d38    +0x0d38    +0x0d38    +0x0d38    } | .pfnWdfUsbTargetDeviceCreateUrb
        _m424 pfn_wdfusbtargetdevicecreateisochurb_t                             pfn_wdf_usb_target_device_create_isoch_urb;                       //{ +0x0d40    +0x0d40    +0x0d40    +0x0d40    } | .pfnWdfUsbTargetDeviceCreateIsochUrb
        _m425 pfn_wdfdevicewdmassignpowerframeworksettings_t                     pfn_wdf_device_wdm_assign_power_framework_settings;               //{ +0x0d48    +0x0d48    +0x0d48    +0x0d48    } | .pfnWdfDeviceWdmAssignPowerFrameworkSettings
        _m426 pfn_wdf_dma_transaction_stop_system_transfer_t                     pfn_wdf_dma_transaction_stop_system_transfer;                     //{ +0x0d50    +0x0d50    +0x0d50    +0x0d50    } | .pfnWdfDmaTransactionStopSystemTransfer
        _m427 pfn_wdfcxverifierkebugcheck_t                                      pfn_wdf_cx_verifier_ke_bug_check;                                 //{ +0x0d58    +0x0d58    +0x0d58    +0x0d58    } | .pfnWdfCxVerifierKeBugCheck
        _m428 pfn_wdf_interrupt_report_active_t                                  pfn_wdf_interrupt_report_active;                                  //{ +0x0d60    +0x0d60    +0x0d60    +0x0d60    } | .pfnWdfInterruptReportActive
        _m429 pfn_wdf_interrupt_report_inactive_t                                pfn_wdf_interrupt_report_inactive;                                //{ +0x0d68    +0x0d68    +0x0d68    +0x0d68    } | .pfnWdfInterruptReportInactive
        _m430 pfn_wdf_device_init_set_release_hardware_order_on_failure_t        pfn_wdf_device_init_set_release_hardware_order_on_failure;        //{ +0x0d70    +0x0d70    +0x0d70    +0x0d70    } | .pfnWdfDeviceInitSetReleaseHardwareOrderOnFailure
        _m431 pfn_wdfgettriageinfo_t                                             pfn_wdf_get_triage_info;                                          //{ +0x0d78    +0x0d78    +0x0d78    +0x0d78    } | .pfnWdfGetTriageInfo
        _m432 pfn_wdfdeviceinitsetiotypeex_t                                     pfn_wdf_device_init_set_io_type_ex;                               //{ +0x0d80    +0x0d80    +0x0d80    +0x0d80    } | .pfnWdfDeviceInitSetIoTypeEx
        _m433 pfn_wdfdevicequerypropertyex_t                                     pfn_wdf_device_query_property_ex;                                 //{ +0x0d88    +0x0d88    +0x0d88    +0x0d88    } | .pfnWdfDeviceQueryPropertyEx
        _m434 pfn_wdfdeviceallocandquerypropertyex_t                             pfn_wdf_device_alloc_and_query_property_ex;                       //{ +0x0d90    +0x0d90    +0x0d90    +0x0d90    } | .pfnWdfDeviceAllocAndQueryPropertyEx
        _m435 pfn_wdfdeviceassignproperty_t                                      pfn_wdf_device_assign_property;                                   //{ +0x0d98    +0x0d98    +0x0d98    +0x0d98    } | .pfnWdfDeviceAssignProperty
        _m436 pfn_wdffdoinitquerypropertyex_t                                    pfn_wdf_fdo_init_query_property_ex;                               //{ +0x0da0    +0x0da0    +0x0da0    +0x0da0    } | .pfnWdfFdoInitQueryPropertyEx
        _m437 pfn_wdffdoinitallocandquerypropertyex_t                            pfn_wdf_fdo_init_alloc_and_query_property_ex;                     //{ +0x0da8    +0x0da8    +0x0da8    +0x0da8    } | .pfnWdfFdoInitAllocAndQueryPropertyEx
        _m438 pfn_wdf_device_stop_idle_actual_t                                  pfn_wdf_device_stop_idle_actual;                                  //{ +0x0db0    +0x0db0    +0x0db0    +0x0db0    } | .pfnWdfDeviceStopIdleActual
        _m439 pfn_wdf_device_resume_idle_actual_t                                pfn_wdf_device_resume_idle_actual;                                //{ +0x0db8    +0x0db8    +0x0db8    +0x0db8    } | .pfnWdfDeviceResumeIdleActual
        _m440 pfn_wdf_device_get_self_io_target_t                                pfn_wdf_device_get_self_io_target;                                //{ +0x0dc0    +0x0dc0    +0x0dc0    +0x0dc0    } | .pfnWdfDeviceGetSelfIoTarget
        _m441 pfn_wdf_device_init_allow_self_io_target_t                         pfn_wdf_device_init_allow_self_io_target;                         //{ +0x0dc8    +0x0dc8    +0x0dc8    +0x0dc8    } | .pfnWdfDeviceInitAllowSelfIoTarget
        _m442 pfn_wdfiotargetselfassigndefaultioqueue_t                          pfn_wdf_io_target_self_assign_default_io_queue;                   //{ +0x0dd0    +0x0dd0    +0x0dd0    +0x0dd0    } | .pfnWdfIoTargetSelfAssignDefaultIoQueue
        _m443 pfn_wdfdeviceopendevicemapkey_t                                    pfn_wdf_device_open_devicemap_key;                                //{ +0x0dd8    +0x0dd8    +0x0dd8    +0x0dd8    } | .pfnWdfDeviceOpenDevicemapKey
        _m444 pfn_wdf_dma_transaction_set_single_transfer_requirement_t          pfn_wdf_dma_transaction_set_single_transfer_requirement;          //{ +0x0de0    +0x0de0    +0x0de0    +0x0de0    } | .pfnWdfDmaTransactionSetSingleTransferRequirement
        _m445 pfn_wdfcxdeviceinitsetpnppowereventcallbacks_t                     pfn_wdf_cx_device_init_set_pnp_power_event_callbacks;             //{ +0x0de8    +0x0de8    +0x0de8    +0x0de8    } | .pfnWdfCxDeviceInitSetPnpPowerEventCallbacks
                                                                                                                                                 
        // Windows 10 v2004, Windows 11, Windows 10 v20H2                                                                                        
        //                                                                                                                                       
        _m446 pfn_wdf_file_object_get_initiator_process_id_t                     pfn_wdf_file_object_get_initiator_process_id;                     //{ +0x0df0    +0x0df0    +0x0df0    } | .pfnWdfFileObjectGetInitiatorProcessId
        _m447 pfn_wdfrequestgetrequestorprocessid_t                              pfn_wdf_request_get_requestor_process_id;                         //{ +0x0df8    +0x0df8    +0x0df8    } | .pfnWdfRequestGetRequestorProcessId
        _m448 pfn_wdfdeviceretrievecompaniontarget_t                             pfn_wdf_device_retrieve_companion_target;                         //{ +0x0e00    +0x0e00    +0x0e00    } | .pfnWdfDeviceRetrieveCompanionTarget
        _m449 pfn_wdfcompaniontargetsendtasksynchronously_t                      pfn_wdf_companion_target_send_task_synchronously;                 //{ +0x0e08    +0x0e08    +0x0e08    } | .pfnWdfCompanionTargetSendTaskSynchronously
        _m450 pfn_wdfcompaniontargetwdmgetcompanionprocess_t                     pfn_wdf_companion_target_wdm_get_companion_process;               //{ +0x0e10    +0x0e10    +0x0e10    } | .pfnWdfCompanionTargetWdmGetCompanionProcess
        _m451 pfn_wdf_driver_open_persistent_state_registry_key_t                pfn_wdf_driver_open_persistent_state_registry_key;                //{ +0x0e18    +0x0e18    +0x0e18    } | .pfnWdfDriverOpenPersistentStateRegistryKey
        _m452 pfn_wdfdrivererrorreportapimissing_t                               pfn_wdf_driver_error_report_api_missing;                          //{ +0x0e20    +0x0e20    +0x0e20    } | .pfnWdfDriverErrorReportApiMissing
        _m453 pfn_wdf_pdo_init_remove_power_dependency_on_parent_t               pfn_wdf_pdo_init_remove_power_dependency_on_parent;               //{ +0x0e28    +0x0e28    +0x0e28    } | .pfnWdfPdoInitRemovePowerDependencyOnParent
        _m454 pfn_wdfcxdeviceinitallocatecontext_t                               pfn_wdf_cx_device_init_allocate_context;                          //{ +0x0e30    +0x0e30    +0x0e30    } | .pfnWdfCxDeviceInitAllocateContext
        _m455 pfn_wdfcxdeviceinitgettypedcontextworker_t                         pfn_wdf_cx_device_init_get_typed_context_worker;                  //{ +0x0e38    +0x0e38    +0x0e38    } | .pfnWdfCxDeviceInitGetTypedContextWorker
        _m456 pfn_wdf_cx_device_init_set_power_policy_event_callbacks_t          pfn_wdf_cx_device_init_set_power_policy_event_callbacks;          //{ +0x0e40    +0x0e40    +0x0e40    } | .pfnWdfCxDeviceInitSetPowerPolicyEventCallbacks
        _m457 pfn_wdf_device_set_device_interface_state_ex_t                     pfn_wdf_device_set_device_interface_state_ex;                     //{ +0x0e48    +0x0e48    +0x0e48    } | .pfnWdfDeviceSetDeviceInterfaceStateEx
                                                                                                                                                 
        SDK_MAGIC_PROPERTIES( "_WDFFUNCTIONS.$", 0xe50, true, 0x3074dede5a225276 );                                                                
        SDK_DYNAMIC_SIZE( wdffunctions_t );                                                                                                      
    };                                                                                                                                           
};
#include "magic/wdffunctions_t.end.hpp"
